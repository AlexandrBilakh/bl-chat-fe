"use strict";
"use client";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __esm = (fn2, res) => function __init() {
    return fn2 && (res = (0, fn2[__getOwnPropNames(fn2)[0]])(fn2 = 0)), res;
  };
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all3) => {
    for (var name in all3)
      __defProp(target, name, { get: all3[name], enumerable: true });
  };
  var __copyProps = (to, from2, except, desc) => {
    if (from2 && typeof from2 === "object" || typeof from2 === "function") {
      for (let key of __getOwnPropNames(from2))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
    }
    return to;
  };
  var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // node_modules/@babel/runtime/helpers/interopRequireDefault.js
  var require_interopRequireDefault = __commonJS({
    "node_modules/@babel/runtime/helpers/interopRequireDefault.js"(exports, module) {
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }
      module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@mui/utils/chainPropTypes/chainPropTypes.js
  var require_chainPropTypes = __commonJS({
    "node_modules/@mui/utils/chainPropTypes/chainPropTypes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = chainPropTypes18;
      function chainPropTypes18(propType1, propType2) {
        if (false) {
          return () => null;
        }
        return function validate(...args) {
          return propType1(...args) || propType2(...args);
        };
      }
    }
  });

  // node_modules/@mui/utils/chainPropTypes/index.js
  var require_chainPropTypes2 = __commonJS({
    "node_modules/@mui/utils/chainPropTypes/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _chainPropTypes.default;
        }
      });
      var _chainPropTypes = _interopRequireDefault(require_chainPropTypes());
    }
  });

  // node_modules/@babel/runtime/helpers/extends.js
  var require_extends = __commonJS({
    "node_modules/@babel/runtime/helpers/extends.js"(exports, module) {
      function _extends2() {
        module.exports = _extends2 = Object.assign ? Object.assign.bind() : function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        }, module.exports.__esModule = true, module.exports["default"] = module.exports;
        return _extends2.apply(this, arguments);
      }
      module.exports = _extends2, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@mui/utils/deepmerge.js
  var require_deepmerge = __commonJS({
    "node_modules/@mui/utils/deepmerge.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = deepmerge10;
      exports.isPlainObject = isPlainObject2;
      var _extends2 = _interopRequireDefault(require_extends());
      function isPlainObject2(item) {
        return item !== null && typeof item === "object" && item.constructor === Object;
      }
      function deepClone(source) {
        if (!isPlainObject2(source)) {
          return source;
        }
        const output = {};
        Object.keys(source).forEach((key) => {
          output[key] = deepClone(source[key]);
        });
        return output;
      }
      function deepmerge10(target, source, options = {
        clone: true
      }) {
        const output = options.clone ? (0, _extends2.default)({}, target) : target;
        if (isPlainObject2(target) && isPlainObject2(source)) {
          Object.keys(source).forEach((key) => {
            if (key === "__proto__") {
              return;
            }
            if (isPlainObject2(source[key]) && key in target && isPlainObject2(target[key])) {
              output[key] = deepmerge10(target[key], source[key], options);
            } else if (options.clone) {
              output[key] = isPlainObject2(source[key]) ? deepClone(source[key]) : source[key];
            } else {
              output[key] = source[key];
            }
          });
        }
        return output;
      }
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment29 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement3(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment12(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment29;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal3;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement3;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment12;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty3 = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i = 0; i < 10; i++) {
            test2["_" + String.fromCharCode(i)] = i;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
            return test2[n];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from2;
        var to = toObject(target);
        var symbols;
        for (var s = 1; s < arguments.length; s++) {
          from2 = Object(arguments[s]);
          for (var key in from2) {
            if (hasOwnProperty3.call(from2, key)) {
              to[key] = from2[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from2);
            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from2, symbols[i])) {
                to[symbols[i]] = from2[symbols[i]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module.exports = ReactPropTypesSecret;
    }
  });

  // node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "node_modules/prop-types/lib/has.js"(exports, module) {
      module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "node_modules/prop-types/checkPropTypes.js"(exports, module) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = require_has();
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values2, location, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error(
                    (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                  );
                  err.name = "Invariant Violation";
                  throw err;
                }
                error = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, ReactPropTypesSecret);
              } catch (ex) {
                error = ex;
              }
              if (error && !(error instanceof Error)) {
                printWarning(
                  (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
                );
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                loggedTypeFailures[error.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning(
                  "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
                );
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module.exports = checkPropTypes;
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
      "use strict";
      var ReactIs = require_react_is();
      var assign2 = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module.exports = function(isValidElement20, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is(x, y) {
          if (x === y) {
            return x !== 0 || 1 / x === 1 / y;
          } else {
            return x !== x && y !== y;
          }
        }
        function PropTypeError(message, data) {
          this.message = message;
          this.data = data && typeof data === "object" ? data : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error(
                  "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                );
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                manualPropTypeWarningCount < 3) {
                  printWarning(
                    "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                  );
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
                { expectedType }
              );
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i = 0; i < propValue.length; i++) {
              var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement20(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning(
                  "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
                );
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for (var i = 0; i < expectedValues.length; i++) {
              if (is(propValue, expectedValues[i])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
            var checker = arrayOfTypeCheckers[i];
            if (typeof checker !== "function") {
              printWarning(
                "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
              );
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location, propFullName) {
            var expectedTypes = [];
            for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
              var checker2 = arrayOfTypeCheckers[i2];
              var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            if (!isNode2(props[propName])) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName, location, propFullName, key, type) {
          return new PropTypeError(
            (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
          );
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign2({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError(
                  "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
                );
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode2(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode2);
              }
              if (propValue === null || isValidElement20(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode2(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode2(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "node_modules/prop-types/index.js"(exports, module) {
      if (true) {
        ReactIs = require_react_is();
        throwOnDirectAccess = true;
        module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module.exports = null();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // node_modules/@mui/utils/elementAcceptingRef.js
  var require_elementAcceptingRef = __commonJS({
    "node_modules/@mui/utils/elementAcceptingRef.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _chainPropTypes = _interopRequireDefault(require_chainPropTypes2());
      function isClassComponent(elementType) {
        const {
          prototype: prototype3 = {}
        } = elementType;
        return Boolean(prototype3.isReactComponent);
      }
      function acceptingRef(props, propName, componentName, location, propFullName) {
        const element = props[propName];
        const safePropName = propFullName || propName;
        if (element == null || // When server-side rendering React doesn't warn either.
        // This is not an accurate check for SSR.
        // This is only in place for Emotion compat.
        // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
        typeof window === "undefined") {
          return null;
        }
        let warningHint;
        const elementType = element.type;
        if (typeof elementType === "function" && !isClassComponent(elementType)) {
          warningHint = "Did you accidentally use a plain function component for an element instead?";
        }
        if (warningHint !== void 0) {
          return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
        }
        return null;
      }
      var elementAcceptingRef10 = (0, _chainPropTypes.default)(_propTypes.default.element, acceptingRef);
      elementAcceptingRef10.isRequired = (0, _chainPropTypes.default)(_propTypes.default.element.isRequired, acceptingRef);
      var _default = elementAcceptingRef10;
      exports.default = _default;
    }
  });

  // node_modules/@mui/utils/elementTypeAcceptingRef.js
  var require_elementTypeAcceptingRef = __commonJS({
    "node_modules/@mui/utils/elementTypeAcceptingRef.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _chainPropTypes = _interopRequireDefault(require_chainPropTypes2());
      function isClassComponent(elementType) {
        const {
          prototype: prototype3 = {}
        } = elementType;
        return Boolean(prototype3.isReactComponent);
      }
      function elementTypeAcceptingRef8(props, propName, componentName, location, propFullName) {
        const propValue = props[propName];
        const safePropName = propFullName || propName;
        if (propValue == null || // When server-side rendering React doesn't warn either.
        // This is not an accurate check for SSR.
        // This is only in place for emotion compat.
        // TODO: Revisit once https://github.com/facebook/react/issues/20047 is resolved.
        typeof window === "undefined") {
          return null;
        }
        let warningHint;
        if (typeof propValue === "function" && !isClassComponent(propValue)) {
          warningHint = "Did you accidentally provide a plain function component instead?";
        }
        if (warningHint !== void 0) {
          return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an element type that can hold a ref. ${warningHint} For more information see https://mui.com/r/caveat-with-refs-guide`);
        }
        return null;
      }
      var _default = (0, _chainPropTypes.default)(_propTypes.default.elementType, elementTypeAcceptingRef8);
      exports.default = _default;
    }
  });

  // node_modules/@mui/utils/exactProp/exactProp.js
  var require_exactProp = __commonJS({
    "node_modules/@mui/utils/exactProp/exactProp.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exactProp8;
      var _extends2 = _interopRequireDefault(require_extends());
      var specialProperty = "exact-prop: \u200B";
      function exactProp8(propTypes) {
        if (false) {
          return propTypes;
        }
        return (0, _extends2.default)({}, propTypes, {
          [specialProperty]: (props) => {
            const unsupportedProps = Object.keys(props).filter((prop) => !propTypes.hasOwnProperty(prop));
            if (unsupportedProps.length > 0) {
              return new Error(`The following props are not supported: ${unsupportedProps.map((prop) => `\`${prop}\``).join(", ")}. Please remove them.`);
            }
            return null;
          }
        });
      }
    }
  });

  // node_modules/@mui/utils/exactProp/index.js
  var require_exactProp2 = __commonJS({
    "node_modules/@mui/utils/exactProp/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _exactProp.default;
        }
      });
      var _exactProp = _interopRequireDefault(require_exactProp());
    }
  });

  // node_modules/@mui/utils/formatMuiErrorMessage.js
  var require_formatMuiErrorMessage = __commonJS({
    "node_modules/@mui/utils/formatMuiErrorMessage.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = formatMuiErrorMessage;
      function formatMuiErrorMessage(code) {
        let url = "https://mui.com/production-error/?code=" + code;
        for (let i = 1; i < arguments.length; i += 1) {
          url += "&args[]=" + encodeURIComponent(arguments[i]);
        }
        return "Minified MUI error #" + code + "; visit " + url + " for the full message.";
      }
    }
  });

  // node_modules/@mui/utils/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development2 = __commonJS({
    "node_modules/@mui/utils/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                    case REACT_SUSPENSE_LIST_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_SERVER_CONTEXT_TYPE:
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment29 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          var hasWarnedAboutDeprecatedIsConcurrentMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isConcurrentMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
                hasWarnedAboutDeprecatedIsConcurrentMode = true;
                console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement3(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment12(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          function isSuspenseList(object) {
            return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
          }
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment29;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal3;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.SuspenseList = SuspenseList;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement3;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment12;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isSuspenseList = isSuspenseList;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/@mui/utils/node_modules/react-is/index.js
  var require_react_is2 = __commonJS({
    "node_modules/@mui/utils/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development2();
      }
    }
  });

  // node_modules/@mui/utils/getDisplayName.js
  var require_getDisplayName = __commonJS({
    "node_modules/@mui/utils/getDisplayName.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = getDisplayName3;
      exports.getFunctionName = getFunctionName;
      var _reactIs = require_react_is2();
      var fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
      function getFunctionName(fn2) {
        const match2 = `${fn2}`.match(fnNameMatchRegex);
        const name = match2 && match2[1];
        return name || "";
      }
      function getFunctionComponentName(Component, fallback = "") {
        return Component.displayName || Component.name || getFunctionName(Component) || fallback;
      }
      function getWrappedName(outerType, innerType, wrapperName) {
        const functionName = getFunctionComponentName(innerType);
        return outerType.displayName || (functionName !== "" ? `${wrapperName}(${functionName})` : wrapperName);
      }
      function getDisplayName3(Component) {
        if (Component == null) {
          return void 0;
        }
        if (typeof Component === "string") {
          return Component;
        }
        if (typeof Component === "function") {
          return getFunctionComponentName(Component, "Component");
        }
        if (typeof Component === "object") {
          switch (Component.$$typeof) {
            case _reactIs.ForwardRef:
              return getWrappedName(Component, Component.render, "ForwardRef");
            case _reactIs.Memo:
              return getWrappedName(Component, Component.type, "memo");
            default:
              return void 0;
          }
        }
        return void 0;
      }
    }
  });

  // node_modules/@mui/utils/HTMLElementType/HTMLElementType.js
  var require_HTMLElementType = __commonJS({
    "node_modules/@mui/utils/HTMLElementType/HTMLElementType.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = HTMLElementType10;
      function HTMLElementType10(props, propName, componentName, location, propFullName) {
        if (false) {
          return null;
        }
        const propValue = props[propName];
        const safePropName = propFullName || propName;
        if (propValue == null) {
          return null;
        }
        if (propValue && propValue.nodeType !== 1) {
          return new Error(`Invalid ${location} \`${safePropName}\` supplied to \`${componentName}\`. Expected an HTMLElement.`);
        }
        return null;
      }
    }
  });

  // node_modules/@mui/utils/HTMLElementType/index.js
  var require_HTMLElementType2 = __commonJS({
    "node_modules/@mui/utils/HTMLElementType/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _HTMLElementType.default;
        }
      });
      var _HTMLElementType = _interopRequireDefault(require_HTMLElementType());
    }
  });

  // node_modules/@mui/utils/ponyfillGlobal/ponyfillGlobal.js
  var require_ponyfillGlobal = __commonJS({
    "node_modules/@mui/utils/ponyfillGlobal/ponyfillGlobal.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _default = typeof window != "undefined" && window.Math == Math ? window : typeof self != "undefined" && self.Math == Math ? self : Function("return this")();
      exports.default = _default;
    }
  });

  // node_modules/@mui/utils/ponyfillGlobal/index.js
  var require_ponyfillGlobal2 = __commonJS({
    "node_modules/@mui/utils/ponyfillGlobal/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _ponyfillGlobal.default;
        }
      });
      var _ponyfillGlobal = _interopRequireDefault(require_ponyfillGlobal());
    }
  });

  // node_modules/@mui/utils/refType.js
  var require_refType = __commonJS({
    "node_modules/@mui/utils/refType.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var refType19 = _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]);
      var _default = refType19;
      exports.default = _default;
    }
  });

  // node_modules/@mui/utils/capitalize/capitalize.js
  var require_capitalize = __commonJS({
    "node_modules/@mui/utils/capitalize/capitalize.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = capitalize4;
      var _formatMuiErrorMessage2 = _interopRequireDefault(require_formatMuiErrorMessage());
      function capitalize4(string) {
        if (typeof string !== "string") {
          throw new Error(true ? `MUI: \`capitalize(string)\` expects a string argument.` : (0, _formatMuiErrorMessage2.default)(7));
        }
        return string.charAt(0).toUpperCase() + string.slice(1);
      }
    }
  });

  // node_modules/@mui/utils/capitalize/index.js
  var require_capitalize2 = __commonJS({
    "node_modules/@mui/utils/capitalize/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _capitalize.default;
        }
      });
      var _capitalize = _interopRequireDefault(require_capitalize());
    }
  });

  // node_modules/@mui/utils/createChainedFunction.js
  var require_createChainedFunction = __commonJS({
    "node_modules/@mui/utils/createChainedFunction.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createChainedFunction3;
      function createChainedFunction3(...funcs) {
        return funcs.reduce((acc, func) => {
          if (func == null) {
            return acc;
          }
          return function chainedFunction(...args) {
            acc.apply(this, args);
            func.apply(this, args);
          };
        }, () => {
        });
      }
    }
  });

  // node_modules/@mui/utils/debounce/debounce.js
  var require_debounce = __commonJS({
    "node_modules/@mui/utils/debounce/debounce.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = debounce4;
      function debounce4(func, wait = 166) {
        let timeout2;
        function debounced(...args) {
          const later = () => {
            func.apply(this, args);
          };
          clearTimeout(timeout2);
          timeout2 = setTimeout(later, wait);
        }
        debounced.clear = () => {
          clearTimeout(timeout2);
        };
        return debounced;
      }
    }
  });

  // node_modules/@mui/utils/debounce/index.js
  var require_debounce2 = __commonJS({
    "node_modules/@mui/utils/debounce/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _debounce.default;
        }
      });
      var _debounce = _interopRequireWildcard(require_debounce());
      Object.keys(_debounce).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _debounce[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _debounce[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/utils/deprecatedPropType.js
  var require_deprecatedPropType = __commonJS({
    "node_modules/@mui/utils/deprecatedPropType.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = deprecatedPropType;
      function deprecatedPropType(validator, reason) {
        if (false) {
          return () => null;
        }
        return (props, propName, componentName, location, propFullName) => {
          const componentNameSafe = componentName || "<<anonymous>>";
          const propFullNameSafe = propFullName || propName;
          if (typeof props[propName] !== "undefined") {
            return new Error(`The ${location} \`${propFullNameSafe}\` of \`${componentNameSafe}\` is deprecated. ${reason}`);
          }
          return null;
        };
      }
    }
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign2 = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign2(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef2() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty3 = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config2) {
            {
              if (hasOwnProperty3.call(config2, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.ref !== void 0;
          }
          function hasValidKey(config2) {
            {
              if (hasOwnProperty3.call(config2, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config2) {
            {
              if (typeof config2.ref === "string" && ReactCurrentOwner.current && config2.__self && ReactCurrentOwner.current.stateNode !== config2.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config2.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement5(type, config2, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config2 != null) {
              if (hasValidRef(config2)) {
                ref = config2.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config2);
                }
              }
              if (hasValidKey(config2)) {
                {
                  checkKeyStringCoercion(config2.key);
                }
                key = "" + config2.key;
              }
              self2 = config2.__self === void 0 ? null : config2.__self;
              source = config2.__source === void 0 ? null : config2.__source;
              for (propName in config2) {
                if (hasOwnProperty3.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config2[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps2 = type.defaultProps;
              for (propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement32(element, config2, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign2({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config2 != null) {
              if (hasValidRef(config2)) {
                ref = config2.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config2)) {
                {
                  checkKeyStringCoercion(config2.key);
                }
                key = "" + config2.key;
              }
              var defaultProps2;
              if (element.type && element.type.defaultProps) {
                defaultProps2 = element.type.defaultProps;
              }
              for (propName in config2) {
                if (hasOwnProperty3.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config2[propName] === void 0 && defaultProps2 !== void 0) {
                    props[propName] = defaultProps2[propName];
                  } else {
                    props[propName] = config2[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement20(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape2(key) {
            var escapeRegex2 = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex2, function(match2) {
              return escaperLookup[match2];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index3) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape2("" + element.key);
            }
            return index3.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray2(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement20(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray2(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray2(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement20(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext22(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps2;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps2;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps2 = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef153(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo3(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext38(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState43(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer2(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef65(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect45(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect3(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect3(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback34(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo35(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle11(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue8(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId14() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore2(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix3;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix3 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix3 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix3 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn2.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn2.displayName);
                          }
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype3 = Component2.prototype;
            return !!(prototype3 && prototype3.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty3);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            if (typeof node2 !== "object") {
              return;
            }
            if (isArray2(node2)) {
              for (var i = 0; i < node2.length; i++) {
                var child = node2[i];
                if (isValidElement20(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement20(node2)) {
              if (node2._store) {
                node2._store.validated = true;
              }
            } else if (node2) {
              var iteratorFn = getIteratorFn(node2);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node2.entries) {
                  var iterator = iteratorFn.call(node2);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement20(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray2(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement5.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement32.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i = 0;
                try {
                  for (; i < queue.length; i++) {
                    var callback = queue[i];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children18 = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray: toArray2,
            only: onlyChild
          };
          exports.Children = Children18;
          exports.Component = Component;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext22;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef2;
          exports.forwardRef = forwardRef153;
          exports.isValidElement = isValidElement20;
          exports.lazy = lazy;
          exports.memo = memo3;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback34;
          exports.useContext = useContext38;
          exports.useDebugValue = useDebugValue8;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect45;
          exports.useId = useId14;
          exports.useImperativeHandle = useImperativeHandle11;
          exports.useInsertionEffect = useInsertionEffect3;
          exports.useLayoutEffect = useLayoutEffect3;
          exports.useMemo = useMemo35;
          exports.useReducer = useReducer2;
          exports.useRef = useRef65;
          exports.useState = useState43;
          exports.useSyncExternalStore = useSyncExternalStore2;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/@mui/utils/isMuiElement.js
  var require_isMuiElement = __commonJS({
    "node_modules/@mui/utils/isMuiElement.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = isMuiElement2;
      var React264 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
      function isMuiElement2(element, muiNames) {
        var _muiName, _element$type;
        return /* @__PURE__ */ React264.isValidElement(element) && muiNames.indexOf(
          // For server components `muiName` is avaialble in element.type._payload.value.muiName
          // relevant info - https://github.com/facebook/react/blob/2807d781a08db8e9873687fccc25c0f12b4fb3d4/packages/react/src/ReactLazy.js#L45
          // eslint-disable-next-line no-underscore-dangle
          (_muiName = element.type.muiName) != null ? _muiName : (_element$type = element.type) == null || (_element$type = _element$type._payload) == null || (_element$type = _element$type.value) == null ? void 0 : _element$type.muiName
        ) !== -1;
      }
    }
  });

  // node_modules/@mui/utils/ownerDocument/ownerDocument.js
  var require_ownerDocument = __commonJS({
    "node_modules/@mui/utils/ownerDocument/ownerDocument.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = ownerDocument8;
      function ownerDocument8(node2) {
        return node2 && node2.ownerDocument || document;
      }
    }
  });

  // node_modules/@mui/utils/ownerDocument/index.js
  var require_ownerDocument2 = __commonJS({
    "node_modules/@mui/utils/ownerDocument/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _ownerDocument.default;
        }
      });
      var _ownerDocument = _interopRequireDefault(require_ownerDocument());
    }
  });

  // node_modules/@mui/utils/ownerWindow/ownerWindow.js
  var require_ownerWindow = __commonJS({
    "node_modules/@mui/utils/ownerWindow/ownerWindow.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = ownerWindow6;
      var _ownerDocument = _interopRequireDefault(require_ownerDocument2());
      function ownerWindow6(node2) {
        const doc = (0, _ownerDocument.default)(node2);
        return doc.defaultView || window;
      }
    }
  });

  // node_modules/@mui/utils/ownerWindow/index.js
  var require_ownerWindow2 = __commonJS({
    "node_modules/@mui/utils/ownerWindow/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _ownerWindow.default;
        }
      });
      var _ownerWindow = _interopRequireDefault(require_ownerWindow());
    }
  });

  // node_modules/@mui/utils/requirePropFactory.js
  var require_requirePropFactory = __commonJS({
    "node_modules/@mui/utils/requirePropFactory.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = requirePropFactory2;
      var _extends2 = _interopRequireDefault(require_extends());
      function requirePropFactory2(componentNameInError, Component) {
        if (false) {
          return () => null;
        }
        const prevPropTypes = Component ? (0, _extends2.default)({}, Component.propTypes) : null;
        const requireProp = (requiredProp) => (props, propName, componentName, location, propFullName, ...args) => {
          const propFullNameSafe = propFullName || propName;
          const defaultTypeChecker = prevPropTypes == null ? void 0 : prevPropTypes[propFullNameSafe];
          if (defaultTypeChecker) {
            const typeCheckerResult = defaultTypeChecker(props, propName, componentName, location, propFullName, ...args);
            if (typeCheckerResult) {
              return typeCheckerResult;
            }
          }
          if (typeof props[propName] !== "undefined" && !props[requiredProp]) {
            return new Error(`The prop \`${propFullNameSafe}\` of \`${componentNameInError}\` can only be used together with the \`${requiredProp}\` prop.`);
          }
          return null;
        };
        return requireProp;
      }
    }
  });

  // node_modules/@mui/utils/setRef.js
  var require_setRef = __commonJS({
    "node_modules/@mui/utils/setRef.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = setRef3;
      function setRef3(ref, value) {
        if (typeof ref === "function") {
          ref(value);
        } else if (ref) {
          ref.current = value;
        }
      }
    }
  });

  // node_modules/@mui/utils/useEnhancedEffect/useEnhancedEffect.js
  var require_useEnhancedEffect = __commonJS({
    "node_modules/@mui/utils/useEnhancedEffect/useEnhancedEffect.js"(exports) {
      "use strict";
      "use client";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React264 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
      var useEnhancedEffect13 = typeof window !== "undefined" ? React264.useLayoutEffect : React264.useEffect;
      var _default = useEnhancedEffect13;
      exports.default = _default;
    }
  });

  // node_modules/@mui/utils/useEnhancedEffect/index.js
  var require_useEnhancedEffect2 = __commonJS({
    "node_modules/@mui/utils/useEnhancedEffect/index.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useEnhancedEffect.default;
        }
      });
      var _useEnhancedEffect = _interopRequireDefault(require_useEnhancedEffect());
    }
  });

  // node_modules/@mui/utils/useId/useId.js
  var require_useId = __commonJS({
    "node_modules/@mui/utils/useId/useId.js"(exports) {
      "use strict";
      "use client";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useId14;
      var React264 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
      var globalId = 0;
      function useGlobalId(idOverride) {
        const [defaultId, setDefaultId] = React264.useState(idOverride);
        const id = idOverride || defaultId;
        React264.useEffect(() => {
          if (defaultId == null) {
            globalId += 1;
            setDefaultId(`mui-${globalId}`);
          }
        }, [defaultId]);
        return id;
      }
      var maybeReactUseId = React264["useId".toString()];
      function useId14(idOverride) {
        if (maybeReactUseId !== void 0) {
          const reactId = maybeReactUseId();
          return idOverride != null ? idOverride : reactId;
        }
        return useGlobalId(idOverride);
      }
    }
  });

  // node_modules/@mui/utils/useId/index.js
  var require_useId2 = __commonJS({
    "node_modules/@mui/utils/useId/index.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useId.default;
        }
      });
      var _useId = _interopRequireDefault(require_useId());
    }
  });

  // node_modules/@mui/utils/unsupportedProp.js
  var require_unsupportedProp = __commonJS({
    "node_modules/@mui/utils/unsupportedProp.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = unsupportedProp2;
      function unsupportedProp2(props, propName, componentName, location, propFullName) {
        if (false) {
          return null;
        }
        const propFullNameSafe = propFullName || propName;
        if (typeof props[propName] !== "undefined") {
          return new Error(`The prop \`${propFullNameSafe}\` is not supported. Please remove it.`);
        }
        return null;
      }
    }
  });

  // node_modules/@mui/utils/useControlled/useControlled.js
  var require_useControlled = __commonJS({
    "node_modules/@mui/utils/useControlled/useControlled.js"(exports) {
      "use strict";
      "use client";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useControlled10;
      var React264 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
      function useControlled10({
        controlled,
        default: defaultProp,
        name,
        state = "value"
      }) {
        const {
          current: isControlled
        } = React264.useRef(controlled !== void 0);
        const [valueState, setValue] = React264.useState(defaultProp);
        const value = isControlled ? controlled : valueState;
        if (true) {
          React264.useEffect(() => {
            if (isControlled !== (controlled !== void 0)) {
              console.error([`MUI: A component is changing the ${isControlled ? "" : "un"}controlled ${state} state of ${name} to be ${isControlled ? "un" : ""}controlled.`, "Elements should not switch from uncontrolled to controlled (or vice versa).", `Decide between using a controlled or uncontrolled ${name} element for the lifetime of the component.`, "The nature of the state is determined during the first render. It's considered controlled if the value is not `undefined`.", "More info: https://fb.me/react-controlled-components"].join("\n"));
            }
          }, [state, name, controlled]);
          const {
            current: defaultValue
          } = React264.useRef(defaultProp);
          React264.useEffect(() => {
            if (!isControlled && defaultValue !== defaultProp) {
              console.error([`MUI: A component is changing the default ${state} state of an uncontrolled ${name} after being initialized. To suppress this warning opt to use a controlled ${name}.`].join("\n"));
            }
          }, [JSON.stringify(defaultProp)]);
        }
        const setValueIfUncontrolled = React264.useCallback((newValue) => {
          if (!isControlled) {
            setValue(newValue);
          }
        }, []);
        return [value, setValueIfUncontrolled];
      }
    }
  });

  // node_modules/@mui/utils/useControlled/index.js
  var require_useControlled2 = __commonJS({
    "node_modules/@mui/utils/useControlled/index.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useControlled.default;
        }
      });
      var _useControlled = _interopRequireDefault(require_useControlled());
    }
  });

  // node_modules/@mui/utils/useEventCallback/useEventCallback.js
  var require_useEventCallback = __commonJS({
    "node_modules/@mui/utils/useEventCallback/useEventCallback.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React264 = _interopRequireWildcard(require_react());
      var _useEnhancedEffect = _interopRequireDefault(require_useEnhancedEffect2());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
      function useEventCallback7(fn2) {
        const ref = React264.useRef(fn2);
        (0, _useEnhancedEffect.default)(() => {
          ref.current = fn2;
        });
        return React264.useCallback((...args) => (
          // @ts-expect-error hide `this`
          // tslint:disable-next-line:ban-comma-operator
          (0, ref.current)(...args)
        ), []);
      }
      var _default = useEventCallback7;
      exports.default = _default;
    }
  });

  // node_modules/@mui/utils/useEventCallback/index.js
  var require_useEventCallback2 = __commonJS({
    "node_modules/@mui/utils/useEventCallback/index.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useEventCallback.default;
        }
      });
      var _useEventCallback = _interopRequireDefault(require_useEventCallback());
    }
  });

  // node_modules/@mui/utils/useForkRef/useForkRef.js
  var require_useForkRef = __commonJS({
    "node_modules/@mui/utils/useForkRef/useForkRef.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useForkRef29;
      var React264 = _interopRequireWildcard(require_react());
      var _setRef = _interopRequireDefault(require_setRef());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
      function useForkRef29(...refs) {
        return React264.useMemo(() => {
          if (refs.every((ref) => ref == null)) {
            return null;
          }
          return (instance) => {
            refs.forEach((ref) => {
              (0, _setRef.default)(ref, instance);
            });
          };
        }, refs);
      }
    }
  });

  // node_modules/@mui/utils/useForkRef/index.js
  var require_useForkRef2 = __commonJS({
    "node_modules/@mui/utils/useForkRef/index.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useForkRef.default;
        }
      });
      var _useForkRef = _interopRequireDefault(require_useForkRef());
    }
  });

  // node_modules/@mui/utils/useIsFocusVisible.js
  var require_useIsFocusVisible = __commonJS({
    "node_modules/@mui/utils/useIsFocusVisible.js"(exports) {
      "use strict";
      "use client";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useIsFocusVisible6;
      exports.teardown = teardown;
      var React264 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
      var hadKeyboardEvent = true;
      var hadFocusVisibleRecently = false;
      var hadFocusVisibleRecentlyTimeout;
      var inputTypesWhitelist = {
        text: true,
        search: true,
        url: true,
        tel: true,
        email: true,
        password: true,
        number: true,
        date: true,
        month: true,
        week: true,
        time: true,
        datetime: true,
        "datetime-local": true
      };
      function focusTriggersKeyboardModality(node2) {
        const {
          type,
          tagName
        } = node2;
        if (tagName === "INPUT" && inputTypesWhitelist[type] && !node2.readOnly) {
          return true;
        }
        if (tagName === "TEXTAREA" && !node2.readOnly) {
          return true;
        }
        if (node2.isContentEditable) {
          return true;
        }
        return false;
      }
      function handleKeyDown2(event) {
        if (event.metaKey || event.altKey || event.ctrlKey) {
          return;
        }
        hadKeyboardEvent = true;
      }
      function handlePointerDown() {
        hadKeyboardEvent = false;
      }
      function handleVisibilityChange() {
        if (this.visibilityState === "hidden") {
          if (hadFocusVisibleRecently) {
            hadKeyboardEvent = true;
          }
        }
      }
      function prepare(doc) {
        doc.addEventListener("keydown", handleKeyDown2, true);
        doc.addEventListener("mousedown", handlePointerDown, true);
        doc.addEventListener("pointerdown", handlePointerDown, true);
        doc.addEventListener("touchstart", handlePointerDown, true);
        doc.addEventListener("visibilitychange", handleVisibilityChange, true);
      }
      function teardown(doc) {
        doc.removeEventListener("keydown", handleKeyDown2, true);
        doc.removeEventListener("mousedown", handlePointerDown, true);
        doc.removeEventListener("pointerdown", handlePointerDown, true);
        doc.removeEventListener("touchstart", handlePointerDown, true);
        doc.removeEventListener("visibilitychange", handleVisibilityChange, true);
      }
      function isFocusVisible(event) {
        const {
          target
        } = event;
        try {
          return target.matches(":focus-visible");
        } catch (error) {
        }
        return hadKeyboardEvent || focusTriggersKeyboardModality(target);
      }
      function useIsFocusVisible6() {
        const ref = React264.useCallback((node2) => {
          if (node2 != null) {
            prepare(node2.ownerDocument);
          }
        }, []);
        const isFocusVisibleRef = React264.useRef(false);
        function handleBlurVisible() {
          if (isFocusVisibleRef.current) {
            hadFocusVisibleRecently = true;
            window.clearTimeout(hadFocusVisibleRecentlyTimeout);
            hadFocusVisibleRecentlyTimeout = window.setTimeout(() => {
              hadFocusVisibleRecently = false;
            }, 100);
            isFocusVisibleRef.current = false;
            return true;
          }
          return false;
        }
        function handleFocusVisible(event) {
          if (isFocusVisible(event)) {
            isFocusVisibleRef.current = true;
            return true;
          }
          return false;
        }
        return {
          isFocusVisibleRef,
          onFocus: handleFocusVisible,
          onBlur: handleBlurVisible,
          ref
        };
      }
    }
  });

  // node_modules/@mui/utils/getScrollbarSize.js
  var require_getScrollbarSize = __commonJS({
    "node_modules/@mui/utils/getScrollbarSize.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = getScrollbarSize3;
      function getScrollbarSize3(doc) {
        const documentWidth = doc.documentElement.clientWidth;
        return Math.abs(window.innerWidth - documentWidth);
      }
    }
  });

  // node_modules/@mui/utils/scrollLeft.js
  var require_scrollLeft = __commonJS({
    "node_modules/@mui/utils/scrollLeft.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.detectScrollType = detectScrollType;
      exports.getNormalizedScrollLeft = getNormalizedScrollLeft;
      var cachedType;
      function detectScrollType() {
        if (cachedType) {
          return cachedType;
        }
        const dummy = document.createElement("div");
        const container = document.createElement("div");
        container.style.width = "10px";
        container.style.height = "1px";
        dummy.appendChild(container);
        dummy.dir = "rtl";
        dummy.style.fontSize = "14px";
        dummy.style.width = "4px";
        dummy.style.height = "1px";
        dummy.style.position = "absolute";
        dummy.style.top = "-1000px";
        dummy.style.overflow = "scroll";
        document.body.appendChild(dummy);
        cachedType = "reverse";
        if (dummy.scrollLeft > 0) {
          cachedType = "default";
        } else {
          dummy.scrollLeft = 1;
          if (dummy.scrollLeft === 0) {
            cachedType = "negative";
          }
        }
        document.body.removeChild(dummy);
        return cachedType;
      }
      function getNormalizedScrollLeft(element, direction) {
        const scrollLeft = element.scrollLeft;
        if (direction !== "rtl") {
          return scrollLeft;
        }
        const type = detectScrollType();
        switch (type) {
          case "negative":
            return element.scrollWidth - element.clientWidth + scrollLeft;
          case "reverse":
            return element.scrollWidth - element.clientWidth - scrollLeft;
          default:
            return scrollLeft;
        }
      }
    }
  });

  // node_modules/@mui/utils/usePreviousProps.js
  var require_usePreviousProps = __commonJS({
    "node_modules/@mui/utils/usePreviousProps.js"(exports) {
      "use strict";
      "use client";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React264 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
      var usePreviousProps4 = (value) => {
        const ref = React264.useRef({});
        React264.useEffect(() => {
          ref.current = value;
        });
        return ref.current;
      };
      var _default = usePreviousProps4;
      exports.default = _default;
    }
  });

  // node_modules/@mui/utils/visuallyHidden.js
  var require_visuallyHidden = __commonJS({
    "node_modules/@mui/utils/visuallyHidden.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var visuallyHidden3 = {
        border: 0,
        clip: "rect(0 0 0 0)",
        height: "1px",
        margin: -1,
        overflow: "hidden",
        padding: 0,
        position: "absolute",
        whiteSpace: "nowrap",
        width: "1px"
      };
      var _default = visuallyHidden3;
      exports.default = _default;
    }
  });

  // node_modules/@mui/utils/integerPropType.js
  var require_integerPropType = __commonJS({
    "node_modules/@mui/utils/integerPropType.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getTypeByValue = getTypeByValue;
      function getTypeByValue(value) {
        const valueType = typeof value;
        switch (valueType) {
          case "number":
            if (Number.isNaN(value)) {
              return "NaN";
            }
            if (!Number.isFinite(value)) {
              return "Infinity";
            }
            if (value !== Math.floor(value)) {
              return "float";
            }
            return "number";
          case "object":
            if (value === null) {
              return "null";
            }
            return value.constructor.name;
          default:
            return valueType;
        }
      }
      function ponyfillIsInteger(x) {
        return typeof x === "number" && isFinite(x) && Math.floor(x) === x;
      }
      var isInteger = Number.isInteger || ponyfillIsInteger;
      function requiredInteger(props, propName, componentName, location) {
        const propValue = props[propName];
        if (propValue == null || !isInteger(propValue)) {
          const propType = getTypeByValue(propValue);
          return new RangeError(`Invalid ${location} \`${propName}\` of type \`${propType}\` supplied to \`${componentName}\`, expected \`integer\`.`);
        }
        return null;
      }
      function validator(props, propName, ...other) {
        const propValue = props[propName];
        if (propValue === void 0) {
          return null;
        }
        return requiredInteger(props, propName, ...other);
      }
      function validatorNoop() {
        return null;
      }
      validator.isRequired = requiredInteger;
      validatorNoop.isRequired = validatorNoop;
      var _default = false ? validatorNoop : validator;
      exports.default = _default;
    }
  });

  // node_modules/@mui/utils/resolveProps.js
  var require_resolveProps = __commonJS({
    "node_modules/@mui/utils/resolveProps.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = resolveProps2;
      var _extends2 = _interopRequireDefault(require_extends());
      function resolveProps2(defaultProps2, props) {
        const output = (0, _extends2.default)({}, props);
        Object.keys(defaultProps2).forEach((propName) => {
          if (propName.toString().match(/^(components|slots)$/)) {
            output[propName] = (0, _extends2.default)({}, defaultProps2[propName], output[propName]);
          } else if (propName.toString().match(/^(componentsProps|slotProps)$/)) {
            const defaultSlotProps = defaultProps2[propName] || {};
            const slotProps = props[propName];
            output[propName] = {};
            if (!slotProps || !Object.keys(slotProps)) {
              output[propName] = defaultSlotProps;
            } else if (!defaultSlotProps || !Object.keys(defaultSlotProps)) {
              output[propName] = slotProps;
            } else {
              output[propName] = (0, _extends2.default)({}, slotProps);
              Object.keys(defaultSlotProps).forEach((slotPropName) => {
                output[propName][slotPropName] = resolveProps2(defaultSlotProps[slotPropName], slotProps[slotPropName]);
              });
            }
          } else if (output[propName] === void 0) {
            output[propName] = defaultProps2[propName];
          }
        });
        return output;
      }
    }
  });

  // node_modules/@mui/utils/composeClasses/composeClasses.js
  var require_composeClasses = __commonJS({
    "node_modules/@mui/utils/composeClasses/composeClasses.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = composeClasses135;
      function composeClasses135(slots, getUtilityClass, classes = void 0) {
        const output = {};
        Object.keys(slots).forEach(
          // `Object.keys(slots)` can't be wider than `T` because we infer `T` from `slots`.
          // @ts-expect-error https://github.com/microsoft/TypeScript/pull/12253#issuecomment-263132208
          (slot) => {
            output[slot] = slots[slot].reduce((acc, key) => {
              if (key) {
                const utilityClass = getUtilityClass(key);
                if (utilityClass !== "") {
                  acc.push(utilityClass);
                }
                if (classes && classes[key]) {
                  acc.push(classes[key]);
                }
              }
              return acc;
            }, []).join(" ");
          }
        );
        return output;
      }
    }
  });

  // node_modules/@mui/utils/composeClasses/index.js
  var require_composeClasses2 = __commonJS({
    "node_modules/@mui/utils/composeClasses/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _composeClasses.default;
        }
      });
      var _composeClasses = _interopRequireDefault(require_composeClasses());
    }
  });

  // node_modules/@mui/utils/ClassNameGenerator/ClassNameGenerator.js
  var require_ClassNameGenerator = __commonJS({
    "node_modules/@mui/utils/ClassNameGenerator/ClassNameGenerator.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var defaultGenerator = (componentName) => componentName;
      var createClassNameGenerator = () => {
        let generate = defaultGenerator;
        return {
          configure(generator) {
            generate = generator;
          },
          generate(componentName) {
            return generate(componentName);
          },
          reset() {
            generate = defaultGenerator;
          }
        };
      };
      var ClassNameGenerator = createClassNameGenerator();
      var _default = ClassNameGenerator;
      exports.default = _default;
    }
  });

  // node_modules/@mui/utils/ClassNameGenerator/index.js
  var require_ClassNameGenerator2 = __commonJS({
    "node_modules/@mui/utils/ClassNameGenerator/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _ClassNameGenerator.default;
        }
      });
      var _ClassNameGenerator = _interopRequireDefault(require_ClassNameGenerator());
    }
  });

  // node_modules/@mui/utils/generateUtilityClass/generateUtilityClass.js
  var require_generateUtilityClass = __commonJS({
    "node_modules/@mui/utils/generateUtilityClass/generateUtilityClass.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = generateUtilityClass116;
      var _ClassNameGenerator = _interopRequireDefault(require_ClassNameGenerator2());
      var globalStateClassesMapping = {
        active: "active",
        checked: "checked",
        completed: "completed",
        disabled: "disabled",
        error: "error",
        expanded: "expanded",
        focused: "focused",
        focusVisible: "focusVisible",
        open: "open",
        readOnly: "readOnly",
        required: "required",
        selected: "selected"
      };
      function generateUtilityClass116(componentName, slot, globalStatePrefix = "Mui") {
        const globalStateClass = globalStateClassesMapping[slot];
        return globalStateClass ? `${globalStatePrefix}-${globalStateClass}` : `${_ClassNameGenerator.default.generate(componentName)}-${slot}`;
      }
    }
  });

  // node_modules/@mui/utils/generateUtilityClass/index.js
  var require_generateUtilityClass2 = __commonJS({
    "node_modules/@mui/utils/generateUtilityClass/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _generateUtilityClass.default;
        }
      });
      var _generateUtilityClass = _interopRequireWildcard(require_generateUtilityClass());
      Object.keys(_generateUtilityClass).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _generateUtilityClass[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _generateUtilityClass[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/utils/generateUtilityClasses/generateUtilityClasses.js
  var require_generateUtilityClasses = __commonJS({
    "node_modules/@mui/utils/generateUtilityClasses/generateUtilityClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = generateUtilityClasses116;
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass2());
      function generateUtilityClasses116(componentName, slots, globalStatePrefix = "Mui") {
        const result = {};
        slots.forEach((slot) => {
          result[slot] = (0, _generateUtilityClass.default)(componentName, slot, globalStatePrefix);
        });
        return result;
      }
    }
  });

  // node_modules/@mui/utils/generateUtilityClasses/index.js
  var require_generateUtilityClasses2 = __commonJS({
    "node_modules/@mui/utils/generateUtilityClasses/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _generateUtilityClasses.default;
        }
      });
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses());
    }
  });

  // node_modules/@mui/utils/index.js
  var require_utils = __commonJS({
    "node_modules/@mui/utils/index.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        chainPropTypes: true,
        deepmerge: true,
        isPlainObject: true,
        elementAcceptingRef: true,
        elementTypeAcceptingRef: true,
        exactProp: true,
        formatMuiErrorMessage: true,
        getDisplayName: true,
        HTMLElementType: true,
        ponyfillGlobal: true,
        refType: true,
        unstable_capitalize: true,
        unstable_createChainedFunction: true,
        unstable_debounce: true,
        unstable_deprecatedPropType: true,
        unstable_isMuiElement: true,
        unstable_ownerDocument: true,
        unstable_ownerWindow: true,
        unstable_requirePropFactory: true,
        unstable_setRef: true,
        unstable_useEnhancedEffect: true,
        unstable_useId: true,
        unstable_unsupportedProp: true,
        unstable_useControlled: true,
        unstable_useEventCallback: true,
        unstable_useForkRef: true,
        unstable_useIsFocusVisible: true,
        unstable_getScrollbarSize: true,
        unstable_detectScrollType: true,
        unstable_getNormalizedScrollLeft: true,
        usePreviousProps: true,
        visuallyHidden: true,
        integerPropType: true,
        internal_resolveProps: true,
        unstable_composeClasses: true,
        unstable_generateUtilityClass: true,
        unstable_generateUtilityClasses: true,
        unstable_ClassNameGenerator: true
      };
      Object.defineProperty(exports, "HTMLElementType", {
        enumerable: true,
        get: function() {
          return _HTMLElementType.default;
        }
      });
      Object.defineProperty(exports, "chainPropTypes", {
        enumerable: true,
        get: function() {
          return _chainPropTypes.default;
        }
      });
      Object.defineProperty(exports, "deepmerge", {
        enumerable: true,
        get: function() {
          return _deepmerge.default;
        }
      });
      Object.defineProperty(exports, "elementAcceptingRef", {
        enumerable: true,
        get: function() {
          return _elementAcceptingRef.default;
        }
      });
      Object.defineProperty(exports, "elementTypeAcceptingRef", {
        enumerable: true,
        get: function() {
          return _elementTypeAcceptingRef.default;
        }
      });
      Object.defineProperty(exports, "exactProp", {
        enumerable: true,
        get: function() {
          return _exactProp.default;
        }
      });
      Object.defineProperty(exports, "formatMuiErrorMessage", {
        enumerable: true,
        get: function() {
          return _formatMuiErrorMessage.default;
        }
      });
      Object.defineProperty(exports, "getDisplayName", {
        enumerable: true,
        get: function() {
          return _getDisplayName.default;
        }
      });
      Object.defineProperty(exports, "integerPropType", {
        enumerable: true,
        get: function() {
          return _integerPropType.default;
        }
      });
      Object.defineProperty(exports, "internal_resolveProps", {
        enumerable: true,
        get: function() {
          return _resolveProps.default;
        }
      });
      Object.defineProperty(exports, "isPlainObject", {
        enumerable: true,
        get: function() {
          return _deepmerge.isPlainObject;
        }
      });
      Object.defineProperty(exports, "ponyfillGlobal", {
        enumerable: true,
        get: function() {
          return _ponyfillGlobal.default;
        }
      });
      Object.defineProperty(exports, "refType", {
        enumerable: true,
        get: function() {
          return _refType.default;
        }
      });
      Object.defineProperty(exports, "unstable_ClassNameGenerator", {
        enumerable: true,
        get: function() {
          return _ClassNameGenerator.default;
        }
      });
      Object.defineProperty(exports, "unstable_capitalize", {
        enumerable: true,
        get: function() {
          return _capitalize.default;
        }
      });
      Object.defineProperty(exports, "unstable_composeClasses", {
        enumerable: true,
        get: function() {
          return _composeClasses.default;
        }
      });
      Object.defineProperty(exports, "unstable_createChainedFunction", {
        enumerable: true,
        get: function() {
          return _createChainedFunction.default;
        }
      });
      Object.defineProperty(exports, "unstable_debounce", {
        enumerable: true,
        get: function() {
          return _debounce.default;
        }
      });
      Object.defineProperty(exports, "unstable_deprecatedPropType", {
        enumerable: true,
        get: function() {
          return _deprecatedPropType.default;
        }
      });
      Object.defineProperty(exports, "unstable_detectScrollType", {
        enumerable: true,
        get: function() {
          return _scrollLeft.detectScrollType;
        }
      });
      Object.defineProperty(exports, "unstable_generateUtilityClass", {
        enumerable: true,
        get: function() {
          return _generateUtilityClass.default;
        }
      });
      Object.defineProperty(exports, "unstable_generateUtilityClasses", {
        enumerable: true,
        get: function() {
          return _generateUtilityClasses.default;
        }
      });
      Object.defineProperty(exports, "unstable_getNormalizedScrollLeft", {
        enumerable: true,
        get: function() {
          return _scrollLeft.getNormalizedScrollLeft;
        }
      });
      Object.defineProperty(exports, "unstable_getScrollbarSize", {
        enumerable: true,
        get: function() {
          return _getScrollbarSize.default;
        }
      });
      Object.defineProperty(exports, "unstable_isMuiElement", {
        enumerable: true,
        get: function() {
          return _isMuiElement.default;
        }
      });
      Object.defineProperty(exports, "unstable_ownerDocument", {
        enumerable: true,
        get: function() {
          return _ownerDocument.default;
        }
      });
      Object.defineProperty(exports, "unstable_ownerWindow", {
        enumerable: true,
        get: function() {
          return _ownerWindow.default;
        }
      });
      Object.defineProperty(exports, "unstable_requirePropFactory", {
        enumerable: true,
        get: function() {
          return _requirePropFactory.default;
        }
      });
      Object.defineProperty(exports, "unstable_setRef", {
        enumerable: true,
        get: function() {
          return _setRef.default;
        }
      });
      Object.defineProperty(exports, "unstable_unsupportedProp", {
        enumerable: true,
        get: function() {
          return _unsupportedProp.default;
        }
      });
      Object.defineProperty(exports, "unstable_useControlled", {
        enumerable: true,
        get: function() {
          return _useControlled.default;
        }
      });
      Object.defineProperty(exports, "unstable_useEnhancedEffect", {
        enumerable: true,
        get: function() {
          return _useEnhancedEffect.default;
        }
      });
      Object.defineProperty(exports, "unstable_useEventCallback", {
        enumerable: true,
        get: function() {
          return _useEventCallback.default;
        }
      });
      Object.defineProperty(exports, "unstable_useForkRef", {
        enumerable: true,
        get: function() {
          return _useForkRef.default;
        }
      });
      Object.defineProperty(exports, "unstable_useId", {
        enumerable: true,
        get: function() {
          return _useId.default;
        }
      });
      Object.defineProperty(exports, "unstable_useIsFocusVisible", {
        enumerable: true,
        get: function() {
          return _useIsFocusVisible.default;
        }
      });
      Object.defineProperty(exports, "usePreviousProps", {
        enumerable: true,
        get: function() {
          return _usePreviousProps.default;
        }
      });
      Object.defineProperty(exports, "visuallyHidden", {
        enumerable: true,
        get: function() {
          return _visuallyHidden.default;
        }
      });
      var _chainPropTypes = _interopRequireDefault(require_chainPropTypes2());
      var _deepmerge = _interopRequireWildcard(require_deepmerge());
      var _elementAcceptingRef = _interopRequireDefault(require_elementAcceptingRef());
      var _elementTypeAcceptingRef = _interopRequireDefault(require_elementTypeAcceptingRef());
      var _exactProp = _interopRequireDefault(require_exactProp2());
      var _formatMuiErrorMessage = _interopRequireDefault(require_formatMuiErrorMessage());
      var _getDisplayName = _interopRequireDefault(require_getDisplayName());
      var _HTMLElementType = _interopRequireDefault(require_HTMLElementType2());
      var _ponyfillGlobal = _interopRequireDefault(require_ponyfillGlobal2());
      var _refType = _interopRequireDefault(require_refType());
      var _capitalize = _interopRequireDefault(require_capitalize2());
      var _createChainedFunction = _interopRequireDefault(require_createChainedFunction());
      var _debounce = _interopRequireDefault(require_debounce2());
      var _deprecatedPropType = _interopRequireDefault(require_deprecatedPropType());
      var _isMuiElement = _interopRequireDefault(require_isMuiElement());
      var _ownerDocument = _interopRequireDefault(require_ownerDocument2());
      var _ownerWindow = _interopRequireDefault(require_ownerWindow2());
      var _requirePropFactory = _interopRequireDefault(require_requirePropFactory());
      var _setRef = _interopRequireDefault(require_setRef());
      var _useEnhancedEffect = _interopRequireDefault(require_useEnhancedEffect2());
      var _useId = _interopRequireDefault(require_useId2());
      var _unsupportedProp = _interopRequireDefault(require_unsupportedProp());
      var _useControlled = _interopRequireDefault(require_useControlled2());
      var _useEventCallback = _interopRequireDefault(require_useEventCallback2());
      var _useForkRef = _interopRequireDefault(require_useForkRef2());
      var _useIsFocusVisible = _interopRequireDefault(require_useIsFocusVisible());
      var _getScrollbarSize = _interopRequireDefault(require_getScrollbarSize());
      var _scrollLeft = require_scrollLeft();
      var _usePreviousProps = _interopRequireDefault(require_usePreviousProps());
      var _visuallyHidden = _interopRequireDefault(require_visuallyHidden());
      var _integerPropType = _interopRequireDefault(require_integerPropType());
      var _resolveProps = _interopRequireDefault(require_resolveProps());
      var _composeClasses = _interopRequireDefault(require_composeClasses2());
      var _generateUtilityClass = _interopRequireWildcard(require_generateUtilityClass2());
      Object.keys(_generateUtilityClass).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _generateUtilityClass[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _generateUtilityClass[key];
          }
        });
      });
      var _generateUtilityClasses = _interopRequireDefault(require_generateUtilityClasses2());
      var _ClassNameGenerator = _interopRequireDefault(require_ClassNameGenerator2());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/private-theming/node/useTheme/ThemeContext.js
  var require_ThemeContext = __commonJS({
    "node_modules/@mui/private-theming/node/useTheme/ThemeContext.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React264 = _interopRequireWildcard(require_react());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
      var ThemeContext2 = /* @__PURE__ */ React264.createContext(null);
      if (true) {
        ThemeContext2.displayName = "ThemeContext";
      }
      var _default = ThemeContext2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/private-theming/node/useTheme/useTheme.js
  var require_useTheme = __commonJS({
    "node_modules/@mui/private-theming/node/useTheme/useTheme.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useTheme7;
      var React264 = _interopRequireWildcard(require_react());
      var _ThemeContext = _interopRequireDefault(require_ThemeContext());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
      function useTheme7() {
        const theme = React264.useContext(_ThemeContext.default);
        if (true) {
          React264.useDebugValue(theme);
        }
        return theme;
      }
    }
  });

  // node_modules/@mui/private-theming/node/useTheme/index.js
  var require_useTheme2 = __commonJS({
    "node_modules/@mui/private-theming/node/useTheme/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useTheme.default;
        }
      });
      var _useTheme = _interopRequireDefault(require_useTheme());
    }
  });

  // node_modules/@mui/private-theming/node/ThemeProvider/nested.js
  var require_nested = __commonJS({
    "node_modules/@mui/private-theming/node/ThemeProvider/nested.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var hasSymbol = typeof Symbol === "function" && Symbol.for;
      var _default = hasSymbol ? Symbol.for("mui.nested") : "__THEME_NESTED__";
      exports.default = _default;
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.development.js
  var require_react_jsx_runtime_development = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var React264 = require_react();
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactSharedInternals = React264.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var assign2 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix3;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix3 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix3 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix3 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn2.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn2.displayName);
                          }
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype3 = Component.prototype;
            return !!(prototype3 && prototype3.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var hasOwnProperty3 = Object.prototype.hasOwnProperty;
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty3);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown;
          var specialPropRefWarningShown;
          var didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config2) {
            {
              if (hasOwnProperty3.call(config2, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.ref !== void 0;
          }
          function hasValidKey(config2) {
            {
              if (hasOwnProperty3.call(config2, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config2, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config2.key !== void 0;
          }
          function warnIfStringRefCannotBeAutoConverted(config2, self2) {
            {
              if (typeof config2.ref === "string" && ReactCurrentOwner.current && self2 && ReactCurrentOwner.current.stateNode !== self2) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', getComponentNameFromType(ReactCurrentOwner.current.type), config2.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          function defineKeyPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingKey = function() {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingKey.isReactWarning = true;
              Object.defineProperty(props, "key", {
                get: warnAboutAccessingKey,
                configurable: true
              });
            }
          }
          function defineRefPropWarningGetter(props, displayName) {
            {
              var warnAboutAccessingRef = function() {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              };
              warnAboutAccessingRef.isReactWarning = true;
              Object.defineProperty(props, "ref", {
                get: warnAboutAccessingRef,
                configurable: true
              });
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function jsxDEV(type, config2, maybeKey, source, self2) {
            {
              var propName;
              var props = {};
              var key = null;
              var ref = null;
              if (maybeKey !== void 0) {
                {
                  checkKeyStringCoercion(maybeKey);
                }
                key = "" + maybeKey;
              }
              if (hasValidKey(config2)) {
                {
                  checkKeyStringCoercion(config2.key);
                }
                key = "" + config2.key;
              }
              if (hasValidRef(config2)) {
                ref = config2.ref;
                warnIfStringRefCannotBeAutoConverted(config2, self2);
              }
              for (propName in config2) {
                if (hasOwnProperty3.call(config2, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config2[propName];
                }
              }
              if (type && type.defaultProps) {
                var defaultProps2 = type.defaultProps;
                for (propName in defaultProps2) {
                  if (props[propName] === void 0) {
                    props[propName] = defaultProps2[propName];
                  }
                }
              }
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
              return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function isValidElement20(object) {
            {
              return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
            }
          }
          function getDeclarationErrorAddendum() {
            {
              if (ReactCurrentOwner$1.current) {
                var name = getComponentNameFromType(ReactCurrentOwner$1.current.type);
                if (name) {
                  return "\n\nCheck the render method of `" + name + "`.";
                }
              }
              return "";
            }
          }
          function getSourceInfoErrorAddendum(source) {
            {
              if (source !== void 0) {
                var fileName = source.fileName.replace(/^.*[\\\/]/, "");
                var lineNumber = source.lineNumber;
                return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
              }
              return "";
            }
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            {
              var info = getDeclarationErrorAddendum();
              if (!info) {
                var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
                if (parentName) {
                  info = "\n\nCheck the top-level render call using <" + parentName + ">.";
                }
              }
              return info;
            }
          }
          function validateExplicitKey(element, parentType) {
            {
              if (!element._store || element._store.validated || element.key != null) {
                return;
              }
              element._store.validated = true;
              var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
              if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
                return;
              }
              ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
              var childOwner = "";
              if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
                childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
              }
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node2, parentType) {
            {
              if (typeof node2 !== "object") {
                return;
              }
              if (isArray2(node2)) {
                for (var i = 0; i < node2.length; i++) {
                  var child = node2[i];
                  if (isValidElement20(child)) {
                    validateExplicitKey(child, parentType);
                  }
                }
              } else if (isValidElement20(node2)) {
                if (node2._store) {
                  node2._store.validated = true;
                }
              } else if (node2) {
                var iteratorFn = getIteratorFn(node2);
                if (typeof iteratorFn === "function") {
                  if (iteratorFn !== node2.entries) {
                    var iterator = iteratorFn.call(node2);
                    var step;
                    while (!(step = iterator.next()).done) {
                      if (isValidElement20(step.value)) {
                        validateExplicitKey(step.value, parentType);
                      }
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function jsxWithValidation(type, props, key, isStaticChildren, source, self2) {
            {
              var validType = isValidElementType(type);
              if (!validType) {
                var info = "";
                if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                  info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                }
                var sourceInfo = getSourceInfoErrorAddendum(source);
                if (sourceInfo) {
                  info += sourceInfo;
                } else {
                  info += getDeclarationErrorAddendum();
                }
                var typeString;
                if (type === null) {
                  typeString = "null";
                } else if (isArray2(type)) {
                  typeString = "array";
                } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                  typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                  info = " Did you accidentally export a JSX literal instead of a component?";
                } else {
                  typeString = typeof type;
                }
                error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
              var element = jsxDEV(type, props, key, source, self2);
              if (element == null) {
                return element;
              }
              if (validType) {
                var children = props.children;
                if (children !== void 0) {
                  if (isStaticChildren) {
                    if (isArray2(children)) {
                      for (var i = 0; i < children.length; i++) {
                        validateChildKeys(children[i], type);
                      }
                      if (Object.freeze) {
                        Object.freeze(children);
                      }
                    } else {
                      error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
                    }
                  } else {
                    validateChildKeys(children, type);
                  }
                }
              }
              if (type === REACT_FRAGMENT_TYPE) {
                validateFragmentProps(element);
              } else {
                validatePropTypes(element);
              }
              return element;
            }
          }
          function jsxWithValidationStatic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, true);
            }
          }
          function jsxWithValidationDynamic(type, props, key) {
            {
              return jsxWithValidation(type, props, key, false);
            }
          }
          var jsx3 = jsxWithValidationDynamic;
          var jsxs = jsxWithValidationStatic;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.jsx = jsx3;
          exports.jsxs = jsxs;
        })();
      }
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_jsx_runtime_development();
      }
    }
  });

  // node_modules/@mui/private-theming/node/ThemeProvider/ThemeProvider.js
  var require_ThemeProvider = __commonJS({
    "node_modules/@mui/private-theming/node/ThemeProvider/ThemeProvider.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var React264 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _ThemeContext = _interopRequireDefault(require_ThemeContext());
      var _useTheme = _interopRequireDefault(require_useTheme2());
      var _nested = _interopRequireDefault(require_nested());
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
      function mergeOuterLocalTheme(outerTheme, localTheme) {
        if (typeof localTheme === "function") {
          const mergedTheme = localTheme(outerTheme);
          if (true) {
            if (!mergedTheme) {
              console.error(["MUI: You should return an object from your theme function, i.e.", "<ThemeProvider theme={() => ({})} />"].join("\n"));
            }
          }
          return mergedTheme;
        }
        return (0, _extends2.default)({}, outerTheme, localTheme);
      }
      function ThemeProvider4(props) {
        const {
          children,
          theme: localTheme
        } = props;
        const outerTheme = (0, _useTheme.default)();
        if (true) {
          if (outerTheme === null && typeof localTheme === "function") {
            console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join("\n"));
          }
        }
        const theme = React264.useMemo(() => {
          const output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);
          if (output != null) {
            output[_nested.default] = outerTheme !== null;
          }
          return output;
        }, [localTheme, outerTheme]);
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_ThemeContext.default.Provider, {
          value: theme,
          children
        });
      }
      true ? ThemeProvider4.propTypes = {
        /**
         * Your component tree.
         */
        children: _propTypes.default.node,
        /**
         * A theme object. You can provide a function to extend the outer theme.
         */
        theme: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func]).isRequired
      } : void 0;
      if (true) {
        true ? ThemeProvider4.propTypes = (0, _utils.exactProp)(ThemeProvider4.propTypes) : void 0;
      }
      var _default = ThemeProvider4;
      exports.default = _default;
    }
  });

  // node_modules/@mui/private-theming/node/ThemeProvider/index.js
  var require_ThemeProvider2 = __commonJS({
    "node_modules/@mui/private-theming/node/ThemeProvider/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _ThemeProvider.default;
        }
      });
      Object.defineProperty(exports, "unstable_nested", {
        enumerable: true,
        get: function() {
          return _nested.default;
        }
      });
      var _ThemeProvider = _interopRequireDefault(require_ThemeProvider());
      var _nested = _interopRequireDefault(require_nested());
    }
  });

  // node_modules/@babel/runtime/helpers/esm/extends.js
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  var init_extends = __esm({
    "node_modules/@babel/runtime/helpers/esm/extends.js"() {
    }
  });

  // node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
  var require_hoist_non_react_statics_cjs = __commonJS({
    "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module) {
      "use strict";
      var reactIs = require_react_is();
      var REACT_STATICS = {
        childContextTypes: true,
        contextType: true,
        contextTypes: true,
        defaultProps: true,
        displayName: true,
        getDefaultProps: true,
        getDerivedStateFromError: true,
        getDerivedStateFromProps: true,
        mixins: true,
        propTypes: true,
        type: true
      };
      var KNOWN_STATICS = {
        name: true,
        length: true,
        prototype: true,
        caller: true,
        callee: true,
        arguments: true,
        arity: true
      };
      var FORWARD_REF_STATICS = {
        "$$typeof": true,
        render: true,
        defaultProps: true,
        displayName: true,
        propTypes: true
      };
      var MEMO_STATICS = {
        "$$typeof": true,
        compare: true,
        defaultProps: true,
        displayName: true,
        propTypes: true,
        type: true
      };
      var TYPE_STATICS = {};
      TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
      TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
      function getStatics(component) {
        if (reactIs.isMemo(component)) {
          return MEMO_STATICS;
        }
        return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
      }
      var defineProperty = Object.defineProperty;
      var getOwnPropertyNames = Object.getOwnPropertyNames;
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
      var getPrototypeOf2 = Object.getPrototypeOf;
      var objectPrototype = Object.prototype;
      function hoistNonReactStatics2(targetComponent, sourceComponent, blacklist) {
        if (typeof sourceComponent !== "string") {
          if (objectPrototype) {
            var inheritedComponent = getPrototypeOf2(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
              hoistNonReactStatics2(targetComponent, inheritedComponent, blacklist);
            }
          }
          var keys = getOwnPropertyNames(sourceComponent);
          if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
          }
          var targetStatics = getStatics(targetComponent);
          var sourceStatics = getStatics(sourceComponent);
          for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
              var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
              try {
                defineProperty(targetComponent, key, descriptor);
              } catch (e) {
              }
            }
          }
        }
        return targetComponent;
      }
      module.exports = hoistNonReactStatics2;
    }
  });

  // node_modules/@emotion/memoize/dist/emotion-memoize.esm.js
  function memoize3(fn2) {
    var cache3 = /* @__PURE__ */ Object.create(null);
    return function(arg) {
      if (cache3[arg] === void 0)
        cache3[arg] = fn2(arg);
      return cache3[arg];
    };
  }
  var init_emotion_memoize_esm = __esm({
    "node_modules/@emotion/memoize/dist/emotion-memoize.esm.js"() {
    }
  });

  // node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js
  var reactPropsRegex, isPropValid;
  var init_emotion_is_prop_valid_esm = __esm({
    "node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js"() {
      init_emotion_memoize_esm();
      reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
      isPropValid = /* @__PURE__ */ memoize3(
        function(prop) {
          return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
        }
        /* Z+1 */
      );
    }
  });

  // node_modules/@emotion/sheet/dist/emotion-sheet.browser.esm.js
  function sheetForTag(tag) {
    if (tag.sheet) {
      return tag.sheet;
    }
    for (var i = 0; i < document.styleSheets.length; i++) {
      if (document.styleSheets[i].ownerNode === tag) {
        return document.styleSheets[i];
      }
    }
  }
  function createStyleElement(options) {
    var tag = document.createElement("style");
    tag.setAttribute("data-emotion", options.key);
    if (options.nonce !== void 0) {
      tag.setAttribute("nonce", options.nonce);
    }
    tag.appendChild(document.createTextNode(""));
    tag.setAttribute("data-s", "");
    return tag;
  }
  var StyleSheet2;
  var init_emotion_sheet_browser_esm = __esm({
    "node_modules/@emotion/sheet/dist/emotion-sheet.browser.esm.js"() {
      StyleSheet2 = /* @__PURE__ */ function() {
        function StyleSheet3(options) {
          var _this = this;
          this._insertTag = function(tag) {
            var before;
            if (_this.tags.length === 0) {
              if (_this.insertionPoint) {
                before = _this.insertionPoint.nextSibling;
              } else if (_this.prepend) {
                before = _this.container.firstChild;
              } else {
                before = _this.before;
              }
            } else {
              before = _this.tags[_this.tags.length - 1].nextSibling;
            }
            _this.container.insertBefore(tag, before);
            _this.tags.push(tag);
          };
          this.isSpeedy = options.speedy === void 0 ? false : options.speedy;
          this.tags = [];
          this.ctr = 0;
          this.nonce = options.nonce;
          this.key = options.key;
          this.container = options.container;
          this.prepend = options.prepend;
          this.insertionPoint = options.insertionPoint;
          this.before = null;
        }
        var _proto = StyleSheet3.prototype;
        _proto.hydrate = function hydrate(nodes) {
          nodes.forEach(this._insertTag);
        };
        _proto.insert = function insert(rule) {
          if (this.ctr % (this.isSpeedy ? 65e3 : 1) === 0) {
            this._insertTag(createStyleElement(this));
          }
          var tag = this.tags[this.tags.length - 1];
          if (true) {
            var isImportRule3 = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;
            if (isImportRule3 && this._alreadyInsertedOrderInsensitiveRule) {
              console.error("You're attempting to insert the following rule:\n" + rule + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.");
            }
            this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule3;
          }
          if (this.isSpeedy) {
            var sheet = sheetForTag(tag);
            try {
              sheet.insertRule(rule, sheet.cssRules.length);
            } catch (e) {
              if (!/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear|-ms-expand|-ms-reveal){/.test(rule)) {
                console.error('There was a problem inserting the following rule: "' + rule + '"', e);
              }
            }
          } else {
            tag.appendChild(document.createTextNode(rule));
          }
          this.ctr++;
        };
        _proto.flush = function flush() {
          this.tags.forEach(function(tag) {
            return tag.parentNode && tag.parentNode.removeChild(tag);
          });
          this.tags = [];
          this.ctr = 0;
          if (true) {
            this._alreadyInsertedOrderInsensitiveRule = false;
          }
        };
        return StyleSheet3;
      }();
    }
  });

  // node_modules/stylis/src/Enum.js
  var MS, MOZ, WEBKIT, COMMENT, RULESET, DECLARATION, IMPORT, KEYFRAMES, LAYER;
  var init_Enum = __esm({
    "node_modules/stylis/src/Enum.js"() {
      MS = "-ms-";
      MOZ = "-moz-";
      WEBKIT = "-webkit-";
      COMMENT = "comm";
      RULESET = "rule";
      DECLARATION = "decl";
      IMPORT = "@import";
      KEYFRAMES = "@keyframes";
      LAYER = "@layer";
    }
  });

  // node_modules/stylis/src/Utility.js
  function hash(value, length2) {
    return charat(value, 0) ^ 45 ? (((length2 << 2 ^ charat(value, 0)) << 2 ^ charat(value, 1)) << 2 ^ charat(value, 2)) << 2 ^ charat(value, 3) : 0;
  }
  function trim(value) {
    return value.trim();
  }
  function match(value, pattern) {
    return (value = pattern.exec(value)) ? value[0] : value;
  }
  function replace(value, pattern, replacement) {
    return value.replace(pattern, replacement);
  }
  function indexof(value, search) {
    return value.indexOf(search);
  }
  function charat(value, index3) {
    return value.charCodeAt(index3) | 0;
  }
  function substr(value, begin, end2) {
    return value.slice(begin, end2);
  }
  function strlen(value) {
    return value.length;
  }
  function sizeof(value) {
    return value.length;
  }
  function append(value, array) {
    return array.push(value), value;
  }
  function combine(array, callback) {
    return array.map(callback).join("");
  }
  var abs, from, assign;
  var init_Utility = __esm({
    "node_modules/stylis/src/Utility.js"() {
      abs = Math.abs;
      from = String.fromCharCode;
      assign = Object.assign;
    }
  });

  // node_modules/stylis/src/Tokenizer.js
  function node(value, root, parent, type, props, children, length2) {
    return { value, root, parent, type, props, children, line, column, length: length2, return: "" };
  }
  function copy(root, props) {
    return assign(node("", null, null, "", null, null, 0), root, { length: -root.length }, props);
  }
  function char() {
    return character;
  }
  function prev() {
    character = position > 0 ? charat(characters, --position) : 0;
    if (column--, character === 10)
      column = 1, line--;
    return character;
  }
  function next() {
    character = position < length ? charat(characters, position++) : 0;
    if (column++, character === 10)
      column = 1, line++;
    return character;
  }
  function peek() {
    return charat(characters, position);
  }
  function caret() {
    return position;
  }
  function slice(begin, end2) {
    return substr(characters, begin, end2);
  }
  function token(type) {
    switch (type) {
      case 0:
      case 9:
      case 10:
      case 13:
      case 32:
        return 5;
      case 33:
      case 43:
      case 44:
      case 47:
      case 62:
      case 64:
      case 126:
      case 59:
      case 123:
      case 125:
        return 4;
      case 58:
        return 3;
      case 34:
      case 39:
      case 40:
      case 91:
        return 2;
      case 41:
      case 93:
        return 1;
    }
    return 0;
  }
  function alloc(value) {
    return line = column = 1, length = strlen(characters = value), position = 0, [];
  }
  function dealloc(value) {
    return characters = "", value;
  }
  function delimit(type) {
    return trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)));
  }
  function whitespace(type) {
    while (character = peek())
      if (character < 33)
        next();
      else
        break;
    return token(type) > 2 || token(character) > 3 ? "" : " ";
  }
  function escaping(index3, count) {
    while (--count && next())
      if (character < 48 || character > 102 || character > 57 && character < 65 || character > 70 && character < 97)
        break;
    return slice(index3, caret() + (count < 6 && peek() == 32 && next() == 32));
  }
  function delimiter(type) {
    while (next())
      switch (character) {
        case type:
          return position;
        case 34:
        case 39:
          if (type !== 34 && type !== 39)
            delimiter(character);
          break;
        case 40:
          if (type === 41)
            delimiter(type);
          break;
        case 92:
          next();
          break;
      }
    return position;
  }
  function commenter(type, index3) {
    while (next())
      if (type + character === 47 + 10)
        break;
      else if (type + character === 42 + 42 && peek() === 47)
        break;
    return "/*" + slice(index3, position - 1) + "*" + from(type === 47 ? type : next());
  }
  function identifier(index3) {
    while (!token(peek()))
      next();
    return slice(index3, position);
  }
  var line, column, length, position, character, characters;
  var init_Tokenizer = __esm({
    "node_modules/stylis/src/Tokenizer.js"() {
      init_Utility();
      line = 1;
      column = 1;
      length = 0;
      position = 0;
      character = 0;
      characters = "";
    }
  });

  // node_modules/stylis/src/Parser.js
  function compile(value) {
    return dealloc(parse("", null, null, null, [""], value = alloc(value), 0, [0], value));
  }
  function parse(value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {
    var index3 = 0;
    var offset3 = 0;
    var length2 = pseudo;
    var atrule = 0;
    var property = 0;
    var previous = 0;
    var variable = 1;
    var scanning = 1;
    var ampersand = 1;
    var character2 = 0;
    var type = "";
    var props = rules;
    var children = rulesets;
    var reference2 = rule;
    var characters2 = type;
    while (scanning)
      switch (previous = character2, character2 = next()) {
        case 40:
          if (previous != 108 && charat(characters2, length2 - 1) == 58) {
            if (indexof(characters2 += replace(delimit(character2), "&", "&\f"), "&\f") != -1)
              ampersand = -1;
            break;
          }
        case 34:
        case 39:
        case 91:
          characters2 += delimit(character2);
          break;
        case 9:
        case 10:
        case 13:
        case 32:
          characters2 += whitespace(previous);
          break;
        case 92:
          characters2 += escaping(caret() - 1, 7);
          continue;
        case 47:
          switch (peek()) {
            case 42:
            case 47:
              append(comment(commenter(next(), caret()), root, parent), declarations);
              break;
            default:
              characters2 += "/";
          }
          break;
        case 123 * variable:
          points[index3++] = strlen(characters2) * ampersand;
        case 125 * variable:
        case 59:
        case 0:
          switch (character2) {
            case 0:
            case 125:
              scanning = 0;
            case 59 + offset3:
              if (ampersand == -1)
                characters2 = replace(characters2, /\f/g, "");
              if (property > 0 && strlen(characters2) - length2)
                append(property > 32 ? declaration(characters2 + ";", rule, parent, length2 - 1) : declaration(replace(characters2, " ", "") + ";", rule, parent, length2 - 2), declarations);
              break;
            case 59:
              characters2 += ";";
            default:
              append(reference2 = ruleset(characters2, root, parent, index3, offset3, rules, points, type, props = [], children = [], length2), rulesets);
              if (character2 === 123)
                if (offset3 === 0)
                  parse(characters2, root, reference2, reference2, props, rulesets, length2, points, children);
                else
                  switch (atrule === 99 && charat(characters2, 3) === 110 ? 100 : atrule) {
                    case 100:
                    case 108:
                    case 109:
                    case 115:
                      parse(value, reference2, reference2, rule && append(ruleset(value, reference2, reference2, 0, 0, rules, points, type, rules, props = [], length2), children), rules, children, length2, points, rule ? props : children);
                      break;
                    default:
                      parse(characters2, reference2, reference2, reference2, [""], children, 0, points, children);
                  }
          }
          index3 = offset3 = property = 0, variable = ampersand = 1, type = characters2 = "", length2 = pseudo;
          break;
        case 58:
          length2 = 1 + strlen(characters2), property = previous;
        default:
          if (variable < 1) {
            if (character2 == 123)
              --variable;
            else if (character2 == 125 && variable++ == 0 && prev() == 125)
              continue;
          }
          switch (characters2 += from(character2), character2 * variable) {
            case 38:
              ampersand = offset3 > 0 ? 1 : (characters2 += "\f", -1);
              break;
            case 44:
              points[index3++] = (strlen(characters2) - 1) * ampersand, ampersand = 1;
              break;
            case 64:
              if (peek() === 45)
                characters2 += delimit(next());
              atrule = peek(), offset3 = length2 = strlen(type = characters2 += identifier(caret())), character2++;
              break;
            case 45:
              if (previous === 45 && strlen(characters2) == 2)
                variable = 0;
          }
      }
    return rulesets;
  }
  function ruleset(value, root, parent, index3, offset3, rules, points, type, props, children, length2) {
    var post = offset3 - 1;
    var rule = offset3 === 0 ? rules : [""];
    var size2 = sizeof(rule);
    for (var i = 0, j = 0, k = 0; i < index3; ++i)
      for (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size2; ++x)
        if (z = trim(j > 0 ? rule[x] + " " + y : replace(y, /&\f/g, rule[x])))
          props[k++] = z;
    return node(value, root, parent, offset3 === 0 ? RULESET : type, props, children, length2);
  }
  function comment(value, root, parent) {
    return node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0);
  }
  function declaration(value, root, parent, length2) {
    return node(value, root, parent, DECLARATION, substr(value, 0, length2), substr(value, length2 + 1, -1), length2);
  }
  var init_Parser = __esm({
    "node_modules/stylis/src/Parser.js"() {
      init_Enum();
      init_Utility();
      init_Tokenizer();
    }
  });

  // node_modules/stylis/src/Prefixer.js
  var init_Prefixer = __esm({
    "node_modules/stylis/src/Prefixer.js"() {
    }
  });

  // node_modules/stylis/src/Serializer.js
  function serialize(children, callback) {
    var output = "";
    var length2 = sizeof(children);
    for (var i = 0; i < length2; i++)
      output += callback(children[i], i, children, callback) || "";
    return output;
  }
  function stringify(element, index3, children, callback) {
    switch (element.type) {
      case LAYER:
        if (element.children.length)
          break;
      case IMPORT:
      case DECLARATION:
        return element.return = element.return || element.value;
      case COMMENT:
        return "";
      case KEYFRAMES:
        return element.return = element.value + "{" + serialize(element.children, callback) + "}";
      case RULESET:
        element.value = element.props.join(",");
    }
    return strlen(children = serialize(element.children, callback)) ? element.return = element.value + "{" + children + "}" : "";
  }
  var init_Serializer = __esm({
    "node_modules/stylis/src/Serializer.js"() {
      init_Enum();
      init_Utility();
    }
  });

  // node_modules/stylis/src/Middleware.js
  function middleware(collection) {
    var length2 = sizeof(collection);
    return function(element, index3, children, callback) {
      var output = "";
      for (var i = 0; i < length2; i++)
        output += collection[i](element, index3, children, callback) || "";
      return output;
    };
  }
  var init_Middleware = __esm({
    "node_modules/stylis/src/Middleware.js"() {
      init_Utility();
    }
  });

  // node_modules/stylis/index.js
  var init_stylis = __esm({
    "node_modules/stylis/index.js"() {
      init_Enum();
      init_Utility();
      init_Parser();
      init_Prefixer();
      init_Tokenizer();
      init_Serializer();
      init_Middleware();
    }
  });

  // node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.esm.js
  var weakMemoize;
  var init_emotion_weak_memoize_esm = __esm({
    "node_modules/@emotion/weak-memoize/dist/emotion-weak-memoize.esm.js"() {
      weakMemoize = function weakMemoize2(func) {
        var cache3 = /* @__PURE__ */ new WeakMap();
        return function(arg) {
          if (cache3.has(arg)) {
            return cache3.get(arg);
          }
          var ret = func(arg);
          cache3.set(arg, ret);
          return ret;
        };
      };
    }
  });

  // node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js
  var emotion_cache_browser_esm_exports = {};
  __export(emotion_cache_browser_esm_exports, {
    default: () => createCache
  });
  function prefix2(value, length2) {
    switch (hash(value, length2)) {
      case 5103:
        return WEBKIT + "print-" + value + value;
      case 5737:
      case 4201:
      case 3177:
      case 3433:
      case 1641:
      case 4457:
      case 2921:
      case 5572:
      case 6356:
      case 5844:
      case 3191:
      case 6645:
      case 3005:
      case 6391:
      case 5879:
      case 5623:
      case 6135:
      case 4599:
      case 4855:
      case 4215:
      case 6389:
      case 5109:
      case 5365:
      case 5621:
      case 3829:
        return WEBKIT + value + value;
      case 5349:
      case 4246:
      case 4810:
      case 6968:
      case 2756:
        return WEBKIT + value + MOZ + value + MS + value + value;
      case 6828:
      case 4268:
        return WEBKIT + value + MS + value + value;
      case 6165:
        return WEBKIT + value + MS + "flex-" + value + value;
      case 5187:
        return WEBKIT + value + replace(value, /(\w+).+(:[^]+)/, WEBKIT + "box-$1$2" + MS + "flex-$1$2") + value;
      case 5443:
        return WEBKIT + value + MS + "flex-item-" + replace(value, /flex-|-self/, "") + value;
      case 4675:
        return WEBKIT + value + MS + "flex-line-pack" + replace(value, /align-content|flex-|-self/, "") + value;
      case 5548:
        return WEBKIT + value + MS + replace(value, "shrink", "negative") + value;
      case 5292:
        return WEBKIT + value + MS + replace(value, "basis", "preferred-size") + value;
      case 6060:
        return WEBKIT + "box-" + replace(value, "-grow", "") + WEBKIT + value + MS + replace(value, "grow", "positive") + value;
      case 4554:
        return WEBKIT + replace(value, /([^-])(transform)/g, "$1" + WEBKIT + "$2") + value;
      case 6187:
        return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + "$1"), /(image-set)/, WEBKIT + "$1"), value, "") + value;
      case 5495:
      case 3959:
        return replace(value, /(image-set\([^]*)/, WEBKIT + "$1$`$1");
      case 4968:
        return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + "box-pack:$3" + MS + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + WEBKIT + value + value;
      case 4095:
      case 3583:
      case 4068:
      case 2532:
        return replace(value, /(.+)-inline(.+)/, WEBKIT + "$1$2") + value;
      case 8116:
      case 7059:
      case 5753:
      case 5535:
      case 5445:
      case 5701:
      case 4933:
      case 4677:
      case 5533:
      case 5789:
      case 5021:
      case 4765:
        if (strlen(value) - 1 - length2 > 6)
          switch (charat(value, length2 + 1)) {
            case 109:
              if (charat(value, length2 + 4) !== 45)
                break;
            case 102:
              return replace(value, /(.+:)(.+)-([^]+)/, "$1" + WEBKIT + "$2-$3$1" + MOZ + (charat(value, length2 + 3) == 108 ? "$3" : "$2-$3")) + value;
            case 115:
              return ~indexof(value, "stretch") ? prefix2(replace(value, "stretch", "fill-available"), length2) + value : value;
          }
        break;
      case 4949:
        if (charat(value, length2 + 1) !== 115)
          break;
      case 6444:
        switch (charat(value, strlen(value) - 3 - (~indexof(value, "!important") && 10))) {
          case 107:
            return replace(value, ":", ":" + WEBKIT) + value;
          case 101:
            return replace(value, /(.+:)([^;!]+)(;|!.+)?/, "$1" + WEBKIT + (charat(value, 14) === 45 ? "inline-" : "") + "box$3$1" + WEBKIT + "$2$3$1" + MS + "$2box$3") + value;
        }
        break;
      case 5936:
        switch (charat(value, length2 + 11)) {
          case 114:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb") + value;
          case 108:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "tb-rl") + value;
          case 45:
            return WEBKIT + value + MS + replace(value, /[svh]\w+-[tblr]{2}/, "lr") + value;
        }
        return WEBKIT + value + MS + value + value;
    }
    return value;
  }
  var identifierWithPointTracking, toRules, getRules, fixedElements, compat, removeLabel, ignoreFlag, isIgnoringComment, createUnsafeSelectorsAlarm, isImportRule, isPrependedWithRegularRules, nullifyElement, incorrectImportAlarm, prefixer, defaultStylisPlugins, createCache;
  var init_emotion_cache_browser_esm = __esm({
    "node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js"() {
      init_emotion_sheet_browser_esm();
      init_stylis();
      init_emotion_weak_memoize_esm();
      init_emotion_memoize_esm();
      identifierWithPointTracking = function identifierWithPointTracking2(begin, points, index3) {
        var previous = 0;
        var character2 = 0;
        while (true) {
          previous = character2;
          character2 = peek();
          if (previous === 38 && character2 === 12) {
            points[index3] = 1;
          }
          if (token(character2)) {
            break;
          }
          next();
        }
        return slice(begin, position);
      };
      toRules = function toRules2(parsed, points) {
        var index3 = -1;
        var character2 = 44;
        do {
          switch (token(character2)) {
            case 0:
              if (character2 === 38 && peek() === 12) {
                points[index3] = 1;
              }
              parsed[index3] += identifierWithPointTracking(position - 1, points, index3);
              break;
            case 2:
              parsed[index3] += delimit(character2);
              break;
            case 4:
              if (character2 === 44) {
                parsed[++index3] = peek() === 58 ? "&\f" : "";
                points[index3] = parsed[index3].length;
                break;
              }
            default:
              parsed[index3] += from(character2);
          }
        } while (character2 = next());
        return parsed;
      };
      getRules = function getRules2(value, points) {
        return dealloc(toRules(alloc(value), points));
      };
      fixedElements = /* @__PURE__ */ new WeakMap();
      compat = function compat2(element) {
        if (element.type !== "rule" || !element.parent || // positive .length indicates that this rule contains pseudo
        // negative .length indicates that this rule has been already prefixed
        element.length < 1) {
          return;
        }
        var value = element.value, parent = element.parent;
        var isImplicitRule = element.column === parent.column && element.line === parent.line;
        while (parent.type !== "rule") {
          parent = parent.parent;
          if (!parent)
            return;
        }
        if (element.props.length === 1 && value.charCodeAt(0) !== 58 && !fixedElements.get(parent)) {
          return;
        }
        if (isImplicitRule) {
          return;
        }
        fixedElements.set(element, true);
        var points = [];
        var rules = getRules(value, points);
        var parentRules = parent.props;
        for (var i = 0, k = 0; i < rules.length; i++) {
          for (var j = 0; j < parentRules.length; j++, k++) {
            element.props[k] = points[i] ? rules[i].replace(/&\f/g, parentRules[j]) : parentRules[j] + " " + rules[i];
          }
        }
      };
      removeLabel = function removeLabel2(element) {
        if (element.type === "decl") {
          var value = element.value;
          if (
            // charcode for l
            value.charCodeAt(0) === 108 && // charcode for b
            value.charCodeAt(2) === 98
          ) {
            element["return"] = "";
            element.value = "";
          }
        }
      };
      ignoreFlag = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
      isIgnoringComment = function isIgnoringComment2(element) {
        return element.type === "comm" && element.children.indexOf(ignoreFlag) > -1;
      };
      createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm2(cache3) {
        return function(element, index3, children) {
          if (element.type !== "rule" || cache3.compat)
            return;
          var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);
          if (unsafePseudoClasses) {
            var isNested = !!element.parent;
            var commentContainer = isNested ? element.parent.children : (
              // global rule at the root level
              children
            );
            for (var i = commentContainer.length - 1; i >= 0; i--) {
              var node2 = commentContainer[i];
              if (node2.line < element.line) {
                break;
              }
              if (node2.column < element.column) {
                if (isIgnoringComment(node2)) {
                  return;
                }
                break;
              }
            }
            unsafePseudoClasses.forEach(function(unsafePseudoClass) {
              console.error('The pseudo class "' + unsafePseudoClass + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + unsafePseudoClass.split("-child")[0] + '-of-type".');
            });
          }
        };
      };
      isImportRule = function isImportRule2(element) {
        return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;
      };
      isPrependedWithRegularRules = function isPrependedWithRegularRules2(index3, children) {
        for (var i = index3 - 1; i >= 0; i--) {
          if (!isImportRule(children[i])) {
            return true;
          }
        }
        return false;
      };
      nullifyElement = function nullifyElement2(element) {
        element.type = "";
        element.value = "";
        element["return"] = "";
        element.children = "";
        element.props = "";
      };
      incorrectImportAlarm = function incorrectImportAlarm2(element, index3, children) {
        if (!isImportRule(element)) {
          return;
        }
        if (element.parent) {
          console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.");
          nullifyElement(element);
        } else if (isPrependedWithRegularRules(index3, children)) {
          console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.");
          nullifyElement(element);
        }
      };
      prefixer = function prefixer2(element, index3, children, callback) {
        if (element.length > -1) {
          if (!element["return"])
            switch (element.type) {
              case DECLARATION:
                element["return"] = prefix2(element.value, element.length);
                break;
              case KEYFRAMES:
                return serialize([copy(element, {
                  value: replace(element.value, "@", "@" + WEBKIT)
                })], callback);
              case RULESET:
                if (element.length)
                  return combine(element.props, function(value) {
                    switch (match(value, /(::plac\w+|:read-\w+)/)) {
                      case ":read-only":
                      case ":read-write":
                        return serialize([copy(element, {
                          props: [replace(value, /:(read-\w+)/, ":" + MOZ + "$1")]
                        })], callback);
                      case "::placeholder":
                        return serialize([copy(element, {
                          props: [replace(value, /:(plac\w+)/, ":" + WEBKIT + "input-$1")]
                        }), copy(element, {
                          props: [replace(value, /:(plac\w+)/, ":" + MOZ + "$1")]
                        }), copy(element, {
                          props: [replace(value, /:(plac\w+)/, MS + "input-$1")]
                        })], callback);
                    }
                    return "";
                  });
            }
        }
      };
      defaultStylisPlugins = [prefixer];
      createCache = function createCache2(options) {
        var key = options.key;
        if (!key) {
          throw new Error("You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\nIf multiple caches share the same key they might \"fight\" for each other's style elements.");
        }
        if (key === "css") {
          var ssrStyles = document.querySelectorAll("style[data-emotion]:not([data-s])");
          Array.prototype.forEach.call(ssrStyles, function(node2) {
            var dataEmotionAttribute = node2.getAttribute("data-emotion");
            if (dataEmotionAttribute.indexOf(" ") === -1) {
              return;
            }
            document.head.appendChild(node2);
            node2.setAttribute("data-s", "");
          });
        }
        var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;
        if (true) {
          if (/[^a-z-]/.test(key)) {
            throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + key + '" was passed');
          }
        }
        var inserted = {};
        var container;
        var nodesToHydrate = [];
        {
          container = options.container || document.head;
          Array.prototype.forEach.call(
            // this means we will ignore elements which don't have a space in them which
            // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
            document.querySelectorAll('style[data-emotion^="' + key + ' "]'),
            function(node2) {
              var attrib = node2.getAttribute("data-emotion").split(" ");
              for (var i = 1; i < attrib.length; i++) {
                inserted[attrib[i]] = true;
              }
              nodesToHydrate.push(node2);
            }
          );
        }
        var _insert;
        var omnipresentPlugins = [compat, removeLabel];
        if (true) {
          omnipresentPlugins.push(createUnsafeSelectorsAlarm({
            get compat() {
              return cache3.compat;
            }
          }), incorrectImportAlarm);
        }
        {
          var currentSheet;
          var finalizingPlugins = [stringify, true ? function(element) {
            if (!element.root) {
              if (element["return"]) {
                currentSheet.insert(element["return"]);
              } else if (element.value && element.type !== COMMENT) {
                currentSheet.insert(element.value + "{}");
              }
            }
          } : rulesheet(function(rule) {
            currentSheet.insert(rule);
          })];
          var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));
          var stylis = function stylis2(styles7) {
            return serialize(compile(styles7), serializer);
          };
          _insert = function insert(selector, serialized, sheet, shouldCache) {
            currentSheet = sheet;
            if (serialized.map !== void 0) {
              currentSheet = {
                insert: function insert2(rule) {
                  sheet.insert(rule + serialized.map);
                }
              };
            }
            stylis(selector ? selector + "{" + serialized.styles + "}" : serialized.styles);
            if (shouldCache) {
              cache3.inserted[serialized.name] = true;
            }
          };
        }
        var cache3 = {
          key,
          sheet: new StyleSheet2({
            key,
            container,
            nonce: options.nonce,
            speedy: options.speedy,
            prepend: options.prepend,
            insertionPoint: options.insertionPoint
          }),
          nonce: options.nonce,
          inserted,
          registered: {},
          insert: _insert
        };
        cache3.sheet.hydrate(nodesToHydrate);
        return cache3;
      };
    }
  });

  // node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js
  var import_hoist_non_react_statics, hoistNonReactStatics;
  var init_emotion_react_isolated_hnrs_browser_esm = __esm({
    "node_modules/@emotion/react/_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js"() {
      import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
      hoistNonReactStatics = function(targetComponent, sourceComponent) {
        return (0, import_hoist_non_react_statics.default)(targetComponent, sourceComponent);
      };
    }
  });

  // node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js
  function getRegisteredStyles(registered, registeredStyles, classNames) {
    var rawClassName = "";
    classNames.split(" ").forEach(function(className) {
      if (registered[className] !== void 0) {
        registeredStyles.push(registered[className] + ";");
      } else {
        rawClassName += className + " ";
      }
    });
    return rawClassName;
  }
  var isBrowser2, registerStyles, insertStyles;
  var init_emotion_utils_browser_esm = __esm({
    "node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js"() {
      isBrowser2 = true;
      registerStyles = function registerStyles2(cache3, serialized, isStringTag) {
        var className = cache3.key + "-" + serialized.name;
        if (
          // we only need to add the styles to the registered cache if the
          // class name could be used further down
          // the tree but if it's a string tag, we know it won't
          // so we don't have to add it to registered cache.
          // this improves memory usage since we can avoid storing the whole style string
          (isStringTag === false || // we need to always store it if we're in compat mode and
          // in node since emotion-server relies on whether a style is in
          // the registered cache to know whether a style is global or not
          // also, note that this check will be dead code eliminated in the browser
          isBrowser2 === false) && cache3.registered[className] === void 0
        ) {
          cache3.registered[className] = serialized.styles;
        }
      };
      insertStyles = function insertStyles2(cache3, serialized, isStringTag) {
        registerStyles(cache3, serialized, isStringTag);
        var className = cache3.key + "-" + serialized.name;
        if (cache3.inserted[serialized.name] === void 0) {
          var current = serialized;
          do {
            cache3.insert(serialized === current ? "." + className : "", current, cache3.sheet, true);
            current = current.next;
          } while (current !== void 0);
        }
      };
    }
  });

  // node_modules/@emotion/hash/dist/emotion-hash.esm.js
  function murmur2(str) {
    var h = 0;
    var k, i = 0, len = str.length;
    for (; len >= 4; ++i, len -= 4) {
      k = str.charCodeAt(i) & 255 | (str.charCodeAt(++i) & 255) << 8 | (str.charCodeAt(++i) & 255) << 16 | (str.charCodeAt(++i) & 255) << 24;
      k = /* Math.imul(k, m): */
      (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16);
      k ^= /* k >>> r: */
      k >>> 24;
      h = /* Math.imul(k, m): */
      (k & 65535) * 1540483477 + ((k >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
      (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    }
    switch (len) {
      case 3:
        h ^= (str.charCodeAt(i + 2) & 255) << 16;
      case 2:
        h ^= (str.charCodeAt(i + 1) & 255) << 8;
      case 1:
        h ^= str.charCodeAt(i) & 255;
        h = /* Math.imul(h, m): */
        (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    }
    h ^= h >>> 13;
    h = /* Math.imul(h, m): */
    (h & 65535) * 1540483477 + ((h >>> 16) * 59797 << 16);
    return ((h ^ h >>> 15) >>> 0).toString(36);
  }
  var init_emotion_hash_esm = __esm({
    "node_modules/@emotion/hash/dist/emotion-hash.esm.js"() {
    }
  });

  // node_modules/@emotion/unitless/dist/emotion-unitless.esm.js
  var unitlessKeys;
  var init_emotion_unitless_esm = __esm({
    "node_modules/@emotion/unitless/dist/emotion-unitless.esm.js"() {
      unitlessKeys = {
        animationIterationCount: 1,
        aspectRatio: 1,
        borderImageOutset: 1,
        borderImageSlice: 1,
        borderImageWidth: 1,
        boxFlex: 1,
        boxFlexGroup: 1,
        boxOrdinalGroup: 1,
        columnCount: 1,
        columns: 1,
        flex: 1,
        flexGrow: 1,
        flexPositive: 1,
        flexShrink: 1,
        flexNegative: 1,
        flexOrder: 1,
        gridRow: 1,
        gridRowEnd: 1,
        gridRowSpan: 1,
        gridRowStart: 1,
        gridColumn: 1,
        gridColumnEnd: 1,
        gridColumnSpan: 1,
        gridColumnStart: 1,
        msGridRow: 1,
        msGridRowSpan: 1,
        msGridColumn: 1,
        msGridColumnSpan: 1,
        fontWeight: 1,
        lineHeight: 1,
        opacity: 1,
        order: 1,
        orphans: 1,
        tabSize: 1,
        widows: 1,
        zIndex: 1,
        zoom: 1,
        WebkitLineClamp: 1,
        // SVG-related properties
        fillOpacity: 1,
        floodOpacity: 1,
        stopOpacity: 1,
        strokeDasharray: 1,
        strokeDashoffset: 1,
        strokeMiterlimit: 1,
        strokeOpacity: 1,
        strokeWidth: 1
      };
    }
  });

  // node_modules/@emotion/serialize/dist/emotion-serialize.browser.esm.js
  function handleInterpolation(mergedProps, registered, interpolation) {
    if (interpolation == null) {
      return "";
    }
    if (interpolation.__emotion_styles !== void 0) {
      if (interpolation.toString() === "NO_COMPONENT_SELECTOR") {
        throw new Error(noComponentSelectorMessage);
      }
      return interpolation;
    }
    switch (typeof interpolation) {
      case "boolean": {
        return "";
      }
      case "object": {
        if (interpolation.anim === 1) {
          cursor = {
            name: interpolation.name,
            styles: interpolation.styles,
            next: cursor
          };
          return interpolation.name;
        }
        if (interpolation.styles !== void 0) {
          var next2 = interpolation.next;
          if (next2 !== void 0) {
            while (next2 !== void 0) {
              cursor = {
                name: next2.name,
                styles: next2.styles,
                next: cursor
              };
              next2 = next2.next;
            }
          }
          var styles7 = interpolation.styles + ";";
          if (interpolation.map !== void 0) {
            styles7 += interpolation.map;
          }
          return styles7;
        }
        return createStringFromObject(mergedProps, registered, interpolation);
      }
      case "function": {
        if (mergedProps !== void 0) {
          var previousCursor = cursor;
          var result = interpolation(mergedProps);
          cursor = previousCursor;
          return handleInterpolation(mergedProps, registered, result);
        } else if (true) {
          console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
        }
        break;
      }
      case "string":
        if (true) {
          var matched = [];
          var replaced = interpolation.replace(animationRegex, function(match2, p1, p2) {
            var fakeVarName = "animation" + matched.length;
            matched.push("const " + fakeVarName + " = keyframes`" + p2.replace(/^@keyframes animation-\w+/, "") + "`");
            return "${" + fakeVarName + "}";
          });
          if (matched.length) {
            console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(matched, ["`" + replaced + "`"]).join("\n") + "\n\nYou should wrap it with `css` like this:\n\n" + ("css`" + replaced + "`"));
          }
        }
        break;
    }
    if (registered == null) {
      return interpolation;
    }
    var cached = registered[interpolation];
    return cached !== void 0 ? cached : interpolation;
  }
  function createStringFromObject(mergedProps, registered, obj) {
    var string = "";
    if (Array.isArray(obj)) {
      for (var i = 0; i < obj.length; i++) {
        string += handleInterpolation(mergedProps, registered, obj[i]) + ";";
      }
    } else {
      for (var _key in obj) {
        var value = obj[_key];
        if (typeof value !== "object") {
          if (registered != null && registered[value] !== void 0) {
            string += _key + "{" + registered[value] + "}";
          } else if (isProcessableValue(value)) {
            string += processStyleName(_key) + ":" + processStyleValue(_key, value) + ";";
          }
        } else {
          if (_key === "NO_COMPONENT_SELECTOR" && true) {
            throw new Error(noComponentSelectorMessage);
          }
          if (Array.isArray(value) && typeof value[0] === "string" && (registered == null || registered[value[0]] === void 0)) {
            for (var _i = 0; _i < value.length; _i++) {
              if (isProcessableValue(value[_i])) {
                string += processStyleName(_key) + ":" + processStyleValue(_key, value[_i]) + ";";
              }
            }
          } else {
            var interpolated = handleInterpolation(mergedProps, registered, value);
            switch (_key) {
              case "animation":
              case "animationName": {
                string += processStyleName(_key) + ":" + interpolated + ";";
                break;
              }
              default: {
                if (_key === "undefined") {
                  console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);
                }
                string += _key + "{" + interpolated + "}";
              }
            }
          }
        }
      }
    }
    return string;
  }
  var ILLEGAL_ESCAPE_SEQUENCE_ERROR, UNDEFINED_AS_OBJECT_KEY_ERROR, hyphenateRegex, animationRegex, isCustomProperty, isProcessableValue, processStyleName, processStyleValue, contentValuePattern, contentValues, oldProcessStyleValue, msPattern2, hyphenPattern, hyphenatedCache, noComponentSelectorMessage, labelPattern, sourceMapPattern, cursor, serializeStyles;
  var init_emotion_serialize_browser_esm = __esm({
    "node_modules/@emotion/serialize/dist/emotion-serialize.browser.esm.js"() {
      init_emotion_hash_esm();
      init_emotion_unitless_esm();
      init_emotion_memoize_esm();
      ILLEGAL_ESCAPE_SEQUENCE_ERROR = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
      UNDEFINED_AS_OBJECT_KEY_ERROR = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
      hyphenateRegex = /[A-Z]|^ms/g;
      animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
      isCustomProperty = function isCustomProperty2(property) {
        return property.charCodeAt(1) === 45;
      };
      isProcessableValue = function isProcessableValue2(value) {
        return value != null && typeof value !== "boolean";
      };
      processStyleName = /* @__PURE__ */ memoize3(function(styleName) {
        return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, "-$&").toLowerCase();
      });
      processStyleValue = function processStyleValue2(key, value) {
        switch (key) {
          case "animation":
          case "animationName": {
            if (typeof value === "string") {
              return value.replace(animationRegex, function(match2, p1, p2) {
                cursor = {
                  name: p1,
                  styles: p2,
                  next: cursor
                };
                return p1;
              });
            }
          }
        }
        if (unitlessKeys[key] !== 1 && !isCustomProperty(key) && typeof value === "number" && value !== 0) {
          return value + "px";
        }
        return value;
      };
      if (true) {
        contentValuePattern = /(var|attr|counters?|url|element|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/;
        contentValues = ["normal", "none", "initial", "inherit", "unset"];
        oldProcessStyleValue = processStyleValue;
        msPattern2 = /^-ms-/;
        hyphenPattern = /-(.)/g;
        hyphenatedCache = {};
        processStyleValue = function processStyleValue3(key, value) {
          if (key === "content") {
            if (typeof value !== "string" || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '"' && value.charAt(0) !== "'")) {
              throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + value + "\"'`");
            }
          }
          var processed = oldProcessStyleValue(key, value);
          if (processed !== "" && !isCustomProperty(key) && key.indexOf("-") !== -1 && hyphenatedCache[key] === void 0) {
            hyphenatedCache[key] = true;
            console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + key.replace(msPattern2, "ms-").replace(hyphenPattern, function(str, _char) {
              return _char.toUpperCase();
            }) + "?");
          }
          return processed;
        };
      }
      noComponentSelectorMessage = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
      labelPattern = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
      if (true) {
        sourceMapPattern = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
      }
      serializeStyles = function serializeStyles2(args, registered, mergedProps) {
        if (args.length === 1 && typeof args[0] === "object" && args[0] !== null && args[0].styles !== void 0) {
          return args[0];
        }
        var stringMode = true;
        var styles7 = "";
        cursor = void 0;
        var strings = args[0];
        if (strings == null || strings.raw === void 0) {
          stringMode = false;
          styles7 += handleInterpolation(mergedProps, registered, strings);
        } else {
          if (strings[0] === void 0) {
            console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
          }
          styles7 += strings[0];
        }
        for (var i = 1; i < args.length; i++) {
          styles7 += handleInterpolation(mergedProps, registered, args[i]);
          if (stringMode) {
            if (strings[i] === void 0) {
              console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);
            }
            styles7 += strings[i];
          }
        }
        var sourceMap;
        if (true) {
          styles7 = styles7.replace(sourceMapPattern, function(match3) {
            sourceMap = match3;
            return "";
          });
        }
        labelPattern.lastIndex = 0;
        var identifierName = "";
        var match2;
        while ((match2 = labelPattern.exec(styles7)) !== null) {
          identifierName += "-" + // $FlowFixMe we know it's not null
          match2[1];
        }
        var name = murmur2(styles7) + identifierName;
        if (true) {
          return {
            name,
            styles: styles7,
            map: sourceMap,
            next: cursor,
            toString: function toString3() {
              return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
            }
          };
        }
        return {
          name,
          styles: styles7,
          next: cursor
        };
      };
    }
  });

  // node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.browser.esm.js
  var React4, syncFallback, useInsertionEffect2, useInsertionEffectAlwaysWithSyncFallback, useInsertionEffectWithLayoutFallback;
  var init_emotion_use_insertion_effect_with_fallbacks_browser_esm = __esm({
    "node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.browser.esm.js"() {
      React4 = __toESM(require_react());
      syncFallback = function syncFallback2(create) {
        return create();
      };
      useInsertionEffect2 = React4["useInsertionEffect"] ? React4["useInsertionEffect"] : false;
      useInsertionEffectAlwaysWithSyncFallback = useInsertionEffect2 || syncFallback;
      useInsertionEffectWithLayoutFallback = useInsertionEffect2 || React4.useLayoutEffect;
    }
  });

  // node_modules/@emotion/react/dist/emotion-element-c39617d8.browser.esm.js
  function withTheme(Component) {
    var componentName = Component.displayName || Component.name || "Component";
    var render = function render2(props, ref) {
      var theme = React5.useContext(ThemeContext);
      return /* @__PURE__ */ React5.createElement(Component, _extends({
        theme,
        ref
      }, props));
    };
    var WithTheme = /* @__PURE__ */ React5.forwardRef(render);
    WithTheme.displayName = "WithTheme(" + componentName + ")";
    return hoistNonReactStatics(WithTheme, Component);
  }
  var React5, import_react, isBrowser3, hasOwnProperty, EmotionCacheContext, CacheProvider, __unsafe_useEmotionCache, withEmotionCache, ThemeContext, useTheme2, getTheme, createCacheWithTheme, ThemeProvider, getLastPart, getFunctionNameFromStackTraceLine, internalReactFunctionNames, sanitizeIdentifier, getLabelFromStackTrace, typePropName, labelPropName, createEmotionProps, Insertion, Emotion, Emotion$1;
  var init_emotion_element_c39617d8_browser_esm = __esm({
    "node_modules/@emotion/react/dist/emotion-element-c39617d8.browser.esm.js"() {
      React5 = __toESM(require_react());
      import_react = __toESM(require_react());
      init_emotion_cache_browser_esm();
      init_extends();
      init_emotion_weak_memoize_esm();
      init_emotion_react_isolated_hnrs_browser_esm();
      init_emotion_utils_browser_esm();
      init_emotion_serialize_browser_esm();
      init_emotion_use_insertion_effect_with_fallbacks_browser_esm();
      isBrowser3 = true;
      hasOwnProperty = {}.hasOwnProperty;
      EmotionCacheContext = /* @__PURE__ */ React5.createContext(
        // we're doing this to avoid preconstruct's dead code elimination in this one case
        // because this module is primarily intended for the browser and node
        // but it's also required in react native and similar environments sometimes
        // and we could have a special build just for that
        // but this is much easier and the native packages
        // might use a different theme context in the future anyway
        typeof HTMLElement !== "undefined" ? /* @__PURE__ */ createCache({
          key: "css"
        }) : null
      );
      if (true) {
        EmotionCacheContext.displayName = "EmotionCacheContext";
      }
      CacheProvider = EmotionCacheContext.Provider;
      __unsafe_useEmotionCache = function useEmotionCache() {
        return (0, import_react.useContext)(EmotionCacheContext);
      };
      withEmotionCache = function withEmotionCache2(func) {
        return /* @__PURE__ */ (0, import_react.forwardRef)(function(props, ref) {
          var cache3 = (0, import_react.useContext)(EmotionCacheContext);
          return func(props, cache3, ref);
        });
      };
      if (!isBrowser3) {
        withEmotionCache = function withEmotionCache3(func) {
          return function(props) {
            var cache3 = (0, import_react.useContext)(EmotionCacheContext);
            if (cache3 === null) {
              cache3 = createCache({
                key: "css"
              });
              return /* @__PURE__ */ React5.createElement(EmotionCacheContext.Provider, {
                value: cache3
              }, func(props, cache3));
            } else {
              return func(props, cache3);
            }
          };
        };
      }
      ThemeContext = /* @__PURE__ */ React5.createContext({});
      if (true) {
        ThemeContext.displayName = "EmotionThemeContext";
      }
      useTheme2 = function useTheme3() {
        return React5.useContext(ThemeContext);
      };
      getTheme = function getTheme2(outerTheme, theme) {
        if (typeof theme === "function") {
          var mergedTheme = theme(outerTheme);
          if (mergedTheme == null || typeof mergedTheme !== "object" || Array.isArray(mergedTheme)) {
            throw new Error("[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!");
          }
          return mergedTheme;
        }
        if (theme == null || typeof theme !== "object" || Array.isArray(theme)) {
          throw new Error("[ThemeProvider] Please make your theme prop a plain object");
        }
        return _extends({}, outerTheme, theme);
      };
      createCacheWithTheme = /* @__PURE__ */ weakMemoize(function(outerTheme) {
        return weakMemoize(function(theme) {
          return getTheme(outerTheme, theme);
        });
      });
      ThemeProvider = function ThemeProvider2(props) {
        var theme = React5.useContext(ThemeContext);
        if (props.theme !== theme) {
          theme = createCacheWithTheme(theme)(props.theme);
        }
        return /* @__PURE__ */ React5.createElement(ThemeContext.Provider, {
          value: theme
        }, props.children);
      };
      getLastPart = function getLastPart2(functionName) {
        var parts = functionName.split(".");
        return parts[parts.length - 1];
      };
      getFunctionNameFromStackTraceLine = function getFunctionNameFromStackTraceLine2(line2) {
        var match2 = /^\s+at\s+([A-Za-z0-9$.]+)\s/.exec(line2);
        if (match2)
          return getLastPart(match2[1]);
        match2 = /^([A-Za-z0-9$.]+)@/.exec(line2);
        if (match2)
          return getLastPart(match2[1]);
        return void 0;
      };
      internalReactFunctionNames = /* @__PURE__ */ new Set(["renderWithHooks", "processChild", "finishClassComponent", "renderToString"]);
      sanitizeIdentifier = function sanitizeIdentifier2(identifier2) {
        return identifier2.replace(/\$/g, "-");
      };
      getLabelFromStackTrace = function getLabelFromStackTrace2(stackTrace) {
        if (!stackTrace)
          return void 0;
        var lines = stackTrace.split("\n");
        for (var i = 0; i < lines.length; i++) {
          var functionName = getFunctionNameFromStackTraceLine(lines[i]);
          if (!functionName)
            continue;
          if (internalReactFunctionNames.has(functionName))
            break;
          if (/^[A-Z]/.test(functionName))
            return sanitizeIdentifier(functionName);
        }
        return void 0;
      };
      typePropName = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
      labelPropName = "__EMOTION_LABEL_PLEASE_DO_NOT_USE__";
      createEmotionProps = function createEmotionProps2(type, props) {
        if (typeof props.css === "string" && // check if there is a css declaration
        props.css.indexOf(":") !== -1) {
          throw new Error("Strings are not allowed as css prop values, please wrap it in a css template literal from '@emotion/react' like this: css`" + props.css + "`");
        }
        var newProps = {};
        for (var key in props) {
          if (hasOwnProperty.call(props, key)) {
            newProps[key] = props[key];
          }
        }
        newProps[typePropName] = type;
        if (!!props.css && (typeof props.css !== "object" || typeof props.css.name !== "string" || props.css.name.indexOf("-") === -1)) {
          var label = getLabelFromStackTrace(new Error().stack);
          if (label)
            newProps[labelPropName] = label;
        }
        return newProps;
      };
      Insertion = function Insertion2(_ref) {
        var cache3 = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
        registerStyles(cache3, serialized, isStringTag);
        useInsertionEffectAlwaysWithSyncFallback(function() {
          return insertStyles(cache3, serialized, isStringTag);
        });
        return null;
      };
      Emotion = /* @__PURE__ */ withEmotionCache(function(props, cache3, ref) {
        var cssProp = props.css;
        if (typeof cssProp === "string" && cache3.registered[cssProp] !== void 0) {
          cssProp = cache3.registered[cssProp];
        }
        var WrappedComponent = props[typePropName];
        var registeredStyles = [cssProp];
        var className = "";
        if (typeof props.className === "string") {
          className = getRegisteredStyles(cache3.registered, registeredStyles, props.className);
        } else if (props.className != null) {
          className = props.className + " ";
        }
        var serialized = serializeStyles(registeredStyles, void 0, React5.useContext(ThemeContext));
        if (serialized.name.indexOf("-") === -1) {
          var labelFromStack = props[labelPropName];
          if (labelFromStack) {
            serialized = serializeStyles([serialized, "label:" + labelFromStack + ";"]);
          }
        }
        className += cache3.key + "-" + serialized.name;
        var newProps = {};
        for (var key in props) {
          if (hasOwnProperty.call(props, key) && key !== "css" && key !== typePropName && key !== labelPropName) {
            newProps[key] = props[key];
          }
        }
        newProps.ref = ref;
        newProps.className = className;
        return /* @__PURE__ */ React5.createElement(React5.Fragment, null, /* @__PURE__ */ React5.createElement(Insertion, {
          cache: cache3,
          serialized,
          isStringTag: typeof WrappedComponent === "string"
        }), /* @__PURE__ */ React5.createElement(WrappedComponent, newProps));
      });
      if (true) {
        Emotion.displayName = "EmotionCssPropInternal";
      }
      Emotion$1 = Emotion;
    }
  });

  // node_modules/@emotion/react/dist/emotion-react.browser.esm.js
  var emotion_react_browser_esm_exports = {};
  __export(emotion_react_browser_esm_exports, {
    CacheProvider: () => CacheProvider,
    ClassNames: () => ClassNames,
    Global: () => Global,
    ThemeContext: () => ThemeContext,
    ThemeProvider: () => ThemeProvider,
    __unsafe_useEmotionCache: () => __unsafe_useEmotionCache,
    createElement: () => jsx,
    css: () => css2,
    jsx: () => jsx,
    keyframes: () => keyframes,
    useTheme: () => useTheme2,
    withEmotionCache: () => withEmotionCache,
    withTheme: () => withTheme
  });
  function css2() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return serializeStyles(args);
  }
  function merge(registered, css7, className) {
    var registeredStyles = [];
    var rawClassName = getRegisteredStyles(registered, registeredStyles, className);
    if (registeredStyles.length < 2) {
      return className;
    }
    return rawClassName + css7(registeredStyles);
  }
  var React6, import_hoist_non_react_statics2, pkg, jsx, warnedAboutCssPropForGlobal, Global, keyframes, classnames, Insertion3, ClassNames, isBrowser4, isTestEnv, globalContext, globalKey;
  var init_emotion_react_browser_esm = __esm({
    "node_modules/@emotion/react/dist/emotion-react.browser.esm.js"() {
      init_emotion_element_c39617d8_browser_esm();
      init_emotion_element_c39617d8_browser_esm();
      React6 = __toESM(require_react());
      init_emotion_utils_browser_esm();
      init_emotion_use_insertion_effect_with_fallbacks_browser_esm();
      init_emotion_serialize_browser_esm();
      init_emotion_cache_browser_esm();
      init_extends();
      init_emotion_weak_memoize_esm();
      import_hoist_non_react_statics2 = __toESM(require_hoist_non_react_statics_cjs());
      pkg = {
        name: "@emotion/react",
        version: "11.11.1",
        main: "dist/emotion-react.cjs.js",
        module: "dist/emotion-react.esm.js",
        browser: {
          "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
        },
        exports: {
          ".": {
            module: {
              worker: "./dist/emotion-react.worker.esm.js",
              browser: "./dist/emotion-react.browser.esm.js",
              "default": "./dist/emotion-react.esm.js"
            },
            "import": "./dist/emotion-react.cjs.mjs",
            "default": "./dist/emotion-react.cjs.js"
          },
          "./jsx-runtime": {
            module: {
              worker: "./jsx-runtime/dist/emotion-react-jsx-runtime.worker.esm.js",
              browser: "./jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js",
              "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.esm.js"
            },
            "import": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.mjs",
            "default": "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.js"
          },
          "./_isolated-hnrs": {
            module: {
              worker: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.worker.esm.js",
              browser: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js",
              "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js"
            },
            "import": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.mjs",
            "default": "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.js"
          },
          "./jsx-dev-runtime": {
            module: {
              worker: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.worker.esm.js",
              browser: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js",
              "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.esm.js"
            },
            "import": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.mjs",
            "default": "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.js"
          },
          "./package.json": "./package.json",
          "./types/css-prop": "./types/css-prop.d.ts",
          "./macro": {
            types: {
              "import": "./macro.d.mts",
              "default": "./macro.d.ts"
            },
            "default": "./macro.js"
          }
        },
        types: "types/index.d.ts",
        files: [
          "src",
          "dist",
          "jsx-runtime",
          "jsx-dev-runtime",
          "_isolated-hnrs",
          "types/*.d.ts",
          "macro.*"
        ],
        sideEffects: false,
        author: "Emotion Contributors",
        license: "MIT",
        scripts: {
          "test:typescript": "dtslint types"
        },
        dependencies: {
          "@babel/runtime": "^7.18.3",
          "@emotion/babel-plugin": "^11.11.0",
          "@emotion/cache": "^11.11.0",
          "@emotion/serialize": "^1.1.2",
          "@emotion/use-insertion-effect-with-fallbacks": "^1.0.1",
          "@emotion/utils": "^1.2.1",
          "@emotion/weak-memoize": "^0.3.1",
          "hoist-non-react-statics": "^3.3.1"
        },
        peerDependencies: {
          react: ">=16.8.0"
        },
        peerDependenciesMeta: {
          "@types/react": {
            optional: true
          }
        },
        devDependencies: {
          "@definitelytyped/dtslint": "0.0.112",
          "@emotion/css": "11.11.0",
          "@emotion/css-prettifier": "1.1.3",
          "@emotion/server": "11.11.0",
          "@emotion/styled": "11.11.0",
          "html-tag-names": "^1.1.2",
          react: "16.14.0",
          "svg-tag-names": "^1.1.1",
          typescript: "^4.5.5"
        },
        repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
        publishConfig: {
          access: "public"
        },
        "umd:main": "dist/emotion-react.umd.min.js",
        preconstruct: {
          entrypoints: [
            "./index.js",
            "./jsx-runtime.js",
            "./jsx-dev-runtime.js",
            "./_isolated-hnrs.js"
          ],
          umdName: "emotionReact",
          exports: {
            envConditions: [
              "browser",
              "worker"
            ],
            extra: {
              "./types/css-prop": "./types/css-prop.d.ts",
              "./macro": {
                types: {
                  "import": "./macro.d.mts",
                  "default": "./macro.d.ts"
                },
                "default": "./macro.js"
              }
            }
          }
        }
      };
      jsx = function jsx2(type, props) {
        var args = arguments;
        if (props == null || !hasOwnProperty.call(props, "css")) {
          return React6.createElement.apply(void 0, args);
        }
        var argsLength = args.length;
        var createElementArgArray = new Array(argsLength);
        createElementArgArray[0] = Emotion$1;
        createElementArgArray[1] = createEmotionProps(type, props);
        for (var i = 2; i < argsLength; i++) {
          createElementArgArray[i] = args[i];
        }
        return React6.createElement.apply(null, createElementArgArray);
      };
      warnedAboutCssPropForGlobal = false;
      Global = /* @__PURE__ */ withEmotionCache(function(props, cache3) {
        if (!warnedAboutCssPropForGlobal && // check for className as well since the user is
        // probably using the custom createElement which
        // means it will be turned into a className prop
        // $FlowFixMe I don't really want to add it to the type since it shouldn't be used
        (props.className || props.css)) {
          console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?");
          warnedAboutCssPropForGlobal = true;
        }
        var styles7 = props.styles;
        var serialized = serializeStyles([styles7], void 0, React6.useContext(ThemeContext));
        if (!isBrowser3) {
          var _ref;
          var serializedNames = serialized.name;
          var serializedStyles = serialized.styles;
          var next2 = serialized.next;
          while (next2 !== void 0) {
            serializedNames += " " + next2.name;
            serializedStyles += next2.styles;
            next2 = next2.next;
          }
          var shouldCache = cache3.compat === true;
          var rules = cache3.insert("", {
            name: serializedNames,
            styles: serializedStyles
          }, cache3.sheet, shouldCache);
          if (shouldCache) {
            return null;
          }
          return /* @__PURE__ */ React6.createElement("style", (_ref = {}, _ref["data-emotion"] = cache3.key + "-global " + serializedNames, _ref.dangerouslySetInnerHTML = {
            __html: rules
          }, _ref.nonce = cache3.sheet.nonce, _ref));
        }
        var sheetRef = React6.useRef();
        useInsertionEffectWithLayoutFallback(function() {
          var key = cache3.key + "-global";
          var sheet = new cache3.sheet.constructor({
            key,
            nonce: cache3.sheet.nonce,
            container: cache3.sheet.container,
            speedy: cache3.sheet.isSpeedy
          });
          var rehydrating = false;
          var node2 = document.querySelector('style[data-emotion="' + key + " " + serialized.name + '"]');
          if (cache3.sheet.tags.length) {
            sheet.before = cache3.sheet.tags[0];
          }
          if (node2 !== null) {
            rehydrating = true;
            node2.setAttribute("data-emotion", key);
            sheet.hydrate([node2]);
          }
          sheetRef.current = [sheet, rehydrating];
          return function() {
            sheet.flush();
          };
        }, [cache3]);
        useInsertionEffectWithLayoutFallback(function() {
          var sheetRefCurrent = sheetRef.current;
          var sheet = sheetRefCurrent[0], rehydrating = sheetRefCurrent[1];
          if (rehydrating) {
            sheetRefCurrent[1] = false;
            return;
          }
          if (serialized.next !== void 0) {
            insertStyles(cache3, serialized.next, true);
          }
          if (sheet.tags.length) {
            var element = sheet.tags[sheet.tags.length - 1].nextElementSibling;
            sheet.before = element;
            sheet.flush();
          }
          cache3.insert("", serialized, sheet, false);
        }, [cache3, serialized.name]);
        return null;
      });
      if (true) {
        Global.displayName = "EmotionGlobal";
      }
      keyframes = function keyframes2() {
        var insertable = css2.apply(void 0, arguments);
        var name = "animation-" + insertable.name;
        return {
          name,
          styles: "@keyframes " + name + "{" + insertable.styles + "}",
          anim: 1,
          toString: function toString3() {
            return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
          }
        };
      };
      classnames = function classnames2(args) {
        var len = args.length;
        var i = 0;
        var cls = "";
        for (; i < len; i++) {
          var arg = args[i];
          if (arg == null)
            continue;
          var toAdd = void 0;
          switch (typeof arg) {
            case "boolean":
              break;
            case "object": {
              if (Array.isArray(arg)) {
                toAdd = classnames2(arg);
              } else {
                if (arg.styles !== void 0 && arg.name !== void 0) {
                  console.error("You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component.");
                }
                toAdd = "";
                for (var k in arg) {
                  if (arg[k] && k) {
                    toAdd && (toAdd += " ");
                    toAdd += k;
                  }
                }
              }
              break;
            }
            default: {
              toAdd = arg;
            }
          }
          if (toAdd) {
            cls && (cls += " ");
            cls += toAdd;
          }
        }
        return cls;
      };
      Insertion3 = function Insertion4(_ref) {
        var cache3 = _ref.cache, serializedArr = _ref.serializedArr;
        useInsertionEffectAlwaysWithSyncFallback(function() {
          for (var i = 0; i < serializedArr.length; i++) {
            insertStyles(cache3, serializedArr[i], false);
          }
        });
        return null;
      };
      ClassNames = /* @__PURE__ */ withEmotionCache(function(props, cache3) {
        var hasRendered = false;
        var serializedArr = [];
        var css7 = function css8() {
          if (hasRendered && true) {
            throw new Error("css can only be used during render");
          }
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          var serialized = serializeStyles(args, cache3.registered);
          serializedArr.push(serialized);
          registerStyles(cache3, serialized, false);
          return cache3.key + "-" + serialized.name;
        };
        var cx = function cx2() {
          if (hasRendered && true) {
            throw new Error("cx can only be used during render");
          }
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return merge(cache3.registered, css7, classnames(args));
        };
        var content = {
          css: css7,
          cx,
          theme: React6.useContext(ThemeContext)
        };
        var ele = props.children(content);
        hasRendered = true;
        return /* @__PURE__ */ React6.createElement(React6.Fragment, null, /* @__PURE__ */ React6.createElement(Insertion3, {
          cache: cache3,
          serializedArr
        }), ele);
      });
      if (true) {
        ClassNames.displayName = "EmotionClassNames";
      }
      if (true) {
        isBrowser4 = true;
        isTestEnv = typeof jest !== "undefined" || typeof vi !== "undefined";
        if (isBrowser4 && !isTestEnv) {
          globalContext = // $FlowIgnore
          typeof globalThis !== "undefined" ? globalThis : isBrowser4 ? window : global;
          globalKey = "__EMOTION_REACT_" + pkg.version.split(".")[0] + "__";
          if (globalContext[globalKey]) {
            console.warn("You are loading @emotion/react when it is already loaded. Running multiple instances may cause problems. This can happen if multiple versions are used, or if multiple builds of the same version are used.");
          }
          globalContext[globalKey] = true;
        }
      }
    }
  });

  // node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js
  var React7, testOmitPropsOnStringTag, testOmitPropsOnComponent, getDefaultShouldForwardProp, composeShouldForwardProps, ILLEGAL_ESCAPE_SEQUENCE_ERROR2, Insertion5, createStyled;
  var init_emotion_styled_base_browser_esm = __esm({
    "node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js"() {
      init_extends();
      React7 = __toESM(require_react());
      init_emotion_is_prop_valid_esm();
      init_emotion_react_browser_esm();
      init_emotion_utils_browser_esm();
      init_emotion_serialize_browser_esm();
      init_emotion_use_insertion_effect_with_fallbacks_browser_esm();
      testOmitPropsOnStringTag = isPropValid;
      testOmitPropsOnComponent = function testOmitPropsOnComponent2(key) {
        return key !== "theme";
      };
      getDefaultShouldForwardProp = function getDefaultShouldForwardProp2(tag) {
        return typeof tag === "string" && // 96 is one less than the char code
        // for "a" so this is checking that
        // it's a lowercase character
        tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;
      };
      composeShouldForwardProps = function composeShouldForwardProps2(tag, options, isReal) {
        var shouldForwardProp2;
        if (options) {
          var optionsShouldForwardProp = options.shouldForwardProp;
          shouldForwardProp2 = tag.__emotion_forwardProp && optionsShouldForwardProp ? function(propName) {
            return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);
          } : optionsShouldForwardProp;
        }
        if (typeof shouldForwardProp2 !== "function" && isReal) {
          shouldForwardProp2 = tag.__emotion_forwardProp;
        }
        return shouldForwardProp2;
      };
      ILLEGAL_ESCAPE_SEQUENCE_ERROR2 = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
      Insertion5 = function Insertion6(_ref) {
        var cache3 = _ref.cache, serialized = _ref.serialized, isStringTag = _ref.isStringTag;
        registerStyles(cache3, serialized, isStringTag);
        useInsertionEffectAlwaysWithSyncFallback(function() {
          return insertStyles(cache3, serialized, isStringTag);
        });
        return null;
      };
      createStyled = function createStyled2(tag, options) {
        if (true) {
          if (tag === void 0) {
            throw new Error("You are trying to create a styled element with an undefined component.\nYou may have forgotten to import it.");
          }
        }
        var isReal = tag.__emotion_real === tag;
        var baseTag = isReal && tag.__emotion_base || tag;
        var identifierName;
        var targetClassName;
        if (options !== void 0) {
          identifierName = options.label;
          targetClassName = options.target;
        }
        var shouldForwardProp2 = composeShouldForwardProps(tag, options, isReal);
        var defaultShouldForwardProp = shouldForwardProp2 || getDefaultShouldForwardProp(baseTag);
        var shouldUseAs = !defaultShouldForwardProp("as");
        return function() {
          var args = arguments;
          var styles7 = isReal && tag.__emotion_styles !== void 0 ? tag.__emotion_styles.slice(0) : [];
          if (identifierName !== void 0) {
            styles7.push("label:" + identifierName + ";");
          }
          if (args[0] == null || args[0].raw === void 0) {
            styles7.push.apply(styles7, args);
          } else {
            if (args[0][0] === void 0) {
              console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR2);
            }
            styles7.push(args[0][0]);
            var len = args.length;
            var i = 1;
            for (; i < len; i++) {
              if (args[0][i] === void 0) {
                console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR2);
              }
              styles7.push(args[i], args[0][i]);
            }
          }
          var Styled = withEmotionCache(function(props, cache3, ref) {
            var FinalTag = shouldUseAs && props.as || baseTag;
            var className = "";
            var classInterpolations = [];
            var mergedProps = props;
            if (props.theme == null) {
              mergedProps = {};
              for (var key in props) {
                mergedProps[key] = props[key];
              }
              mergedProps.theme = React7.useContext(ThemeContext);
            }
            if (typeof props.className === "string") {
              className = getRegisteredStyles(cache3.registered, classInterpolations, props.className);
            } else if (props.className != null) {
              className = props.className + " ";
            }
            var serialized = serializeStyles(styles7.concat(classInterpolations), cache3.registered, mergedProps);
            className += cache3.key + "-" + serialized.name;
            if (targetClassName !== void 0) {
              className += " " + targetClassName;
            }
            var finalShouldForwardProp = shouldUseAs && shouldForwardProp2 === void 0 ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;
            var newProps = {};
            for (var _key in props) {
              if (shouldUseAs && _key === "as")
                continue;
              if (
                // $FlowFixMe
                finalShouldForwardProp(_key)
              ) {
                newProps[_key] = props[_key];
              }
            }
            newProps.className = className;
            newProps.ref = ref;
            return /* @__PURE__ */ React7.createElement(React7.Fragment, null, /* @__PURE__ */ React7.createElement(Insertion5, {
              cache: cache3,
              serialized,
              isStringTag: typeof FinalTag === "string"
            }), /* @__PURE__ */ React7.createElement(FinalTag, newProps));
          });
          Styled.displayName = identifierName !== void 0 ? identifierName : "Styled(" + (typeof baseTag === "string" ? baseTag : baseTag.displayName || baseTag.name || "Component") + ")";
          Styled.defaultProps = tag.defaultProps;
          Styled.__emotion_real = Styled;
          Styled.__emotion_base = baseTag;
          Styled.__emotion_styles = styles7;
          Styled.__emotion_forwardProp = shouldForwardProp2;
          Object.defineProperty(Styled, "toString", {
            value: function value() {
              if (targetClassName === void 0 && true) {
                return "NO_COMPONENT_SELECTOR";
              }
              return "." + targetClassName;
            }
          });
          Styled.withComponent = function(nextTag, nextOptions) {
            return createStyled2(nextTag, _extends({}, options, nextOptions, {
              shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)
            })).apply(void 0, styles7);
          };
          return Styled;
        };
      };
    }
  });

  // node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js
  var emotion_styled_browser_esm_exports = {};
  __export(emotion_styled_browser_esm_exports, {
    default: () => newStyled
  });
  var import_react3, tags, newStyled;
  var init_emotion_styled_browser_esm = __esm({
    "node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js"() {
      init_emotion_styled_base_browser_esm();
      init_extends();
      import_react3 = __toESM(require_react());
      init_emotion_is_prop_valid_esm();
      init_emotion_utils_browser_esm();
      init_emotion_serialize_browser_esm();
      init_emotion_use_insertion_effect_with_fallbacks_browser_esm();
      tags = [
        "a",
        "abbr",
        "address",
        "area",
        "article",
        "aside",
        "audio",
        "b",
        "base",
        "bdi",
        "bdo",
        "big",
        "blockquote",
        "body",
        "br",
        "button",
        "canvas",
        "caption",
        "cite",
        "code",
        "col",
        "colgroup",
        "data",
        "datalist",
        "dd",
        "del",
        "details",
        "dfn",
        "dialog",
        "div",
        "dl",
        "dt",
        "em",
        "embed",
        "fieldset",
        "figcaption",
        "figure",
        "footer",
        "form",
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6",
        "head",
        "header",
        "hgroup",
        "hr",
        "html",
        "i",
        "iframe",
        "img",
        "input",
        "ins",
        "kbd",
        "keygen",
        "label",
        "legend",
        "li",
        "link",
        "main",
        "map",
        "mark",
        "marquee",
        "menu",
        "menuitem",
        "meta",
        "meter",
        "nav",
        "noscript",
        "object",
        "ol",
        "optgroup",
        "option",
        "output",
        "p",
        "param",
        "picture",
        "pre",
        "progress",
        "q",
        "rp",
        "rt",
        "ruby",
        "s",
        "samp",
        "script",
        "section",
        "select",
        "small",
        "source",
        "span",
        "strong",
        "style",
        "sub",
        "summary",
        "sup",
        "table",
        "tbody",
        "td",
        "textarea",
        "tfoot",
        "th",
        "thead",
        "time",
        "title",
        "tr",
        "track",
        "u",
        "ul",
        "var",
        "video",
        "wbr",
        // SVG
        "circle",
        "clipPath",
        "defs",
        "ellipse",
        "foreignObject",
        "g",
        "image",
        "line",
        "linearGradient",
        "mask",
        "path",
        "pattern",
        "polygon",
        "polyline",
        "radialGradient",
        "rect",
        "stop",
        "svg",
        "text",
        "tspan"
      ];
      newStyled = createStyled.bind();
      tags.forEach(function(tagName) {
        newStyled[tagName] = newStyled(tagName);
      });
    }
  });

  // node_modules/@mui/styled-engine/node/StyledEngineProvider/StyledEngineProvider.js
  var require_StyledEngineProvider = __commonJS({
    "node_modules/@mui/styled-engine/node/StyledEngineProvider/StyledEngineProvider.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = StyledEngineProvider2;
      var React264 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _react2 = (init_emotion_react_browser_esm(), __toCommonJS(emotion_react_browser_esm_exports));
      var _cache = _interopRequireDefault((init_emotion_cache_browser_esm(), __toCommonJS(emotion_cache_browser_esm_exports)));
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache4 = _getRequireWildcardCache(nodeInterop);
        if (cache4 && cache4.has(obj)) {
          return cache4.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache4) {
          cache4.set(obj, newObj);
        }
        return newObj;
      }
      var cache3;
      if (typeof document === "object") {
        cache3 = (0, _cache.default)({
          key: "css",
          prepend: true
        });
      }
      function StyledEngineProvider2(props) {
        const {
          injectFirst,
          children
        } = props;
        return injectFirst && cache3 ? /* @__PURE__ */ (0, _jsxRuntime.jsx)(_react2.CacheProvider, {
          value: cache3,
          children
        }) : children;
      }
      true ? StyledEngineProvider2.propTypes = {
        /**
         * Your component tree.
         */
        children: _propTypes.default.node,
        /**
         * By default, the styles are injected last in the <head> element of the page.
         * As a result, they gain more specificity than any other style sheet.
         * If you want to override MUI's styles, set this prop.
         */
        injectFirst: _propTypes.default.bool
      } : void 0;
    }
  });

  // node_modules/@mui/styled-engine/node/StyledEngineProvider/index.js
  var require_StyledEngineProvider2 = __commonJS({
    "node_modules/@mui/styled-engine/node/StyledEngineProvider/index.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _StyledEngineProvider.default;
        }
      });
      var _StyledEngineProvider = _interopRequireDefault(require_StyledEngineProvider());
    }
  });

  // node_modules/@mui/styled-engine/node/GlobalStyles/GlobalStyles.js
  var require_GlobalStyles = __commonJS({
    "node_modules/@mui/styled-engine/node/GlobalStyles/GlobalStyles.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = GlobalStyles2;
      var React264 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _react2 = (init_emotion_react_browser_esm(), __toCommonJS(emotion_react_browser_esm_exports));
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
      function isEmpty5(obj) {
        return obj === void 0 || obj === null || Object.keys(obj).length === 0;
      }
      function GlobalStyles2(props) {
        const {
          styles: styles7,
          defaultTheme: defaultTheme4 = {}
        } = props;
        const globalStyles = typeof styles7 === "function" ? (themeInput) => styles7(isEmpty5(themeInput) ? defaultTheme4 : themeInput) : styles7;
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_react2.Global, {
          styles: globalStyles
        });
      }
      true ? GlobalStyles2.propTypes = {
        defaultTheme: _propTypes.default.object,
        styles: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.string, _propTypes.default.object, _propTypes.default.func])
      } : void 0;
    }
  });

  // node_modules/@mui/styled-engine/node/GlobalStyles/index.js
  var require_GlobalStyles2 = __commonJS({
    "node_modules/@mui/styled-engine/node/GlobalStyles/index.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _GlobalStyles.default;
        }
      });
      var _GlobalStyles = _interopRequireDefault(require_GlobalStyles());
    }
  });

  // node_modules/@mui/styled-engine/node/index.js
  var require_node = __commonJS({
    "node_modules/@mui/styled-engine/node/index.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "GlobalStyles", {
        enumerable: true,
        get: function() {
          return _GlobalStyles.default;
        }
      });
      Object.defineProperty(exports, "StyledEngineProvider", {
        enumerable: true,
        get: function() {
          return _StyledEngineProvider.default;
        }
      });
      Object.defineProperty(exports, "ThemeContext", {
        enumerable: true,
        get: function() {
          return _react.ThemeContext;
        }
      });
      Object.defineProperty(exports, "css", {
        enumerable: true,
        get: function() {
          return _react.css;
        }
      });
      exports.default = styled2;
      exports.internal_processStyles = void 0;
      Object.defineProperty(exports, "keyframes", {
        enumerable: true,
        get: function() {
          return _react.keyframes;
        }
      });
      var _styled = _interopRequireDefault((init_emotion_styled_browser_esm(), __toCommonJS(emotion_styled_browser_esm_exports)));
      var _react = (init_emotion_react_browser_esm(), __toCommonJS(emotion_react_browser_esm_exports));
      var _StyledEngineProvider = _interopRequireDefault(require_StyledEngineProvider2());
      var _GlobalStyles = _interopRequireDefault(require_GlobalStyles2());
      function styled2(tag, options) {
        const stylesFactory = (0, _styled.default)(tag, options);
        if (true) {
          return (...styles7) => {
            const component = typeof tag === "string" ? `"${tag}"` : "component";
            if (styles7.length === 0) {
              console.error([`MUI: Seems like you called \`styled(${component})()\` without a \`style\` argument.`, 'You must provide a `styles` argument: `styled("div")(styleYouForgotToPass)`.'].join("\n"));
            } else if (styles7.some((style) => style === void 0)) {
              console.error(`MUI: the styled(${component})(...args) API requires all its args to be defined.`);
            }
            return stylesFactory(...styles7);
          };
        }
        return stylesFactory;
      }
      var internal_processStyles = (tag, processor) => {
        if (Array.isArray(tag.__emotion_styles)) {
          tag.__emotion_styles = processor(tag.__emotion_styles);
        }
      };
      exports.internal_processStyles = internal_processStyles;
    }
  });

  // node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js
  var require_objectWithoutPropertiesLoose = __commonJS({
    "node_modules/@babel/runtime/helpers/objectWithoutPropertiesLoose.js"(exports, module) {
      function _objectWithoutPropertiesLoose2(source, excluded) {
        if (source == null)
          return {};
        var target = {};
        var sourceKeys = Object.keys(source);
        var key, i;
        for (i = 0; i < sourceKeys.length; i++) {
          key = sourceKeys[i];
          if (excluded.indexOf(key) >= 0)
            continue;
          target[key] = source[key];
        }
        return target;
      }
      module.exports = _objectWithoutPropertiesLoose2, module.exports.__esModule = true, module.exports["default"] = module.exports;
    }
  });

  // node_modules/@mui/system/createTheme/createBreakpoints.js
  var require_createBreakpoints = __commonJS({
    "node_modules/@mui/system/createTheme/createBreakpoints.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.breakpointKeys = void 0;
      exports.default = createBreakpoints2;
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _extends2 = _interopRequireDefault(require_extends());
      var _excluded170 = ["values", "unit", "step"];
      var breakpointKeys2 = ["xs", "sm", "md", "lg", "xl"];
      exports.breakpointKeys = breakpointKeys2;
      var sortBreakpointsValues = (values2) => {
        const breakpointsAsArray = Object.keys(values2).map((key) => ({
          key,
          val: values2[key]
        })) || [];
        breakpointsAsArray.sort((breakpoint1, breakpoint2) => breakpoint1.val - breakpoint2.val);
        return breakpointsAsArray.reduce((acc, obj) => {
          return (0, _extends2.default)({}, acc, {
            [obj.key]: obj.val
          });
        }, {});
      };
      function createBreakpoints2(breakpoints) {
        const {
          // The breakpoint **start** at this value.
          // For instance with the first breakpoint xs: [xs, sm).
          values: values2 = {
            xs: 0,
            // phone
            sm: 600,
            // tablet
            md: 900,
            // small laptop
            lg: 1200,
            // desktop
            xl: 1536
            // large screen
          },
          unit = "px",
          step = 5
        } = breakpoints, other = (0, _objectWithoutPropertiesLoose2.default)(breakpoints, _excluded170);
        const sortedValues = sortBreakpointsValues(values2);
        const keys = Object.keys(sortedValues);
        function up(key) {
          const value = typeof values2[key] === "number" ? values2[key] : key;
          return `@media (min-width:${value}${unit})`;
        }
        function down(key) {
          const value = typeof values2[key] === "number" ? values2[key] : key;
          return `@media (max-width:${value - step / 100}${unit})`;
        }
        function between(start2, end2) {
          const endIndex = keys.indexOf(end2);
          return `@media (min-width:${typeof values2[start2] === "number" ? values2[start2] : start2}${unit}) and (max-width:${(endIndex !== -1 && typeof values2[keys[endIndex]] === "number" ? values2[keys[endIndex]] : end2) - step / 100}${unit})`;
        }
        function only(key) {
          if (keys.indexOf(key) + 1 < keys.length) {
            return between(key, keys[keys.indexOf(key) + 1]);
          }
          return up(key);
        }
        function not(key) {
          const keyIndex = keys.indexOf(key);
          if (keyIndex === 0) {
            return up(keys[1]);
          }
          if (keyIndex === keys.length - 1) {
            return down(keys[keyIndex]);
          }
          return between(key, keys[keys.indexOf(key) + 1]).replace("@media", "@media not all and");
        }
        return (0, _extends2.default)({
          keys,
          values: sortedValues,
          up,
          down,
          between,
          only,
          not,
          unit
        }, other);
      }
    }
  });

  // node_modules/@mui/system/createTheme/shape.js
  var require_shape = __commonJS({
    "node_modules/@mui/system/createTheme/shape.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var shape = {
        borderRadius: 4
      };
      var _default = shape;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/responsivePropType.js
  var require_responsivePropType = __commonJS({
    "node_modules/@mui/system/responsivePropType.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var responsivePropType = true ? _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string, _propTypes.default.object, _propTypes.default.array]) : {};
      var _default = responsivePropType;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/merge.js
  var require_merge = __commonJS({
    "node_modules/@mui/system/merge.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      function merge3(acc, item) {
        if (!item) {
          return acc;
        }
        return (0, _utils.deepmerge)(acc, item, {
          clone: false
          // No need to clone deep, it's way faster.
        });
      }
      var _default = merge3;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/breakpoints.js
  var require_breakpoints = __commonJS({
    "node_modules/@mui/system/breakpoints.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.computeBreakpointsBase = computeBreakpointsBase;
      exports.createEmptyBreakpointObject = createEmptyBreakpointObject;
      exports.default = void 0;
      exports.handleBreakpoints = handleBreakpoints2;
      exports.mergeBreakpointsInOrder = mergeBreakpointsInOrder;
      exports.removeUnusedBreakpoints = removeUnusedBreakpoints;
      exports.resolveBreakpointValues = resolveBreakpointValues2;
      exports.values = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _utils = require_utils();
      var _merge = _interopRequireDefault(require_merge());
      var values2 = {
        xs: 0,
        // phone
        sm: 600,
        // tablet
        md: 900,
        // small laptop
        lg: 1200,
        // desktop
        xl: 1536
        // large screen
      };
      exports.values = values2;
      var defaultBreakpoints = {
        // Sorted ASC by size. That's important.
        // It can't be configured as it's used statically for propTypes.
        keys: ["xs", "sm", "md", "lg", "xl"],
        up: (key) => `@media (min-width:${values2[key]}px)`
      };
      function handleBreakpoints2(props, propValue, styleFromPropValue) {
        const theme = props.theme || {};
        if (Array.isArray(propValue)) {
          const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
          return propValue.reduce((acc, item, index3) => {
            acc[themeBreakpoints.up(themeBreakpoints.keys[index3])] = styleFromPropValue(propValue[index3]);
            return acc;
          }, {});
        }
        if (typeof propValue === "object") {
          const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
          return Object.keys(propValue).reduce((acc, breakpoint) => {
            if (Object.keys(themeBreakpoints.values || values2).indexOf(breakpoint) !== -1) {
              const mediaKey = themeBreakpoints.up(breakpoint);
              acc[mediaKey] = styleFromPropValue(propValue[breakpoint], breakpoint);
            } else {
              const cssKey = breakpoint;
              acc[cssKey] = propValue[cssKey];
            }
            return acc;
          }, {});
        }
        const output = styleFromPropValue(propValue);
        return output;
      }
      function breakpoints(styleFunction) {
        const newStyleFunction = (props) => {
          const theme = props.theme || {};
          const base = styleFunction(props);
          const themeBreakpoints = theme.breakpoints || defaultBreakpoints;
          const extended = themeBreakpoints.keys.reduce((acc, key) => {
            if (props[key]) {
              acc = acc || {};
              acc[themeBreakpoints.up(key)] = styleFunction((0, _extends2.default)({
                theme
              }, props[key]));
            }
            return acc;
          }, null);
          return (0, _merge.default)(base, extended);
        };
        newStyleFunction.propTypes = true ? (0, _extends2.default)({}, styleFunction.propTypes, {
          xs: _propTypes.default.object,
          sm: _propTypes.default.object,
          md: _propTypes.default.object,
          lg: _propTypes.default.object,
          xl: _propTypes.default.object
        }) : {};
        newStyleFunction.filterProps = ["xs", "sm", "md", "lg", "xl", ...styleFunction.filterProps];
        return newStyleFunction;
      }
      function createEmptyBreakpointObject(breakpointsInput = {}) {
        var _breakpointsInput$key;
        const breakpointsInOrder = (_breakpointsInput$key = breakpointsInput.keys) == null ? void 0 : _breakpointsInput$key.reduce((acc, key) => {
          const breakpointStyleKey = breakpointsInput.up(key);
          acc[breakpointStyleKey] = {};
          return acc;
        }, {});
        return breakpointsInOrder || {};
      }
      function removeUnusedBreakpoints(breakpointKeys2, style) {
        return breakpointKeys2.reduce((acc, key) => {
          const breakpointOutput = acc[key];
          const isBreakpointUnused = !breakpointOutput || Object.keys(breakpointOutput).length === 0;
          if (isBreakpointUnused) {
            delete acc[key];
          }
          return acc;
        }, style);
      }
      function mergeBreakpointsInOrder(breakpointsInput, ...styles7) {
        const emptyBreakpoints = createEmptyBreakpointObject(breakpointsInput);
        const mergedOutput = [emptyBreakpoints, ...styles7].reduce((prev2, next2) => (0, _utils.deepmerge)(prev2, next2), {});
        return removeUnusedBreakpoints(Object.keys(emptyBreakpoints), mergedOutput);
      }
      function computeBreakpointsBase(breakpointValues, themeBreakpoints) {
        if (typeof breakpointValues !== "object") {
          return {};
        }
        const base = {};
        const breakpointsKeys = Object.keys(themeBreakpoints);
        if (Array.isArray(breakpointValues)) {
          breakpointsKeys.forEach((breakpoint, i) => {
            if (i < breakpointValues.length) {
              base[breakpoint] = true;
            }
          });
        } else {
          breakpointsKeys.forEach((breakpoint) => {
            if (breakpointValues[breakpoint] != null) {
              base[breakpoint] = true;
            }
          });
        }
        return base;
      }
      function resolveBreakpointValues2({
        values: breakpointValues,
        breakpoints: themeBreakpoints,
        base: customBase
      }) {
        const base = customBase || computeBreakpointsBase(breakpointValues, themeBreakpoints);
        const keys = Object.keys(base);
        if (keys.length === 0) {
          return breakpointValues;
        }
        let previous;
        return keys.reduce((acc, breakpoint, i) => {
          if (Array.isArray(breakpointValues)) {
            acc[breakpoint] = breakpointValues[i] != null ? breakpointValues[i] : breakpointValues[previous];
            previous = i;
          } else if (typeof breakpointValues === "object") {
            acc[breakpoint] = breakpointValues[breakpoint] != null ? breakpointValues[breakpoint] : breakpointValues[previous];
            previous = breakpoint;
          } else {
            acc[breakpoint] = breakpointValues;
          }
          return acc;
        }, {});
      }
      var _default = breakpoints;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/style.js
  var require_style = __commonJS({
    "node_modules/@mui/system/style.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getPath = getPath2;
      exports.getStyleValue = getStyleValue2;
      var _utils = require_utils();
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var _breakpoints = require_breakpoints();
      function getPath2(obj, path, checkVars = true) {
        if (!path || typeof path !== "string") {
          return null;
        }
        if (obj && obj.vars && checkVars) {
          const val = `vars.${path}`.split(".").reduce((acc, item) => acc && acc[item] ? acc[item] : null, obj);
          if (val != null) {
            return val;
          }
        }
        return path.split(".").reduce((acc, item) => {
          if (acc && acc[item] != null) {
            return acc[item];
          }
          return null;
        }, obj);
      }
      function getStyleValue2(themeMapping, transform2, propValueFinal, userValue = propValueFinal) {
        let value;
        if (typeof themeMapping === "function") {
          value = themeMapping(propValueFinal);
        } else if (Array.isArray(themeMapping)) {
          value = themeMapping[propValueFinal] || userValue;
        } else {
          value = getPath2(themeMapping, propValueFinal) || userValue;
        }
        if (transform2) {
          value = transform2(value, userValue, themeMapping);
        }
        return value;
      }
      function style(options) {
        const {
          prop,
          cssProperty = options.prop,
          themeKey,
          transform: transform2
        } = options;
        const fn2 = (props) => {
          if (props[prop] == null) {
            return null;
          }
          const propValue = props[prop];
          const theme = props.theme;
          const themeMapping = getPath2(theme, themeKey) || {};
          const styleFromPropValue = (propValueFinal) => {
            let value = getStyleValue2(themeMapping, transform2, propValueFinal);
            if (propValueFinal === value && typeof propValueFinal === "string") {
              value = getStyleValue2(themeMapping, transform2, `${prop}${propValueFinal === "default" ? "" : (0, _utils.unstable_capitalize)(propValueFinal)}`, propValueFinal);
            }
            if (cssProperty === false) {
              return value;
            }
            return {
              [cssProperty]: value
            };
          };
          return (0, _breakpoints.handleBreakpoints)(props, propValue, styleFromPropValue);
        };
        fn2.propTypes = true ? {
          [prop]: _responsivePropType.default
        } : {};
        fn2.filterProps = [prop];
        return fn2;
      }
      var _default = style;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/memoize.js
  var require_memoize = __commonJS({
    "node_modules/@mui/system/memoize.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = memoize4;
      function memoize4(fn2) {
        const cache3 = {};
        return (arg) => {
          if (cache3[arg] === void 0) {
            cache3[arg] = fn2(arg);
          }
          return cache3[arg];
        };
      }
    }
  });

  // node_modules/@mui/system/spacing.js
  var require_spacing = __commonJS({
    "node_modules/@mui/system/spacing.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.createUnarySpacing = createUnarySpacing;
      exports.createUnaryUnit = createUnaryUnit;
      exports.default = void 0;
      exports.getStyleFromPropValue = getStyleFromPropValue;
      exports.getValue = getValue;
      exports.margin = margin;
      exports.marginKeys = void 0;
      exports.padding = padding;
      exports.paddingKeys = void 0;
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var _breakpoints = require_breakpoints();
      var _style = require_style();
      var _merge = _interopRequireDefault(require_merge());
      var _memoize = _interopRequireDefault(require_memoize());
      var properties = {
        m: "margin",
        p: "padding"
      };
      var directions = {
        t: "Top",
        r: "Right",
        b: "Bottom",
        l: "Left",
        x: ["Left", "Right"],
        y: ["Top", "Bottom"]
      };
      var aliases = {
        marginX: "mx",
        marginY: "my",
        paddingX: "px",
        paddingY: "py"
      };
      var getCssProperties = (0, _memoize.default)((prop) => {
        if (prop.length > 2) {
          if (aliases[prop]) {
            prop = aliases[prop];
          } else {
            return [prop];
          }
        }
        const [a, b] = prop.split("");
        const property = properties[a];
        const direction = directions[b] || "";
        return Array.isArray(direction) ? direction.map((dir) => property + dir) : [property + direction];
      });
      var marginKeys = ["m", "mt", "mr", "mb", "ml", "mx", "my", "margin", "marginTop", "marginRight", "marginBottom", "marginLeft", "marginX", "marginY", "marginInline", "marginInlineStart", "marginInlineEnd", "marginBlock", "marginBlockStart", "marginBlockEnd"];
      exports.marginKeys = marginKeys;
      var paddingKeys = ["p", "pt", "pr", "pb", "pl", "px", "py", "padding", "paddingTop", "paddingRight", "paddingBottom", "paddingLeft", "paddingX", "paddingY", "paddingInline", "paddingInlineStart", "paddingInlineEnd", "paddingBlock", "paddingBlockStart", "paddingBlockEnd"];
      exports.paddingKeys = paddingKeys;
      var spacingKeys = [...marginKeys, ...paddingKeys];
      function createUnaryUnit(theme, themeKey, defaultValue, propName) {
        var _getPath;
        const themeSpacing = (_getPath = (0, _style.getPath)(theme, themeKey, false)) != null ? _getPath : defaultValue;
        if (typeof themeSpacing === "number") {
          return (abs2) => {
            if (typeof abs2 === "string") {
              return abs2;
            }
            if (true) {
              if (typeof abs2 !== "number") {
                console.error(`MUI: Expected ${propName} argument to be a number or a string, got ${abs2}.`);
              }
            }
            return themeSpacing * abs2;
          };
        }
        if (Array.isArray(themeSpacing)) {
          return (abs2) => {
            if (typeof abs2 === "string") {
              return abs2;
            }
            if (true) {
              if (!Number.isInteger(abs2)) {
                console.error([`MUI: The \`theme.${themeKey}\` array type cannot be combined with non integer values.You should either use an integer value that can be used as index, or define the \`theme.${themeKey}\` as a number.`].join("\n"));
              } else if (abs2 > themeSpacing.length - 1) {
                console.error([`MUI: The value provided (${abs2}) overflows.`, `The supported values are: ${JSON.stringify(themeSpacing)}.`, `${abs2} > ${themeSpacing.length - 1}, you need to add the missing values.`].join("\n"));
              }
            }
            return themeSpacing[abs2];
          };
        }
        if (typeof themeSpacing === "function") {
          return themeSpacing;
        }
        if (true) {
          console.error([`MUI: The \`theme.${themeKey}\` value (${themeSpacing}) is invalid.`, "It should be a number, an array or a function."].join("\n"));
        }
        return () => void 0;
      }
      function createUnarySpacing(theme) {
        return createUnaryUnit(theme, "spacing", 8, "spacing");
      }
      function getValue(transformer, propValue) {
        if (typeof propValue === "string" || propValue == null) {
          return propValue;
        }
        const abs2 = Math.abs(propValue);
        const transformed = transformer(abs2);
        if (propValue >= 0) {
          return transformed;
        }
        if (typeof transformed === "number") {
          return -transformed;
        }
        return `-${transformed}`;
      }
      function getStyleFromPropValue(cssProperties, transformer) {
        return (propValue) => cssProperties.reduce((acc, cssProperty) => {
          acc[cssProperty] = getValue(transformer, propValue);
          return acc;
        }, {});
      }
      function resolveCssProperty(props, keys, prop, transformer) {
        if (keys.indexOf(prop) === -1) {
          return null;
        }
        const cssProperties = getCssProperties(prop);
        const styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
        const propValue = props[prop];
        return (0, _breakpoints.handleBreakpoints)(props, propValue, styleFromPropValue);
      }
      function style(props, keys) {
        const transformer = createUnarySpacing(props.theme);
        return Object.keys(props).map((prop) => resolveCssProperty(props, keys, prop, transformer)).reduce(_merge.default, {});
      }
      function margin(props) {
        return style(props, marginKeys);
      }
      margin.propTypes = true ? marginKeys.reduce((obj, key) => {
        obj[key] = _responsivePropType.default;
        return obj;
      }, {}) : {};
      margin.filterProps = marginKeys;
      function padding(props) {
        return style(props, paddingKeys);
      }
      padding.propTypes = true ? paddingKeys.reduce((obj, key) => {
        obj[key] = _responsivePropType.default;
        return obj;
      }, {}) : {};
      padding.filterProps = paddingKeys;
      function spacing(props) {
        return style(props, spacingKeys);
      }
      spacing.propTypes = true ? spacingKeys.reduce((obj, key) => {
        obj[key] = _responsivePropType.default;
        return obj;
      }, {}) : {};
      spacing.filterProps = spacingKeys;
      var _default = spacing;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/createTheme/createSpacing.js
  var require_createSpacing = __commonJS({
    "node_modules/@mui/system/createTheme/createSpacing.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createSpacing2;
      var _spacing = require_spacing();
      function createSpacing2(spacingInput = 8) {
        if (spacingInput.mui) {
          return spacingInput;
        }
        const transform2 = (0, _spacing.createUnarySpacing)({
          spacing: spacingInput
        });
        const spacing = (...argsInput) => {
          if (true) {
            if (!(argsInput.length <= 4)) {
              console.error(`MUI: Too many arguments provided, expected between 0 and 4, got ${argsInput.length}`);
            }
          }
          const args = argsInput.length === 0 ? [1] : argsInput;
          return args.map((argument) => {
            const output = transform2(argument);
            return typeof output === "number" ? `${output}px` : output;
          }).join(" ");
        };
        spacing.mui = true;
        return spacing;
      }
    }
  });

  // node_modules/@mui/system/compose.js
  var require_compose = __commonJS({
    "node_modules/@mui/system/compose.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _merge = _interopRequireDefault(require_merge());
      function compose(...styles7) {
        const handlers = styles7.reduce((acc, style) => {
          style.filterProps.forEach((prop) => {
            acc[prop] = style;
          });
          return acc;
        }, {});
        const fn2 = (props) => {
          return Object.keys(props).reduce((acc, prop) => {
            if (handlers[prop]) {
              return (0, _merge.default)(acc, handlers[prop](props));
            }
            return acc;
          }, {});
        };
        fn2.propTypes = true ? styles7.reduce((acc, style) => Object.assign(acc, style.propTypes), {}) : {};
        fn2.filterProps = styles7.reduce((acc, style) => acc.concat(style.filterProps), []);
        return fn2;
      }
      var _default = compose;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/borders.js
  var require_borders = __commonJS({
    "node_modules/@mui/system/borders.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.borderTopColor = exports.borderTop = exports.borderRightColor = exports.borderRight = exports.borderRadius = exports.borderLeftColor = exports.borderLeft = exports.borderColor = exports.borderBottomColor = exports.borderBottom = exports.border = void 0;
      exports.borderTransform = borderTransform;
      exports.default = void 0;
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var _spacing = require_spacing();
      var _breakpoints = require_breakpoints();
      function borderTransform(value) {
        if (typeof value !== "number") {
          return value;
        }
        return `${value}px solid`;
      }
      var border = (0, _style.default)({
        prop: "border",
        themeKey: "borders",
        transform: borderTransform
      });
      exports.border = border;
      var borderTop = (0, _style.default)({
        prop: "borderTop",
        themeKey: "borders",
        transform: borderTransform
      });
      exports.borderTop = borderTop;
      var borderRight = (0, _style.default)({
        prop: "borderRight",
        themeKey: "borders",
        transform: borderTransform
      });
      exports.borderRight = borderRight;
      var borderBottom = (0, _style.default)({
        prop: "borderBottom",
        themeKey: "borders",
        transform: borderTransform
      });
      exports.borderBottom = borderBottom;
      var borderLeft = (0, _style.default)({
        prop: "borderLeft",
        themeKey: "borders",
        transform: borderTransform
      });
      exports.borderLeft = borderLeft;
      var borderColor = (0, _style.default)({
        prop: "borderColor",
        themeKey: "palette"
      });
      exports.borderColor = borderColor;
      var borderTopColor = (0, _style.default)({
        prop: "borderTopColor",
        themeKey: "palette"
      });
      exports.borderTopColor = borderTopColor;
      var borderRightColor = (0, _style.default)({
        prop: "borderRightColor",
        themeKey: "palette"
      });
      exports.borderRightColor = borderRightColor;
      var borderBottomColor = (0, _style.default)({
        prop: "borderBottomColor",
        themeKey: "palette"
      });
      exports.borderBottomColor = borderBottomColor;
      var borderLeftColor = (0, _style.default)({
        prop: "borderLeftColor",
        themeKey: "palette"
      });
      exports.borderLeftColor = borderLeftColor;
      var borderRadius = (props) => {
        if (props.borderRadius !== void 0 && props.borderRadius !== null) {
          const transformer = (0, _spacing.createUnaryUnit)(props.theme, "shape.borderRadius", 4, "borderRadius");
          const styleFromPropValue = (propValue) => ({
            borderRadius: (0, _spacing.getValue)(transformer, propValue)
          });
          return (0, _breakpoints.handleBreakpoints)(props, props.borderRadius, styleFromPropValue);
        }
        return null;
      };
      exports.borderRadius = borderRadius;
      borderRadius.propTypes = true ? {
        borderRadius: _responsivePropType.default
      } : {};
      borderRadius.filterProps = ["borderRadius"];
      var borders = (0, _compose.default)(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderTopColor, borderRightColor, borderBottomColor, borderLeftColor, borderRadius);
      var _default = borders;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/cssGrid.js
  var require_cssGrid = __commonJS({
    "node_modules/@mui/system/cssGrid.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.rowGap = exports.gridTemplateRows = exports.gridTemplateColumns = exports.gridTemplateAreas = exports.gridRow = exports.gridColumn = exports.gridAutoRows = exports.gridAutoFlow = exports.gridAutoColumns = exports.gridArea = exports.gap = exports.default = exports.columnGap = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var _spacing = require_spacing();
      var _breakpoints = require_breakpoints();
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var gap = (props) => {
        if (props.gap !== void 0 && props.gap !== null) {
          const transformer = (0, _spacing.createUnaryUnit)(props.theme, "spacing", 8, "gap");
          const styleFromPropValue = (propValue) => ({
            gap: (0, _spacing.getValue)(transformer, propValue)
          });
          return (0, _breakpoints.handleBreakpoints)(props, props.gap, styleFromPropValue);
        }
        return null;
      };
      exports.gap = gap;
      gap.propTypes = true ? {
        gap: _responsivePropType.default
      } : {};
      gap.filterProps = ["gap"];
      var columnGap = (props) => {
        if (props.columnGap !== void 0 && props.columnGap !== null) {
          const transformer = (0, _spacing.createUnaryUnit)(props.theme, "spacing", 8, "columnGap");
          const styleFromPropValue = (propValue) => ({
            columnGap: (0, _spacing.getValue)(transformer, propValue)
          });
          return (0, _breakpoints.handleBreakpoints)(props, props.columnGap, styleFromPropValue);
        }
        return null;
      };
      exports.columnGap = columnGap;
      columnGap.propTypes = true ? {
        columnGap: _responsivePropType.default
      } : {};
      columnGap.filterProps = ["columnGap"];
      var rowGap = (props) => {
        if (props.rowGap !== void 0 && props.rowGap !== null) {
          const transformer = (0, _spacing.createUnaryUnit)(props.theme, "spacing", 8, "rowGap");
          const styleFromPropValue = (propValue) => ({
            rowGap: (0, _spacing.getValue)(transformer, propValue)
          });
          return (0, _breakpoints.handleBreakpoints)(props, props.rowGap, styleFromPropValue);
        }
        return null;
      };
      exports.rowGap = rowGap;
      rowGap.propTypes = true ? {
        rowGap: _responsivePropType.default
      } : {};
      rowGap.filterProps = ["rowGap"];
      var gridColumn = (0, _style.default)({
        prop: "gridColumn"
      });
      exports.gridColumn = gridColumn;
      var gridRow = (0, _style.default)({
        prop: "gridRow"
      });
      exports.gridRow = gridRow;
      var gridAutoFlow = (0, _style.default)({
        prop: "gridAutoFlow"
      });
      exports.gridAutoFlow = gridAutoFlow;
      var gridAutoColumns = (0, _style.default)({
        prop: "gridAutoColumns"
      });
      exports.gridAutoColumns = gridAutoColumns;
      var gridAutoRows = (0, _style.default)({
        prop: "gridAutoRows"
      });
      exports.gridAutoRows = gridAutoRows;
      var gridTemplateColumns = (0, _style.default)({
        prop: "gridTemplateColumns"
      });
      exports.gridTemplateColumns = gridTemplateColumns;
      var gridTemplateRows = (0, _style.default)({
        prop: "gridTemplateRows"
      });
      exports.gridTemplateRows = gridTemplateRows;
      var gridTemplateAreas = (0, _style.default)({
        prop: "gridTemplateAreas"
      });
      exports.gridTemplateAreas = gridTemplateAreas;
      var gridArea = (0, _style.default)({
        prop: "gridArea"
      });
      exports.gridArea = gridArea;
      var grid = (0, _compose.default)(gap, columnGap, rowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);
      var _default = grid;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/palette.js
  var require_palette = __commonJS({
    "node_modules/@mui/system/palette.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = exports.color = exports.bgcolor = exports.backgroundColor = void 0;
      exports.paletteTransform = paletteTransform;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      function paletteTransform(value, userValue) {
        if (userValue === "grey") {
          return userValue;
        }
        return value;
      }
      var color = (0, _style.default)({
        prop: "color",
        themeKey: "palette",
        transform: paletteTransform
      });
      exports.color = color;
      var bgcolor = (0, _style.default)({
        prop: "bgcolor",
        cssProperty: "backgroundColor",
        themeKey: "palette",
        transform: paletteTransform
      });
      exports.bgcolor = bgcolor;
      var backgroundColor = (0, _style.default)({
        prop: "backgroundColor",
        themeKey: "palette",
        transform: paletteTransform
      });
      exports.backgroundColor = backgroundColor;
      var palette = (0, _compose.default)(color, bgcolor, backgroundColor);
      var _default = palette;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/sizing.js
  var require_sizing = __commonJS({
    "node_modules/@mui/system/sizing.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.sizeWidth = exports.sizeHeight = exports.minWidth = exports.minHeight = exports.maxWidth = exports.maxHeight = exports.height = exports.default = exports.boxSizing = void 0;
      exports.sizingTransform = sizingTransform;
      exports.width = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var _breakpoints = require_breakpoints();
      function sizingTransform(value) {
        return value <= 1 && value !== 0 ? `${value * 100}%` : value;
      }
      var width = (0, _style.default)({
        prop: "width",
        transform: sizingTransform
      });
      exports.width = width;
      var maxWidth = (props) => {
        if (props.maxWidth !== void 0 && props.maxWidth !== null) {
          const styleFromPropValue = (propValue) => {
            var _props$theme, _props$theme2;
            const breakpoint = ((_props$theme = props.theme) == null || (_props$theme = _props$theme.breakpoints) == null || (_props$theme = _props$theme.values) == null ? void 0 : _props$theme[propValue]) || _breakpoints.values[propValue];
            if (!breakpoint) {
              return {
                maxWidth: sizingTransform(propValue)
              };
            }
            if (((_props$theme2 = props.theme) == null || (_props$theme2 = _props$theme2.breakpoints) == null ? void 0 : _props$theme2.unit) !== "px") {
              return {
                maxWidth: `${breakpoint}${props.theme.breakpoints.unit}`
              };
            }
            return {
              maxWidth: breakpoint
            };
          };
          return (0, _breakpoints.handleBreakpoints)(props, props.maxWidth, styleFromPropValue);
        }
        return null;
      };
      exports.maxWidth = maxWidth;
      maxWidth.filterProps = ["maxWidth"];
      var minWidth = (0, _style.default)({
        prop: "minWidth",
        transform: sizingTransform
      });
      exports.minWidth = minWidth;
      var height = (0, _style.default)({
        prop: "height",
        transform: sizingTransform
      });
      exports.height = height;
      var maxHeight = (0, _style.default)({
        prop: "maxHeight",
        transform: sizingTransform
      });
      exports.maxHeight = maxHeight;
      var minHeight = (0, _style.default)({
        prop: "minHeight",
        transform: sizingTransform
      });
      exports.minHeight = minHeight;
      var sizeWidth = (0, _style.default)({
        prop: "size",
        cssProperty: "width",
        transform: sizingTransform
      });
      exports.sizeWidth = sizeWidth;
      var sizeHeight = (0, _style.default)({
        prop: "size",
        cssProperty: "height",
        transform: sizingTransform
      });
      exports.sizeHeight = sizeHeight;
      var boxSizing = (0, _style.default)({
        prop: "boxSizing"
      });
      exports.boxSizing = boxSizing;
      var sizing = (0, _compose.default)(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);
      var _default = sizing;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/styleFunctionSx/defaultSxConfig.js
  var require_defaultSxConfig = __commonJS({
    "node_modules/@mui/system/styleFunctionSx/defaultSxConfig.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _spacing = require_spacing();
      var _borders = require_borders();
      var _cssGrid = require_cssGrid();
      var _palette = require_palette();
      var _sizing = require_sizing();
      var defaultSxConfig3 = {
        // borders
        border: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        borderTop: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        borderRight: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        borderBottom: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        borderLeft: {
          themeKey: "borders",
          transform: _borders.borderTransform
        },
        borderColor: {
          themeKey: "palette"
        },
        borderTopColor: {
          themeKey: "palette"
        },
        borderRightColor: {
          themeKey: "palette"
        },
        borderBottomColor: {
          themeKey: "palette"
        },
        borderLeftColor: {
          themeKey: "palette"
        },
        borderRadius: {
          themeKey: "shape.borderRadius",
          style: _borders.borderRadius
        },
        // palette
        color: {
          themeKey: "palette",
          transform: _palette.paletteTransform
        },
        bgcolor: {
          themeKey: "palette",
          cssProperty: "backgroundColor",
          transform: _palette.paletteTransform
        },
        backgroundColor: {
          themeKey: "palette",
          transform: _palette.paletteTransform
        },
        // spacing
        p: {
          style: _spacing.padding
        },
        pt: {
          style: _spacing.padding
        },
        pr: {
          style: _spacing.padding
        },
        pb: {
          style: _spacing.padding
        },
        pl: {
          style: _spacing.padding
        },
        px: {
          style: _spacing.padding
        },
        py: {
          style: _spacing.padding
        },
        padding: {
          style: _spacing.padding
        },
        paddingTop: {
          style: _spacing.padding
        },
        paddingRight: {
          style: _spacing.padding
        },
        paddingBottom: {
          style: _spacing.padding
        },
        paddingLeft: {
          style: _spacing.padding
        },
        paddingX: {
          style: _spacing.padding
        },
        paddingY: {
          style: _spacing.padding
        },
        paddingInline: {
          style: _spacing.padding
        },
        paddingInlineStart: {
          style: _spacing.padding
        },
        paddingInlineEnd: {
          style: _spacing.padding
        },
        paddingBlock: {
          style: _spacing.padding
        },
        paddingBlockStart: {
          style: _spacing.padding
        },
        paddingBlockEnd: {
          style: _spacing.padding
        },
        m: {
          style: _spacing.margin
        },
        mt: {
          style: _spacing.margin
        },
        mr: {
          style: _spacing.margin
        },
        mb: {
          style: _spacing.margin
        },
        ml: {
          style: _spacing.margin
        },
        mx: {
          style: _spacing.margin
        },
        my: {
          style: _spacing.margin
        },
        margin: {
          style: _spacing.margin
        },
        marginTop: {
          style: _spacing.margin
        },
        marginRight: {
          style: _spacing.margin
        },
        marginBottom: {
          style: _spacing.margin
        },
        marginLeft: {
          style: _spacing.margin
        },
        marginX: {
          style: _spacing.margin
        },
        marginY: {
          style: _spacing.margin
        },
        marginInline: {
          style: _spacing.margin
        },
        marginInlineStart: {
          style: _spacing.margin
        },
        marginInlineEnd: {
          style: _spacing.margin
        },
        marginBlock: {
          style: _spacing.margin
        },
        marginBlockStart: {
          style: _spacing.margin
        },
        marginBlockEnd: {
          style: _spacing.margin
        },
        // display
        displayPrint: {
          cssProperty: false,
          transform: (value) => ({
            "@media print": {
              display: value
            }
          })
        },
        display: {},
        overflow: {},
        textOverflow: {},
        visibility: {},
        whiteSpace: {},
        // flexbox
        flexBasis: {},
        flexDirection: {},
        flexWrap: {},
        justifyContent: {},
        alignItems: {},
        alignContent: {},
        order: {},
        flex: {},
        flexGrow: {},
        flexShrink: {},
        alignSelf: {},
        justifyItems: {},
        justifySelf: {},
        // grid
        gap: {
          style: _cssGrid.gap
        },
        rowGap: {
          style: _cssGrid.rowGap
        },
        columnGap: {
          style: _cssGrid.columnGap
        },
        gridColumn: {},
        gridRow: {},
        gridAutoFlow: {},
        gridAutoColumns: {},
        gridAutoRows: {},
        gridTemplateColumns: {},
        gridTemplateRows: {},
        gridTemplateAreas: {},
        gridArea: {},
        // positions
        position: {},
        zIndex: {
          themeKey: "zIndex"
        },
        top: {},
        right: {},
        bottom: {},
        left: {},
        // shadows
        boxShadow: {
          themeKey: "shadows"
        },
        // sizing
        width: {
          transform: _sizing.sizingTransform
        },
        maxWidth: {
          style: _sizing.maxWidth
        },
        minWidth: {
          transform: _sizing.sizingTransform
        },
        height: {
          transform: _sizing.sizingTransform
        },
        maxHeight: {
          transform: _sizing.sizingTransform
        },
        minHeight: {
          transform: _sizing.sizingTransform
        },
        boxSizing: {},
        // typography
        fontFamily: {
          themeKey: "typography"
        },
        fontSize: {
          themeKey: "typography"
        },
        fontStyle: {
          themeKey: "typography"
        },
        fontWeight: {
          themeKey: "typography"
        },
        letterSpacing: {},
        textTransform: {},
        lineHeight: {},
        textAlign: {},
        typography: {
          cssProperty: false,
          themeKey: "typography"
        }
      };
      var _default = defaultSxConfig3;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/styleFunctionSx/styleFunctionSx.js
  var require_styleFunctionSx = __commonJS({
    "node_modules/@mui/system/styleFunctionSx/styleFunctionSx.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.unstable_createStyleFunctionSx = unstable_createStyleFunctionSx;
      var _utils = require_utils();
      var _merge = _interopRequireDefault(require_merge());
      var _style = require_style();
      var _breakpoints = require_breakpoints();
      var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig());
      function objectsHaveSameKeys(...objects) {
        const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);
        const union = new Set(allKeys);
        return objects.every((object) => union.size === Object.keys(object).length);
      }
      function callIfFn(maybeFn, arg) {
        return typeof maybeFn === "function" ? maybeFn(arg) : maybeFn;
      }
      function unstable_createStyleFunctionSx() {
        function getThemeValue(prop, val, theme, config2) {
          const props = {
            [prop]: val,
            theme
          };
          const options = config2[prop];
          if (!options) {
            return {
              [prop]: val
            };
          }
          const {
            cssProperty = prop,
            themeKey,
            transform: transform2,
            style
          } = options;
          if (val == null) {
            return null;
          }
          if (themeKey === "typography" && val === "inherit") {
            return {
              [prop]: val
            };
          }
          const themeMapping = (0, _style.getPath)(theme, themeKey) || {};
          if (style) {
            return style(props);
          }
          const styleFromPropValue = (propValueFinal) => {
            let value = (0, _style.getStyleValue)(themeMapping, transform2, propValueFinal);
            if (propValueFinal === value && typeof propValueFinal === "string") {
              value = (0, _style.getStyleValue)(themeMapping, transform2, `${prop}${propValueFinal === "default" ? "" : (0, _utils.unstable_capitalize)(propValueFinal)}`, propValueFinal);
            }
            if (cssProperty === false) {
              return value;
            }
            return {
              [cssProperty]: value
            };
          };
          return (0, _breakpoints.handleBreakpoints)(props, val, styleFromPropValue);
        }
        function styleFunctionSx5(props) {
          var _theme$unstable_sxCon;
          const {
            sx,
            theme = {}
          } = props || {};
          if (!sx) {
            return null;
          }
          const config2 = (_theme$unstable_sxCon = theme.unstable_sxConfig) != null ? _theme$unstable_sxCon : _defaultSxConfig.default;
          function traverse(sxInput) {
            let sxObject = sxInput;
            if (typeof sxInput === "function") {
              sxObject = sxInput(theme);
            } else if (typeof sxInput !== "object") {
              return sxInput;
            }
            if (!sxObject) {
              return null;
            }
            const emptyBreakpoints = (0, _breakpoints.createEmptyBreakpointObject)(theme.breakpoints);
            const breakpointsKeys = Object.keys(emptyBreakpoints);
            let css7 = emptyBreakpoints;
            Object.keys(sxObject).forEach((styleKey) => {
              const value = callIfFn(sxObject[styleKey], theme);
              if (value !== null && value !== void 0) {
                if (typeof value === "object") {
                  if (config2[styleKey]) {
                    css7 = (0, _merge.default)(css7, getThemeValue(styleKey, value, theme, config2));
                  } else {
                    const breakpointsValues = (0, _breakpoints.handleBreakpoints)({
                      theme
                    }, value, (x) => ({
                      [styleKey]: x
                    }));
                    if (objectsHaveSameKeys(breakpointsValues, value)) {
                      css7[styleKey] = styleFunctionSx5({
                        sx: value,
                        theme
                      });
                    } else {
                      css7 = (0, _merge.default)(css7, breakpointsValues);
                    }
                  }
                } else {
                  css7 = (0, _merge.default)(css7, getThemeValue(styleKey, value, theme, config2));
                }
              }
            });
            return (0, _breakpoints.removeUnusedBreakpoints)(breakpointsKeys, css7);
          }
          return Array.isArray(sx) ? sx.map(traverse) : traverse(sx);
        }
        return styleFunctionSx5;
      }
      var styleFunctionSx4 = unstable_createStyleFunctionSx();
      styleFunctionSx4.filterProps = ["sx"];
      var _default = styleFunctionSx4;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/createTheme/createTheme.js
  var require_createTheme = __commonJS({
    "node_modules/@mui/system/createTheme/createTheme.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _utils = require_utils();
      var _createBreakpoints = _interopRequireDefault(require_createBreakpoints());
      var _shape = _interopRequireDefault(require_shape());
      var _createSpacing = _interopRequireDefault(require_createSpacing());
      var _styleFunctionSx = _interopRequireDefault(require_styleFunctionSx());
      var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig());
      var _excluded170 = ["breakpoints", "palette", "spacing", "shape"];
      function createTheme2(options = {}, ...args) {
        const {
          breakpoints: breakpointsInput = {},
          palette: paletteInput = {},
          spacing: spacingInput,
          shape: shapeInput = {}
        } = options, other = (0, _objectWithoutPropertiesLoose2.default)(options, _excluded170);
        const breakpoints = (0, _createBreakpoints.default)(breakpointsInput);
        const spacing = (0, _createSpacing.default)(spacingInput);
        let muiTheme = (0, _utils.deepmerge)({
          breakpoints,
          direction: "ltr",
          components: {},
          // Inject component definitions.
          palette: (0, _extends2.default)({
            mode: "light"
          }, paletteInput),
          spacing,
          shape: (0, _extends2.default)({}, _shape.default, shapeInput)
        }, other);
        muiTheme = args.reduce((acc, argument) => (0, _utils.deepmerge)(acc, argument), muiTheme);
        muiTheme.unstable_sxConfig = (0, _extends2.default)({}, _defaultSxConfig.default, other == null ? void 0 : other.unstable_sxConfig);
        muiTheme.unstable_sx = function sx(props) {
          return (0, _styleFunctionSx.default)({
            sx: props,
            theme: this
          });
        };
        return muiTheme;
      }
      var _default = createTheme2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/createTheme/index.js
  var require_createTheme2 = __commonJS({
    "node_modules/@mui/system/createTheme/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _createTheme.default;
        }
      });
      var _createTheme = _interopRequireDefault(require_createTheme());
    }
  });

  // node_modules/@mui/system/useThemeWithoutDefault.js
  var require_useThemeWithoutDefault = __commonJS({
    "node_modules/@mui/system/useThemeWithoutDefault.js"(exports) {
      "use strict";
      "use client";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React264 = _interopRequireWildcard(require_react());
      var _styledEngine = require_node();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
      function isObjectEmpty(obj) {
        return Object.keys(obj).length === 0;
      }
      function useTheme7(defaultTheme4 = null) {
        const contextTheme = React264.useContext(_styledEngine.ThemeContext);
        return !contextTheme || isObjectEmpty(contextTheme) ? defaultTheme4 : contextTheme;
      }
      var _default = useTheme7;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/useTheme.js
  var require_useTheme3 = __commonJS({
    "node_modules/@mui/system/useTheme.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.systemDefaultTheme = exports.default = void 0;
      var _createTheme = _interopRequireDefault(require_createTheme2());
      var _useThemeWithoutDefault = _interopRequireDefault(require_useThemeWithoutDefault());
      var systemDefaultTheme = (0, _createTheme.default)();
      exports.systemDefaultTheme = systemDefaultTheme;
      function useTheme7(defaultTheme4 = systemDefaultTheme) {
        return (0, _useThemeWithoutDefault.default)(defaultTheme4);
      }
      var _default = useTheme7;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/GlobalStyles/GlobalStyles.js
  var require_GlobalStyles3 = __commonJS({
    "node_modules/@mui/system/GlobalStyles/GlobalStyles.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var React264 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _styledEngine = require_node();
      var _useTheme = _interopRequireDefault(require_useTheme3());
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
      function GlobalStyles2({
        styles: styles7,
        themeId,
        defaultTheme: defaultTheme4 = {}
      }) {
        const upperTheme = (0, _useTheme.default)(defaultTheme4);
        const globalStyles = typeof styles7 === "function" ? styles7(themeId ? upperTheme[themeId] || upperTheme : upperTheme) : styles7;
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_styledEngine.GlobalStyles, {
          styles: globalStyles
        });
      }
      true ? GlobalStyles2.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * @ignore
         */
        defaultTheme: _propTypes.default.object,
        /**
         * @ignore
         */
        styles: _propTypes.default.oneOfType([_propTypes.default.array, _propTypes.default.func, _propTypes.default.number, _propTypes.default.object, _propTypes.default.string, _propTypes.default.bool]),
        /**
         * @ignore
         */
        themeId: _propTypes.default.string
      } : void 0;
      var _default = GlobalStyles2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/GlobalStyles/index.js
  var require_GlobalStyles4 = __commonJS({
    "node_modules/@mui/system/GlobalStyles/index.js"(exports) {
      "use strict";
      "use client";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {};
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _GlobalStyles.default;
        }
      });
      var _GlobalStyles = _interopRequireWildcard(require_GlobalStyles3());
      Object.keys(_GlobalStyles).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _GlobalStyles[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _GlobalStyles[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/system/display.js
  var require_display = __commonJS({
    "node_modules/@mui/system/display.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.whiteSpace = exports.visibility = exports.textOverflow = exports.overflow = exports.displayRaw = exports.displayPrint = exports.default = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var displayPrint = (0, _style.default)({
        prop: "displayPrint",
        cssProperty: false,
        transform: (value) => ({
          "@media print": {
            display: value
          }
        })
      });
      exports.displayPrint = displayPrint;
      var displayRaw = (0, _style.default)({
        prop: "display"
      });
      exports.displayRaw = displayRaw;
      var overflow = (0, _style.default)({
        prop: "overflow"
      });
      exports.overflow = overflow;
      var textOverflow = (0, _style.default)({
        prop: "textOverflow"
      });
      exports.textOverflow = textOverflow;
      var visibility = (0, _style.default)({
        prop: "visibility"
      });
      exports.visibility = visibility;
      var whiteSpace = (0, _style.default)({
        prop: "whiteSpace"
      });
      exports.whiteSpace = whiteSpace;
      var _default = (0, _compose.default)(displayPrint, displayRaw, overflow, textOverflow, visibility, whiteSpace);
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/flexbox.js
  var require_flexbox = __commonJS({
    "node_modules/@mui/system/flexbox.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.order = exports.justifySelf = exports.justifyItems = exports.justifyContent = exports.flexWrap = exports.flexShrink = exports.flexGrow = exports.flexDirection = exports.flexBasis = exports.flex = exports.default = exports.alignSelf = exports.alignItems = exports.alignContent = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var flexBasis = (0, _style.default)({
        prop: "flexBasis"
      });
      exports.flexBasis = flexBasis;
      var flexDirection = (0, _style.default)({
        prop: "flexDirection"
      });
      exports.flexDirection = flexDirection;
      var flexWrap = (0, _style.default)({
        prop: "flexWrap"
      });
      exports.flexWrap = flexWrap;
      var justifyContent = (0, _style.default)({
        prop: "justifyContent"
      });
      exports.justifyContent = justifyContent;
      var alignItems = (0, _style.default)({
        prop: "alignItems"
      });
      exports.alignItems = alignItems;
      var alignContent = (0, _style.default)({
        prop: "alignContent"
      });
      exports.alignContent = alignContent;
      var order2 = (0, _style.default)({
        prop: "order"
      });
      exports.order = order2;
      var flex = (0, _style.default)({
        prop: "flex"
      });
      exports.flex = flex;
      var flexGrow = (0, _style.default)({
        prop: "flexGrow"
      });
      exports.flexGrow = flexGrow;
      var flexShrink = (0, _style.default)({
        prop: "flexShrink"
      });
      exports.flexShrink = flexShrink;
      var alignSelf = (0, _style.default)({
        prop: "alignSelf"
      });
      exports.alignSelf = alignSelf;
      var justifyItems = (0, _style.default)({
        prop: "justifyItems"
      });
      exports.justifyItems = justifyItems;
      var justifySelf = (0, _style.default)({
        prop: "justifySelf"
      });
      exports.justifySelf = justifySelf;
      var flexbox = (0, _compose.default)(flexBasis, flexDirection, flexWrap, justifyContent, alignItems, alignContent, order2, flex, flexGrow, flexShrink, alignSelf, justifyItems, justifySelf);
      var _default = flexbox;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/positions.js
  var require_positions = __commonJS({
    "node_modules/@mui/system/positions.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.zIndex = exports.top = exports.right = exports.position = exports.left = exports.default = exports.bottom = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var position2 = (0, _style.default)({
        prop: "position"
      });
      exports.position = position2;
      var zIndex2 = (0, _style.default)({
        prop: "zIndex",
        themeKey: "zIndex"
      });
      exports.zIndex = zIndex2;
      var top2 = (0, _style.default)({
        prop: "top"
      });
      exports.top = top2;
      var right2 = (0, _style.default)({
        prop: "right"
      });
      exports.right = right2;
      var bottom2 = (0, _style.default)({
        prop: "bottom"
      });
      exports.bottom = bottom2;
      var left2 = (0, _style.default)({
        prop: "left"
      });
      exports.left = left2;
      var _default = (0, _compose.default)(position2, zIndex2, top2, right2, bottom2, left2);
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/shadows.js
  var require_shadows = __commonJS({
    "node_modules/@mui/system/shadows.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _style = _interopRequireDefault(require_style());
      var boxShadow = (0, _style.default)({
        prop: "boxShadow",
        themeKey: "shadows"
      });
      var _default = boxShadow;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/typography.js
  var require_typography = __commonJS({
    "node_modules/@mui/system/typography.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.typographyVariant = exports.textTransform = exports.textAlign = exports.lineHeight = exports.letterSpacing = exports.fontWeight = exports.fontStyle = exports.fontSize = exports.fontFamily = exports.default = void 0;
      var _style = _interopRequireDefault(require_style());
      var _compose = _interopRequireDefault(require_compose());
      var fontFamily = (0, _style.default)({
        prop: "fontFamily",
        themeKey: "typography"
      });
      exports.fontFamily = fontFamily;
      var fontSize = (0, _style.default)({
        prop: "fontSize",
        themeKey: "typography"
      });
      exports.fontSize = fontSize;
      var fontStyle = (0, _style.default)({
        prop: "fontStyle",
        themeKey: "typography"
      });
      exports.fontStyle = fontStyle;
      var fontWeight = (0, _style.default)({
        prop: "fontWeight",
        themeKey: "typography"
      });
      exports.fontWeight = fontWeight;
      var letterSpacing = (0, _style.default)({
        prop: "letterSpacing"
      });
      exports.letterSpacing = letterSpacing;
      var textTransform = (0, _style.default)({
        prop: "textTransform"
      });
      exports.textTransform = textTransform;
      var lineHeight = (0, _style.default)({
        prop: "lineHeight"
      });
      exports.lineHeight = lineHeight;
      var textAlign = (0, _style.default)({
        prop: "textAlign"
      });
      exports.textAlign = textAlign;
      var typographyVariant = (0, _style.default)({
        prop: "typography",
        cssProperty: false,
        themeKey: "typography"
      });
      exports.typographyVariant = typographyVariant;
      var typography = (0, _compose.default)(typographyVariant, fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign, textTransform);
      var _default = typography;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/styleFunctionSx/extendSxProp.js
  var require_extendSxProp = __commonJS({
    "node_modules/@mui/system/styleFunctionSx/extendSxProp.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = extendSxProp3;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _utils = require_utils();
      var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig());
      var _excluded170 = ["sx"];
      var splitProps = (props) => {
        var _props$theme$unstable, _props$theme;
        const result = {
          systemProps: {},
          otherProps: {}
        };
        const config2 = (_props$theme$unstable = props == null || (_props$theme = props.theme) == null ? void 0 : _props$theme.unstable_sxConfig) != null ? _props$theme$unstable : _defaultSxConfig.default;
        Object.keys(props).forEach((prop) => {
          if (config2[prop]) {
            result.systemProps[prop] = props[prop];
          } else {
            result.otherProps[prop] = props[prop];
          }
        });
        return result;
      };
      function extendSxProp3(props) {
        const {
          sx: inSx
        } = props, other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded170);
        const {
          systemProps,
          otherProps
        } = splitProps(other);
        let finalSx;
        if (Array.isArray(inSx)) {
          finalSx = [systemProps, ...inSx];
        } else if (typeof inSx === "function") {
          finalSx = (...args) => {
            const result = inSx(...args);
            if (!(0, _utils.isPlainObject)(result)) {
              return systemProps;
            }
            return (0, _extends2.default)({}, systemProps, result);
          };
        } else {
          finalSx = (0, _extends2.default)({}, systemProps, inSx);
        }
        return (0, _extends2.default)({}, otherProps, {
          sx: finalSx
        });
      }
    }
  });

  // node_modules/@mui/system/styleFunctionSx/index.js
  var require_styleFunctionSx2 = __commonJS({
    "node_modules/@mui/system/styleFunctionSx/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _styleFunctionSx.default;
        }
      });
      Object.defineProperty(exports, "extendSxProp", {
        enumerable: true,
        get: function() {
          return _extendSxProp.default;
        }
      });
      Object.defineProperty(exports, "unstable_createStyleFunctionSx", {
        enumerable: true,
        get: function() {
          return _styleFunctionSx.unstable_createStyleFunctionSx;
        }
      });
      Object.defineProperty(exports, "unstable_defaultSxConfig", {
        enumerable: true,
        get: function() {
          return _defaultSxConfig.default;
        }
      });
      var _styleFunctionSx = _interopRequireWildcard(require_styleFunctionSx());
      var _extendSxProp = _interopRequireDefault(require_extendSxProp());
      var _defaultSxConfig = _interopRequireDefault(require_defaultSxConfig());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/system/getThemeValue.js
  var require_getThemeValue = __commonJS({
    "node_modules/@mui/system/getThemeValue.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.styleFunctionMapping = exports.propToStyleFunction = exports.default = void 0;
      var _borders = _interopRequireDefault(require_borders());
      var _display = _interopRequireDefault(require_display());
      var _flexbox = _interopRequireDefault(require_flexbox());
      var _cssGrid = _interopRequireDefault(require_cssGrid());
      var _positions = _interopRequireDefault(require_positions());
      var _palette = _interopRequireDefault(require_palette());
      var _shadows = _interopRequireDefault(require_shadows());
      var _sizing = _interopRequireDefault(require_sizing());
      var _spacing = _interopRequireDefault(require_spacing());
      var _typography = _interopRequireDefault(require_typography());
      var filterPropsMapping = {
        borders: _borders.default.filterProps,
        display: _display.default.filterProps,
        flexbox: _flexbox.default.filterProps,
        grid: _cssGrid.default.filterProps,
        positions: _positions.default.filterProps,
        palette: _palette.default.filterProps,
        shadows: _shadows.default.filterProps,
        sizing: _sizing.default.filterProps,
        spacing: _spacing.default.filterProps,
        typography: _typography.default.filterProps
      };
      var styleFunctionMapping = {
        borders: _borders.default,
        display: _display.default,
        flexbox: _flexbox.default,
        grid: _cssGrid.default,
        positions: _positions.default,
        palette: _palette.default,
        shadows: _shadows.default,
        sizing: _sizing.default,
        spacing: _spacing.default,
        typography: _typography.default
      };
      exports.styleFunctionMapping = styleFunctionMapping;
      var propToStyleFunction = Object.keys(filterPropsMapping).reduce((acc, styleFnName) => {
        filterPropsMapping[styleFnName].forEach((propName) => {
          acc[propName] = styleFunctionMapping[styleFnName];
        });
        return acc;
      }, {});
      exports.propToStyleFunction = propToStyleFunction;
      function getThemeValue(prop, value, theme) {
        const inputProps = {
          [prop]: value,
          theme
        };
        const styleFunction = propToStyleFunction[prop];
        return styleFunction ? styleFunction(inputProps) : {
          [prop]: value
        };
      }
      var _default = getThemeValue;
      exports.default = _default;
    }
  });

  // node_modules/clsx/dist/clsx.js
  var require_clsx = __commonJS({
    "node_modules/clsx/dist/clsx.js"(exports, module) {
      function e(r3) {
        var o, t, f = "";
        if ("string" == typeof r3 || "number" == typeof r3)
          f += r3;
        else if ("object" == typeof r3)
          if (Array.isArray(r3))
            for (o = 0; o < r3.length; o++)
              r3[o] && (t = e(r3[o])) && (f && (f += " "), f += t);
          else
            for (o in r3)
              r3[o] && (f && (f += " "), f += o);
        return f;
      }
      function r2() {
        for (var r3, o, t = 0, f = ""; t < arguments.length; )
          (r3 = arguments[t++]) && (o = e(r3)) && (f && (f += " "), f += o);
        return f;
      }
      module.exports = r2, module.exports.clsx = r2;
    }
  });

  // node_modules/@mui/system/createBox.js
  var require_createBox = __commonJS({
    "node_modules/@mui/system/createBox.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createBox2;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var React264 = _interopRequireWildcard(require_react());
      var _clsx = _interopRequireDefault(require_clsx());
      var _styledEngine = _interopRequireDefault(require_node());
      var _styleFunctionSx = _interopRequireWildcard(require_styleFunctionSx2());
      var _useTheme = _interopRequireDefault(require_useTheme3());
      var _jsxRuntime = require_jsx_runtime();
      var _excluded170 = ["className", "component"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
      function createBox2(options = {}) {
        const {
          themeId,
          defaultTheme: defaultTheme4,
          defaultClassName = "MuiBox-root",
          generateClassName
        } = options;
        const BoxRoot = (0, _styledEngine.default)("div", {
          shouldForwardProp: (prop) => prop !== "theme" && prop !== "sx" && prop !== "as"
        })(_styleFunctionSx.default);
        const Box2 = /* @__PURE__ */ React264.forwardRef(function Box3(inProps, ref) {
          const theme = (0, _useTheme.default)(defaultTheme4);
          const _extendSxProp = (0, _styleFunctionSx.extendSxProp)(inProps), {
            className,
            component = "div"
          } = _extendSxProp, other = (0, _objectWithoutPropertiesLoose2.default)(_extendSxProp, _excluded170);
          return /* @__PURE__ */ (0, _jsxRuntime.jsx)(BoxRoot, (0, _extends2.default)({
            as: component,
            ref,
            className: (0, _clsx.default)(className, generateClassName ? generateClassName(defaultClassName) : defaultClassName),
            theme: themeId ? theme[themeId] || theme : theme
          }, other));
        });
        return Box2;
      }
    }
  });

  // node_modules/@mui/system/Box/Box.js
  var require_Box = __commonJS({
    "node_modules/@mui/system/Box/Box.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _createBox = _interopRequireDefault(require_createBox());
      var Box2 = (0, _createBox.default)();
      true ? Box2.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit the d.ts file and run "yarn proptypes"     |
        // ----------------------------------------------------------------------
        /**
         * @ignore
         */
        children: _propTypes.default.node,
        /**
         * The component used for the root node.
         * Either a string to use a HTML element or a component.
         */
        component: _propTypes.default.elementType,
        /**
         * The system prop that allows defining system overrides as well as additional CSS styles.
         */
        sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
      } : void 0;
      var _default = Box2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/Box/index.js
  var require_Box2 = __commonJS({
    "node_modules/@mui/system/Box/index.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _Box.default;
        }
      });
      var _Box = _interopRequireDefault(require_Box());
    }
  });

  // node_modules/@mui/system/propsToClassKey.js
  var require_propsToClassKey = __commonJS({
    "node_modules/@mui/system/propsToClassKey.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = propsToClassKey2;
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _utils = require_utils();
      var _excluded170 = ["variant"];
      function isEmpty5(string) {
        return string.length === 0;
      }
      function propsToClassKey2(props) {
        const {
          variant
        } = props, other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded170);
        let classKey = variant || "";
        Object.keys(other).sort().forEach((key) => {
          if (key === "color") {
            classKey += isEmpty5(classKey) ? props[key] : (0, _utils.unstable_capitalize)(props[key]);
          } else {
            classKey += `${isEmpty5(classKey) ? key : (0, _utils.unstable_capitalize)(key)}${(0, _utils.unstable_capitalize)(props[key].toString())}`;
          }
        });
        return classKey;
      }
    }
  });

  // node_modules/@mui/system/createStyled.js
  var require_createStyled = __commonJS({
    "node_modules/@mui/system/createStyled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createStyled4;
      exports.shouldForwardProp = shouldForwardProp2;
      exports.systemDefaultTheme = void 0;
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _extends2 = _interopRequireDefault(require_extends());
      var _styledEngine = _interopRequireWildcard(require_node());
      var _utils = require_utils();
      var _createTheme = _interopRequireDefault(require_createTheme2());
      var _propsToClassKey = _interopRequireDefault(require_propsToClassKey());
      var _styleFunctionSx = _interopRequireDefault(require_styleFunctionSx2());
      var _excluded170 = ["name", "slot", "skipVariantsResolver", "skipSx", "overridesResolver"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
      function isEmpty5(obj) {
        return Object.keys(obj).length === 0;
      }
      function isStringTag(tag) {
        return typeof tag === "string" && // 96 is one less than the char code
        // for "a" so this is checking that
        // it's a lowercase character
        tag.charCodeAt(0) > 96;
      }
      var getStyleOverrides = (name, theme) => {
        if (theme.components && theme.components[name] && theme.components[name].styleOverrides) {
          return theme.components[name].styleOverrides;
        }
        return null;
      };
      var getVariantStyles = (name, theme) => {
        let variants = [];
        if (theme && theme.components && theme.components[name] && theme.components[name].variants) {
          variants = theme.components[name].variants;
        }
        const variantsStyles = {};
        variants.forEach((definition) => {
          const key = (0, _propsToClassKey.default)(definition.props);
          variantsStyles[key] = definition.style;
        });
        return variantsStyles;
      };
      var variantsResolver = (props, styles7, theme, name) => {
        var _theme$components;
        const {
          ownerState = {}
        } = props;
        const variantsStyles = [];
        const themeVariants = theme == null || (_theme$components = theme.components) == null || (_theme$components = _theme$components[name]) == null ? void 0 : _theme$components.variants;
        if (themeVariants) {
          themeVariants.forEach((themeVariant) => {
            let isMatch = true;
            Object.keys(themeVariant.props).forEach((key) => {
              if (ownerState[key] !== themeVariant.props[key] && props[key] !== themeVariant.props[key]) {
                isMatch = false;
              }
            });
            if (isMatch) {
              variantsStyles.push(styles7[(0, _propsToClassKey.default)(themeVariant.props)]);
            }
          });
        }
        return variantsStyles;
      };
      function shouldForwardProp2(prop) {
        return prop !== "ownerState" && prop !== "theme" && prop !== "sx" && prop !== "as";
      }
      var systemDefaultTheme = (0, _createTheme.default)();
      exports.systemDefaultTheme = systemDefaultTheme;
      var lowercaseFirstLetter = (string) => {
        if (!string) {
          return string;
        }
        return string.charAt(0).toLowerCase() + string.slice(1);
      };
      function resolveTheme({
        defaultTheme: defaultTheme4,
        theme,
        themeId
      }) {
        return isEmpty5(theme) ? defaultTheme4 : theme[themeId] || theme;
      }
      function defaultOverridesResolver(slot) {
        if (!slot) {
          return null;
        }
        return (props, styles7) => styles7[slot];
      }
      function createStyled4(input = {}) {
        const {
          themeId,
          defaultTheme: defaultTheme4 = systemDefaultTheme,
          rootShouldForwardProp: rootShouldForwardProp2 = shouldForwardProp2,
          slotShouldForwardProp: slotShouldForwardProp2 = shouldForwardProp2
        } = input;
        const systemSx = (props) => {
          return (0, _styleFunctionSx.default)((0, _extends2.default)({}, props, {
            theme: resolveTheme((0, _extends2.default)({}, props, {
              defaultTheme: defaultTheme4,
              themeId
            }))
          }));
        };
        systemSx.__mui_systemSx = true;
        return (tag, inputOptions = {}) => {
          (0, _styledEngine.internal_processStyles)(tag, (styles7) => styles7.filter((style) => !(style != null && style.__mui_systemSx)));
          const {
            name: componentName,
            slot: componentSlot,
            skipVariantsResolver: inputSkipVariantsResolver,
            skipSx: inputSkipSx,
            // TODO v6: remove `lowercaseFirstLetter()` in the next major release
            // For more details: https://github.com/mui/material-ui/pull/37908
            overridesResolver: overridesResolver8 = defaultOverridesResolver(lowercaseFirstLetter(componentSlot))
          } = inputOptions, options = (0, _objectWithoutPropertiesLoose2.default)(inputOptions, _excluded170);
          const skipVariantsResolver = inputSkipVariantsResolver !== void 0 ? inputSkipVariantsResolver : (
            // TODO v6: remove `Root` in the next major release
            // For more details: https://github.com/mui/material-ui/pull/37908
            componentSlot && componentSlot !== "Root" && componentSlot !== "root" || false
          );
          const skipSx = inputSkipSx || false;
          let label;
          if (true) {
            if (componentName) {
              label = `${componentName}-${lowercaseFirstLetter(componentSlot || "Root")}`;
            }
          }
          let shouldForwardPropOption = shouldForwardProp2;
          if (componentSlot === "Root" || componentSlot === "root") {
            shouldForwardPropOption = rootShouldForwardProp2;
          } else if (componentSlot) {
            shouldForwardPropOption = slotShouldForwardProp2;
          } else if (isStringTag(tag)) {
            shouldForwardPropOption = void 0;
          }
          const defaultStyledResolver = (0, _styledEngine.default)(tag, (0, _extends2.default)({
            shouldForwardProp: shouldForwardPropOption,
            label
          }, options));
          const muiStyledResolver = (styleArg, ...expressions) => {
            const expressionsWithDefaultTheme = expressions ? expressions.map((stylesArg) => {
              return typeof stylesArg === "function" && stylesArg.__emotion_real !== stylesArg ? (props) => {
                return stylesArg((0, _extends2.default)({}, props, {
                  theme: resolveTheme((0, _extends2.default)({}, props, {
                    defaultTheme: defaultTheme4,
                    themeId
                  }))
                }));
              } : stylesArg;
            }) : [];
            let transformedStyleArg = styleArg;
            if (componentName && overridesResolver8) {
              expressionsWithDefaultTheme.push((props) => {
                const theme = resolveTheme((0, _extends2.default)({}, props, {
                  defaultTheme: defaultTheme4,
                  themeId
                }));
                const styleOverrides = getStyleOverrides(componentName, theme);
                if (styleOverrides) {
                  const resolvedStyleOverrides = {};
                  Object.entries(styleOverrides).forEach(([slotKey, slotStyle]) => {
                    resolvedStyleOverrides[slotKey] = typeof slotStyle === "function" ? slotStyle((0, _extends2.default)({}, props, {
                      theme
                    })) : slotStyle;
                  });
                  return overridesResolver8(props, resolvedStyleOverrides);
                }
                return null;
              });
            }
            if (componentName && !skipVariantsResolver) {
              expressionsWithDefaultTheme.push((props) => {
                const theme = resolveTheme((0, _extends2.default)({}, props, {
                  defaultTheme: defaultTheme4,
                  themeId
                }));
                return variantsResolver(props, getVariantStyles(componentName, theme), theme, componentName);
              });
            }
            if (!skipSx) {
              expressionsWithDefaultTheme.push(systemSx);
            }
            const numOfCustomFnsApplied = expressionsWithDefaultTheme.length - expressions.length;
            if (Array.isArray(styleArg) && numOfCustomFnsApplied > 0) {
              const placeholders = new Array(numOfCustomFnsApplied).fill("");
              transformedStyleArg = [...styleArg, ...placeholders];
              transformedStyleArg.raw = [...styleArg.raw, ...placeholders];
            } else if (typeof styleArg === "function" && // On the server Emotion doesn't use React.forwardRef for creating components, so the created
            // component stays as a function. This condition makes sure that we do not interpolate functions
            // which are basically components used as a selectors.
            styleArg.__emotion_real !== styleArg) {
              transformedStyleArg = (props) => styleArg((0, _extends2.default)({}, props, {
                theme: resolveTheme((0, _extends2.default)({}, props, {
                  defaultTheme: defaultTheme4,
                  themeId
                }))
              }));
            }
            const Component = defaultStyledResolver(transformedStyleArg, ...expressionsWithDefaultTheme);
            if (true) {
              let displayName;
              if (componentName) {
                displayName = `${componentName}${(0, _utils.unstable_capitalize)(componentSlot || "")}`;
              }
              if (displayName === void 0) {
                displayName = `Styled(${(0, _utils.getDisplayName)(tag)})`;
              }
              Component.displayName = displayName;
            }
            if (tag.muiName) {
              Component.muiName = tag.muiName;
            }
            return Component;
          };
          if (defaultStyledResolver.withConfig) {
            muiStyledResolver.withConfig = defaultStyledResolver.withConfig;
          }
          return muiStyledResolver;
        };
      }
    }
  });

  // node_modules/@mui/system/styled.js
  var require_styled = __commonJS({
    "node_modules/@mui/system/styled.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createStyled = _interopRequireDefault(require_createStyled());
      var styled2 = (0, _createStyled.default)();
      var _default = styled2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/useThemeProps/getThemeProps.js
  var require_getThemeProps = __commonJS({
    "node_modules/@mui/system/useThemeProps/getThemeProps.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = getThemeProps3;
      var _utils = require_utils();
      function getThemeProps3(params) {
        const {
          theme,
          name,
          props
        } = params;
        if (!theme || !theme.components || !theme.components[name] || !theme.components[name].defaultProps) {
          return props;
        }
        return (0, _utils.internal_resolveProps)(theme.components[name].defaultProps, props);
      }
    }
  });

  // node_modules/@mui/system/useThemeProps/useThemeProps.js
  var require_useThemeProps = __commonJS({
    "node_modules/@mui/system/useThemeProps/useThemeProps.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useThemeProps3;
      var _getThemeProps = _interopRequireDefault(require_getThemeProps());
      var _useTheme = _interopRequireDefault(require_useTheme3());
      function useThemeProps3({
        props,
        name,
        defaultTheme: defaultTheme4,
        themeId
      }) {
        let theme = (0, _useTheme.default)(defaultTheme4);
        if (themeId) {
          theme = theme[themeId] || theme;
        }
        const mergedProps = (0, _getThemeProps.default)({
          theme,
          name,
          props
        });
        return mergedProps;
      }
    }
  });

  // node_modules/@mui/system/useThemeProps/index.js
  var require_useThemeProps2 = __commonJS({
    "node_modules/@mui/system/useThemeProps/index.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _useThemeProps.default;
        }
      });
      Object.defineProperty(exports, "getThemeProps", {
        enumerable: true,
        get: function() {
          return _getThemeProps.default;
        }
      });
      var _useThemeProps = _interopRequireDefault(require_useThemeProps());
      var _getThemeProps = _interopRequireDefault(require_getThemeProps());
    }
  });

  // node_modules/@mui/system/colorManipulator.js
  var require_colorManipulator = __commonJS({
    "node_modules/@mui/system/colorManipulator.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.alpha = alpha21;
      exports.colorChannel = void 0;
      exports.darken = darken8;
      exports.decomposeColor = decomposeColor2;
      exports.emphasize = emphasize5;
      exports.getContrastRatio = getContrastRatio3;
      exports.getLuminance = getLuminance2;
      exports.hexToRgb = hexToRgb2;
      exports.hslToRgb = hslToRgb2;
      exports.lighten = lighten8;
      exports.private_safeAlpha = private_safeAlpha;
      exports.private_safeColorChannel = void 0;
      exports.private_safeDarken = private_safeDarken;
      exports.private_safeEmphasize = private_safeEmphasize;
      exports.private_safeLighten = private_safeLighten;
      exports.recomposeColor = recomposeColor2;
      exports.rgbToHex = rgbToHex2;
      var _utils = require_utils();
      function clamp6(value, min3 = 0, max3 = 1) {
        if (true) {
          if (value < min3 || value > max3) {
            console.error(`MUI: The value provided ${value} is out of range [${min3}, ${max3}].`);
          }
        }
        return Math.min(Math.max(min3, value), max3);
      }
      function hexToRgb2(color) {
        color = color.slice(1);
        const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, "g");
        let colors = color.match(re);
        if (colors && colors[0].length === 1) {
          colors = colors.map((n) => n + n);
        }
        return colors ? `rgb${colors.length === 4 ? "a" : ""}(${colors.map((n, index3) => {
          return index3 < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1e3) / 1e3;
        }).join(", ")})` : "";
      }
      function intToHex(int) {
        const hex = int.toString(16);
        return hex.length === 1 ? `0${hex}` : hex;
      }
      function decomposeColor2(color) {
        if (color.type) {
          return color;
        }
        if (color.charAt(0) === "#") {
          return decomposeColor2(hexToRgb2(color));
        }
        const marker = color.indexOf("(");
        const type = color.substring(0, marker);
        if (["rgb", "rgba", "hsl", "hsla", "color"].indexOf(type) === -1) {
          throw new Error(true ? `MUI: Unsupported \`${color}\` color.
The following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().` : (0, _utils.formatMuiErrorMessage)(9, color));
        }
        let values2 = color.substring(marker + 1, color.length - 1);
        let colorSpace;
        if (type === "color") {
          values2 = values2.split(" ");
          colorSpace = values2.shift();
          if (values2.length === 4 && values2[3].charAt(0) === "/") {
            values2[3] = values2[3].slice(1);
          }
          if (["srgb", "display-p3", "a98-rgb", "prophoto-rgb", "rec-2020"].indexOf(colorSpace) === -1) {
            throw new Error(true ? `MUI: unsupported \`${colorSpace}\` color space.
The following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020.` : (0, _utils.formatMuiErrorMessage)(10, colorSpace));
          }
        } else {
          values2 = values2.split(",");
        }
        values2 = values2.map((value) => parseFloat(value));
        return {
          type,
          values: values2,
          colorSpace
        };
      }
      var colorChannel = (color) => {
        const decomposedColor = decomposeColor2(color);
        return decomposedColor.values.slice(0, 3).map((val, idx) => decomposedColor.type.indexOf("hsl") !== -1 && idx !== 0 ? `${val}%` : val).join(" ");
      };
      exports.colorChannel = colorChannel;
      var private_safeColorChannel = (color, warning2) => {
        try {
          return colorChannel(color);
        } catch (error) {
          if (warning2 && true) {
            console.warn(warning2);
          }
          return color;
        }
      };
      exports.private_safeColorChannel = private_safeColorChannel;
      function recomposeColor2(color) {
        const {
          type,
          colorSpace
        } = color;
        let {
          values: values2
        } = color;
        if (type.indexOf("rgb") !== -1) {
          values2 = values2.map((n, i) => i < 3 ? parseInt(n, 10) : n);
        } else if (type.indexOf("hsl") !== -1) {
          values2[1] = `${values2[1]}%`;
          values2[2] = `${values2[2]}%`;
        }
        if (type.indexOf("color") !== -1) {
          values2 = `${colorSpace} ${values2.join(" ")}`;
        } else {
          values2 = `${values2.join(", ")}`;
        }
        return `${type}(${values2})`;
      }
      function rgbToHex2(color) {
        if (color.indexOf("#") === 0) {
          return color;
        }
        const {
          values: values2
        } = decomposeColor2(color);
        return `#${values2.map((n, i) => intToHex(i === 3 ? Math.round(255 * n) : n)).join("")}`;
      }
      function hslToRgb2(color) {
        color = decomposeColor2(color);
        const {
          values: values2
        } = color;
        const h = values2[0];
        const s = values2[1] / 100;
        const l = values2[2] / 100;
        const a = s * Math.min(l, 1 - l);
        const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
        let type = "rgb";
        const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];
        if (color.type === "hsla") {
          type += "a";
          rgb.push(values2[3]);
        }
        return recomposeColor2({
          type,
          values: rgb
        });
      }
      function getLuminance2(color) {
        color = decomposeColor2(color);
        let rgb = color.type === "hsl" || color.type === "hsla" ? decomposeColor2(hslToRgb2(color)).values : color.values;
        rgb = rgb.map((val) => {
          if (color.type !== "color") {
            val /= 255;
          }
          return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;
        });
        return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
      }
      function getContrastRatio3(foreground, background) {
        const lumA = getLuminance2(foreground);
        const lumB = getLuminance2(background);
        return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
      }
      function alpha21(color, value) {
        color = decomposeColor2(color);
        value = clamp6(value);
        if (color.type === "rgb" || color.type === "hsl") {
          color.type += "a";
        }
        if (color.type === "color") {
          color.values[3] = `/${value}`;
        } else {
          color.values[3] = value;
        }
        return recomposeColor2(color);
      }
      function private_safeAlpha(color, value, warning2) {
        try {
          return alpha21(color, value);
        } catch (error) {
          if (warning2 && true) {
            console.warn(warning2);
          }
          return color;
        }
      }
      function darken8(color, coefficient) {
        color = decomposeColor2(color);
        coefficient = clamp6(coefficient);
        if (color.type.indexOf("hsl") !== -1) {
          color.values[2] *= 1 - coefficient;
        } else if (color.type.indexOf("rgb") !== -1 || color.type.indexOf("color") !== -1) {
          for (let i = 0; i < 3; i += 1) {
            color.values[i] *= 1 - coefficient;
          }
        }
        return recomposeColor2(color);
      }
      function private_safeDarken(color, coefficient, warning2) {
        try {
          return darken8(color, coefficient);
        } catch (error) {
          if (warning2 && true) {
            console.warn(warning2);
          }
          return color;
        }
      }
      function lighten8(color, coefficient) {
        color = decomposeColor2(color);
        coefficient = clamp6(coefficient);
        if (color.type.indexOf("hsl") !== -1) {
          color.values[2] += (100 - color.values[2]) * coefficient;
        } else if (color.type.indexOf("rgb") !== -1) {
          for (let i = 0; i < 3; i += 1) {
            color.values[i] += (255 - color.values[i]) * coefficient;
          }
        } else if (color.type.indexOf("color") !== -1) {
          for (let i = 0; i < 3; i += 1) {
            color.values[i] += (1 - color.values[i]) * coefficient;
          }
        }
        return recomposeColor2(color);
      }
      function private_safeLighten(color, coefficient, warning2) {
        try {
          return lighten8(color, coefficient);
        } catch (error) {
          if (warning2 && true) {
            console.warn(warning2);
          }
          return color;
        }
      }
      function emphasize5(color, coefficient = 0.15) {
        return getLuminance2(color) > 0.5 ? darken8(color, coefficient) : lighten8(color, coefficient);
      }
      function private_safeEmphasize(color, coefficient, warning2) {
        try {
          return private_safeEmphasize(color, coefficient);
        } catch (error) {
          if (warning2 && true) {
            console.warn(warning2);
          }
          return color;
        }
      }
    }
  });

  // node_modules/@mui/private-theming/node/index.js
  var require_node2 = __commonJS({
    "node_modules/@mui/private-theming/node/index.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        ThemeProvider: true,
        useTheme: true
      };
      Object.defineProperty(exports, "ThemeProvider", {
        enumerable: true,
        get: function() {
          return _ThemeProvider.default;
        }
      });
      Object.defineProperty(exports, "useTheme", {
        enumerable: true,
        get: function() {
          return _useTheme.default;
        }
      });
      var _ThemeProvider = _interopRequireWildcard(require_ThemeProvider2());
      Object.keys(_ThemeProvider).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _ThemeProvider[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _ThemeProvider[key];
          }
        });
      });
      var _useTheme = _interopRequireDefault(require_useTheme2());
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/system/ThemeProvider/ThemeProvider.js
  var require_ThemeProvider3 = __commonJS({
    "node_modules/@mui/system/ThemeProvider/ThemeProvider.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var React264 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _privateTheming = require_node2();
      var _utils = require_utils();
      var _styledEngine = require_node();
      var _useThemeWithoutDefault = _interopRequireDefault(require_useThemeWithoutDefault());
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
      var EMPTY_THEME = {};
      function useThemeScoping(themeId, upperTheme, localTheme, isPrivate = false) {
        return React264.useMemo(() => {
          const resolvedTheme = themeId ? upperTheme[themeId] || upperTheme : upperTheme;
          if (typeof localTheme === "function") {
            const mergedTheme = localTheme(resolvedTheme);
            const result = themeId ? (0, _extends2.default)({}, upperTheme, {
              [themeId]: mergedTheme
            }) : mergedTheme;
            if (isPrivate) {
              return () => result;
            }
            return result;
          }
          return themeId ? (0, _extends2.default)({}, upperTheme, {
            [themeId]: localTheme
          }) : (0, _extends2.default)({}, upperTheme, localTheme);
        }, [themeId, upperTheme, localTheme, isPrivate]);
      }
      function ThemeProvider4(props) {
        const {
          children,
          theme: localTheme,
          themeId
        } = props;
        const upperTheme = (0, _useThemeWithoutDefault.default)(EMPTY_THEME);
        const upperPrivateTheme = (0, _privateTheming.useTheme)() || EMPTY_THEME;
        if (true) {
          if (upperTheme === null && typeof localTheme === "function" || themeId && upperTheme && !upperTheme[themeId] && typeof localTheme === "function") {
            console.error(["MUI: You are providing a theme function prop to the ThemeProvider component:", "<ThemeProvider theme={outerTheme => outerTheme} />", "", "However, no outer theme is present.", "Make sure a theme is already injected higher in the React tree or provide a theme object."].join("\n"));
          }
        }
        const engineTheme = useThemeScoping(themeId, upperTheme, localTheme);
        const privateTheme = useThemeScoping(themeId, upperPrivateTheme, localTheme, true);
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_privateTheming.ThemeProvider, {
          theme: privateTheme,
          children: /* @__PURE__ */ (0, _jsxRuntime.jsx)(_styledEngine.ThemeContext.Provider, {
            value: engineTheme,
            children
          })
        });
      }
      true ? ThemeProvider4.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit the d.ts file and run "yarn proptypes"     |
        // ----------------------------------------------------------------------
        /**
         * Your component tree.
         */
        children: _propTypes.default.node,
        /**
         * A theme object. You can provide a function to extend the outer theme.
         */
        theme: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object]).isRequired,
        /**
         * The design system's unique id for getting the corresponded theme when there are multiple design systems.
         */
        themeId: _propTypes.default.string
      } : void 0;
      if (true) {
        true ? ThemeProvider4.propTypes = (0, _utils.exactProp)(ThemeProvider4.propTypes) : void 0;
      }
      var _default = ThemeProvider4;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/ThemeProvider/index.js
  var require_ThemeProvider4 = __commonJS({
    "node_modules/@mui/system/ThemeProvider/index.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _ThemeProvider.default;
        }
      });
      var _ThemeProvider = _interopRequireDefault(require_ThemeProvider3());
    }
  });

  // node_modules/@mui/system/cssVars/getInitColorSchemeScript.js
  var require_getInitColorSchemeScript = __commonJS({
    "node_modules/@mui/system/cssVars/getInitColorSchemeScript.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.DEFAULT_MODE_STORAGE_KEY = exports.DEFAULT_COLOR_SCHEME_STORAGE_KEY = exports.DEFAULT_ATTRIBUTE = void 0;
      exports.default = getInitColorSchemeScript2;
      var React264 = _interopRequireWildcard(require_react());
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
      var DEFAULT_MODE_STORAGE_KEY = "mode";
      exports.DEFAULT_MODE_STORAGE_KEY = DEFAULT_MODE_STORAGE_KEY;
      var DEFAULT_COLOR_SCHEME_STORAGE_KEY = "color-scheme";
      exports.DEFAULT_COLOR_SCHEME_STORAGE_KEY = DEFAULT_COLOR_SCHEME_STORAGE_KEY;
      var DEFAULT_ATTRIBUTE = "data-color-scheme";
      exports.DEFAULT_ATTRIBUTE = DEFAULT_ATTRIBUTE;
      function getInitColorSchemeScript2(options) {
        const {
          defaultMode = "light",
          defaultLightColorScheme = "light",
          defaultDarkColorScheme = "dark",
          modeStorageKey = DEFAULT_MODE_STORAGE_KEY,
          colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,
          attribute = DEFAULT_ATTRIBUTE,
          colorSchemeNode = "document.documentElement"
        } = options || {};
        return /* @__PURE__ */ (0, _jsxRuntime.jsx)("script", {
          // eslint-disable-next-line react/no-danger
          dangerouslySetInnerHTML: {
            __html: `(function() {
try {
  var mode = localStorage.getItem('${modeStorageKey}') || '${defaultMode}';
  var colorScheme = '';
  if (mode === 'system') {
    // handle system mode
    var mql = window.matchMedia('(prefers-color-scheme: dark)');
    if (mql.matches) {
      colorScheme = localStorage.getItem('${colorSchemeStorageKey}-dark') || '${defaultDarkColorScheme}';
    } else {
      colorScheme = localStorage.getItem('${colorSchemeStorageKey}-light') || '${defaultLightColorScheme}';
    }
  }
  if (mode === 'light') {
    colorScheme = localStorage.getItem('${colorSchemeStorageKey}-light') || '${defaultLightColorScheme}';
  }
  if (mode === 'dark') {
    colorScheme = localStorage.getItem('${colorSchemeStorageKey}-dark') || '${defaultDarkColorScheme}';
  }
  if (colorScheme) {
    ${colorSchemeNode}.setAttribute('${attribute}', colorScheme);
  }
} catch(e){}})();`
          }
        }, "mui-color-scheme-init");
      }
    }
  });

  // node_modules/@mui/system/cssVars/useCurrentColorScheme.js
  var require_useCurrentColorScheme = __commonJS({
    "node_modules/@mui/system/cssVars/useCurrentColorScheme.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useCurrentColorScheme;
      exports.getColorScheme = getColorScheme;
      exports.getSystemMode = getSystemMode;
      var _extends2 = _interopRequireDefault(require_extends());
      var React264 = _interopRequireWildcard(require_react());
      var _getInitColorSchemeScript = require_getInitColorSchemeScript();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
      function getSystemMode(mode) {
        if (typeof window !== "undefined" && mode === "system") {
          const mql = window.matchMedia("(prefers-color-scheme: dark)");
          if (mql.matches) {
            return "dark";
          }
          return "light";
        }
        return void 0;
      }
      function processState(state, callback) {
        if (state.mode === "light" || state.mode === "system" && state.systemMode === "light") {
          return callback("light");
        }
        if (state.mode === "dark" || state.mode === "system" && state.systemMode === "dark") {
          return callback("dark");
        }
        return void 0;
      }
      function getColorScheme(state) {
        return processState(state, (mode) => {
          if (mode === "light") {
            return state.lightColorScheme;
          }
          if (mode === "dark") {
            return state.darkColorScheme;
          }
          return void 0;
        });
      }
      function initializeValue(key, defaultValue) {
        if (typeof window === "undefined") {
          return void 0;
        }
        let value;
        try {
          value = localStorage.getItem(key) || void 0;
          if (!value) {
            localStorage.setItem(key, defaultValue);
          }
        } catch (e) {
        }
        return value || defaultValue;
      }
      function useCurrentColorScheme(options) {
        const {
          defaultMode = "light",
          defaultLightColorScheme,
          defaultDarkColorScheme,
          supportedColorSchemes = [],
          modeStorageKey = _getInitColorSchemeScript.DEFAULT_MODE_STORAGE_KEY,
          colorSchemeStorageKey = _getInitColorSchemeScript.DEFAULT_COLOR_SCHEME_STORAGE_KEY,
          storageWindow = typeof window === "undefined" ? void 0 : window
        } = options;
        const joinedColorSchemes = supportedColorSchemes.join(",");
        const [state, setState] = React264.useState(() => {
          const initialMode = initializeValue(modeStorageKey, defaultMode);
          const lightColorScheme = initializeValue(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);
          const darkColorScheme = initializeValue(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);
          return {
            mode: initialMode,
            systemMode: getSystemMode(initialMode),
            lightColorScheme,
            darkColorScheme
          };
        });
        const colorScheme = getColorScheme(state);
        const setMode = React264.useCallback((mode) => {
          setState((currentState) => {
            if (mode === currentState.mode) {
              return currentState;
            }
            const newMode = !mode ? defaultMode : mode;
            try {
              localStorage.setItem(modeStorageKey, newMode);
            } catch (e) {
            }
            return (0, _extends2.default)({}, currentState, {
              mode: newMode,
              systemMode: getSystemMode(newMode)
            });
          });
        }, [modeStorageKey, defaultMode]);
        const setColorScheme = React264.useCallback((value) => {
          if (!value) {
            setState((currentState) => {
              try {
                localStorage.setItem(`${colorSchemeStorageKey}-light`, defaultLightColorScheme);
                localStorage.setItem(`${colorSchemeStorageKey}-dark`, defaultDarkColorScheme);
              } catch (e) {
              }
              return (0, _extends2.default)({}, currentState, {
                lightColorScheme: defaultLightColorScheme,
                darkColorScheme: defaultDarkColorScheme
              });
            });
          } else if (typeof value === "string") {
            if (value && !joinedColorSchemes.includes(value)) {
              console.error(`\`${value}\` does not exist in \`theme.colorSchemes\`.`);
            } else {
              setState((currentState) => {
                const newState = (0, _extends2.default)({}, currentState);
                processState(currentState, (mode) => {
                  try {
                    localStorage.setItem(`${colorSchemeStorageKey}-${mode}`, value);
                  } catch (e) {
                  }
                  if (mode === "light") {
                    newState.lightColorScheme = value;
                  }
                  if (mode === "dark") {
                    newState.darkColorScheme = value;
                  }
                });
                return newState;
              });
            }
          } else {
            setState((currentState) => {
              const newState = (0, _extends2.default)({}, currentState);
              const newLightColorScheme = value.light === null ? defaultLightColorScheme : value.light;
              const newDarkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;
              if (newLightColorScheme) {
                if (!joinedColorSchemes.includes(newLightColorScheme)) {
                  console.error(`\`${newLightColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
                } else {
                  newState.lightColorScheme = newLightColorScheme;
                  try {
                    localStorage.setItem(`${colorSchemeStorageKey}-light`, newLightColorScheme);
                  } catch (error) {
                  }
                }
              }
              if (newDarkColorScheme) {
                if (!joinedColorSchemes.includes(newDarkColorScheme)) {
                  console.error(`\`${newDarkColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
                } else {
                  newState.darkColorScheme = newDarkColorScheme;
                  try {
                    localStorage.setItem(`${colorSchemeStorageKey}-dark`, newDarkColorScheme);
                  } catch (error) {
                  }
                }
              }
              return newState;
            });
          }
        }, [joinedColorSchemes, colorSchemeStorageKey, defaultLightColorScheme, defaultDarkColorScheme]);
        const handleMediaQuery = React264.useCallback((e) => {
          if (state.mode === "system") {
            setState((currentState) => (0, _extends2.default)({}, currentState, {
              systemMode: e != null && e.matches ? "dark" : "light"
            }));
          }
        }, [state.mode]);
        const mediaListener = React264.useRef(handleMediaQuery);
        mediaListener.current = handleMediaQuery;
        React264.useEffect(() => {
          const handler = (...args) => mediaListener.current(...args);
          const media = window.matchMedia("(prefers-color-scheme: dark)");
          media.addListener(handler);
          handler(media);
          return () => media.removeListener(handler);
        }, []);
        React264.useEffect(() => {
          const handleStorage = (event) => {
            const value = event.newValue;
            if (typeof event.key === "string" && event.key.startsWith(colorSchemeStorageKey) && (!value || joinedColorSchemes.match(value))) {
              if (event.key.endsWith("light")) {
                setColorScheme({
                  light: value
                });
              }
              if (event.key.endsWith("dark")) {
                setColorScheme({
                  dark: value
                });
              }
            }
            if (event.key === modeStorageKey && (!value || ["light", "dark", "system"].includes(value))) {
              setMode(value || defaultMode);
            }
          };
          if (storageWindow) {
            storageWindow.addEventListener("storage", handleStorage);
            return () => storageWindow.removeEventListener("storage", handleStorage);
          }
          return void 0;
        }, [setColorScheme, setMode, modeStorageKey, colorSchemeStorageKey, joinedColorSchemes, defaultMode, storageWindow]);
        return (0, _extends2.default)({}, state, {
          colorScheme,
          setMode,
          setColorScheme
        });
      }
    }
  });

  // node_modules/@mui/system/cssVars/createCssVarsProvider.js
  var require_createCssVarsProvider = __commonJS({
    "node_modules/@mui/system/cssVars/createCssVarsProvider.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.DISABLE_CSS_TRANSITION = void 0;
      exports.default = createCssVarsProvider2;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _utils = require_utils();
      var React264 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _styledEngine = require_node();
      var _privateTheming = require_node2();
      var _ThemeProvider = _interopRequireDefault(require_ThemeProvider4());
      var _getInitColorSchemeScript = _interopRequireWildcard(require_getInitColorSchemeScript());
      var _useCurrentColorScheme = _interopRequireDefault(require_useCurrentColorScheme());
      var _jsxRuntime = require_jsx_runtime();
      var _excluded170 = ["colorSchemes", "components", "generateCssVars", "cssVarPrefix"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
      var DISABLE_CSS_TRANSITION = "*{-webkit-transition:none!important;-moz-transition:none!important;-o-transition:none!important;-ms-transition:none!important;transition:none!important}";
      exports.DISABLE_CSS_TRANSITION = DISABLE_CSS_TRANSITION;
      function createCssVarsProvider2(options) {
        const {
          themeId,
          /**
           * This `theme` object needs to follow a certain structure to
           * be used correctly by the finel `CssVarsProvider`. It should have a
           * `colorSchemes` key with the light and dark (and any other) palette.
           * It should also ideally have a vars object created using `prepareCssVars`.
           */
          theme: defaultTheme4 = {},
          attribute: defaultAttribute = _getInitColorSchemeScript.DEFAULT_ATTRIBUTE,
          modeStorageKey: defaultModeStorageKey = _getInitColorSchemeScript.DEFAULT_MODE_STORAGE_KEY,
          colorSchemeStorageKey: defaultColorSchemeStorageKey = _getInitColorSchemeScript.DEFAULT_COLOR_SCHEME_STORAGE_KEY,
          defaultMode: designSystemMode = "light",
          defaultColorScheme: designSystemColorScheme,
          disableTransitionOnChange: designSystemTransitionOnChange = false,
          resolveTheme,
          excludeVariablesFromRoot: excludeVariablesFromRoot2
        } = options;
        if (!defaultTheme4.colorSchemes || typeof designSystemColorScheme === "string" && !defaultTheme4.colorSchemes[designSystemColorScheme] || typeof designSystemColorScheme === "object" && !defaultTheme4.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.light] || typeof designSystemColorScheme === "object" && !defaultTheme4.colorSchemes[designSystemColorScheme == null ? void 0 : designSystemColorScheme.dark]) {
          console.error(`MUI: \`${designSystemColorScheme}\` does not exist in \`theme.colorSchemes\`.`);
        }
        const ColorSchemeContext = /* @__PURE__ */ React264.createContext(void 0);
        const useColorScheme2 = () => {
          const value = React264.useContext(ColorSchemeContext);
          if (!value) {
            throw new Error(true ? `MUI: \`useColorScheme\` must be called under <CssVarsProvider />` : (0, _utils.formatMuiErrorMessage)(19));
          }
          return value;
        };
        function CssVarsProvider2({
          children,
          theme: themeProp = defaultTheme4,
          modeStorageKey = defaultModeStorageKey,
          colorSchemeStorageKey = defaultColorSchemeStorageKey,
          attribute = defaultAttribute,
          defaultMode = designSystemMode,
          defaultColorScheme = designSystemColorScheme,
          disableTransitionOnChange = designSystemTransitionOnChange,
          storageWindow = typeof window === "undefined" ? void 0 : window,
          documentNode = typeof document === "undefined" ? void 0 : document,
          colorSchemeNode = typeof document === "undefined" ? void 0 : document.documentElement,
          colorSchemeSelector = ":root",
          disableNestedContext = false,
          disableStyleSheetGeneration = false
        }) {
          const hasMounted = React264.useRef(false);
          const upperTheme = (0, _privateTheming.useTheme)();
          const ctx = React264.useContext(ColorSchemeContext);
          const nested2 = !!ctx && !disableNestedContext;
          const scopedTheme = themeProp[themeId];
          const _ref = scopedTheme || themeProp, {
            colorSchemes = {},
            components = {},
            generateCssVars = () => ({
              vars: {},
              css: {}
            }),
            cssVarPrefix
          } = _ref, restThemeProp = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded170);
          const allColorSchemes = Object.keys(colorSchemes);
          const defaultLightColorScheme2 = typeof defaultColorScheme === "string" ? defaultColorScheme : defaultColorScheme.light;
          const defaultDarkColorScheme2 = typeof defaultColorScheme === "string" ? defaultColorScheme : defaultColorScheme.dark;
          const {
            mode: stateMode,
            setMode,
            systemMode,
            lightColorScheme,
            darkColorScheme,
            colorScheme: stateColorScheme,
            setColorScheme
          } = (0, _useCurrentColorScheme.default)({
            supportedColorSchemes: allColorSchemes,
            defaultLightColorScheme: defaultLightColorScheme2,
            defaultDarkColorScheme: defaultDarkColorScheme2,
            modeStorageKey,
            colorSchemeStorageKey,
            defaultMode,
            storageWindow
          });
          let mode = stateMode;
          let colorScheme = stateColorScheme;
          if (nested2) {
            mode = ctx.mode;
            colorScheme = ctx.colorScheme;
          }
          const calculatedMode = (() => {
            if (mode) {
              return mode;
            }
            if (defaultMode === "system") {
              return designSystemMode;
            }
            return defaultMode;
          })();
          const calculatedColorScheme = (() => {
            if (!colorScheme) {
              if (calculatedMode === "dark") {
                return defaultDarkColorScheme2;
              }
              return defaultLightColorScheme2;
            }
            return colorScheme;
          })();
          const {
            css: rootCss,
            vars: rootVars
          } = generateCssVars();
          const theme = (0, _extends2.default)({}, restThemeProp, {
            components,
            colorSchemes,
            cssVarPrefix,
            vars: rootVars,
            getColorSchemeSelector: (targetColorScheme) => `[${attribute}="${targetColorScheme}"] &`
          });
          const defaultColorSchemeStyleSheet = {};
          const otherColorSchemesStyleSheet = {};
          Object.entries(colorSchemes).forEach(([key, scheme]) => {
            const {
              css: css7,
              vars
            } = generateCssVars(key);
            theme.vars = (0, _utils.deepmerge)(theme.vars, vars);
            if (key === calculatedColorScheme) {
              Object.keys(scheme).forEach((schemeKey) => {
                if (scheme[schemeKey] && typeof scheme[schemeKey] === "object") {
                  theme[schemeKey] = (0, _extends2.default)({}, theme[schemeKey], scheme[schemeKey]);
                } else {
                  theme[schemeKey] = scheme[schemeKey];
                }
              });
              if (theme.palette) {
                theme.palette.colorScheme = key;
              }
            }
            const resolvedDefaultColorScheme = (() => {
              if (typeof defaultColorScheme === "string") {
                return defaultColorScheme;
              }
              if (defaultMode === "dark") {
                return defaultColorScheme.dark;
              }
              return defaultColorScheme.light;
            })();
            if (key === resolvedDefaultColorScheme) {
              if (excludeVariablesFromRoot2) {
                const excludedVariables = {};
                excludeVariablesFromRoot2(cssVarPrefix).forEach((cssVar) => {
                  excludedVariables[cssVar] = css7[cssVar];
                  delete css7[cssVar];
                });
                defaultColorSchemeStyleSheet[`[${attribute}="${key}"]`] = excludedVariables;
              }
              defaultColorSchemeStyleSheet[`${colorSchemeSelector}, [${attribute}="${key}"]`] = css7;
            } else {
              otherColorSchemesStyleSheet[`${colorSchemeSelector === ":root" ? "" : colorSchemeSelector}[${attribute}="${key}"]`] = css7;
            }
          });
          theme.vars = (0, _utils.deepmerge)(theme.vars, rootVars);
          React264.useEffect(() => {
            if (colorScheme && colorSchemeNode) {
              colorSchemeNode.setAttribute(attribute, colorScheme);
            }
          }, [colorScheme, attribute, colorSchemeNode]);
          React264.useEffect(() => {
            let timer;
            if (disableTransitionOnChange && hasMounted.current && documentNode) {
              const css7 = documentNode.createElement("style");
              css7.appendChild(documentNode.createTextNode(DISABLE_CSS_TRANSITION));
              documentNode.head.appendChild(css7);
              (() => window.getComputedStyle(documentNode.body))();
              timer = setTimeout(() => {
                documentNode.head.removeChild(css7);
              }, 1);
            }
            return () => {
              clearTimeout(timer);
            };
          }, [colorScheme, disableTransitionOnChange, documentNode]);
          React264.useEffect(() => {
            hasMounted.current = true;
            return () => {
              hasMounted.current = false;
            };
          }, []);
          const contextValue = React264.useMemo(() => ({
            mode,
            systemMode,
            setMode,
            lightColorScheme,
            darkColorScheme,
            colorScheme,
            setColorScheme,
            allColorSchemes
          }), [allColorSchemes, colorScheme, darkColorScheme, lightColorScheme, mode, setColorScheme, setMode, systemMode]);
          let shouldGenerateStyleSheet = true;
          if (disableStyleSheetGeneration || nested2 && (upperTheme == null ? void 0 : upperTheme.cssVarPrefix) === cssVarPrefix) {
            shouldGenerateStyleSheet = false;
          }
          const element = /* @__PURE__ */ (0, _jsxRuntime.jsxs)(React264.Fragment, {
            children: [shouldGenerateStyleSheet && /* @__PURE__ */ (0, _jsxRuntime.jsxs)(React264.Fragment, {
              children: [/* @__PURE__ */ (0, _jsxRuntime.jsx)(_styledEngine.GlobalStyles, {
                styles: {
                  [colorSchemeSelector]: rootCss
                }
              }), /* @__PURE__ */ (0, _jsxRuntime.jsx)(_styledEngine.GlobalStyles, {
                styles: defaultColorSchemeStyleSheet
              }), /* @__PURE__ */ (0, _jsxRuntime.jsx)(_styledEngine.GlobalStyles, {
                styles: otherColorSchemesStyleSheet
              })]
            }), /* @__PURE__ */ (0, _jsxRuntime.jsx)(_ThemeProvider.default, {
              themeId: scopedTheme ? themeId : void 0,
              theme: resolveTheme ? resolveTheme(theme) : theme,
              children
            })]
          });
          if (nested2) {
            return element;
          }
          return /* @__PURE__ */ (0, _jsxRuntime.jsx)(ColorSchemeContext.Provider, {
            value: contextValue,
            children: element
          });
        }
        true ? CssVarsProvider2.propTypes = {
          /**
           * The body attribute name to attach colorScheme.
           */
          attribute: _propTypes.default.string,
          /**
           * The component tree.
           */
          children: _propTypes.default.node,
          /**
           * The node used to attach the color-scheme attribute
           */
          colorSchemeNode: _propTypes.default.any,
          /**
           * The CSS selector for attaching the generated custom properties
           */
          colorSchemeSelector: _propTypes.default.string,
          /**
           * localStorage key used to store `colorScheme`
           */
          colorSchemeStorageKey: _propTypes.default.string,
          /**
           * The initial color scheme used.
           */
          defaultColorScheme: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.object]),
          /**
           * The initial mode used.
           */
          defaultMode: _propTypes.default.string,
          /**
           * If `true`, the provider creates its own context and generate stylesheet as if it is a root `CssVarsProvider`.
           */
          disableNestedContext: _propTypes.default.bool,
          /**
           * If `true`, the style sheet won't be generated.
           *
           * This is useful for controlling nested CssVarsProvider behavior.
           */
          disableStyleSheetGeneration: _propTypes.default.bool,
          /**
           * Disable CSS transitions when switching between modes or color schemes.
           */
          disableTransitionOnChange: _propTypes.default.bool,
          /**
           * The document to attach the attribute to.
           */
          documentNode: _propTypes.default.any,
          /**
           * The key in the local storage used to store current color scheme.
           */
          modeStorageKey: _propTypes.default.string,
          /**
           * The window that attaches the 'storage' event listener.
           * @default window
           */
          storageWindow: _propTypes.default.any,
          /**
           * The calculated theme object that will be passed through context.
           */
          theme: _propTypes.default.object
        } : void 0;
        const defaultLightColorScheme = typeof designSystemColorScheme === "string" ? designSystemColorScheme : designSystemColorScheme.light;
        const defaultDarkColorScheme = typeof designSystemColorScheme === "string" ? designSystemColorScheme : designSystemColorScheme.dark;
        const getInitColorSchemeScript2 = (params) => (0, _getInitColorSchemeScript.default)((0, _extends2.default)({
          attribute: defaultAttribute,
          colorSchemeStorageKey: defaultColorSchemeStorageKey,
          defaultMode: designSystemMode,
          defaultLightColorScheme,
          defaultDarkColorScheme,
          modeStorageKey: defaultModeStorageKey
        }, params));
        return {
          CssVarsProvider: CssVarsProvider2,
          useColorScheme: useColorScheme2,
          getInitColorSchemeScript: getInitColorSchemeScript2
        };
      }
    }
  });

  // node_modules/@mui/system/cssVars/createGetCssVar.js
  var require_createGetCssVar = __commonJS({
    "node_modules/@mui/system/cssVars/createGetCssVar.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createGetCssVar2;
      function createGetCssVar2(prefix3 = "") {
        function appendVar(...vars) {
          if (!vars.length) {
            return "";
          }
          const value = vars[0];
          if (typeof value === "string" && !value.match(/(#|\(|\)|(-?(\d*\.)?\d+)(px|em|%|ex|ch|rem|vw|vh|vmin|vmax|cm|mm|in|pt|pc))|^(-?(\d*\.)?\d+)$|(\d+ \d+ \d+)/)) {
            return `, var(--${prefix3 ? `${prefix3}-` : ""}${value}${appendVar(...vars.slice(1))})`;
          }
          return `, ${value}`;
        }
        const getCssVar = (field, ...fallbacks) => {
          return `var(--${prefix3 ? `${prefix3}-` : ""}${field}${appendVar(...fallbacks)})`;
        };
        return getCssVar;
      }
    }
  });

  // node_modules/@mui/system/cssVars/cssVarsParser.js
  var require_cssVarsParser = __commonJS({
    "node_modules/@mui/system/cssVars/cssVarsParser.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.assignNestedKeys = void 0;
      exports.default = cssVarsParser;
      exports.walkObjectDeep = void 0;
      var assignNestedKeys = (obj, keys, value, arrayKeys = []) => {
        let temp = obj;
        keys.forEach((k, index3) => {
          if (index3 === keys.length - 1) {
            if (Array.isArray(temp)) {
              temp[Number(k)] = value;
            } else if (temp && typeof temp === "object") {
              temp[k] = value;
            }
          } else if (temp && typeof temp === "object") {
            if (!temp[k]) {
              temp[k] = arrayKeys.includes(k) ? [] : {};
            }
            temp = temp[k];
          }
        });
      };
      exports.assignNestedKeys = assignNestedKeys;
      var walkObjectDeep = (obj, callback, shouldSkipPaths) => {
        function recurse(object, parentKeys = [], arrayKeys = []) {
          Object.entries(object).forEach(([key, value]) => {
            if (!shouldSkipPaths || shouldSkipPaths && !shouldSkipPaths([...parentKeys, key])) {
              if (value !== void 0 && value !== null) {
                if (typeof value === "object" && Object.keys(value).length > 0) {
                  recurse(value, [...parentKeys, key], Array.isArray(value) ? [...arrayKeys, key] : arrayKeys);
                } else {
                  callback([...parentKeys, key], value, arrayKeys);
                }
              }
            }
          });
        }
        recurse(obj);
      };
      exports.walkObjectDeep = walkObjectDeep;
      var getCssValue = (keys, value) => {
        if (typeof value === "number") {
          if (["lineHeight", "fontWeight", "opacity", "zIndex"].some((prop) => keys.includes(prop))) {
            return value;
          }
          const lastKey = keys[keys.length - 1];
          if (lastKey.toLowerCase().indexOf("opacity") >= 0) {
            return value;
          }
          return `${value}px`;
        }
        return value;
      };
      function cssVarsParser(theme, options) {
        const {
          prefix: prefix3,
          shouldSkipGeneratingVar: shouldSkipGeneratingVar2
        } = options || {};
        const css7 = {};
        const vars = {};
        const varsWithDefaults = {};
        walkObjectDeep(
          theme,
          (keys, value, arrayKeys) => {
            if (typeof value === "string" || typeof value === "number") {
              if (!shouldSkipGeneratingVar2 || !shouldSkipGeneratingVar2(keys, value)) {
                const cssVar = `--${prefix3 ? `${prefix3}-` : ""}${keys.join("-")}`;
                Object.assign(css7, {
                  [cssVar]: getCssValue(keys, value)
                });
                assignNestedKeys(vars, keys, `var(${cssVar})`, arrayKeys);
                assignNestedKeys(varsWithDefaults, keys, `var(${cssVar}, ${value})`, arrayKeys);
              }
            }
          },
          (keys) => keys[0] === "vars"
          // skip 'vars/*' paths
        );
        return {
          css: css7,
          vars,
          varsWithDefaults
        };
      }
    }
  });

  // node_modules/@mui/system/cssVars/prepareCssVars.js
  var require_prepareCssVars = __commonJS({
    "node_modules/@mui/system/cssVars/prepareCssVars.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _utils = require_utils();
      var _cssVarsParser = _interopRequireDefault(require_cssVarsParser());
      var _excluded170 = ["colorSchemes", "components"];
      var _excluded222 = ["light"];
      function prepareCssVars2(theme, parserConfig) {
        const {
          colorSchemes = {}
        } = theme, otherTheme = (0, _objectWithoutPropertiesLoose2.default)(theme, _excluded170);
        const {
          vars: rootVars,
          css: rootCss,
          varsWithDefaults: rootVarsWithDefaults
        } = (0, _cssVarsParser.default)(otherTheme, parserConfig);
        let themeVars = rootVarsWithDefaults;
        const colorSchemesMap = {};
        const {
          light: light2
        } = colorSchemes, otherColorSchemes = (0, _objectWithoutPropertiesLoose2.default)(colorSchemes, _excluded222);
        Object.entries(otherColorSchemes || {}).forEach(([key, scheme]) => {
          const {
            vars,
            css: css7,
            varsWithDefaults
          } = (0, _cssVarsParser.default)(scheme, parserConfig);
          themeVars = (0, _utils.deepmerge)(themeVars, varsWithDefaults);
          colorSchemesMap[key] = {
            css: css7,
            vars
          };
        });
        if (light2) {
          const {
            css: css7,
            vars,
            varsWithDefaults
          } = (0, _cssVarsParser.default)(light2, parserConfig);
          themeVars = (0, _utils.deepmerge)(themeVars, varsWithDefaults);
          colorSchemesMap.light = {
            css: css7,
            vars
          };
        }
        const generateCssVars = (colorScheme) => {
          if (!colorScheme) {
            return {
              css: (0, _extends2.default)({}, rootCss),
              vars: rootVars
            };
          }
          return {
            css: (0, _extends2.default)({}, colorSchemesMap[colorScheme].css),
            vars: colorSchemesMap[colorScheme].vars
          };
        };
        return {
          vars: themeVars,
          generateCssVars
        };
      }
      var _default = prepareCssVars2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/cssVars/createCssVarsTheme.js
  var require_createCssVarsTheme = __commonJS({
    "node_modules/@mui/system/cssVars/createCssVarsTheme.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _prepareCssVars = _interopRequireDefault(require_prepareCssVars());
      var _excluded170 = ["cssVarPrefix", "shouldSkipGeneratingVar"];
      function createCssVarsTheme(theme) {
        const {
          cssVarPrefix,
          shouldSkipGeneratingVar: shouldSkipGeneratingVar2
        } = theme, otherTheme = (0, _objectWithoutPropertiesLoose2.default)(theme, _excluded170);
        return (0, _extends2.default)({}, theme, (0, _prepareCssVars.default)(otherTheme, {
          prefix: cssVarPrefix,
          shouldSkipGeneratingVar: shouldSkipGeneratingVar2
        }));
      }
      var _default = createCssVarsTheme;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/Container/createContainer.js
  var require_createContainer = __commonJS({
    "node_modules/@mui/system/Container/createContainer.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createContainer2;
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _extends2 = _interopRequireDefault(require_extends());
      var React264 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _clsx = _interopRequireDefault(require_clsx());
      var _utils = require_utils();
      var _useThemeProps = _interopRequireDefault(require_useThemeProps2());
      var _styled = _interopRequireDefault(require_styled());
      var _createTheme = _interopRequireDefault(require_createTheme2());
      var _jsxRuntime = require_jsx_runtime();
      var _excluded170 = ["className", "component", "disableGutters", "fixed", "maxWidth", "classes"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
      var defaultTheme4 = (0, _createTheme.default)();
      var defaultCreateStyledComponent = (0, _styled.default)("div", {
        name: "MuiContainer",
        slot: "Root",
        overridesResolver: (props, styles7) => {
          const {
            ownerState
          } = props;
          return [styles7.root, styles7[`maxWidth${(0, _utils.unstable_capitalize)(String(ownerState.maxWidth))}`], ownerState.fixed && styles7.fixed, ownerState.disableGutters && styles7.disableGutters];
        }
      });
      var useThemePropsDefault = (inProps) => (0, _useThemeProps.default)({
        props: inProps,
        name: "MuiContainer",
        defaultTheme: defaultTheme4
      });
      var useUtilityClasses136 = (ownerState, componentName) => {
        const getContainerUtilityClass2 = (slot) => {
          return (0, _utils.unstable_generateUtilityClass)(componentName, slot);
        };
        const {
          classes,
          fixed,
          disableGutters,
          maxWidth
        } = ownerState;
        const slots = {
          root: ["root", maxWidth && `maxWidth${(0, _utils.unstable_capitalize)(String(maxWidth))}`, fixed && "fixed", disableGutters && "disableGutters"]
        };
        return (0, _utils.unstable_composeClasses)(slots, getContainerUtilityClass2, classes);
      };
      function createContainer2(options = {}) {
        const {
          // This will allow adding custom styled fn (for example for custom sx style function)
          createStyledComponent = defaultCreateStyledComponent,
          useThemeProps: useThemeProps3 = useThemePropsDefault,
          componentName = "MuiContainer"
        } = options;
        const ContainerRoot = createStyledComponent(({
          theme,
          ownerState
        }) => (0, _extends2.default)({
          width: "100%",
          marginLeft: "auto",
          boxSizing: "border-box",
          marginRight: "auto",
          display: "block"
        }, !ownerState.disableGutters && {
          paddingLeft: theme.spacing(2),
          paddingRight: theme.spacing(2),
          // @ts-ignore module augmentation fails if custom breakpoints are used
          [theme.breakpoints.up("sm")]: {
            paddingLeft: theme.spacing(3),
            paddingRight: theme.spacing(3)
          }
        }), ({
          theme,
          ownerState
        }) => ownerState.fixed && Object.keys(theme.breakpoints.values).reduce((acc, breakpointValueKey) => {
          const breakpoint = breakpointValueKey;
          const value = theme.breakpoints.values[breakpoint];
          if (value !== 0) {
            acc[theme.breakpoints.up(breakpoint)] = {
              maxWidth: `${value}${theme.breakpoints.unit}`
            };
          }
          return acc;
        }, {}), ({
          theme,
          ownerState
        }) => (0, _extends2.default)({}, ownerState.maxWidth === "xs" && {
          // @ts-ignore module augmentation fails if custom breakpoints are used
          [theme.breakpoints.up("xs")]: {
            // @ts-ignore module augmentation fails if custom breakpoints are used
            maxWidth: Math.max(theme.breakpoints.values.xs, 444)
          }
        }, ownerState.maxWidth && // @ts-ignore module augmentation fails if custom breakpoints are used
        ownerState.maxWidth !== "xs" && {
          // @ts-ignore module augmentation fails if custom breakpoints are used
          [theme.breakpoints.up(ownerState.maxWidth)]: {
            // @ts-ignore module augmentation fails if custom breakpoints are used
            maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`
          }
        }));
        const Container2 = /* @__PURE__ */ React264.forwardRef(function Container3(inProps, ref) {
          const props = useThemeProps3(inProps);
          const {
            className,
            component = "div",
            disableGutters = false,
            fixed = false,
            maxWidth = "lg"
          } = props, other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded170);
          const ownerState = (0, _extends2.default)({}, props, {
            component,
            disableGutters,
            fixed,
            maxWidth
          });
          const classes = useUtilityClasses136(ownerState, componentName);
          return (
            // @ts-ignore theme is injected by the styled util
            /* @__PURE__ */ (0, _jsxRuntime.jsx)(ContainerRoot, (0, _extends2.default)({
              as: component,
              ownerState,
              className: (0, _clsx.default)(classes.root, className),
              ref
            }, other))
          );
        });
        true ? Container2.propTypes = {
          children: _propTypes.default.node,
          classes: _propTypes.default.object,
          className: _propTypes.default.string,
          component: _propTypes.default.elementType,
          disableGutters: _propTypes.default.bool,
          fixed: _propTypes.default.bool,
          maxWidth: _propTypes.default.oneOfType([_propTypes.default.oneOf(["xs", "sm", "md", "lg", "xl", false]), _propTypes.default.string]),
          sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
        } : void 0;
        return Container2;
      }
    }
  });

  // node_modules/@mui/system/Container/Container.js
  var require_Container = __commonJS({
    "node_modules/@mui/system/Container/Container.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _createContainer = _interopRequireDefault(require_createContainer());
      var Container2 = (0, _createContainer.default)();
      true ? Container2.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * @ignore
         */
        children: _propTypes.default.node,
        /**
         * Override or extend the styles applied to the component.
         */
        classes: _propTypes.default.object,
        /**
         * The component used for the root node.
         * Either a string to use a HTML element or a component.
         */
        component: _propTypes.default.elementType,
        /**
         * If `true`, the left and right padding is removed.
         * @default false
         */
        disableGutters: _propTypes.default.bool,
        /**
         * Set the max-width to match the min-width of the current breakpoint.
         * This is useful if you'd prefer to design for a fixed set of sizes
         * instead of trying to accommodate a fully fluid viewport.
         * It's fluid by default.
         * @default false
         */
        fixed: _propTypes.default.bool,
        /**
         * Determine the max-width of the container.
         * The container width grows with the size of the screen.
         * Set to `false` to disable `maxWidth`.
         * @default 'lg'
         */
        maxWidth: _propTypes.default.oneOfType([_propTypes.default.oneOf(["xs", "sm", "md", "lg", "xl", false]), _propTypes.default.string]),
        /**
         * The system prop that allows defining system overrides as well as additional CSS styles.
         */
        sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
      } : void 0;
      var _default = Container2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/Container/containerClasses.js
  var require_containerClasses = __commonJS({
    "node_modules/@mui/system/Container/containerClasses.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getContainerUtilityClass = getContainerUtilityClass2;
      var _utils = require_utils();
      function getContainerUtilityClass2(slot) {
        return (0, _utils.unstable_generateUtilityClass)("MuiContainer", slot);
      }
      var containerClasses2 = (0, _utils.unstable_generateUtilityClasses)("MuiContainer", ["root", "disableGutters", "fixed", "maxWidthXs", "maxWidthSm", "maxWidthMd", "maxWidthLg", "maxWidthXl"]);
      var _default = containerClasses2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/Container/index.js
  var require_Container2 = __commonJS({
    "node_modules/@mui/system/Container/index.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        containerClasses: true
      };
      Object.defineProperty(exports, "containerClasses", {
        enumerable: true,
        get: function() {
          return _containerClasses.default;
        }
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _Container.default;
        }
      });
      var _Container = _interopRequireDefault(require_Container());
      var _containerClasses = _interopRequireWildcard(require_containerClasses());
      Object.keys(_containerClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _containerClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _containerClasses[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/system/Unstable_Grid/traverseBreakpoints.js
  var require_traverseBreakpoints = __commonJS({
    "node_modules/@mui/system/Unstable_Grid/traverseBreakpoints.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.traverseBreakpoints = exports.filterBreakpointKeys = void 0;
      var filterBreakpointKeys = (breakpointsKeys, responsiveKeys) => breakpointsKeys.filter((key) => responsiveKeys.includes(key));
      exports.filterBreakpointKeys = filterBreakpointKeys;
      var traverseBreakpoints = (breakpoints, responsive, iterator) => {
        const smallestBreakpoint = breakpoints.keys[0];
        if (Array.isArray(responsive)) {
          responsive.forEach((breakpointValue, index3) => {
            iterator((responsiveStyles, style) => {
              if (index3 <= breakpoints.keys.length - 1) {
                if (index3 === 0) {
                  Object.assign(responsiveStyles, style);
                } else {
                  responsiveStyles[breakpoints.up(breakpoints.keys[index3])] = style;
                }
              }
            }, breakpointValue);
          });
        } else if (responsive && typeof responsive === "object") {
          const keys = Object.keys(responsive).length > breakpoints.keys.length ? breakpoints.keys : filterBreakpointKeys(breakpoints.keys, Object.keys(responsive));
          keys.forEach((key) => {
            if (breakpoints.keys.indexOf(key) !== -1) {
              const breakpointValue = responsive[key];
              if (breakpointValue !== void 0) {
                iterator((responsiveStyles, style) => {
                  if (smallestBreakpoint === key) {
                    Object.assign(responsiveStyles, style);
                  } else {
                    responsiveStyles[breakpoints.up(key)] = style;
                  }
                }, breakpointValue);
              }
            }
          });
        } else if (typeof responsive === "number" || typeof responsive === "string") {
          iterator((responsiveStyles, style) => {
            Object.assign(responsiveStyles, style);
          }, responsive);
        }
      };
      exports.traverseBreakpoints = traverseBreakpoints;
    }
  });

  // node_modules/@mui/system/Unstable_Grid/gridGenerator.js
  var require_gridGenerator = __commonJS({
    "node_modules/@mui/system/Unstable_Grid/gridGenerator.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.generateSpacingClassNames = exports.generateSizeClassNames = exports.generateGridStyles = exports.generateGridSizeStyles = exports.generateGridRowSpacingStyles = exports.generateGridOffsetStyles = exports.generateGridDirectionStyles = exports.generateGridColumnsStyles = exports.generateGridColumnSpacingStyles = exports.generateDirectionClasses = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _traverseBreakpoints = require_traverseBreakpoints();
      function appendLevel(level) {
        if (!level) {
          return "";
        }
        return `Level${level}`;
      }
      function isNestedContainer(ownerState) {
        return ownerState.unstable_level > 0 && ownerState.container;
      }
      function createGetSelfSpacing(ownerState) {
        return function getSelfSpacing(axis) {
          return `var(--Grid-${axis}Spacing${appendLevel(ownerState.unstable_level)})`;
        };
      }
      function createGetParentSpacing(ownerState) {
        return function getParentSpacing(axis) {
          if (ownerState.unstable_level === 0) {
            return `var(--Grid-${axis}Spacing)`;
          }
          return `var(--Grid-${axis}Spacing${appendLevel(ownerState.unstable_level - 1)})`;
        };
      }
      function getParentColumns(ownerState) {
        if (ownerState.unstable_level === 0) {
          return `var(--Grid-columns)`;
        }
        return `var(--Grid-columns${appendLevel(ownerState.unstable_level - 1)})`;
      }
      var generateGridSizeStyles = ({
        theme,
        ownerState
      }) => {
        const getSelfSpacing = createGetSelfSpacing(ownerState);
        const styles7 = {};
        (0, _traverseBreakpoints.traverseBreakpoints)(theme.breakpoints, ownerState.gridSize, (appendStyle, value) => {
          let style = {};
          if (value === true) {
            style = {
              flexBasis: 0,
              flexGrow: 1,
              maxWidth: "100%"
            };
          }
          if (value === "auto") {
            style = {
              flexBasis: "auto",
              flexGrow: 0,
              flexShrink: 0,
              maxWidth: "none",
              width: "auto"
            };
          }
          if (typeof value === "number") {
            style = {
              flexGrow: 0,
              flexBasis: "auto",
              width: `calc(100% * ${value} / ${getParentColumns(ownerState)}${isNestedContainer(ownerState) ? ` + ${getSelfSpacing("column")}` : ""})`
            };
          }
          appendStyle(styles7, style);
        });
        return styles7;
      };
      exports.generateGridSizeStyles = generateGridSizeStyles;
      var generateGridOffsetStyles = ({
        theme,
        ownerState
      }) => {
        const styles7 = {};
        (0, _traverseBreakpoints.traverseBreakpoints)(theme.breakpoints, ownerState.gridOffset, (appendStyle, value) => {
          let style = {};
          if (value === "auto") {
            style = {
              marginLeft: "auto"
            };
          }
          if (typeof value === "number") {
            style = {
              marginLeft: value === 0 ? "0px" : `calc(100% * ${value} / ${getParentColumns(ownerState)})`
            };
          }
          appendStyle(styles7, style);
        });
        return styles7;
      };
      exports.generateGridOffsetStyles = generateGridOffsetStyles;
      var generateGridColumnsStyles = ({
        theme,
        ownerState
      }) => {
        if (!ownerState.container) {
          return {};
        }
        const styles7 = isNestedContainer(ownerState) ? {
          [`--Grid-columns${appendLevel(ownerState.unstable_level)}`]: getParentColumns(ownerState)
        } : {
          "--Grid-columns": 12
        };
        (0, _traverseBreakpoints.traverseBreakpoints)(theme.breakpoints, ownerState.columns, (appendStyle, value) => {
          appendStyle(styles7, {
            [`--Grid-columns${appendLevel(ownerState.unstable_level)}`]: value
          });
        });
        return styles7;
      };
      exports.generateGridColumnsStyles = generateGridColumnsStyles;
      var generateGridRowSpacingStyles = ({
        theme,
        ownerState
      }) => {
        if (!ownerState.container) {
          return {};
        }
        const getParentSpacing = createGetParentSpacing(ownerState);
        const styles7 = isNestedContainer(ownerState) ? {
          // Set the default spacing as its parent spacing.
          // It will be overridden if spacing props are provided
          [`--Grid-rowSpacing${appendLevel(ownerState.unstable_level)}`]: getParentSpacing("row")
        } : {};
        (0, _traverseBreakpoints.traverseBreakpoints)(theme.breakpoints, ownerState.rowSpacing, (appendStyle, value) => {
          var _theme$spacing;
          appendStyle(styles7, {
            [`--Grid-rowSpacing${appendLevel(ownerState.unstable_level)}`]: typeof value === "string" ? value : (_theme$spacing = theme.spacing) == null ? void 0 : _theme$spacing.call(theme, value)
          });
        });
        return styles7;
      };
      exports.generateGridRowSpacingStyles = generateGridRowSpacingStyles;
      var generateGridColumnSpacingStyles = ({
        theme,
        ownerState
      }) => {
        if (!ownerState.container) {
          return {};
        }
        const getParentSpacing = createGetParentSpacing(ownerState);
        const styles7 = isNestedContainer(ownerState) ? {
          // Set the default spacing as its parent spacing.
          // It will be overridden if spacing props are provided
          [`--Grid-columnSpacing${appendLevel(ownerState.unstable_level)}`]: getParentSpacing("column")
        } : {};
        (0, _traverseBreakpoints.traverseBreakpoints)(theme.breakpoints, ownerState.columnSpacing, (appendStyle, value) => {
          var _theme$spacing2;
          appendStyle(styles7, {
            [`--Grid-columnSpacing${appendLevel(ownerState.unstable_level)}`]: typeof value === "string" ? value : (_theme$spacing2 = theme.spacing) == null ? void 0 : _theme$spacing2.call(theme, value)
          });
        });
        return styles7;
      };
      exports.generateGridColumnSpacingStyles = generateGridColumnSpacingStyles;
      var generateGridDirectionStyles = ({
        theme,
        ownerState
      }) => {
        if (!ownerState.container) {
          return {};
        }
        const styles7 = {};
        (0, _traverseBreakpoints.traverseBreakpoints)(theme.breakpoints, ownerState.direction, (appendStyle, value) => {
          appendStyle(styles7, {
            flexDirection: value
          });
        });
        return styles7;
      };
      exports.generateGridDirectionStyles = generateGridDirectionStyles;
      var generateGridStyles = ({
        ownerState
      }) => {
        const getSelfSpacing = createGetSelfSpacing(ownerState);
        const getParentSpacing = createGetParentSpacing(ownerState);
        return (0, _extends2.default)({
          minWidth: 0,
          boxSizing: "border-box"
        }, ownerState.container && (0, _extends2.default)({
          display: "flex",
          flexWrap: "wrap"
        }, ownerState.wrap && ownerState.wrap !== "wrap" && {
          flexWrap: ownerState.wrap
        }, {
          margin: `calc(${getSelfSpacing("row")} / -2) calc(${getSelfSpacing("column")} / -2)`
        }, ownerState.disableEqualOverflow && {
          margin: `calc(${getSelfSpacing("row")} * -1) 0px 0px calc(${getSelfSpacing("column")} * -1)`
        }), (!ownerState.container || isNestedContainer(ownerState)) && (0, _extends2.default)({
          padding: `calc(${getParentSpacing("row")} / 2) calc(${getParentSpacing("column")} / 2)`
        }, (ownerState.disableEqualOverflow || ownerState.parentDisableEqualOverflow) && {
          padding: `${getParentSpacing("row")} 0px 0px ${getParentSpacing("column")}`
        }));
      };
      exports.generateGridStyles = generateGridStyles;
      var generateSizeClassNames = (gridSize) => {
        const classNames = [];
        Object.entries(gridSize).forEach(([key, value]) => {
          if (value !== false && value !== void 0) {
            classNames.push(`grid-${key}-${String(value)}`);
          }
        });
        return classNames;
      };
      exports.generateSizeClassNames = generateSizeClassNames;
      var generateSpacingClassNames = (spacing, smallestBreakpoint = "xs") => {
        function isValidSpacing(val) {
          if (val === void 0) {
            return false;
          }
          return typeof val === "string" && !Number.isNaN(Number(val)) || typeof val === "number" && val > 0;
        }
        if (isValidSpacing(spacing)) {
          return [`spacing-${smallestBreakpoint}-${String(spacing)}`];
        }
        if (typeof spacing === "object" && !Array.isArray(spacing)) {
          const classNames = [];
          Object.entries(spacing).forEach(([key, value]) => {
            if (isValidSpacing(value)) {
              classNames.push(`spacing-${key}-${String(value)}`);
            }
          });
          return classNames;
        }
        return [];
      };
      exports.generateSpacingClassNames = generateSpacingClassNames;
      var generateDirectionClasses = (direction) => {
        if (direction === void 0) {
          return [];
        }
        if (typeof direction === "object") {
          return Object.entries(direction).map(([key, value]) => `direction-${key}-${value}`);
        }
        return [`direction-xs-${String(direction)}`];
      };
      exports.generateDirectionClasses = generateDirectionClasses;
    }
  });

  // node_modules/@mui/system/Unstable_Grid/createGrid.js
  var require_createGrid = __commonJS({
    "node_modules/@mui/system/Unstable_Grid/createGrid.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createGrid;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var React264 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _clsx = _interopRequireDefault(require_clsx());
      var _utils = require_utils();
      var _styled = _interopRequireDefault(require_styled());
      var _useThemeProps = _interopRequireDefault(require_useThemeProps2());
      var _useTheme = _interopRequireDefault(require_useTheme3());
      var _styleFunctionSx = require_styleFunctionSx2();
      var _createTheme = _interopRequireDefault(require_createTheme2());
      var _gridGenerator = require_gridGenerator();
      var _jsxRuntime = require_jsx_runtime();
      var _excluded170 = ["className", "children", "columns", "container", "component", "direction", "wrap", "spacing", "rowSpacing", "columnSpacing", "disableEqualOverflow", "unstable_level"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
      var defaultTheme4 = (0, _createTheme.default)();
      var defaultCreateStyledComponent = (0, _styled.default)("div", {
        name: "MuiGrid",
        slot: "Root",
        overridesResolver: (props, styles7) => styles7.root
      });
      function useThemePropsDefault(props) {
        return (0, _useThemeProps.default)({
          props,
          name: "MuiGrid",
          defaultTheme: defaultTheme4
        });
      }
      function createGrid(options = {}) {
        const {
          // This will allow adding custom styled fn (for example for custom sx style function)
          createStyledComponent = defaultCreateStyledComponent,
          useThemeProps: useThemeProps3 = useThemePropsDefault,
          componentName = "MuiGrid"
        } = options;
        const OverflowContext = /* @__PURE__ */ React264.createContext(void 0);
        const useUtilityClasses136 = (ownerState, theme) => {
          const {
            container,
            direction,
            spacing,
            wrap,
            gridSize
          } = ownerState;
          const slots = {
            root: ["root", container && "container", wrap !== "wrap" && `wrap-xs-${String(wrap)}`, ...(0, _gridGenerator.generateDirectionClasses)(direction), ...(0, _gridGenerator.generateSizeClassNames)(gridSize), ...container ? (0, _gridGenerator.generateSpacingClassNames)(spacing, theme.breakpoints.keys[0]) : []]
          };
          return (0, _utils.unstable_composeClasses)(slots, (slot) => (0, _utils.unstable_generateUtilityClass)(componentName, slot), {});
        };
        const GridRoot2 = createStyledComponent(_gridGenerator.generateGridColumnsStyles, _gridGenerator.generateGridColumnSpacingStyles, _gridGenerator.generateGridRowSpacingStyles, _gridGenerator.generateGridSizeStyles, _gridGenerator.generateGridDirectionStyles, _gridGenerator.generateGridStyles, _gridGenerator.generateGridOffsetStyles);
        const Grid3 = /* @__PURE__ */ React264.forwardRef(function Grid4(inProps, ref) {
          var _inProps$columns, _inProps$spacing, _ref, _inProps$rowSpacing, _ref2, _inProps$columnSpacin, _ref3, _disableEqualOverflow;
          const theme = (0, _useTheme.default)();
          const themeProps = useThemeProps3(inProps);
          const props = (0, _styleFunctionSx.extendSxProp)(themeProps);
          const overflow = React264.useContext(OverflowContext);
          const {
            className,
            children,
            columns: columnsProp = 12,
            container = false,
            component = "div",
            direction = "row",
            wrap = "wrap",
            spacing: spacingProp = 0,
            rowSpacing: rowSpacingProp = spacingProp,
            columnSpacing: columnSpacingProp = spacingProp,
            disableEqualOverflow: themeDisableEqualOverflow,
            unstable_level: level = 0
          } = props, rest = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded170);
          let disableEqualOverflow = themeDisableEqualOverflow;
          if (level && themeDisableEqualOverflow !== void 0) {
            disableEqualOverflow = inProps.disableEqualOverflow;
          }
          const gridSize = {};
          const gridOffset = {};
          const other = {};
          Object.entries(rest).forEach(([key, val]) => {
            if (theme.breakpoints.values[key] !== void 0) {
              gridSize[key] = val;
            } else if (theme.breakpoints.values[key.replace("Offset", "")] !== void 0) {
              gridOffset[key.replace("Offset", "")] = val;
            } else {
              other[key] = val;
            }
          });
          const columns = (_inProps$columns = inProps.columns) != null ? _inProps$columns : level ? void 0 : columnsProp;
          const spacing = (_inProps$spacing = inProps.spacing) != null ? _inProps$spacing : level ? void 0 : spacingProp;
          const rowSpacing = (_ref = (_inProps$rowSpacing = inProps.rowSpacing) != null ? _inProps$rowSpacing : inProps.spacing) != null ? _ref : level ? void 0 : rowSpacingProp;
          const columnSpacing = (_ref2 = (_inProps$columnSpacin = inProps.columnSpacing) != null ? _inProps$columnSpacin : inProps.spacing) != null ? _ref2 : level ? void 0 : columnSpacingProp;
          const ownerState = (0, _extends2.default)({}, props, {
            level,
            columns,
            container,
            direction,
            wrap,
            spacing,
            rowSpacing,
            columnSpacing,
            gridSize,
            gridOffset,
            disableEqualOverflow: (_ref3 = (_disableEqualOverflow = disableEqualOverflow) != null ? _disableEqualOverflow : overflow) != null ? _ref3 : false,
            // use context value if exists.
            parentDisableEqualOverflow: overflow
            // for nested grid
          });
          const classes = useUtilityClasses136(ownerState, theme);
          let result = /* @__PURE__ */ (0, _jsxRuntime.jsx)(GridRoot2, (0, _extends2.default)({
            ref,
            as: component,
            ownerState,
            className: (0, _clsx.default)(classes.root, className)
          }, other, {
            children: React264.Children.map(children, (child) => {
              if (/* @__PURE__ */ React264.isValidElement(child) && (0, _utils.unstable_isMuiElement)(child, ["Grid"])) {
                var _child$props$unstable;
                return /* @__PURE__ */ React264.cloneElement(child, {
                  unstable_level: (_child$props$unstable = child.props.unstable_level) != null ? _child$props$unstable : level + 1
                });
              }
              return child;
            })
          }));
          if (disableEqualOverflow !== void 0 && disableEqualOverflow !== (overflow != null ? overflow : false)) {
            result = /* @__PURE__ */ (0, _jsxRuntime.jsx)(OverflowContext.Provider, {
              value: disableEqualOverflow,
              children: result
            });
          }
          return result;
        });
        true ? Grid3.propTypes = {
          children: _propTypes.default.node,
          className: _propTypes.default.string,
          columns: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.number, _propTypes.default.object]),
          columnSpacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
          component: _propTypes.default.elementType,
          container: _propTypes.default.bool,
          direction: _propTypes.default.oneOfType([_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), _propTypes.default.arrayOf(_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), _propTypes.default.object]),
          disableEqualOverflow: _propTypes.default.bool,
          lg: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.bool]),
          lgOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number]),
          md: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.bool]),
          mdOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number]),
          rowSpacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
          sm: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.bool]),
          smOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number]),
          spacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
          sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
          wrap: _propTypes.default.oneOf(["nowrap", "wrap-reverse", "wrap"]),
          xl: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.bool]),
          xlOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number]),
          xs: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.bool]),
          xsOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number])
        } : void 0;
        Grid3.muiName = "Grid";
        return Grid3;
      }
    }
  });

  // node_modules/@mui/system/Unstable_Grid/Grid.js
  var require_Grid = __commonJS({
    "node_modules/@mui/system/Unstable_Grid/Grid.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _createGrid = _interopRequireDefault(require_createGrid());
      var Grid3 = (0, _createGrid.default)();
      true ? Grid3.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * The content of the component.
         */
        children: _propTypes.default.node,
        /**
         * The number of columns.
         * @default 12
         */
        columns: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.number), _propTypes.default.number, _propTypes.default.object]),
        /**
         * Defines the horizontal space between the type `item` components.
         * It overrides the value of the `spacing` prop.
         */
        columnSpacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
        /**
         * If `true`, the component will have the flex *container* behavior.
         * You should be wrapping *items* with a *container*.
         * @default false
         */
        container: _propTypes.default.bool,
        /**
         * Defines the `flex-direction` style property.
         * It is applied for all screen sizes.
         * @default 'row'
         */
        direction: _propTypes.default.oneOfType([_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), _propTypes.default.arrayOf(_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), _propTypes.default.object]),
        /**
         * If `true`, the negative margin and padding are apply only to the top and left sides of the grid.
         */
        disableEqualOverflow: _propTypes.default.bool,
        /**
         * If a number, it sets the number of columns the grid item uses.
         * It can't be greater than the total number of columns of the container (12 by default).
         * If 'auto', the grid item's width matches its content.
         * If false, the prop is ignored.
         * If true, the grid item's width grows to use the space available in the grid container.
         * The value is applied for the `lg` breakpoint and wider screens if not overridden.
         * @default false
         */
        lg: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.bool]),
        /**
         * If a number, it sets the margin-left equals to the number of columns the grid item uses.
         * If 'auto', the grid item push itself to the right-end of the container.
         * The value is applied for the `lg` breakpoint and wider screens if not overridden.
         */
        lgOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number]),
        /**
         * If a number, it sets the number of columns the grid item uses.
         * It can't be greater than the total number of columns of the container (12 by default).
         * If 'auto', the grid item's width matches its content.
         * If false, the prop is ignored.
         * If true, the grid item's width grows to use the space available in the grid container.
         * The value is applied for the `md` breakpoint and wider screens if not overridden.
         * @default false
         */
        md: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.bool]),
        /**
         * If a number, it sets the margin-left equals to the number of columns the grid item uses.
         * If 'auto', the grid item push itself to the right-end of the container.
         * The value is applied for the `md` breakpoint and wider screens if not overridden.
         */
        mdOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number]),
        /**
         * Defines the vertical space between the type `item` components.
         * It overrides the value of the `spacing` prop.
         */
        rowSpacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
        /**
         * If a number, it sets the number of columns the grid item uses.
         * It can't be greater than the total number of columns of the container (12 by default).
         * If 'auto', the grid item's width matches its content.
         * If false, the prop is ignored.
         * If true, the grid item's width grows to use the space available in the grid container.
         * The value is applied for the `sm` breakpoint and wider screens if not overridden.
         * @default false
         */
        sm: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.bool]),
        /**
         * If a number, it sets the margin-left equals to the number of columns the grid item uses.
         * If 'auto', the grid item push itself to the right-end of the container.
         * The value is applied for the `sm` breakpoint and wider screens if not overridden.
         */
        smOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number]),
        /**
         * Defines the space between the type `item` components.
         * It can only be used on a type `container` component.
         * @default 0
         */
        spacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
        /**
         * @ignore
         */
        sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
        /**
         * @internal
         * The level of the grid starts from `0`
         * and increases when the grid nests inside another grid regardless of container or item.
         *
         * ```js
         * <Grid> // level 0
         *   <Grid> // level 1
         *     <Grid> // level 2
         *   <Grid> // level 1
         * ```
         *
         * Only consecutive grid is considered nesting.
         * A grid container will start at `0` if there are non-Grid element above it.
         *
         * ```js
         * <Grid> // level 0
         *   <div>
         *     <Grid> // level 0
         *       <Grid> // level 1
         * ```
         */
        unstable_level: _propTypes.default.number,
        /**
         * Defines the `flex-wrap` style property.
         * It's applied for all screen sizes.
         * @default 'wrap'
         */
        wrap: _propTypes.default.oneOf(["nowrap", "wrap-reverse", "wrap"]),
        /**
         * If a number, it sets the number of columns the grid item uses.
         * It can't be greater than the total number of columns of the container (12 by default).
         * If 'auto', the grid item's width matches its content.
         * If false, the prop is ignored.
         * If true, the grid item's width grows to use the space available in the grid container.
         * The value is applied for the `xl` breakpoint and wider screens if not overridden.
         * @default false
         */
        xl: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.bool]),
        /**
         * If a number, it sets the margin-left equals to the number of columns the grid item uses.
         * If 'auto', the grid item push itself to the right-end of the container.
         * The value is applied for the `xl` breakpoint and wider screens if not overridden.
         */
        xlOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number]),
        /**
         * If a number, it sets the number of columns the grid item uses.
         * It can't be greater than the total number of columns of the container (12 by default).
         * If 'auto', the grid item's width matches its content.
         * If false, the prop is ignored.
         * If true, the grid item's width grows to use the space available in the grid container.
         * The value is applied for all the screen sizes with the lowest priority.
         * @default false
         */
        xs: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number, _propTypes.default.bool]),
        /**
         * If a number, it sets the margin-left equals to the number of columns the grid item uses.
         * If 'auto', the grid item push itself to the right-end of the container.
         * The value is applied for the `xs` breakpoint and wider screens if not overridden.
         */
        xsOffset: _propTypes.default.oneOfType([_propTypes.default.oneOf(["auto"]), _propTypes.default.number])
      } : void 0;
      var _default = Grid3;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/Unstable_Grid/GridProps.js
  var require_GridProps = __commonJS({
    "node_modules/@mui/system/Unstable_Grid/GridProps.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/system/Unstable_Grid/gridClasses.js
  var require_gridClasses = __commonJS({
    "node_modules/@mui/system/Unstable_Grid/gridClasses.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getGridUtilityClass = getGridUtilityClass2;
      var _utils = require_utils();
      function getGridUtilityClass2(slot) {
        return (0, _utils.unstable_generateUtilityClass)("MuiGrid", slot);
      }
      var SPACINGS4 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
      var DIRECTIONS3 = ["column-reverse", "column", "row-reverse", "row"];
      var WRAPS3 = ["nowrap", "wrap-reverse", "wrap"];
      var GRID_SIZES3 = ["auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
      var gridClasses2 = (0, _utils.unstable_generateUtilityClasses)("MuiGrid", [
        "root",
        "container",
        "item",
        // spacings
        ...SPACINGS4.map((spacing) => `spacing-xs-${spacing}`),
        // direction values
        ...DIRECTIONS3.map((direction) => `direction-xs-${direction}`),
        // wrap values
        ...WRAPS3.map((wrap) => `wrap-xs-${wrap}`),
        // grid sizes for all breakpoints
        ...GRID_SIZES3.map((size2) => `grid-xs-${size2}`),
        ...GRID_SIZES3.map((size2) => `grid-sm-${size2}`),
        ...GRID_SIZES3.map((size2) => `grid-md-${size2}`),
        ...GRID_SIZES3.map((size2) => `grid-lg-${size2}`),
        ...GRID_SIZES3.map((size2) => `grid-xl-${size2}`)
      ]);
      var _default = gridClasses2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/Unstable_Grid/index.js
  var require_Unstable_Grid = __commonJS({
    "node_modules/@mui/system/Unstable_Grid/index.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        createGrid: true,
        gridClasses: true,
        unstable_traverseBreakpoints: true
      };
      Object.defineProperty(exports, "createGrid", {
        enumerable: true,
        get: function() {
          return _createGrid.default;
        }
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _Grid.default;
        }
      });
      Object.defineProperty(exports, "gridClasses", {
        enumerable: true,
        get: function() {
          return _gridClasses.default;
        }
      });
      Object.defineProperty(exports, "unstable_traverseBreakpoints", {
        enumerable: true,
        get: function() {
          return _traverseBreakpoints.traverseBreakpoints;
        }
      });
      var _Grid = _interopRequireDefault(require_Grid());
      var _createGrid = _interopRequireDefault(require_createGrid());
      var _GridProps = require_GridProps();
      Object.keys(_GridProps).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _GridProps[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _GridProps[key];
          }
        });
      });
      var _gridClasses = _interopRequireWildcard(require_gridClasses());
      Object.keys(_gridClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _gridClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _gridClasses[key];
          }
        });
      });
      var _traverseBreakpoints = require_traverseBreakpoints();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/system/Stack/createStack.js
  var require_createStack = __commonJS({
    "node_modules/@mui/system/Stack/createStack.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createStack2;
      exports.style = void 0;
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _extends2 = _interopRequireDefault(require_extends());
      var React264 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _clsx = _interopRequireDefault(require_clsx());
      var _utils = require_utils();
      var _styled = _interopRequireDefault(require_styled());
      var _useThemeProps = _interopRequireDefault(require_useThemeProps2());
      var _styleFunctionSx = require_styleFunctionSx2();
      var _createTheme = _interopRequireDefault(require_createTheme2());
      var _breakpoints = require_breakpoints();
      var _spacing = require_spacing();
      var _jsxRuntime = require_jsx_runtime();
      var _excluded170 = ["component", "direction", "spacing", "divider", "children", "className", "useFlexGap"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
      var defaultTheme4 = (0, _createTheme.default)();
      var defaultCreateStyledComponent = (0, _styled.default)("div", {
        name: "MuiStack",
        slot: "Root",
        overridesResolver: (props, styles7) => styles7.root
      });
      function useThemePropsDefault(props) {
        return (0, _useThemeProps.default)({
          props,
          name: "MuiStack",
          defaultTheme: defaultTheme4
        });
      }
      function joinChildren(children, separator) {
        const childrenArray = React264.Children.toArray(children).filter(Boolean);
        return childrenArray.reduce((output, child, index3) => {
          output.push(child);
          if (index3 < childrenArray.length - 1) {
            output.push(/* @__PURE__ */ React264.cloneElement(separator, {
              key: `separator-${index3}`
            }));
          }
          return output;
        }, []);
      }
      var getSideFromDirection = (direction) => {
        return {
          row: "Left",
          "row-reverse": "Right",
          column: "Top",
          "column-reverse": "Bottom"
        }[direction];
      };
      var style = ({
        ownerState,
        theme
      }) => {
        let styles7 = (0, _extends2.default)({
          display: "flex",
          flexDirection: "column"
        }, (0, _breakpoints.handleBreakpoints)({
          theme
        }, (0, _breakpoints.resolveBreakpointValues)({
          values: ownerState.direction,
          breakpoints: theme.breakpoints.values
        }), (propValue) => ({
          flexDirection: propValue
        })));
        if (ownerState.spacing) {
          const transformer = (0, _spacing.createUnarySpacing)(theme);
          const base = Object.keys(theme.breakpoints.values).reduce((acc, breakpoint) => {
            if (typeof ownerState.spacing === "object" && ownerState.spacing[breakpoint] != null || typeof ownerState.direction === "object" && ownerState.direction[breakpoint] != null) {
              acc[breakpoint] = true;
            }
            return acc;
          }, {});
          const directionValues = (0, _breakpoints.resolveBreakpointValues)({
            values: ownerState.direction,
            base
          });
          const spacingValues = (0, _breakpoints.resolveBreakpointValues)({
            values: ownerState.spacing,
            base
          });
          if (typeof directionValues === "object") {
            Object.keys(directionValues).forEach((breakpoint, index3, breakpoints) => {
              const directionValue = directionValues[breakpoint];
              if (!directionValue) {
                const previousDirectionValue = index3 > 0 ? directionValues[breakpoints[index3 - 1]] : "column";
                directionValues[breakpoint] = previousDirectionValue;
              }
            });
          }
          const styleFromPropValue = (propValue, breakpoint) => {
            if (ownerState.useFlexGap) {
              return {
                gap: (0, _spacing.getValue)(transformer, propValue)
              };
            }
            return {
              // The useFlexGap={false} implement relies on each child to give up control of the margin.
              // We need to reset the margin to avoid double spacing.
              "& > :not(style):not(style)": {
                margin: 0
              },
              "& > :not(style) ~ :not(style)": {
                [`margin${getSideFromDirection(breakpoint ? directionValues[breakpoint] : ownerState.direction)}`]: (0, _spacing.getValue)(transformer, propValue)
              }
            };
          };
          styles7 = (0, _utils.deepmerge)(styles7, (0, _breakpoints.handleBreakpoints)({
            theme
          }, spacingValues, styleFromPropValue));
        }
        styles7 = (0, _breakpoints.mergeBreakpointsInOrder)(theme.breakpoints, styles7);
        return styles7;
      };
      exports.style = style;
      function createStack2(options = {}) {
        const {
          // This will allow adding custom styled fn (for example for custom sx style function)
          createStyledComponent = defaultCreateStyledComponent,
          useThemeProps: useThemeProps3 = useThemePropsDefault,
          componentName = "MuiStack"
        } = options;
        const useUtilityClasses136 = () => {
          const slots = {
            root: ["root"]
          };
          return (0, _utils.unstable_composeClasses)(slots, (slot) => (0, _utils.unstable_generateUtilityClass)(componentName, slot), {});
        };
        const StackRoot = createStyledComponent(style);
        const Stack2 = /* @__PURE__ */ React264.forwardRef(function Grid3(inProps, ref) {
          const themeProps = useThemeProps3(inProps);
          const props = (0, _styleFunctionSx.extendSxProp)(themeProps);
          const {
            component = "div",
            direction = "column",
            spacing = 0,
            divider,
            children,
            className,
            useFlexGap = false
          } = props, other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded170);
          const ownerState = {
            direction,
            spacing,
            useFlexGap
          };
          const classes = useUtilityClasses136();
          return /* @__PURE__ */ (0, _jsxRuntime.jsx)(StackRoot, (0, _extends2.default)({
            as: component,
            ownerState,
            ref,
            className: (0, _clsx.default)(classes.root, className)
          }, other, {
            children: divider ? joinChildren(children, divider) : children
          }));
        });
        true ? Stack2.propTypes = {
          children: _propTypes.default.node,
          direction: _propTypes.default.oneOfType([_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), _propTypes.default.arrayOf(_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), _propTypes.default.object]),
          divider: _propTypes.default.node,
          spacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
          sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object])
        } : void 0;
        return Stack2;
      }
    }
  });

  // node_modules/@mui/system/Stack/Stack.js
  var require_Stack = __commonJS({
    "node_modules/@mui/system/Stack/Stack.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _createStack = _interopRequireDefault(require_createStack());
      var Stack2 = (0, _createStack.default)();
      true ? Stack2.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit TypeScript types and run "yarn proptypes"  |
        // ----------------------------------------------------------------------
        /**
         * The content of the component.
         */
        children: _propTypes.default.node,
        /**
         * The component used for the root node.
         * Either a string to use a HTML element or a component.
         */
        component: _propTypes.default.elementType,
        /**
         * Defines the `flex-direction` style property.
         * It is applied for all screen sizes.
         * @default 'column'
         */
        direction: _propTypes.default.oneOfType([_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), _propTypes.default.arrayOf(_propTypes.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), _propTypes.default.object]),
        /**
         * Add an element between each child.
         */
        divider: _propTypes.default.node,
        /**
         * Defines the space between immediate children.
         * @default 0
         */
        spacing: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string])), _propTypes.default.number, _propTypes.default.object, _propTypes.default.string]),
        /**
         * The system prop, which allows defining system overrides as well as additional CSS styles.
         */
        sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
        /**
         * If `true`, the CSS flexbox `gap` is used instead of applying `margin` to children.
         *
         * While CSS `gap` removes the [known limitations](https://mui.com/joy-ui/react-stack/#limitations),
         * it is not fully supported in some browsers. We recommend checking https://caniuse.com/?search=flex%20gap before using this flag.
         *
         * To enable this flag globally, follow the theme's default props configuration.
         * @default false
         */
        useFlexGap: _propTypes.default.bool
      } : void 0;
      var _default = Stack2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/Stack/StackProps.js
  var require_StackProps = __commonJS({
    "node_modules/@mui/system/Stack/StackProps.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
    }
  });

  // node_modules/@mui/system/Stack/stackClasses.js
  var require_stackClasses = __commonJS({
    "node_modules/@mui/system/Stack/stackClasses.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getStackUtilityClass = getStackUtilityClass;
      var _utils = require_utils();
      function getStackUtilityClass(slot) {
        return (0, _utils.unstable_generateUtilityClass)("MuiStack", slot);
      }
      var stackClasses2 = (0, _utils.unstable_generateUtilityClasses)("MuiStack", ["root"]);
      var _default = stackClasses2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/system/Stack/index.js
  var require_Stack2 = __commonJS({
    "node_modules/@mui/system/Stack/index.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        createStack: true,
        stackClasses: true
      };
      Object.defineProperty(exports, "createStack", {
        enumerable: true,
        get: function() {
          return _createStack.default;
        }
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _Stack.default;
        }
      });
      Object.defineProperty(exports, "stackClasses", {
        enumerable: true,
        get: function() {
          return _stackClasses.default;
        }
      });
      var _Stack = _interopRequireDefault(require_Stack());
      var _createStack = _interopRequireDefault(require_createStack());
      var _StackProps = require_StackProps();
      Object.keys(_StackProps).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _StackProps[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _StackProps[key];
          }
        });
      });
      var _stackClasses = _interopRequireWildcard(require_stackClasses());
      Object.keys(_stackClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _stackClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _stackClasses[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/system/index.js
  var require_system = __commonJS({
    "node_modules/@mui/system/index.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        experimental_sx: true,
        css: true,
        keyframes: true,
        StyledEngineProvider: true,
        GlobalStyles: true,
        borders: true,
        breakpoints: true,
        handleBreakpoints: true,
        mergeBreakpointsInOrder: true,
        unstable_resolveBreakpointValues: true,
        compose: true,
        display: true,
        flexbox: true,
        grid: true,
        palette: true,
        positions: true,
        shadows: true,
        sizing: true,
        spacing: true,
        style: true,
        getPath: true,
        getStyleValue: true,
        typography: true,
        unstable_styleFunctionSx: true,
        unstable_createStyleFunctionSx: true,
        unstable_extendSxProp: true,
        unstable_defaultSxConfig: true,
        unstable_getThemeValue: true,
        Box: true,
        createBox: true,
        createStyled: true,
        styled: true,
        createTheme: true,
        createBreakpoints: true,
        createSpacing: true,
        shape: true,
        useThemeProps: true,
        getThemeProps: true,
        useTheme: true,
        useThemeWithoutDefault: true,
        ThemeProvider: true,
        unstable_createCssVarsProvider: true,
        unstable_createGetCssVar: true,
        unstable_cssVarsParser: true,
        unstable_prepareCssVars: true,
        unstable_createCssVarsTheme: true,
        responsivePropType: true,
        createContainer: true,
        Container: true,
        Unstable_Grid: true,
        Stack: true
      };
      Object.defineProperty(exports, "Box", {
        enumerable: true,
        get: function() {
          return _Box.default;
        }
      });
      Object.defineProperty(exports, "Container", {
        enumerable: true,
        get: function() {
          return _Container.default;
        }
      });
      Object.defineProperty(exports, "GlobalStyles", {
        enumerable: true,
        get: function() {
          return _GlobalStyles.default;
        }
      });
      Object.defineProperty(exports, "Stack", {
        enumerable: true,
        get: function() {
          return _Stack.default;
        }
      });
      Object.defineProperty(exports, "StyledEngineProvider", {
        enumerable: true,
        get: function() {
          return _styledEngine.StyledEngineProvider;
        }
      });
      Object.defineProperty(exports, "ThemeProvider", {
        enumerable: true,
        get: function() {
          return _ThemeProvider.default;
        }
      });
      Object.defineProperty(exports, "Unstable_Grid", {
        enumerable: true,
        get: function() {
          return _Grid.default;
        }
      });
      Object.defineProperty(exports, "borders", {
        enumerable: true,
        get: function() {
          return _borders.default;
        }
      });
      Object.defineProperty(exports, "breakpoints", {
        enumerable: true,
        get: function() {
          return _breakpoints.default;
        }
      });
      Object.defineProperty(exports, "compose", {
        enumerable: true,
        get: function() {
          return _compose.default;
        }
      });
      Object.defineProperty(exports, "createBox", {
        enumerable: true,
        get: function() {
          return _createBox.default;
        }
      });
      Object.defineProperty(exports, "createBreakpoints", {
        enumerable: true,
        get: function() {
          return _createBreakpoints.default;
        }
      });
      Object.defineProperty(exports, "createContainer", {
        enumerable: true,
        get: function() {
          return _createContainer.default;
        }
      });
      Object.defineProperty(exports, "createSpacing", {
        enumerable: true,
        get: function() {
          return _createSpacing.default;
        }
      });
      Object.defineProperty(exports, "createStyled", {
        enumerable: true,
        get: function() {
          return _createStyled.default;
        }
      });
      Object.defineProperty(exports, "createTheme", {
        enumerable: true,
        get: function() {
          return _createTheme.default;
        }
      });
      Object.defineProperty(exports, "css", {
        enumerable: true,
        get: function() {
          return _styledEngine.css;
        }
      });
      Object.defineProperty(exports, "display", {
        enumerable: true,
        get: function() {
          return _display.default;
        }
      });
      exports.experimental_sx = experimental_sx2;
      Object.defineProperty(exports, "flexbox", {
        enumerable: true,
        get: function() {
          return _flexbox.default;
        }
      });
      Object.defineProperty(exports, "getPath", {
        enumerable: true,
        get: function() {
          return _style.getPath;
        }
      });
      Object.defineProperty(exports, "getStyleValue", {
        enumerable: true,
        get: function() {
          return _style.getStyleValue;
        }
      });
      Object.defineProperty(exports, "getThemeProps", {
        enumerable: true,
        get: function() {
          return _useThemeProps.getThemeProps;
        }
      });
      Object.defineProperty(exports, "grid", {
        enumerable: true,
        get: function() {
          return _cssGrid.default;
        }
      });
      Object.defineProperty(exports, "handleBreakpoints", {
        enumerable: true,
        get: function() {
          return _breakpoints.handleBreakpoints;
        }
      });
      Object.defineProperty(exports, "keyframes", {
        enumerable: true,
        get: function() {
          return _styledEngine.keyframes;
        }
      });
      Object.defineProperty(exports, "mergeBreakpointsInOrder", {
        enumerable: true,
        get: function() {
          return _breakpoints.mergeBreakpointsInOrder;
        }
      });
      Object.defineProperty(exports, "palette", {
        enumerable: true,
        get: function() {
          return _palette.default;
        }
      });
      Object.defineProperty(exports, "positions", {
        enumerable: true,
        get: function() {
          return _positions.default;
        }
      });
      Object.defineProperty(exports, "responsivePropType", {
        enumerable: true,
        get: function() {
          return _responsivePropType.default;
        }
      });
      Object.defineProperty(exports, "shadows", {
        enumerable: true,
        get: function() {
          return _shadows.default;
        }
      });
      Object.defineProperty(exports, "shape", {
        enumerable: true,
        get: function() {
          return _shape.default;
        }
      });
      Object.defineProperty(exports, "sizing", {
        enumerable: true,
        get: function() {
          return _sizing.default;
        }
      });
      Object.defineProperty(exports, "spacing", {
        enumerable: true,
        get: function() {
          return _spacing.default;
        }
      });
      Object.defineProperty(exports, "style", {
        enumerable: true,
        get: function() {
          return _style.default;
        }
      });
      Object.defineProperty(exports, "styled", {
        enumerable: true,
        get: function() {
          return _styled.default;
        }
      });
      Object.defineProperty(exports, "typography", {
        enumerable: true,
        get: function() {
          return _typography.default;
        }
      });
      Object.defineProperty(exports, "unstable_createCssVarsProvider", {
        enumerable: true,
        get: function() {
          return _createCssVarsProvider.default;
        }
      });
      Object.defineProperty(exports, "unstable_createCssVarsTheme", {
        enumerable: true,
        get: function() {
          return _createCssVarsTheme.default;
        }
      });
      Object.defineProperty(exports, "unstable_createGetCssVar", {
        enumerable: true,
        get: function() {
          return _createGetCssVar.default;
        }
      });
      Object.defineProperty(exports, "unstable_createStyleFunctionSx", {
        enumerable: true,
        get: function() {
          return _styleFunctionSx.unstable_createStyleFunctionSx;
        }
      });
      Object.defineProperty(exports, "unstable_cssVarsParser", {
        enumerable: true,
        get: function() {
          return _cssVarsParser.default;
        }
      });
      Object.defineProperty(exports, "unstable_defaultSxConfig", {
        enumerable: true,
        get: function() {
          return _styleFunctionSx.unstable_defaultSxConfig;
        }
      });
      Object.defineProperty(exports, "unstable_extendSxProp", {
        enumerable: true,
        get: function() {
          return _styleFunctionSx.extendSxProp;
        }
      });
      Object.defineProperty(exports, "unstable_getThemeValue", {
        enumerable: true,
        get: function() {
          return _getThemeValue.default;
        }
      });
      Object.defineProperty(exports, "unstable_prepareCssVars", {
        enumerable: true,
        get: function() {
          return _prepareCssVars.default;
        }
      });
      Object.defineProperty(exports, "unstable_resolveBreakpointValues", {
        enumerable: true,
        get: function() {
          return _breakpoints.resolveBreakpointValues;
        }
      });
      Object.defineProperty(exports, "unstable_styleFunctionSx", {
        enumerable: true,
        get: function() {
          return _styleFunctionSx.default;
        }
      });
      Object.defineProperty(exports, "useTheme", {
        enumerable: true,
        get: function() {
          return _useTheme.default;
        }
      });
      Object.defineProperty(exports, "useThemeProps", {
        enumerable: true,
        get: function() {
          return _useThemeProps.default;
        }
      });
      Object.defineProperty(exports, "useThemeWithoutDefault", {
        enumerable: true,
        get: function() {
          return _useThemeWithoutDefault.default;
        }
      });
      var _utils = require_utils();
      var _styledEngine = require_node();
      var _GlobalStyles = _interopRequireDefault(require_GlobalStyles4());
      var _borders = _interopRequireWildcard(require_borders());
      Object.keys(_borders).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _borders[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _borders[key];
          }
        });
      });
      var _breakpoints = _interopRequireWildcard(require_breakpoints());
      var _compose = _interopRequireDefault(require_compose());
      var _display = _interopRequireDefault(require_display());
      var _flexbox = _interopRequireWildcard(require_flexbox());
      Object.keys(_flexbox).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _flexbox[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _flexbox[key];
          }
        });
      });
      var _cssGrid = _interopRequireWildcard(require_cssGrid());
      Object.keys(_cssGrid).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _cssGrid[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _cssGrid[key];
          }
        });
      });
      var _palette = _interopRequireWildcard(require_palette());
      Object.keys(_palette).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _palette[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _palette[key];
          }
        });
      });
      var _positions = _interopRequireWildcard(require_positions());
      Object.keys(_positions).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _positions[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _positions[key];
          }
        });
      });
      var _shadows = _interopRequireDefault(require_shadows());
      var _sizing = _interopRequireWildcard(require_sizing());
      Object.keys(_sizing).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _sizing[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _sizing[key];
          }
        });
      });
      var _spacing = _interopRequireWildcard(require_spacing());
      Object.keys(_spacing).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _spacing[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _spacing[key];
          }
        });
      });
      var _style = _interopRequireWildcard(require_style());
      var _typography = _interopRequireWildcard(require_typography());
      Object.keys(_typography).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _typography[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _typography[key];
          }
        });
      });
      var _styleFunctionSx = _interopRequireWildcard(require_styleFunctionSx2());
      var _getThemeValue = _interopRequireDefault(require_getThemeValue());
      var _Box = _interopRequireDefault(require_Box2());
      var _createBox = _interopRequireDefault(require_createBox());
      var _createStyled = _interopRequireWildcard(require_createStyled());
      Object.keys(_createStyled).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _createStyled[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _createStyled[key];
          }
        });
      });
      var _styled = _interopRequireDefault(require_styled());
      var _createTheme = _interopRequireDefault(require_createTheme2());
      var _createBreakpoints = _interopRequireDefault(require_createBreakpoints());
      var _createSpacing = _interopRequireDefault(require_createSpacing());
      var _shape = _interopRequireDefault(require_shape());
      var _useThemeProps = _interopRequireWildcard(require_useThemeProps2());
      var _useTheme = _interopRequireDefault(require_useTheme3());
      var _useThemeWithoutDefault = _interopRequireDefault(require_useThemeWithoutDefault());
      var _colorManipulator = require_colorManipulator();
      Object.keys(_colorManipulator).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _colorManipulator[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _colorManipulator[key];
          }
        });
      });
      var _ThemeProvider = _interopRequireDefault(require_ThemeProvider4());
      var _createCssVarsProvider = _interopRequireDefault(require_createCssVarsProvider());
      var _createGetCssVar = _interopRequireDefault(require_createGetCssVar());
      var _cssVarsParser = _interopRequireDefault(require_cssVarsParser());
      var _prepareCssVars = _interopRequireDefault(require_prepareCssVars());
      var _createCssVarsTheme = _interopRequireDefault(require_createCssVarsTheme());
      var _responsivePropType = _interopRequireDefault(require_responsivePropType());
      var _createContainer = _interopRequireDefault(require_createContainer());
      var _Container = _interopRequireWildcard(require_Container2());
      Object.keys(_Container).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Container[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Container[key];
          }
        });
      });
      var _Grid = _interopRequireDefault(require_Grid());
      var _Unstable_Grid = require_Unstable_Grid();
      Object.keys(_Unstable_Grid).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Unstable_Grid[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Unstable_Grid[key];
          }
        });
      });
      var _Stack = _interopRequireDefault(require_Stack());
      var _Stack2 = require_Stack2();
      Object.keys(_Stack2).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _Stack2[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _Stack2[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
      function experimental_sx2() {
        throw new Error(true ? `MUI: The \`experimental_sx\` has been moved to \`theme.unstable_sx\`.For more details, see https://github.com/mui/material-ui/pull/35150.` : (0, _utils.formatMuiErrorMessage)(20));
      }
    }
  });

  // node_modules/@mui/material/node/generateUtilityClass/index.js
  var require_generateUtilityClass3 = __commonJS({
    "node_modules/@mui/material/node/generateUtilityClass/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _utils.unstable_generateUtilityClass;
        }
      });
      var _utils = require_utils();
    }
  });

  // node_modules/@mui/base/node/ClassNameGenerator/index.js
  var require_ClassNameGenerator3 = __commonJS({
    "node_modules/@mui/base/node/ClassNameGenerator/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "unstable_ClassNameGenerator", {
        enumerable: true,
        get: function() {
          return _utils.unstable_ClassNameGenerator;
        }
      });
      var _utils = require_utils();
    }
  });

  // node_modules/@mui/material/node/utils/capitalize.js
  var require_capitalize3 = __commonJS({
    "node_modules/@mui/material/node/utils/capitalize.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_capitalize;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/utils/createChainedFunction.js
  var require_createChainedFunction2 = __commonJS({
    "node_modules/@mui/material/node/utils/createChainedFunction.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_createChainedFunction;
      exports.default = _default;
    }
  });

  // node_modules/@mui/base/node/composeClasses/index.js
  var require_composeClasses3 = __commonJS({
    "node_modules/@mui/base/node/composeClasses/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "unstable_composeClasses", {
        enumerable: true,
        get: function() {
          return _utils.unstable_composeClasses;
        }
      });
      var _utils = require_utils();
    }
  });

  // node_modules/@mui/material/node/styles/createMixins.js
  var require_createMixins = __commonJS({
    "node_modules/@mui/material/node/styles/createMixins.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createMixins2;
      var _extends2 = _interopRequireDefault(require_extends());
      function createMixins2(breakpoints, mixins) {
        return (0, _extends2.default)({
          toolbar: {
            minHeight: 56,
            [breakpoints.up("xs")]: {
              "@media (orientation: landscape)": {
                minHeight: 48
              }
            },
            [breakpoints.up("sm")]: {
              minHeight: 64
            }
          }
        }, mixins);
      }
    }
  });

  // node_modules/@mui/material/node/colors/common.js
  var require_common = __commonJS({
    "node_modules/@mui/material/node/colors/common.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var common2 = {
        black: "#000",
        white: "#fff"
      };
      var _default = common2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/colors/grey.js
  var require_grey = __commonJS({
    "node_modules/@mui/material/node/colors/grey.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var grey2 = {
        50: "#fafafa",
        100: "#f5f5f5",
        200: "#eeeeee",
        300: "#e0e0e0",
        400: "#bdbdbd",
        500: "#9e9e9e",
        600: "#757575",
        700: "#616161",
        800: "#424242",
        900: "#212121",
        A100: "#f5f5f5",
        A200: "#eeeeee",
        A400: "#bdbdbd",
        A700: "#616161"
      };
      var _default = grey2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/colors/purple.js
  var require_purple = __commonJS({
    "node_modules/@mui/material/node/colors/purple.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var purple2 = {
        50: "#f3e5f5",
        100: "#e1bee7",
        200: "#ce93d8",
        300: "#ba68c8",
        400: "#ab47bc",
        500: "#9c27b0",
        600: "#8e24aa",
        700: "#7b1fa2",
        800: "#6a1b9a",
        900: "#4a148c",
        A100: "#ea80fc",
        A200: "#e040fb",
        A400: "#d500f9",
        A700: "#aa00ff"
      };
      var _default = purple2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/colors/red.js
  var require_red = __commonJS({
    "node_modules/@mui/material/node/colors/red.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var red2 = {
        50: "#ffebee",
        100: "#ffcdd2",
        200: "#ef9a9a",
        300: "#e57373",
        400: "#ef5350",
        500: "#f44336",
        600: "#e53935",
        700: "#d32f2f",
        800: "#c62828",
        900: "#b71c1c",
        A100: "#ff8a80",
        A200: "#ff5252",
        A400: "#ff1744",
        A700: "#d50000"
      };
      var _default = red2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/colors/orange.js
  var require_orange = __commonJS({
    "node_modules/@mui/material/node/colors/orange.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var orange2 = {
        50: "#fff3e0",
        100: "#ffe0b2",
        200: "#ffcc80",
        300: "#ffb74d",
        400: "#ffa726",
        500: "#ff9800",
        600: "#fb8c00",
        700: "#f57c00",
        800: "#ef6c00",
        900: "#e65100",
        A100: "#ffd180",
        A200: "#ffab40",
        A400: "#ff9100",
        A700: "#ff6d00"
      };
      var _default = orange2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/colors/blue.js
  var require_blue = __commonJS({
    "node_modules/@mui/material/node/colors/blue.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var blue2 = {
        50: "#e3f2fd",
        100: "#bbdefb",
        200: "#90caf9",
        300: "#64b5f6",
        400: "#42a5f5",
        500: "#2196f3",
        600: "#1e88e5",
        700: "#1976d2",
        800: "#1565c0",
        900: "#0d47a1",
        A100: "#82b1ff",
        A200: "#448aff",
        A400: "#2979ff",
        A700: "#2962ff"
      };
      var _default = blue2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/colors/lightBlue.js
  var require_lightBlue = __commonJS({
    "node_modules/@mui/material/node/colors/lightBlue.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var lightBlue2 = {
        50: "#e1f5fe",
        100: "#b3e5fc",
        200: "#81d4fa",
        300: "#4fc3f7",
        400: "#29b6f6",
        500: "#03a9f4",
        600: "#039be5",
        700: "#0288d1",
        800: "#0277bd",
        900: "#01579b",
        A100: "#80d8ff",
        A200: "#40c4ff",
        A400: "#00b0ff",
        A700: "#0091ea"
      };
      var _default = lightBlue2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/colors/green.js
  var require_green = __commonJS({
    "node_modules/@mui/material/node/colors/green.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var green2 = {
        50: "#e8f5e9",
        100: "#c8e6c9",
        200: "#a5d6a7",
        300: "#81c784",
        400: "#66bb6a",
        500: "#4caf50",
        600: "#43a047",
        700: "#388e3c",
        800: "#2e7d32",
        900: "#1b5e20",
        A100: "#b9f6ca",
        A200: "#69f0ae",
        A400: "#00e676",
        A700: "#00c853"
      };
      var _default = green2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/styles/createPalette.js
  var require_createPalette = __commonJS({
    "node_modules/@mui/material/node/styles/createPalette.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.dark = void 0;
      exports.default = createPalette2;
      exports.light = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _utils = require_utils();
      var _system = require_system();
      var _common = _interopRequireDefault(require_common());
      var _grey = _interopRequireDefault(require_grey());
      var _purple = _interopRequireDefault(require_purple());
      var _red = _interopRequireDefault(require_red());
      var _orange = _interopRequireDefault(require_orange());
      var _blue = _interopRequireDefault(require_blue());
      var _lightBlue = _interopRequireDefault(require_lightBlue());
      var _green = _interopRequireDefault(require_green());
      var _excluded170 = ["mode", "contrastThreshold", "tonalOffset"];
      var light2 = {
        // The colors used to style the text.
        text: {
          // The most important text.
          primary: "rgba(0, 0, 0, 0.87)",
          // Secondary text.
          secondary: "rgba(0, 0, 0, 0.6)",
          // Disabled text have even lower visual prominence.
          disabled: "rgba(0, 0, 0, 0.38)"
        },
        // The color used to divide different elements.
        divider: "rgba(0, 0, 0, 0.12)",
        // The background colors used to style the surfaces.
        // Consistency between these values is important.
        background: {
          paper: _common.default.white,
          default: _common.default.white
        },
        // The colors used to style the action elements.
        action: {
          // The color of an active action like an icon button.
          active: "rgba(0, 0, 0, 0.54)",
          // The color of an hovered action.
          hover: "rgba(0, 0, 0, 0.04)",
          hoverOpacity: 0.04,
          // The color of a selected action.
          selected: "rgba(0, 0, 0, 0.08)",
          selectedOpacity: 0.08,
          // The color of a disabled action.
          disabled: "rgba(0, 0, 0, 0.26)",
          // The background color of a disabled action.
          disabledBackground: "rgba(0, 0, 0, 0.12)",
          disabledOpacity: 0.38,
          focus: "rgba(0, 0, 0, 0.12)",
          focusOpacity: 0.12,
          activatedOpacity: 0.12
        }
      };
      exports.light = light2;
      var dark2 = {
        text: {
          primary: _common.default.white,
          secondary: "rgba(255, 255, 255, 0.7)",
          disabled: "rgba(255, 255, 255, 0.5)",
          icon: "rgba(255, 255, 255, 0.5)"
        },
        divider: "rgba(255, 255, 255, 0.12)",
        background: {
          paper: "#121212",
          default: "#121212"
        },
        action: {
          active: _common.default.white,
          hover: "rgba(255, 255, 255, 0.08)",
          hoverOpacity: 0.08,
          selected: "rgba(255, 255, 255, 0.16)",
          selectedOpacity: 0.16,
          disabled: "rgba(255, 255, 255, 0.3)",
          disabledBackground: "rgba(255, 255, 255, 0.12)",
          disabledOpacity: 0.38,
          focus: "rgba(255, 255, 255, 0.12)",
          focusOpacity: 0.12,
          activatedOpacity: 0.24
        }
      };
      exports.dark = dark2;
      function addLightOrDark2(intent, direction, shade, tonalOffset) {
        const tonalOffsetLight = tonalOffset.light || tonalOffset;
        const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
        if (!intent[direction]) {
          if (intent.hasOwnProperty(shade)) {
            intent[direction] = intent[shade];
          } else if (direction === "light") {
            intent.light = (0, _system.lighten)(intent.main, tonalOffsetLight);
          } else if (direction === "dark") {
            intent.dark = (0, _system.darken)(intent.main, tonalOffsetDark);
          }
        }
      }
      function getDefaultPrimary2(mode = "light") {
        if (mode === "dark") {
          return {
            main: _blue.default[200],
            light: _blue.default[50],
            dark: _blue.default[400]
          };
        }
        return {
          main: _blue.default[700],
          light: _blue.default[400],
          dark: _blue.default[800]
        };
      }
      function getDefaultSecondary2(mode = "light") {
        if (mode === "dark") {
          return {
            main: _purple.default[200],
            light: _purple.default[50],
            dark: _purple.default[400]
          };
        }
        return {
          main: _purple.default[500],
          light: _purple.default[300],
          dark: _purple.default[700]
        };
      }
      function getDefaultError2(mode = "light") {
        if (mode === "dark") {
          return {
            main: _red.default[500],
            light: _red.default[300],
            dark: _red.default[700]
          };
        }
        return {
          main: _red.default[700],
          light: _red.default[400],
          dark: _red.default[800]
        };
      }
      function getDefaultInfo2(mode = "light") {
        if (mode === "dark") {
          return {
            main: _lightBlue.default[400],
            light: _lightBlue.default[300],
            dark: _lightBlue.default[700]
          };
        }
        return {
          main: _lightBlue.default[700],
          light: _lightBlue.default[500],
          dark: _lightBlue.default[900]
        };
      }
      function getDefaultSuccess2(mode = "light") {
        if (mode === "dark") {
          return {
            main: _green.default[400],
            light: _green.default[300],
            dark: _green.default[700]
          };
        }
        return {
          main: _green.default[800],
          light: _green.default[500],
          dark: _green.default[900]
        };
      }
      function getDefaultWarning2(mode = "light") {
        if (mode === "dark") {
          return {
            main: _orange.default[400],
            light: _orange.default[300],
            dark: _orange.default[700]
          };
        }
        return {
          main: "#ed6c02",
          // closest to orange[800] that pass 3:1.
          light: _orange.default[500],
          dark: _orange.default[900]
        };
      }
      function createPalette2(palette) {
        const {
          mode = "light",
          contrastThreshold = 3,
          tonalOffset = 0.2
        } = palette, other = (0, _objectWithoutPropertiesLoose2.default)(palette, _excluded170);
        const primary = palette.primary || getDefaultPrimary2(mode);
        const secondary = palette.secondary || getDefaultSecondary2(mode);
        const error = palette.error || getDefaultError2(mode);
        const info = palette.info || getDefaultInfo2(mode);
        const success = palette.success || getDefaultSuccess2(mode);
        const warning2 = palette.warning || getDefaultWarning2(mode);
        function getContrastText(background) {
          const contrastText = (0, _system.getContrastRatio)(background, dark2.text.primary) >= contrastThreshold ? dark2.text.primary : light2.text.primary;
          if (true) {
            const contrast = (0, _system.getContrastRatio)(background, contrastText);
            if (contrast < 3) {
              console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, "falls below the WCAG recommended absolute minimum contrast ratio of 3:1.", "https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"].join("\n"));
            }
          }
          return contrastText;
        }
        const augmentColor = ({
          color,
          name,
          mainShade = 500,
          lightShade = 300,
          darkShade = 700
        }) => {
          color = (0, _extends2.default)({}, color);
          if (!color.main && color[mainShade]) {
            color.main = color[mainShade];
          }
          if (!color.hasOwnProperty("main")) {
            throw new Error(true ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${mainShade}\` property.` : (0, _utils.formatMuiErrorMessage)(11, name ? ` (${name})` : "", mainShade));
          }
          if (typeof color.main !== "string") {
            throw new Error(true ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(color.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });` : (0, _utils.formatMuiErrorMessage)(12, name ? ` (${name})` : "", JSON.stringify(color.main)));
          }
          addLightOrDark2(color, "light", lightShade, tonalOffset);
          addLightOrDark2(color, "dark", darkShade, tonalOffset);
          if (!color.contrastText) {
            color.contrastText = getContrastText(color.main);
          }
          return color;
        };
        const modes = {
          dark: dark2,
          light: light2
        };
        if (true) {
          if (!modes[mode]) {
            console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
          }
        }
        const paletteOutput = (0, _utils.deepmerge)((0, _extends2.default)({
          // A collection of common colors.
          common: (0, _extends2.default)({}, _common.default),
          // prevent mutable object.
          // The palette mode, can be light or dark.
          mode,
          // The colors used to represent primary interface elements for a user.
          primary: augmentColor({
            color: primary,
            name: "primary"
          }),
          // The colors used to represent secondary interface elements for a user.
          secondary: augmentColor({
            color: secondary,
            name: "secondary",
            mainShade: "A400",
            lightShade: "A200",
            darkShade: "A700"
          }),
          // The colors used to represent interface elements that the user should be made aware of.
          error: augmentColor({
            color: error,
            name: "error"
          }),
          // The colors used to represent potentially dangerous actions or important messages.
          warning: augmentColor({
            color: warning2,
            name: "warning"
          }),
          // The colors used to present information to the user that is neutral and not necessarily important.
          info: augmentColor({
            color: info,
            name: "info"
          }),
          // The colors used to indicate the successful completion of an action that user triggered.
          success: augmentColor({
            color: success,
            name: "success"
          }),
          // The grey colors.
          grey: _grey.default,
          // Used by `getContrastText()` to maximize the contrast between
          // the background and the text.
          contrastThreshold,
          // Takes a background color and returns the text color that maximizes the contrast.
          getContrastText,
          // Generate a rich color object.
          augmentColor,
          // Used by the functions below to shift a color's luminance by approximately
          // two indexes within its tonal palette.
          // E.g., shift from Red 500 to Red 300 or Red 700.
          tonalOffset
        }, modes[mode]), other);
        return paletteOutput;
      }
    }
  });

  // node_modules/@mui/material/node/styles/createTypography.js
  var require_createTypography = __commonJS({
    "node_modules/@mui/material/node/styles/createTypography.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createTypography2;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _utils = require_utils();
      var _excluded170 = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];
      function round5(value) {
        return Math.round(value * 1e5) / 1e5;
      }
      var caseAllCaps2 = {
        textTransform: "uppercase"
      };
      var defaultFontFamily2 = '"Roboto", "Helvetica", "Arial", sans-serif';
      function createTypography2(palette, typography) {
        const _ref = typeof typography === "function" ? typography(palette) : typography, {
          fontFamily = defaultFontFamily2,
          // The default font size of the Material Specification.
          fontSize = 14,
          // px
          fontWeightLight = 300,
          fontWeightRegular = 400,
          fontWeightMedium = 500,
          fontWeightBold = 700,
          // Tell MUI what's the font-size on the html element.
          // 16px is the default font-size used by browsers.
          htmlFontSize = 16,
          // Apply the CSS properties to all the variants.
          allVariants,
          pxToRem: pxToRem2
        } = _ref, other = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded170);
        if (true) {
          if (typeof fontSize !== "number") {
            console.error("MUI: `fontSize` is required to be a number.");
          }
          if (typeof htmlFontSize !== "number") {
            console.error("MUI: `htmlFontSize` is required to be a number.");
          }
        }
        const coef = fontSize / 14;
        const pxToRem = pxToRem2 || ((size2) => `${size2 / htmlFontSize * coef}rem`);
        const buildVariant = (fontWeight, size2, lineHeight, letterSpacing, casing) => (0, _extends2.default)({
          fontFamily,
          fontWeight,
          fontSize: pxToRem(size2),
          // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
          lineHeight
        }, fontFamily === defaultFontFamily2 ? {
          letterSpacing: `${round5(letterSpacing / size2)}em`
        } : {}, casing, allVariants);
        const variants = {
          h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
          h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
          h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
          h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
          h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
          h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
          subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
          subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
          body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
          body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
          button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps2),
          caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
          overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps2),
          // TODO v6: Remove handling of 'inherit' variant from the theme as it is already handled in Material UI's Typography component. Also, remember to remove the associated types.
          inherit: {
            fontFamily: "inherit",
            fontWeight: "inherit",
            fontSize: "inherit",
            lineHeight: "inherit",
            letterSpacing: "inherit"
          }
        };
        return (0, _utils.deepmerge)((0, _extends2.default)({
          htmlFontSize,
          pxToRem,
          fontFamily,
          fontSize,
          fontWeightLight,
          fontWeightRegular,
          fontWeightMedium,
          fontWeightBold
        }, variants), other, {
          clone: false
          // No need to clone deep
        });
      }
    }
  });

  // node_modules/@mui/material/node/styles/shadows.js
  var require_shadows2 = __commonJS({
    "node_modules/@mui/material/node/styles/shadows.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var shadowKeyUmbraOpacity2 = 0.2;
      var shadowKeyPenumbraOpacity2 = 0.14;
      var shadowAmbientShadowOpacity2 = 0.12;
      function createShadow2(...px2) {
        return [`${px2[0]}px ${px2[1]}px ${px2[2]}px ${px2[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity2})`, `${px2[4]}px ${px2[5]}px ${px2[6]}px ${px2[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity2})`, `${px2[8]}px ${px2[9]}px ${px2[10]}px ${px2[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity2})`].join(",");
      }
      var shadows2 = ["none", createShadow2(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow2(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow2(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow2(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow2(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow2(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow2(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow2(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow2(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow2(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow2(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow2(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow2(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow2(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow2(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow2(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow2(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow2(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow2(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow2(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow2(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow2(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow2(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow2(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
      var _default = shadows2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/styles/createTransitions.js
  var require_createTransitions = __commonJS({
    "node_modules/@mui/material/node/styles/createTransitions.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createTransitions2;
      exports.easing = exports.duration = void 0;
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _extends2 = _interopRequireDefault(require_extends());
      var _excluded170 = ["duration", "easing", "delay"];
      var easing2 = {
        // This is the most common easing curve.
        easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
        // Objects enter the screen at full velocity from off-screen and
        // slowly decelerate to a resting point.
        easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
        // Objects leave the screen at full velocity. They do not decelerate when off-screen.
        easeIn: "cubic-bezier(0.4, 0, 1, 1)",
        // The sharp curve is used by objects that may return to the screen at any time.
        sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
      };
      exports.easing = easing2;
      var duration2 = {
        shortest: 150,
        shorter: 200,
        short: 250,
        // most basic recommended timing
        standard: 300,
        // this is to be used in complex animations
        complex: 375,
        // recommended when something is entering screen
        enteringScreen: 225,
        // recommended when something is leaving screen
        leavingScreen: 195
      };
      exports.duration = duration2;
      function formatMs2(milliseconds) {
        return `${Math.round(milliseconds)}ms`;
      }
      function getAutoHeightDuration2(height) {
        if (!height) {
          return 0;
        }
        const constant = height / 36;
        return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);
      }
      function createTransitions2(inputTransitions) {
        const mergedEasing = (0, _extends2.default)({}, easing2, inputTransitions.easing);
        const mergedDuration = (0, _extends2.default)({}, duration2, inputTransitions.duration);
        const create = (props = ["all"], options = {}) => {
          const {
            duration: durationOption = mergedDuration.standard,
            easing: easingOption = mergedEasing.easeInOut,
            delay = 0
          } = options, other = (0, _objectWithoutPropertiesLoose2.default)(options, _excluded170);
          if (true) {
            const isString2 = (value) => typeof value === "string";
            const isNumber3 = (value) => !isNaN(parseFloat(value));
            if (!isString2(props) && !Array.isArray(props)) {
              console.error('MUI: Argument "props" must be a string or Array.');
            }
            if (!isNumber3(durationOption) && !isString2(durationOption)) {
              console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
            }
            if (!isString2(easingOption)) {
              console.error('MUI: Argument "easing" must be a string.');
            }
            if (!isNumber3(delay) && !isString2(delay)) {
              console.error('MUI: Argument "delay" must be a number or a string.');
            }
            if (typeof options !== "object") {
              console.error(["MUI: Secong argument of transition.create must be an object.", "Arguments should be either `create('prop1', options)` or `create(['prop1', 'prop2'], options)`"].join("\n"));
            }
            if (Object.keys(other).length !== 0) {
              console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(",")}].`);
            }
          }
          return (Array.isArray(props) ? props : [props]).map((animatedProp) => `${animatedProp} ${typeof durationOption === "string" ? durationOption : formatMs2(durationOption)} ${easingOption} ${typeof delay === "string" ? delay : formatMs2(delay)}`).join(",");
        };
        return (0, _extends2.default)({
          getAutoHeightDuration: getAutoHeightDuration2,
          create
        }, inputTransitions, {
          easing: mergedEasing,
          duration: mergedDuration
        });
      }
    }
  });

  // node_modules/@mui/material/node/styles/zIndex.js
  var require_zIndex = __commonJS({
    "node_modules/@mui/material/node/styles/zIndex.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var zIndex2 = {
        mobileStepper: 1e3,
        fab: 1050,
        speedDial: 1050,
        appBar: 1100,
        drawer: 1200,
        modal: 1300,
        snackbar: 1400,
        tooltip: 1500
      };
      var _default = zIndex2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/styles/createTheme.js
  var require_createTheme3 = __commonJS({
    "node_modules/@mui/material/node/styles/createTheme.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.createMuiTheme = createMuiTheme2;
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var _utils = require_utils();
      var _system = require_system();
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass3());
      var _createMixins = _interopRequireDefault(require_createMixins());
      var _createPalette = _interopRequireDefault(require_createPalette());
      var _createTypography = _interopRequireDefault(require_createTypography());
      var _shadows = _interopRequireDefault(require_shadows2());
      var _createTransitions = _interopRequireDefault(require_createTransitions());
      var _zIndex = _interopRequireDefault(require_zIndex());
      var _excluded170 = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];
      function createTheme2(options = {}, ...args) {
        const {
          mixins: mixinsInput = {},
          palette: paletteInput = {},
          transitions: transitionsInput = {},
          typography: typographyInput = {}
        } = options, other = (0, _objectWithoutPropertiesLoose2.default)(options, _excluded170);
        if (options.vars) {
          throw new Error(true ? `MUI: \`vars\` is a private field used for CSS variables support.
Please use another name.` : (0, _utils.formatMuiErrorMessage)(18));
        }
        const palette = (0, _createPalette.default)(paletteInput);
        const systemTheme = (0, _system.createTheme)(options);
        let muiTheme = (0, _utils.deepmerge)(systemTheme, {
          mixins: (0, _createMixins.default)(systemTheme.breakpoints, mixinsInput),
          palette,
          // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
          shadows: _shadows.default.slice(),
          typography: (0, _createTypography.default)(palette, typographyInput),
          transitions: (0, _createTransitions.default)(transitionsInput),
          zIndex: (0, _extends2.default)({}, _zIndex.default)
        });
        muiTheme = (0, _utils.deepmerge)(muiTheme, other);
        muiTheme = args.reduce((acc, argument) => (0, _utils.deepmerge)(acc, argument), muiTheme);
        if (true) {
          const stateClasses2 = ["active", "checked", "completed", "disabled", "error", "expanded", "focused", "focusVisible", "required", "selected"];
          const traverse = (node2, component) => {
            let key;
            for (key in node2) {
              const child = node2[key];
              if (stateClasses2.indexOf(key) !== -1 && Object.keys(child).length > 0) {
                if (true) {
                  const stateClass = (0, _generateUtilityClass.default)("", key);
                  console.error([`MUI: The \`${component}\` component increases the CSS specificity of the \`${key}\` internal state.`, "You can not override it like this: ", JSON.stringify(node2, null, 2), "", `Instead, you need to use the '&.${stateClass}' syntax:`, JSON.stringify({
                    root: {
                      [`&.${stateClass}`]: child
                    }
                  }, null, 2), "", "https://mui.com/r/state-classes-guide"].join("\n"));
                }
                node2[key] = {};
              }
            }
          };
          Object.keys(muiTheme.components).forEach((component) => {
            const styleOverrides = muiTheme.components[component].styleOverrides;
            if (styleOverrides && component.indexOf("Mui") === 0) {
              traverse(styleOverrides, component);
            }
          });
        }
        muiTheme.unstable_sxConfig = (0, _extends2.default)({}, _system.unstable_defaultSxConfig, other == null ? void 0 : other.unstable_sxConfig);
        muiTheme.unstable_sx = function sx(props) {
          return (0, _system.unstable_styleFunctionSx)({
            sx: props,
            theme: this
          });
        };
        return muiTheme;
      }
      var warnedOnce3 = false;
      function createMuiTheme2(...args) {
        if (true) {
          if (!warnedOnce3) {
            warnedOnce3 = true;
            console.error(["MUI: the createMuiTheme function was renamed to createTheme.", "", "You should use `import { createTheme } from '@mui/material/styles'`"].join("\n"));
          }
        }
        return createTheme2(...args);
      }
      var _default = createTheme2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/styles/defaultTheme.js
  var require_defaultTheme = __commonJS({
    "node_modules/@mui/material/node/styles/defaultTheme.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createTheme = _interopRequireDefault(require_createTheme3());
      var defaultTheme4 = (0, _createTheme.default)();
      var _default = defaultTheme4;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/styles/identifier.js
  var require_identifier = __commonJS({
    "node_modules/@mui/material/node/styles/identifier.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _default = "$$material";
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/styles/useThemeProps.js
  var require_useThemeProps3 = __commonJS({
    "node_modules/@mui/material/node/styles/useThemeProps.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = useThemeProps3;
      var _system = require_system();
      var _defaultTheme = _interopRequireDefault(require_defaultTheme());
      var _identifier = _interopRequireDefault(require_identifier());
      function useThemeProps3({
        props,
        name
      }) {
        return (0, _system.useThemeProps)({
          props,
          name,
          defaultTheme: _defaultTheme.default,
          themeId: _identifier.default
        });
      }
    }
  });

  // node_modules/@mui/material/node/styles/styled.js
  var require_styled2 = __commonJS({
    "node_modules/@mui/material/node/styles/styled.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.slotShouldForwardProp = exports.rootShouldForwardProp = exports.default = void 0;
      var _system = require_system();
      var _defaultTheme = _interopRequireDefault(require_defaultTheme());
      var _identifier = _interopRequireDefault(require_identifier());
      var rootShouldForwardProp2 = (prop) => (0, _system.shouldForwardProp)(prop) && prop !== "classes";
      exports.rootShouldForwardProp = rootShouldForwardProp2;
      var slotShouldForwardProp2 = _system.shouldForwardProp;
      exports.slotShouldForwardProp = slotShouldForwardProp2;
      var styled2 = (0, _system.createStyled)({
        themeId: _identifier.default,
        defaultTheme: _defaultTheme.default,
        rootShouldForwardProp: rootShouldForwardProp2
      });
      var _default = styled2;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/SvgIcon/svgIconClasses.js
  var require_svgIconClasses = __commonJS({
    "node_modules/@mui/material/node/SvgIcon/svgIconClasses.js"(exports) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      exports.getSvgIconUtilityClass = getSvgIconUtilityClass;
      var _utils = require_utils();
      var _generateUtilityClass = _interopRequireDefault(require_generateUtilityClass3());
      function getSvgIconUtilityClass(slot) {
        return (0, _generateUtilityClass.default)("MuiSvgIcon", slot);
      }
      var svgIconClasses = (0, _utils.unstable_generateUtilityClasses)("MuiSvgIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]);
      var _default = svgIconClasses;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/SvgIcon/SvgIcon.js
  var require_SvgIcon = __commonJS({
    "node_modules/@mui/material/node/SvgIcon/SvgIcon.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _extends2 = _interopRequireDefault(require_extends());
      var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require_objectWithoutPropertiesLoose());
      var React264 = _interopRequireWildcard(require_react());
      var _propTypes = _interopRequireDefault(require_prop_types());
      var _clsx = _interopRequireDefault(require_clsx());
      var _composeClasses = require_composeClasses3();
      var _capitalize = _interopRequireDefault(require_capitalize3());
      var _useThemeProps = _interopRequireDefault(require_useThemeProps3());
      var _styled = _interopRequireDefault(require_styled2());
      var _svgIconClasses = require_svgIconClasses();
      var _jsxRuntime = require_jsx_runtime();
      var _excluded170 = ["children", "className", "color", "component", "fontSize", "htmlColor", "inheritViewBox", "titleAccess", "viewBox"];
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
      var useUtilityClasses136 = (ownerState) => {
        const {
          color,
          fontSize,
          classes
        } = ownerState;
        const slots = {
          root: ["root", color !== "inherit" && `color${(0, _capitalize.default)(color)}`, `fontSize${(0, _capitalize.default)(fontSize)}`]
        };
        return (0, _composeClasses.unstable_composeClasses)(slots, _svgIconClasses.getSvgIconUtilityClass, classes);
      };
      var SvgIconRoot = (0, _styled.default)("svg", {
        name: "MuiSvgIcon",
        slot: "Root",
        overridesResolver: (props, styles7) => {
          const {
            ownerState
          } = props;
          return [styles7.root, ownerState.color !== "inherit" && styles7[`color${(0, _capitalize.default)(ownerState.color)}`], styles7[`fontSize${(0, _capitalize.default)(ownerState.fontSize)}`]];
        }
      })(({
        theme,
        ownerState
      }) => {
        var _theme$transitions, _theme$transitions$cr, _theme$transitions2, _theme$typography, _theme$typography$pxT, _theme$typography2, _theme$typography2$px, _theme$typography3, _theme$typography3$px, _palette$ownerState$c, _palette, _palette2, _palette3;
        return {
          userSelect: "none",
          width: "1em",
          height: "1em",
          display: "inline-block",
          // the <svg> will define the property that has `currentColor`
          // e.g. heroicons uses fill="none" and stroke="currentColor"
          fill: ownerState.hasSvgAsChild ? void 0 : "currentColor",
          flexShrink: 0,
          transition: (_theme$transitions = theme.transitions) == null || (_theme$transitions$cr = _theme$transitions.create) == null ? void 0 : _theme$transitions$cr.call(_theme$transitions, "fill", {
            duration: (_theme$transitions2 = theme.transitions) == null || (_theme$transitions2 = _theme$transitions2.duration) == null ? void 0 : _theme$transitions2.shorter
          }),
          fontSize: {
            inherit: "inherit",
            small: ((_theme$typography = theme.typography) == null || (_theme$typography$pxT = _theme$typography.pxToRem) == null ? void 0 : _theme$typography$pxT.call(_theme$typography, 20)) || "1.25rem",
            medium: ((_theme$typography2 = theme.typography) == null || (_theme$typography2$px = _theme$typography2.pxToRem) == null ? void 0 : _theme$typography2$px.call(_theme$typography2, 24)) || "1.5rem",
            large: ((_theme$typography3 = theme.typography) == null || (_theme$typography3$px = _theme$typography3.pxToRem) == null ? void 0 : _theme$typography3$px.call(_theme$typography3, 35)) || "2.1875rem"
          }[ownerState.fontSize],
          // TODO v5 deprecate, v6 remove for sx
          color: (_palette$ownerState$c = (_palette = (theme.vars || theme).palette) == null || (_palette = _palette[ownerState.color]) == null ? void 0 : _palette.main) != null ? _palette$ownerState$c : {
            action: (_palette2 = (theme.vars || theme).palette) == null || (_palette2 = _palette2.action) == null ? void 0 : _palette2.active,
            disabled: (_palette3 = (theme.vars || theme).palette) == null || (_palette3 = _palette3.action) == null ? void 0 : _palette3.disabled,
            inherit: void 0
          }[ownerState.color]
        };
      });
      var SvgIcon3 = /* @__PURE__ */ React264.forwardRef(function SvgIcon4(inProps, ref) {
        const props = (0, _useThemeProps.default)({
          props: inProps,
          name: "MuiSvgIcon"
        });
        const {
          children,
          className,
          color = "inherit",
          component = "svg",
          fontSize = "medium",
          htmlColor,
          inheritViewBox = false,
          titleAccess,
          viewBox = "0 0 24 24"
        } = props, other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded170);
        const hasSvgAsChild = /* @__PURE__ */ React264.isValidElement(children) && children.type === "svg";
        const ownerState = (0, _extends2.default)({}, props, {
          color,
          component,
          fontSize,
          instanceFontSize: inProps.fontSize,
          inheritViewBox,
          viewBox,
          hasSvgAsChild
        });
        const more = {};
        if (!inheritViewBox) {
          more.viewBox = viewBox;
        }
        const classes = useUtilityClasses136(ownerState);
        return /* @__PURE__ */ (0, _jsxRuntime.jsxs)(SvgIconRoot, (0, _extends2.default)({
          as: component,
          className: (0, _clsx.default)(classes.root, className),
          focusable: "false",
          color: htmlColor,
          "aria-hidden": titleAccess ? void 0 : true,
          role: titleAccess ? "img" : void 0,
          ref
        }, more, other, hasSvgAsChild && children.props, {
          ownerState,
          children: [hasSvgAsChild ? children.props.children : children, titleAccess ? /* @__PURE__ */ (0, _jsxRuntime.jsx)("title", {
            children: titleAccess
          }) : null]
        }));
      });
      true ? SvgIcon3.propTypes = {
        // ----------------------------- Warning --------------------------------
        // | These PropTypes are generated from the TypeScript type definitions |
        // |     To update them edit the d.ts file and run "yarn proptypes"     |
        // ----------------------------------------------------------------------
        /**
         * Node passed into the SVG element.
         */
        children: _propTypes.default.node,
        /**
         * Override or extend the styles applied to the component.
         */
        classes: _propTypes.default.object,
        /**
         * @ignore
         */
        className: _propTypes.default.string,
        /**
         * The color of the component.
         * It supports both default and custom theme colors, which can be added as shown in the
         * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
         * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
         * @default 'inherit'
         */
        color: _propTypes.default.oneOfType([_propTypes.default.oneOf(["inherit", "action", "disabled", "primary", "secondary", "error", "info", "success", "warning"]), _propTypes.default.string]),
        /**
         * The component used for the root node.
         * Either a string to use a HTML element or a component.
         */
        component: _propTypes.default.elementType,
        /**
         * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
         * @default 'medium'
         */
        fontSize: _propTypes.default.oneOfType([_propTypes.default.oneOf(["inherit", "large", "medium", "small"]), _propTypes.default.string]),
        /**
         * Applies a color attribute to the SVG element.
         */
        htmlColor: _propTypes.default.string,
        /**
         * If `true`, the root node will inherit the custom `component`'s viewBox and the `viewBox`
         * prop will be ignored.
         * Useful when you want to reference a custom `component` and have `SvgIcon` pass that
         * `component`'s viewBox to the root node.
         * @default false
         */
        inheritViewBox: _propTypes.default.bool,
        /**
         * The shape-rendering attribute. The behavior of the different options is described on the
         * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
         * If you are having issues with blurry icons you should investigate this prop.
         */
        shapeRendering: _propTypes.default.string,
        /**
         * The system prop that allows defining system overrides as well as additional CSS styles.
         */
        sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
        /**
         * Provides a human-readable title for the element that contains it.
         * https://www.w3.org/TR/SVG-access/#Equivalent
         */
        titleAccess: _propTypes.default.string,
        /**
         * Allows you to redefine what the coordinates without units mean inside an SVG element.
         * For example, if the SVG element is 500 (width) by 200 (height),
         * and you pass viewBox="0 0 50 20",
         * this means that the coordinates inside the SVG will go from the top left corner (0,0)
         * to bottom right (50,20) and each unit will be worth 10px.
         * @default '0 0 24 24'
         */
        viewBox: _propTypes.default.string
      } : void 0;
      SvgIcon3.muiName = "SvgIcon";
      var _default = SvgIcon3;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/SvgIcon/index.js
  var require_SvgIcon2 = __commonJS({
    "node_modules/@mui/material/node/SvgIcon/index.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      var _exportNames = {
        svgIconClasses: true
      };
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _SvgIcon.default;
        }
      });
      Object.defineProperty(exports, "svgIconClasses", {
        enumerable: true,
        get: function() {
          return _svgIconClasses.default;
        }
      });
      var _SvgIcon = _interopRequireDefault(require_SvgIcon());
      var _svgIconClasses = _interopRequireWildcard(require_svgIconClasses());
      Object.keys(_svgIconClasses).forEach(function(key) {
        if (key === "default" || key === "__esModule")
          return;
        if (Object.prototype.hasOwnProperty.call(_exportNames, key))
          return;
        if (key in exports && exports[key] === _svgIconClasses[key])
          return;
        Object.defineProperty(exports, key, {
          enumerable: true,
          get: function() {
            return _svgIconClasses[key];
          }
        });
      });
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
    }
  });

  // node_modules/@mui/material/node/utils/createSvgIcon.js
  var require_createSvgIcon = __commonJS({
    "node_modules/@mui/material/node/utils/createSvgIcon.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = createSvgIcon4;
      var _extends2 = _interopRequireDefault(require_extends());
      var React264 = _interopRequireWildcard(require_react());
      var _SvgIcon = _interopRequireDefault(require_SvgIcon2());
      var _jsxRuntime = require_jsx_runtime();
      function _getRequireWildcardCache(nodeInterop) {
        if (typeof WeakMap !== "function")
          return null;
        var cacheBabelInterop = /* @__PURE__ */ new WeakMap();
        var cacheNodeInterop = /* @__PURE__ */ new WeakMap();
        return (_getRequireWildcardCache = function(nodeInterop2) {
          return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
        })(nodeInterop);
      }
      function _interopRequireWildcard(obj, nodeInterop) {
        if (!nodeInterop && obj && obj.__esModule) {
          return obj;
        }
        if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
          return { default: obj };
        }
        var cache3 = _getRequireWildcardCache(nodeInterop);
        if (cache3 && cache3.has(obj)) {
          return cache3.get(obj);
        }
        var newObj = {};
        var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var key in obj) {
          if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
        newObj.default = obj;
        if (cache3) {
          cache3.set(obj, newObj);
        }
        return newObj;
      }
      function createSvgIcon4(path, displayName) {
        function Component(props, ref) {
          return /* @__PURE__ */ (0, _jsxRuntime.jsx)(_SvgIcon.default, (0, _extends2.default)({
            "data-testid": `${displayName}Icon`,
            ref
          }, props, {
            children: path
          }));
        }
        if (true) {
          Component.displayName = `${displayName}Icon`;
        }
        Component.muiName = _SvgIcon.default.muiName;
        return /* @__PURE__ */ React264.memo(/* @__PURE__ */ React264.forwardRef(Component));
      }
    }
  });

  // node_modules/@mui/material/node/utils/debounce.js
  var require_debounce3 = __commonJS({
    "node_modules/@mui/material/node/utils/debounce.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_debounce;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/utils/deprecatedPropType.js
  var require_deprecatedPropType2 = __commonJS({
    "node_modules/@mui/material/node/utils/deprecatedPropType.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_deprecatedPropType;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/utils/isMuiElement.js
  var require_isMuiElement2 = __commonJS({
    "node_modules/@mui/material/node/utils/isMuiElement.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_isMuiElement;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/utils/ownerDocument.js
  var require_ownerDocument3 = __commonJS({
    "node_modules/@mui/material/node/utils/ownerDocument.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_ownerDocument;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/utils/ownerWindow.js
  var require_ownerWindow3 = __commonJS({
    "node_modules/@mui/material/node/utils/ownerWindow.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_ownerWindow;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/utils/requirePropFactory.js
  var require_requirePropFactory2 = __commonJS({
    "node_modules/@mui/material/node/utils/requirePropFactory.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_requirePropFactory;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/utils/setRef.js
  var require_setRef2 = __commonJS({
    "node_modules/@mui/material/node/utils/setRef.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_setRef;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/utils/useEnhancedEffect.js
  var require_useEnhancedEffect3 = __commonJS({
    "node_modules/@mui/material/node/utils/useEnhancedEffect.js"(exports) {
      "use strict";
      "use client";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_useEnhancedEffect;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/utils/useId.js
  var require_useId3 = __commonJS({
    "node_modules/@mui/material/node/utils/useId.js"(exports) {
      "use strict";
      "use client";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_useId;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/utils/unsupportedProp.js
  var require_unsupportedProp2 = __commonJS({
    "node_modules/@mui/material/node/utils/unsupportedProp.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_unsupportedProp;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/utils/useControlled.js
  var require_useControlled3 = __commonJS({
    "node_modules/@mui/material/node/utils/useControlled.js"(exports) {
      "use strict";
      "use client";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_useControlled;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/utils/useEventCallback.js
  var require_useEventCallback3 = __commonJS({
    "node_modules/@mui/material/node/utils/useEventCallback.js"(exports) {
      "use strict";
      "use client";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_useEventCallback;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/utils/useForkRef.js
  var require_useForkRef3 = __commonJS({
    "node_modules/@mui/material/node/utils/useForkRef.js"(exports) {
      "use strict";
      "use client";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_useForkRef;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/utils/useIsFocusVisible.js
  var require_useIsFocusVisible2 = __commonJS({
    "node_modules/@mui/material/node/utils/useIsFocusVisible.js"(exports) {
      "use strict";
      "use client";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _utils = require_utils();
      var _default = _utils.unstable_useIsFocusVisible;
      exports.default = _default;
    }
  });

  // node_modules/@mui/material/node/utils/index.js
  var require_utils2 = __commonJS({
    "node_modules/@mui/material/node/utils/index.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "capitalize", {
        enumerable: true,
        get: function() {
          return _capitalize.default;
        }
      });
      Object.defineProperty(exports, "createChainedFunction", {
        enumerable: true,
        get: function() {
          return _createChainedFunction.default;
        }
      });
      Object.defineProperty(exports, "createSvgIcon", {
        enumerable: true,
        get: function() {
          return _createSvgIcon.default;
        }
      });
      Object.defineProperty(exports, "debounce", {
        enumerable: true,
        get: function() {
          return _debounce.default;
        }
      });
      Object.defineProperty(exports, "deprecatedPropType", {
        enumerable: true,
        get: function() {
          return _deprecatedPropType.default;
        }
      });
      Object.defineProperty(exports, "isMuiElement", {
        enumerable: true,
        get: function() {
          return _isMuiElement.default;
        }
      });
      Object.defineProperty(exports, "ownerDocument", {
        enumerable: true,
        get: function() {
          return _ownerDocument.default;
        }
      });
      Object.defineProperty(exports, "ownerWindow", {
        enumerable: true,
        get: function() {
          return _ownerWindow.default;
        }
      });
      Object.defineProperty(exports, "requirePropFactory", {
        enumerable: true,
        get: function() {
          return _requirePropFactory.default;
        }
      });
      Object.defineProperty(exports, "setRef", {
        enumerable: true,
        get: function() {
          return _setRef.default;
        }
      });
      exports.unstable_ClassNameGenerator = void 0;
      Object.defineProperty(exports, "unstable_useEnhancedEffect", {
        enumerable: true,
        get: function() {
          return _useEnhancedEffect.default;
        }
      });
      Object.defineProperty(exports, "unstable_useId", {
        enumerable: true,
        get: function() {
          return _useId.default;
        }
      });
      Object.defineProperty(exports, "unsupportedProp", {
        enumerable: true,
        get: function() {
          return _unsupportedProp.default;
        }
      });
      Object.defineProperty(exports, "useControlled", {
        enumerable: true,
        get: function() {
          return _useControlled.default;
        }
      });
      Object.defineProperty(exports, "useEventCallback", {
        enumerable: true,
        get: function() {
          return _useEventCallback.default;
        }
      });
      Object.defineProperty(exports, "useForkRef", {
        enumerable: true,
        get: function() {
          return _useForkRef.default;
        }
      });
      Object.defineProperty(exports, "useIsFocusVisible", {
        enumerable: true,
        get: function() {
          return _useIsFocusVisible.default;
        }
      });
      var _ClassNameGenerator = require_ClassNameGenerator3();
      var _capitalize = _interopRequireDefault(require_capitalize3());
      var _createChainedFunction = _interopRequireDefault(require_createChainedFunction2());
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon());
      var _debounce = _interopRequireDefault(require_debounce3());
      var _deprecatedPropType = _interopRequireDefault(require_deprecatedPropType2());
      var _isMuiElement = _interopRequireDefault(require_isMuiElement2());
      var _ownerDocument = _interopRequireDefault(require_ownerDocument3());
      var _ownerWindow = _interopRequireDefault(require_ownerWindow3());
      var _requirePropFactory = _interopRequireDefault(require_requirePropFactory2());
      var _setRef = _interopRequireDefault(require_setRef2());
      var _useEnhancedEffect = _interopRequireDefault(require_useEnhancedEffect3());
      var _useId = _interopRequireDefault(require_useId3());
      var _unsupportedProp = _interopRequireDefault(require_unsupportedProp2());
      var _useControlled = _interopRequireDefault(require_useControlled3());
      var _useEventCallback = _interopRequireDefault(require_useEventCallback3());
      var _useForkRef = _interopRequireDefault(require_useForkRef3());
      var _useIsFocusVisible = _interopRequireDefault(require_useIsFocusVisible2());
      var unstable_ClassNameGenerator2 = {
        configure: (generator) => {
          if (true) {
            console.warn(["MUI: `ClassNameGenerator` import from `@mui/material/utils` is outdated and might cause unexpected issues.", "", "You should use `import { unstable_ClassNameGenerator } from '@mui/material/className'` instead", "", "The detail of the issue: https://github.com/mui/material-ui/issues/30011#issuecomment-1024993401", "", "The updated documentation: https://mui.com/guides/classname-generator/"].join("\n"));
          }
          _ClassNameGenerator.unstable_ClassNameGenerator.configure(generator);
        }
      };
      exports.unstable_ClassNameGenerator = unstable_ClassNameGenerator2;
    }
  });

  // node_modules/@mui/material/node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development3 = __commonJS({
    "node_modules/@mui/material/node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_SERVER_CONTEXT_TYPE = Symbol.for("react.server_context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                    case REACT_SUSPENSE_LIST_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_SERVER_CONTEXT_TYPE:
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment29 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal3 = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var SuspenseList = REACT_SUSPENSE_LIST_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          var hasWarnedAboutDeprecatedIsConcurrentMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isConcurrentMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
                hasWarnedAboutDeprecatedIsConcurrentMode = true;
                console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
              }
            }
            return false;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement3(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment12(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          function isSuspenseList(object) {
            return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
          }
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment29;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal3;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.SuspenseList = SuspenseList;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement3;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment12;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isSuspenseList = isSuspenseList;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/@mui/material/node_modules/react-is/index.js
  var require_react_is3 = __commonJS({
    "node_modules/@mui/material/node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development3();
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.development.js
  var require_scheduler_development = __commonJS({
    "node_modules/scheduler/cjs/scheduler.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var enableSchedulerDebugging = false;
          var enableProfiling = false;
          var frameYieldMs = 5;
          function push(heap, node2) {
            var index3 = heap.length;
            heap.push(node2);
            siftUp(heap, node2, index3);
          }
          function peek2(heap) {
            return heap.length === 0 ? null : heap[0];
          }
          function pop(heap) {
            if (heap.length === 0) {
              return null;
            }
            var first = heap[0];
            var last = heap.pop();
            if (last !== first) {
              heap[0] = last;
              siftDown(heap, last, 0);
            }
            return first;
          }
          function siftUp(heap, node2, i) {
            var index3 = i;
            while (index3 > 0) {
              var parentIndex = index3 - 1 >>> 1;
              var parent = heap[parentIndex];
              if (compare(parent, node2) > 0) {
                heap[parentIndex] = node2;
                heap[index3] = parent;
                index3 = parentIndex;
              } else {
                return;
              }
            }
          }
          function siftDown(heap, node2, i) {
            var index3 = i;
            var length2 = heap.length;
            var halfLength = length2 >>> 1;
            while (index3 < halfLength) {
              var leftIndex = (index3 + 1) * 2 - 1;
              var left2 = heap[leftIndex];
              var rightIndex = leftIndex + 1;
              var right2 = heap[rightIndex];
              if (compare(left2, node2) < 0) {
                if (rightIndex < length2 && compare(right2, left2) < 0) {
                  heap[index3] = right2;
                  heap[rightIndex] = node2;
                  index3 = rightIndex;
                } else {
                  heap[index3] = left2;
                  heap[leftIndex] = node2;
                  index3 = leftIndex;
                }
              } else if (rightIndex < length2 && compare(right2, node2) < 0) {
                heap[index3] = right2;
                heap[rightIndex] = node2;
                index3 = rightIndex;
              } else {
                return;
              }
            }
          }
          function compare(a, b) {
            var diff = a.sortIndex - b.sortIndex;
            return diff !== 0 ? diff : a.id - b.id;
          }
          var ImmediatePriority = 1;
          var UserBlockingPriority = 2;
          var NormalPriority = 3;
          var LowPriority = 4;
          var IdlePriority = 5;
          function markTaskErrored(task, ms2) {
          }
          var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
          if (hasPerformanceNow) {
            var localPerformance = performance;
            exports.unstable_now = function() {
              return localPerformance.now();
            };
          } else {
            var localDate = Date;
            var initialTime = localDate.now();
            exports.unstable_now = function() {
              return localDate.now() - initialTime;
            };
          }
          var maxSigned31BitInt = 1073741823;
          var IMMEDIATE_PRIORITY_TIMEOUT = -1;
          var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
          var NORMAL_PRIORITY_TIMEOUT = 5e3;
          var LOW_PRIORITY_TIMEOUT = 1e4;
          var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
          var taskQueue = [];
          var timerQueue = [];
          var taskIdCounter = 1;
          var currentTask = null;
          var currentPriorityLevel = NormalPriority;
          var isPerformingWork = false;
          var isHostCallbackScheduled = false;
          var isHostTimeoutScheduled = false;
          var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
          var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
          var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
          var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
          function advanceTimers(currentTime) {
            var timer = peek2(timerQueue);
            while (timer !== null) {
              if (timer.callback === null) {
                pop(timerQueue);
              } else if (timer.startTime <= currentTime) {
                pop(timerQueue);
                timer.sortIndex = timer.expirationTime;
                push(taskQueue, timer);
              } else {
                return;
              }
              timer = peek2(timerQueue);
            }
          }
          function handleTimeout(currentTime) {
            isHostTimeoutScheduled = false;
            advanceTimers(currentTime);
            if (!isHostCallbackScheduled) {
              if (peek2(taskQueue) !== null) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              } else {
                var firstTimer = peek2(timerQueue);
                if (firstTimer !== null) {
                  requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
                }
              }
            }
          }
          function flushWork(hasTimeRemaining, initialTime2) {
            isHostCallbackScheduled = false;
            if (isHostTimeoutScheduled) {
              isHostTimeoutScheduled = false;
              cancelHostTimeout();
            }
            isPerformingWork = true;
            var previousPriorityLevel = currentPriorityLevel;
            try {
              if (enableProfiling) {
                try {
                  return workLoop(hasTimeRemaining, initialTime2);
                } catch (error) {
                  if (currentTask !== null) {
                    var currentTime = exports.unstable_now();
                    markTaskErrored(currentTask, currentTime);
                    currentTask.isQueued = false;
                  }
                  throw error;
                }
              } else {
                return workLoop(hasTimeRemaining, initialTime2);
              }
            } finally {
              currentTask = null;
              currentPriorityLevel = previousPriorityLevel;
              isPerformingWork = false;
            }
          }
          function workLoop(hasTimeRemaining, initialTime2) {
            var currentTime = initialTime2;
            advanceTimers(currentTime);
            currentTask = peek2(taskQueue);
            while (currentTask !== null && !enableSchedulerDebugging) {
              if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
                break;
              }
              var callback = currentTask.callback;
              if (typeof callback === "function") {
                currentTask.callback = null;
                currentPriorityLevel = currentTask.priorityLevel;
                var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
                var continuationCallback = callback(didUserCallbackTimeout);
                currentTime = exports.unstable_now();
                if (typeof continuationCallback === "function") {
                  currentTask.callback = continuationCallback;
                } else {
                  if (currentTask === peek2(taskQueue)) {
                    pop(taskQueue);
                  }
                }
                advanceTimers(currentTime);
              } else {
                pop(taskQueue);
              }
              currentTask = peek2(taskQueue);
            }
            if (currentTask !== null) {
              return true;
            } else {
              var firstTimer = peek2(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
              return false;
            }
          }
          function unstable_runWithPriority(priorityLevel, eventHandler) {
            switch (priorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
              case LowPriority:
              case IdlePriority:
                break;
              default:
                priorityLevel = NormalPriority;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_next(eventHandler) {
            var priorityLevel;
            switch (currentPriorityLevel) {
              case ImmediatePriority:
              case UserBlockingPriority:
              case NormalPriority:
                priorityLevel = NormalPriority;
                break;
              default:
                priorityLevel = currentPriorityLevel;
                break;
            }
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = priorityLevel;
            try {
              return eventHandler();
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          }
          function unstable_wrapCallback(callback) {
            var parentPriorityLevel = currentPriorityLevel;
            return function() {
              var previousPriorityLevel = currentPriorityLevel;
              currentPriorityLevel = parentPriorityLevel;
              try {
                return callback.apply(this, arguments);
              } finally {
                currentPriorityLevel = previousPriorityLevel;
              }
            };
          }
          function unstable_scheduleCallback(priorityLevel, callback, options) {
            var currentTime = exports.unstable_now();
            var startTime2;
            if (typeof options === "object" && options !== null) {
              var delay = options.delay;
              if (typeof delay === "number" && delay > 0) {
                startTime2 = currentTime + delay;
              } else {
                startTime2 = currentTime;
              }
            } else {
              startTime2 = currentTime;
            }
            var timeout2;
            switch (priorityLevel) {
              case ImmediatePriority:
                timeout2 = IMMEDIATE_PRIORITY_TIMEOUT;
                break;
              case UserBlockingPriority:
                timeout2 = USER_BLOCKING_PRIORITY_TIMEOUT;
                break;
              case IdlePriority:
                timeout2 = IDLE_PRIORITY_TIMEOUT;
                break;
              case LowPriority:
                timeout2 = LOW_PRIORITY_TIMEOUT;
                break;
              case NormalPriority:
              default:
                timeout2 = NORMAL_PRIORITY_TIMEOUT;
                break;
            }
            var expirationTime = startTime2 + timeout2;
            var newTask = {
              id: taskIdCounter++,
              callback,
              priorityLevel,
              startTime: startTime2,
              expirationTime,
              sortIndex: -1
            };
            if (startTime2 > currentTime) {
              newTask.sortIndex = startTime2;
              push(timerQueue, newTask);
              if (peek2(taskQueue) === null && newTask === peek2(timerQueue)) {
                if (isHostTimeoutScheduled) {
                  cancelHostTimeout();
                } else {
                  isHostTimeoutScheduled = true;
                }
                requestHostTimeout(handleTimeout, startTime2 - currentTime);
              }
            } else {
              newTask.sortIndex = expirationTime;
              push(taskQueue, newTask);
              if (!isHostCallbackScheduled && !isPerformingWork) {
                isHostCallbackScheduled = true;
                requestHostCallback(flushWork);
              }
            }
            return newTask;
          }
          function unstable_pauseExecution() {
          }
          function unstable_continueExecution() {
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          function unstable_getFirstCallbackNode() {
            return peek2(taskQueue);
          }
          function unstable_cancelCallback(task) {
            task.callback = null;
          }
          function unstable_getCurrentPriorityLevel() {
            return currentPriorityLevel;
          }
          var isMessageLoopRunning = false;
          var scheduledHostCallback = null;
          var taskTimeoutID = -1;
          var frameInterval = frameYieldMs;
          var startTime = -1;
          function shouldYieldToHost() {
            var timeElapsed = exports.unstable_now() - startTime;
            if (timeElapsed < frameInterval) {
              return false;
            }
            return true;
          }
          function requestPaint() {
          }
          function forceFrameRate(fps) {
            if (fps < 0 || fps > 125) {
              console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
              return;
            }
            if (fps > 0) {
              frameInterval = Math.floor(1e3 / fps);
            } else {
              frameInterval = frameYieldMs;
            }
          }
          var performWorkUntilDeadline = function() {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now();
              startTime = currentTime;
              var hasTimeRemaining = true;
              var hasMoreWork = true;
              try {
                hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
              } finally {
                if (hasMoreWork) {
                  schedulePerformWorkUntilDeadline();
                } else {
                  isMessageLoopRunning = false;
                  scheduledHostCallback = null;
                }
              }
            } else {
              isMessageLoopRunning = false;
            }
          };
          var schedulePerformWorkUntilDeadline;
          if (typeof localSetImmediate === "function") {
            schedulePerformWorkUntilDeadline = function() {
              localSetImmediate(performWorkUntilDeadline);
            };
          } else if (typeof MessageChannel !== "undefined") {
            var channel = new MessageChannel();
            var port = channel.port2;
            channel.port1.onmessage = performWorkUntilDeadline;
            schedulePerformWorkUntilDeadline = function() {
              port.postMessage(null);
            };
          } else {
            schedulePerformWorkUntilDeadline = function() {
              localSetTimeout(performWorkUntilDeadline, 0);
            };
          }
          function requestHostCallback(callback) {
            scheduledHostCallback = callback;
            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true;
              schedulePerformWorkUntilDeadline();
            }
          }
          function requestHostTimeout(callback, ms2) {
            taskTimeoutID = localSetTimeout(function() {
              callback(exports.unstable_now());
            }, ms2);
          }
          function cancelHostTimeout() {
            localClearTimeout(taskTimeoutID);
            taskTimeoutID = -1;
          }
          var unstable_requestPaint = requestPaint;
          var unstable_Profiling = null;
          exports.unstable_IdlePriority = IdlePriority;
          exports.unstable_ImmediatePriority = ImmediatePriority;
          exports.unstable_LowPriority = LowPriority;
          exports.unstable_NormalPriority = NormalPriority;
          exports.unstable_Profiling = unstable_Profiling;
          exports.unstable_UserBlockingPriority = UserBlockingPriority;
          exports.unstable_cancelCallback = unstable_cancelCallback;
          exports.unstable_continueExecution = unstable_continueExecution;
          exports.unstable_forceFrameRate = forceFrameRate;
          exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
          exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
          exports.unstable_next = unstable_next;
          exports.unstable_pauseExecution = unstable_pauseExecution;
          exports.unstable_requestPaint = unstable_requestPaint;
          exports.unstable_runWithPriority = unstable_runWithPriority;
          exports.unstable_scheduleCallback = unstable_scheduleCallback;
          exports.unstable_shouldYield = shouldYieldToHost;
          exports.unstable_wrapCallback = unstable_wrapCallback;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_scheduler_development();
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.development.js
  var require_react_dom_development = __commonJS({
    "node_modules/react-dom/cjs/react-dom.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var React264 = require_react();
          var Scheduler = require_scheduler();
          var ReactSharedInternals = React264.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
          var suppressWarning = false;
          function setSuppressWarning(newSuppressWarning) {
            {
              suppressWarning = newSuppressWarning;
            }
          }
          function warn(format) {
            {
              if (!suppressWarning) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              if (!suppressWarning) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var FunctionComponent = 0;
          var ClassComponent = 1;
          var IndeterminateComponent = 2;
          var HostRoot = 3;
          var HostPortal = 4;
          var HostComponent = 5;
          var HostText = 6;
          var Fragment29 = 7;
          var Mode = 8;
          var ContextConsumer = 9;
          var ContextProvider = 10;
          var ForwardRef = 11;
          var Profiler = 12;
          var SuspenseComponent = 13;
          var MemoComponent = 14;
          var SimpleMemoComponent = 15;
          var LazyComponent = 16;
          var IncompleteClassComponent = 17;
          var DehydratedFragment = 18;
          var SuspenseListComponent = 19;
          var ScopeComponent = 21;
          var OffscreenComponent = 22;
          var LegacyHiddenComponent = 23;
          var CacheComponent = 24;
          var TracingMarkerComponent = 25;
          var enableClientRenderFallbackOnTextMismatch = true;
          var enableNewReconciler = false;
          var enableLazyContextPropagation = false;
          var enableLegacyHidden = false;
          var enableSuspenseAvoidThisFallback = false;
          var disableCommentsAsDOMContainers = true;
          var enableCustomElementPropertySupport = false;
          var warnAboutStringRefs = false;
          var enableSchedulingProfiler = true;
          var enableProfilerTimer = true;
          var enableProfilerCommitHooks = true;
          var allNativeEvents = /* @__PURE__ */ new Set();
          var registrationNameDependencies = {};
          var possibleRegistrationNames = {};
          function registerTwoPhaseEvent(registrationName, dependencies) {
            registerDirectEvent(registrationName, dependencies);
            registerDirectEvent(registrationName + "Capture", dependencies);
          }
          function registerDirectEvent(registrationName, dependencies) {
            {
              if (registrationNameDependencies[registrationName]) {
                error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
              }
            }
            registrationNameDependencies[registrationName] = dependencies;
            {
              var lowerCasedName = registrationName.toLowerCase();
              possibleRegistrationNames[lowerCasedName] = registrationName;
              if (registrationName === "onDoubleClick") {
                possibleRegistrationNames.ondblclick = registrationName;
              }
            }
            for (var i = 0; i < dependencies.length; i++) {
              allNativeEvents.add(dependencies[i]);
            }
          }
          var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
          var hasOwnProperty3 = Object.prototype.hasOwnProperty;
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkAttributeStringCoercion(value, attributeName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkPropStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkCSSPropertyStringCoercion(value, propName) {
            {
              if (willCoercionThrow(value)) {
                error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkHtmlStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function checkFormFieldValueStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          var RESERVED = 0;
          var STRING = 1;
          var BOOLEANISH_STRING = 2;
          var BOOLEAN = 3;
          var OVERLOADED_BOOLEAN = 4;
          var NUMERIC = 5;
          var POSITIVE_NUMERIC = 6;
          var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
          var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
          var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
          var illegalAttributeNameCache = {};
          var validatedAttributeNameCache = {};
          function isAttributeNameSafe(attributeName) {
            if (hasOwnProperty3.call(validatedAttributeNameCache, attributeName)) {
              return true;
            }
            if (hasOwnProperty3.call(illegalAttributeNameCache, attributeName)) {
              return false;
            }
            if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
              validatedAttributeNameCache[attributeName] = true;
              return true;
            }
            illegalAttributeNameCache[attributeName] = true;
            {
              error("Invalid attribute name: `%s`", attributeName);
            }
            return false;
          }
          function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null) {
              return propertyInfo.type === RESERVED;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
              return true;
            }
            return false;
          }
          function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
            if (propertyInfo !== null && propertyInfo.type === RESERVED) {
              return false;
            }
            switch (typeof value) {
              case "function":
              case "symbol":
                return true;
              case "boolean": {
                if (isCustomComponentTag) {
                  return false;
                }
                if (propertyInfo !== null) {
                  return !propertyInfo.acceptsBooleans;
                } else {
                  var prefix4 = name.toLowerCase().slice(0, 5);
                  return prefix4 !== "data-" && prefix4 !== "aria-";
                }
              }
              default:
                return false;
            }
          }
          function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
            if (value === null || typeof value === "undefined") {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
              return true;
            }
            if (isCustomComponentTag) {
              return false;
            }
            if (propertyInfo !== null) {
              switch (propertyInfo.type) {
                case BOOLEAN:
                  return !value;
                case OVERLOADED_BOOLEAN:
                  return value === false;
                case NUMERIC:
                  return isNaN(value);
                case POSITIVE_NUMERIC:
                  return isNaN(value) || value < 1;
              }
            }
            return false;
          }
          function getPropertyInfo(name) {
            return properties.hasOwnProperty(name) ? properties[name] : null;
          }
          function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
            this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
            this.attributeName = attributeName;
            this.attributeNamespace = attributeNamespace;
            this.mustUseProperty = mustUseProperty;
            this.propertyName = name;
            this.type = type;
            this.sanitizeURL = sanitizeURL2;
            this.removeEmptyString = removeEmptyString;
          }
          var properties = {};
          var reservedProps = [
            "children",
            "dangerouslySetInnerHTML",
            // TODO: This prevents the assignment of defaultValue to regular
            // elements (not just inputs). Now that ReactDOMInput assigns to the
            // defaultValue property -- do we need this?
            "defaultValue",
            "defaultChecked",
            "innerHTML",
            "suppressContentEditableWarning",
            "suppressHydrationWarning",
            "style"
          ];
          reservedProps.forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              RESERVED,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
            var name = _ref[0], attributeName = _ref[1];
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEANISH_STRING,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "allowFullScreen",
            "async",
            // Note: there is a special case that prevents it from being written to the DOM
            // on the client side because the browsers are inconsistent. Instead we call focus().
            "autoFocus",
            "autoPlay",
            "controls",
            "default",
            "defer",
            "disabled",
            "disablePictureInPicture",
            "disableRemotePlayback",
            "formNoValidate",
            "hidden",
            "loop",
            "noModule",
            "noValidate",
            "open",
            "playsInline",
            "readOnly",
            "required",
            "reversed",
            "scoped",
            "seamless",
            // Microdata
            "itemScope"
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "checked",
            // Note: `option.selected` is not updated if `select.multiple` is
            // disabled with `removeAttribute`. We have special logic for handling this.
            "multiple",
            "muted",
            "selected"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              BOOLEAN,
              true,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "capture",
            "download"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              OVERLOADED_BOOLEAN,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "cols",
            "rows",
            "size",
            "span"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              POSITIVE_NUMERIC,
              false,
              // mustUseProperty
              name,
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          ["rowSpan", "start"].forEach(function(name) {
            properties[name] = new PropertyInfoRecord(
              name,
              NUMERIC,
              false,
              // mustUseProperty
              name.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var CAMELIZE = /[\-\:]([a-z])/g;
          var capitalize4 = function(token2) {
            return token2[1].toUpperCase();
          };
          [
            "accent-height",
            "alignment-baseline",
            "arabic-form",
            "baseline-shift",
            "cap-height",
            "clip-path",
            "clip-rule",
            "color-interpolation",
            "color-interpolation-filters",
            "color-profile",
            "color-rendering",
            "dominant-baseline",
            "enable-background",
            "fill-opacity",
            "fill-rule",
            "flood-color",
            "flood-opacity",
            "font-family",
            "font-size",
            "font-size-adjust",
            "font-stretch",
            "font-style",
            "font-variant",
            "font-weight",
            "glyph-name",
            "glyph-orientation-horizontal",
            "glyph-orientation-vertical",
            "horiz-adv-x",
            "horiz-origin-x",
            "image-rendering",
            "letter-spacing",
            "lighting-color",
            "marker-end",
            "marker-mid",
            "marker-start",
            "overline-position",
            "overline-thickness",
            "paint-order",
            "panose-1",
            "pointer-events",
            "rendering-intent",
            "shape-rendering",
            "stop-color",
            "stop-opacity",
            "strikethrough-position",
            "strikethrough-thickness",
            "stroke-dasharray",
            "stroke-dashoffset",
            "stroke-linecap",
            "stroke-linejoin",
            "stroke-miterlimit",
            "stroke-opacity",
            "stroke-width",
            "text-anchor",
            "text-decoration",
            "text-rendering",
            "underline-position",
            "underline-thickness",
            "unicode-bidi",
            "unicode-range",
            "units-per-em",
            "v-alphabetic",
            "v-hanging",
            "v-ideographic",
            "v-mathematical",
            "vector-effect",
            "vert-adv-y",
            "vert-origin-x",
            "vert-origin-y",
            "word-spacing",
            "writing-mode",
            "xmlns:xlink",
            "x-height"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize4);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xlink:actuate",
            "xlink:arcrole",
            "xlink:role",
            "xlink:show",
            "xlink:title",
            "xlink:type"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize4);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/1999/xlink",
              false,
              // sanitizeURL
              false
            );
          });
          [
            "xml:base",
            "xml:lang",
            "xml:space"
            // NOTE: if you add a camelCased prop to this list,
            // you'll need to set attributeName to name.toLowerCase()
            // instead in the assignment below.
          ].forEach(function(attributeName) {
            var name = attributeName.replace(CAMELIZE, capitalize4);
            properties[name] = new PropertyInfoRecord(
              name,
              STRING,
              false,
              // mustUseProperty
              attributeName,
              "http://www.w3.org/XML/1998/namespace",
              false,
              // sanitizeURL
              false
            );
          });
          ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              false,
              // sanitizeURL
              false
            );
          });
          var xlinkHref = "xlinkHref";
          properties[xlinkHref] = new PropertyInfoRecord(
            "xlinkHref",
            STRING,
            false,
            // mustUseProperty
            "xlink:href",
            "http://www.w3.org/1999/xlink",
            true,
            // sanitizeURL
            false
          );
          ["src", "href", "action", "formAction"].forEach(function(attributeName) {
            properties[attributeName] = new PropertyInfoRecord(
              attributeName,
              STRING,
              false,
              // mustUseProperty
              attributeName.toLowerCase(),
              // attributeName
              null,
              // attributeNamespace
              true,
              // sanitizeURL
              true
            );
          });
          var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
          var didWarn = false;
          function sanitizeURL(url) {
            {
              if (!didWarn && isJavaScriptProtocol.test(url)) {
                didWarn = true;
                error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
              }
            }
          }
          function getValueForProperty(node2, name, expected, propertyInfo) {
            {
              if (propertyInfo.mustUseProperty) {
                var propertyName = propertyInfo.propertyName;
                return node2[propertyName];
              } else {
                {
                  checkAttributeStringCoercion(expected, name);
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL("" + expected);
                }
                var attributeName = propertyInfo.attributeName;
                var stringValue = null;
                if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                  if (node2.hasAttribute(attributeName)) {
                    var value = node2.getAttribute(attributeName);
                    if (value === "") {
                      return true;
                    }
                    if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                      return value;
                    }
                    if (value === "" + expected) {
                      return expected;
                    }
                    return value;
                  }
                } else if (node2.hasAttribute(attributeName)) {
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return node2.getAttribute(attributeName);
                  }
                  if (propertyInfo.type === BOOLEAN) {
                    return expected;
                  }
                  stringValue = node2.getAttribute(attributeName);
                }
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return stringValue === null ? expected : stringValue;
                } else if (stringValue === "" + expected) {
                  return expected;
                } else {
                  return stringValue;
                }
              }
            }
          }
          function getValueForAttribute(node2, name, expected, isCustomComponentTag) {
            {
              if (!isAttributeNameSafe(name)) {
                return;
              }
              if (!node2.hasAttribute(name)) {
                return expected === void 0 ? void 0 : null;
              }
              var value = node2.getAttribute(name);
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (value === "" + expected) {
                return expected;
              }
              return value;
            }
          }
          function setValueForProperty(node2, name, value, isCustomComponentTag) {
            var propertyInfo = getPropertyInfo(name);
            if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
              return;
            }
            if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
              value = null;
            }
            if (isCustomComponentTag || propertyInfo === null) {
              if (isAttributeNameSafe(name)) {
                var _attributeName = name;
                if (value === null) {
                  node2.removeAttribute(_attributeName);
                } else {
                  {
                    checkAttributeStringCoercion(value, name);
                  }
                  node2.setAttribute(_attributeName, "" + value);
                }
              }
              return;
            }
            var mustUseProperty = propertyInfo.mustUseProperty;
            if (mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              if (value === null) {
                var type = propertyInfo.type;
                node2[propertyName] = type === BOOLEAN ? false : "";
              } else {
                node2[propertyName] = value;
              }
              return;
            }
            var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
            if (value === null) {
              node2.removeAttribute(attributeName);
            } else {
              var _type = propertyInfo.type;
              var attributeValue;
              if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
                attributeValue = "";
              } else {
                {
                  {
                    checkAttributeStringCoercion(value, attributeName);
                  }
                  attributeValue = "" + value;
                }
                if (propertyInfo.sanitizeURL) {
                  sanitizeURL(attributeValue.toString());
                }
              }
              if (attributeNamespace) {
                node2.setAttributeNS(attributeNamespace, attributeName, attributeValue);
              } else {
                node2.setAttribute(attributeName, attributeValue);
              }
            }
          }
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_SCOPE_TYPE = Symbol.for("react.scope");
          var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
          var REACT_CACHE_TYPE = Symbol.for("react.cache");
          var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var assign2 = Object.assign;
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign2({}, props, {
                    value: prevLog
                  }),
                  info: assign2({}, props, {
                    value: prevInfo
                  }),
                  warn: assign2({}, props, {
                    value: prevWarn
                  }),
                  error: assign2({}, props, {
                    value: prevError
                  }),
                  group: assign2({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign2({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign2({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix3;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix3 === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match2 = x.stack.trim().match(/\n( *(at )?)/);
                  prefix3 = match2 && match2[1] || "";
                }
              }
              return "\n" + prefix3 + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn2, construct) {
            if (!fn2 || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn2);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher.current;
              ReactCurrentDispatcher.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn2, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn2.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn2();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn2.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn2.displayName);
                          }
                          {
                            if (typeof fn2 === "function") {
                              componentFrameCache.set(fn2, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn2 ? fn2.displayName || fn2.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn2 === "function") {
                componentFrameCache.set(fn2, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeClassComponentFrame(ctor, source, ownerFn) {
            {
              return describeNativeComponentFrame(ctor, true);
            }
          }
          function describeFunctionComponentFrame(fn2, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn2, false);
            }
          }
          function shouldConstruct(Component) {
            var prototype3 = Component.prototype;
            return !!(prototype3 && prototype3.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          function describeFiber(fiber) {
            var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
            var source = fiber._debugSource;
            switch (fiber.tag) {
              case HostComponent:
                return describeBuiltInComponentFrame(fiber.type);
              case LazyComponent:
                return describeBuiltInComponentFrame("Lazy");
              case SuspenseComponent:
                return describeBuiltInComponentFrame("Suspense");
              case SuspenseListComponent:
                return describeBuiltInComponentFrame("SuspenseList");
              case FunctionComponent:
              case IndeterminateComponent:
              case SimpleMemoComponent:
                return describeFunctionComponentFrame(fiber.type);
              case ForwardRef:
                return describeFunctionComponentFrame(fiber.type.render);
              case ClassComponent:
                return describeClassComponentFrame(fiber.type);
              default:
                return "";
            }
          }
          function getStackByFiberInDevAndProd(workInProgress2) {
            try {
              var info = "";
              var node2 = workInProgress2;
              do {
                info += describeFiber(node2);
                node2 = node2.return;
              } while (node2);
              return info;
            } catch (x) {
              return "\nError generating stack: " + x.message + "\n" + x.stack;
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          function getWrappedName$1(outerType, innerType, wrapperName) {
            var functionName = innerType.displayName || innerType.name || "";
            return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
          }
          function getContextName$1(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromFiber(fiber) {
            var tag = fiber.tag, type = fiber.type;
            switch (tag) {
              case CacheComponent:
                return "Cache";
              case ContextConsumer:
                var context = type;
                return getContextName$1(context) + ".Consumer";
              case ContextProvider:
                var provider = type;
                return getContextName$1(provider._context) + ".Provider";
              case DehydratedFragment:
                return "DehydratedFragment";
              case ForwardRef:
                return getWrappedName$1(type, type.render, "ForwardRef");
              case Fragment29:
                return "Fragment";
              case HostComponent:
                return type;
              case HostPortal:
                return "Portal";
              case HostRoot:
                return "Root";
              case HostText:
                return "Text";
              case LazyComponent:
                return getComponentNameFromType(type);
              case Mode:
                if (type === REACT_STRICT_MODE_TYPE) {
                  return "StrictMode";
                }
                return "Mode";
              case OffscreenComponent:
                return "Offscreen";
              case Profiler:
                return "Profiler";
              case ScopeComponent:
                return "Scope";
              case SuspenseComponent:
                return "Suspense";
              case SuspenseListComponent:
                return "SuspenseList";
              case TracingMarkerComponent:
                return "TracingMarker";
              case ClassComponent:
              case FunctionComponent:
              case IncompleteClassComponent:
              case IndeterminateComponent:
              case MemoComponent:
              case SimpleMemoComponent:
                if (typeof type === "function") {
                  return type.displayName || type.name || null;
                }
                if (typeof type === "string") {
                  return type;
                }
                break;
            }
            return null;
          }
          var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
          var current = null;
          var isRendering = false;
          function getCurrentFiberOwnerNameInDevOrNull() {
            {
              if (current === null) {
                return null;
              }
              var owner = current._debugOwner;
              if (owner !== null && typeof owner !== "undefined") {
                return getComponentNameFromFiber(owner);
              }
            }
            return null;
          }
          function getCurrentFiberStackInDev() {
            {
              if (current === null) {
                return "";
              }
              return getStackByFiberInDevAndProd(current);
            }
          }
          function resetCurrentFiber() {
            {
              ReactDebugCurrentFrame.getCurrentStack = null;
              current = null;
              isRendering = false;
            }
          }
          function setCurrentFiber(fiber) {
            {
              ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
              current = fiber;
              isRendering = false;
            }
          }
          function getCurrentFiber() {
            {
              return current;
            }
          }
          function setIsRendering(rendering) {
            {
              isRendering = rendering;
            }
          }
          function toString3(value) {
            return "" + value;
          }
          function getToStringValue(value) {
            switch (typeof value) {
              case "boolean":
              case "number":
              case "string":
              case "undefined":
                return value;
              case "object":
                {
                  checkFormFieldValueStringCoercion(value);
                }
                return value;
              default:
                return "";
            }
          }
          var hasReadOnlyValue = {
            button: true,
            checkbox: true,
            image: true,
            hidden: true,
            radio: true,
            reset: true,
            submit: true
          };
          function checkControlledValueProps(tagName, props) {
            {
              if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
                error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
              }
              if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
                error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
              }
            }
          }
          function isCheckable(elem) {
            var type = elem.type;
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
          }
          function getTracker(node2) {
            return node2._valueTracker;
          }
          function detachTracker(node2) {
            node2._valueTracker = null;
          }
          function getValueFromNode(node2) {
            var value = "";
            if (!node2) {
              return value;
            }
            if (isCheckable(node2)) {
              value = node2.checked ? "true" : "false";
            } else {
              value = node2.value;
            }
            return value;
          }
          function trackValueOnNode(node2) {
            var valueField = isCheckable(node2) ? "checked" : "value";
            var descriptor = Object.getOwnPropertyDescriptor(node2.constructor.prototype, valueField);
            {
              checkFormFieldValueStringCoercion(node2[valueField]);
            }
            var currentValue = "" + node2[valueField];
            if (node2.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
              return;
            }
            var get2 = descriptor.get, set2 = descriptor.set;
            Object.defineProperty(node2, valueField, {
              configurable: true,
              get: function() {
                return get2.call(this);
              },
              set: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
                set2.call(this, value);
              }
            });
            Object.defineProperty(node2, valueField, {
              enumerable: descriptor.enumerable
            });
            var tracker = {
              getValue: function() {
                return currentValue;
              },
              setValue: function(value) {
                {
                  checkFormFieldValueStringCoercion(value);
                }
                currentValue = "" + value;
              },
              stopTracking: function() {
                detachTracker(node2);
                delete node2[valueField];
              }
            };
            return tracker;
          }
          function track(node2) {
            if (getTracker(node2)) {
              return;
            }
            node2._valueTracker = trackValueOnNode(node2);
          }
          function updateValueIfChanged(node2) {
            if (!node2) {
              return false;
            }
            var tracker = getTracker(node2);
            if (!tracker) {
              return true;
            }
            var lastValue = tracker.getValue();
            var nextValue = getValueFromNode(node2);
            if (nextValue !== lastValue) {
              tracker.setValue(nextValue);
              return true;
            }
            return false;
          }
          function getActiveElement(doc) {
            doc = doc || (typeof document !== "undefined" ? document : void 0);
            if (typeof doc === "undefined") {
              return null;
            }
            try {
              return doc.activeElement || doc.body;
            } catch (e) {
              return doc.body;
            }
          }
          var didWarnValueDefaultValue = false;
          var didWarnCheckedDefaultChecked = false;
          var didWarnControlledToUncontrolled = false;
          var didWarnUncontrolledToControlled = false;
          function isControlled(props) {
            var usesChecked = props.type === "checkbox" || props.type === "radio";
            return usesChecked ? props.checked != null : props.value != null;
          }
          function getHostProps(element, props) {
            var node2 = element;
            var checked = props.checked;
            var hostProps = assign2({}, props, {
              defaultChecked: void 0,
              defaultValue: void 0,
              value: void 0,
              checked: checked != null ? checked : node2._wrapperState.initialChecked
            });
            return hostProps;
          }
          function initWrapperState(element, props) {
            {
              checkControlledValueProps("input", props);
              if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
                error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnCheckedDefaultChecked = true;
              }
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
                error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
                didWarnValueDefaultValue = true;
              }
            }
            var node2 = element;
            var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
            node2._wrapperState = {
              initialChecked: props.checked != null ? props.checked : props.defaultChecked,
              initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
              controlled: isControlled(props)
            };
          }
          function updateChecked(element, props) {
            var node2 = element;
            var checked = props.checked;
            if (checked != null) {
              setValueForProperty(node2, "checked", checked, false);
            }
          }
          function updateWrapper(element, props) {
            var node2 = element;
            {
              var controlled = isControlled(props);
              if (!node2._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
                error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnUncontrolledToControlled = true;
              }
              if (node2._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
                error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
                didWarnControlledToUncontrolled = true;
              }
            }
            updateChecked(element, props);
            var value = getToStringValue(props.value);
            var type = props.type;
            if (value != null) {
              if (type === "number") {
                if (value === 0 && node2.value === "" || // We explicitly want to coerce to number here if possible.
                // eslint-disable-next-line
                node2.value != value) {
                  node2.value = toString3(value);
                }
              } else if (node2.value !== toString3(value)) {
                node2.value = toString3(value);
              }
            } else if (type === "submit" || type === "reset") {
              node2.removeAttribute("value");
              return;
            }
            {
              if (props.hasOwnProperty("value")) {
                setDefaultValue(node2, props.type, value);
              } else if (props.hasOwnProperty("defaultValue")) {
                setDefaultValue(node2, props.type, getToStringValue(props.defaultValue));
              }
            }
            {
              if (props.checked == null && props.defaultChecked != null) {
                node2.defaultChecked = !!props.defaultChecked;
              }
            }
          }
          function postMountWrapper(element, props, isHydrating2) {
            var node2 = element;
            if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
              var type = props.type;
              var isButton = type === "submit" || type === "reset";
              if (isButton && (props.value === void 0 || props.value === null)) {
                return;
              }
              var initialValue = toString3(node2._wrapperState.initialValue);
              if (!isHydrating2) {
                {
                  if (initialValue !== node2.value) {
                    node2.value = initialValue;
                  }
                }
              }
              {
                node2.defaultValue = initialValue;
              }
            }
            var name = node2.name;
            if (name !== "") {
              node2.name = "";
            }
            {
              node2.defaultChecked = !node2.defaultChecked;
              node2.defaultChecked = !!node2._wrapperState.initialChecked;
            }
            if (name !== "") {
              node2.name = name;
            }
          }
          function restoreControlledState(element, props) {
            var node2 = element;
            updateWrapper(node2, props);
            updateNamedCousins(node2, props);
          }
          function updateNamedCousins(rootNode, props) {
            var name = props.name;
            if (props.type === "radio" && name != null) {
              var queryRoot = rootNode;
              while (queryRoot.parentNode) {
                queryRoot = queryRoot.parentNode;
              }
              {
                checkAttributeStringCoercion(name, "name");
              }
              var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
              for (var i = 0; i < group.length; i++) {
                var otherNode = group[i];
                if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                  continue;
                }
                var otherProps = getFiberCurrentPropsFromNode(otherNode);
                if (!otherProps) {
                  throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
                }
                updateValueIfChanged(otherNode);
                updateWrapper(otherNode, otherProps);
              }
            }
          }
          function setDefaultValue(node2, type, value) {
            if (
              // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
              type !== "number" || getActiveElement(node2.ownerDocument) !== node2
            ) {
              if (value == null) {
                node2.defaultValue = toString3(node2._wrapperState.initialValue);
              } else if (node2.defaultValue !== toString3(value)) {
                node2.defaultValue = toString3(value);
              }
            }
          }
          var didWarnSelectedSetOnOption = false;
          var didWarnInvalidChild = false;
          var didWarnInvalidInnerHTML = false;
          function validateProps(element, props) {
            {
              if (props.value == null) {
                if (typeof props.children === "object" && props.children !== null) {
                  React264.Children.forEach(props.children, function(child) {
                    if (child == null) {
                      return;
                    }
                    if (typeof child === "string" || typeof child === "number") {
                      return;
                    }
                    if (!didWarnInvalidChild) {
                      didWarnInvalidChild = true;
                      error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                    }
                  });
                } else if (props.dangerouslySetInnerHTML != null) {
                  if (!didWarnInvalidInnerHTML) {
                    didWarnInvalidInnerHTML = true;
                    error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                  }
                }
              }
              if (props.selected != null && !didWarnSelectedSetOnOption) {
                error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
                didWarnSelectedSetOnOption = true;
              }
            }
          }
          function postMountWrapper$1(element, props) {
            if (props.value != null) {
              element.setAttribute("value", toString3(getToStringValue(props.value)));
            }
          }
          var isArrayImpl = Array.isArray;
          function isArray2(a) {
            return isArrayImpl(a);
          }
          var didWarnValueDefaultValue$1;
          {
            didWarnValueDefaultValue$1 = false;
          }
          function getDeclarationErrorAddendum() {
            var ownerName = getCurrentFiberOwnerNameInDevOrNull();
            if (ownerName) {
              return "\n\nCheck the render method of `" + ownerName + "`.";
            }
            return "";
          }
          var valuePropNames = ["value", "defaultValue"];
          function checkSelectPropTypes(props) {
            {
              checkControlledValueProps("select", props);
              for (var i = 0; i < valuePropNames.length; i++) {
                var propName = valuePropNames[i];
                if (props[propName] == null) {
                  continue;
                }
                var propNameIsArray = isArray2(props[propName]);
                if (props.multiple && !propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
                } else if (!props.multiple && propNameIsArray) {
                  error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
                }
              }
            }
          }
          function updateOptions(node2, multiple, propValue, setDefaultSelected) {
            var options2 = node2.options;
            if (multiple) {
              var selectedValues = propValue;
              var selectedValue = {};
              for (var i = 0; i < selectedValues.length; i++) {
                selectedValue["$" + selectedValues[i]] = true;
              }
              for (var _i = 0; _i < options2.length; _i++) {
                var selected = selectedValue.hasOwnProperty("$" + options2[_i].value);
                if (options2[_i].selected !== selected) {
                  options2[_i].selected = selected;
                }
                if (selected && setDefaultSelected) {
                  options2[_i].defaultSelected = true;
                }
              }
            } else {
              var _selectedValue = toString3(getToStringValue(propValue));
              var defaultSelected = null;
              for (var _i2 = 0; _i2 < options2.length; _i2++) {
                if (options2[_i2].value === _selectedValue) {
                  options2[_i2].selected = true;
                  if (setDefaultSelected) {
                    options2[_i2].defaultSelected = true;
                  }
                  return;
                }
                if (defaultSelected === null && !options2[_i2].disabled) {
                  defaultSelected = options2[_i2];
                }
              }
              if (defaultSelected !== null) {
                defaultSelected.selected = true;
              }
            }
          }
          function getHostProps$1(element, props) {
            return assign2({}, props, {
              value: void 0
            });
          }
          function initWrapperState$1(element, props) {
            var node2 = element;
            {
              checkSelectPropTypes(props);
            }
            node2._wrapperState = {
              wasMultiple: !!props.multiple
            };
            {
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
                error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
                didWarnValueDefaultValue$1 = true;
              }
            }
          }
          function postMountWrapper$2(element, props) {
            var node2 = element;
            node2.multiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            } else if (props.defaultValue != null) {
              updateOptions(node2, !!props.multiple, props.defaultValue, true);
            }
          }
          function postUpdateWrapper(element, props) {
            var node2 = element;
            var wasMultiple = node2._wrapperState.wasMultiple;
            node2._wrapperState.wasMultiple = !!props.multiple;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            } else if (wasMultiple !== !!props.multiple) {
              if (props.defaultValue != null) {
                updateOptions(node2, !!props.multiple, props.defaultValue, true);
              } else {
                updateOptions(node2, !!props.multiple, props.multiple ? [] : "", false);
              }
            }
          }
          function restoreControlledState$1(element, props) {
            var node2 = element;
            var value = props.value;
            if (value != null) {
              updateOptions(node2, !!props.multiple, value, false);
            }
          }
          var didWarnValDefaultVal = false;
          function getHostProps$2(element, props) {
            var node2 = element;
            if (props.dangerouslySetInnerHTML != null) {
              throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
            }
            var hostProps = assign2({}, props, {
              value: void 0,
              defaultValue: void 0,
              children: toString3(node2._wrapperState.initialValue)
            });
            return hostProps;
          }
          function initWrapperState$2(element, props) {
            var node2 = element;
            {
              checkControlledValueProps("textarea", props);
              if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
                error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
                didWarnValDefaultVal = true;
              }
            }
            var initialValue = props.value;
            if (initialValue == null) {
              var children = props.children, defaultValue = props.defaultValue;
              if (children != null) {
                {
                  error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
                }
                {
                  if (defaultValue != null) {
                    throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                  }
                  if (isArray2(children)) {
                    if (children.length > 1) {
                      throw new Error("<textarea> can only have at most one child.");
                    }
                    children = children[0];
                  }
                  defaultValue = children;
                }
              }
              if (defaultValue == null) {
                defaultValue = "";
              }
              initialValue = defaultValue;
            }
            node2._wrapperState = {
              initialValue: getToStringValue(initialValue)
            };
          }
          function updateWrapper$1(element, props) {
            var node2 = element;
            var value = getToStringValue(props.value);
            var defaultValue = getToStringValue(props.defaultValue);
            if (value != null) {
              var newValue = toString3(value);
              if (newValue !== node2.value) {
                node2.value = newValue;
              }
              if (props.defaultValue == null && node2.defaultValue !== newValue) {
                node2.defaultValue = newValue;
              }
            }
            if (defaultValue != null) {
              node2.defaultValue = toString3(defaultValue);
            }
          }
          function postMountWrapper$3(element, props) {
            var node2 = element;
            var textContent = node2.textContent;
            if (textContent === node2._wrapperState.initialValue) {
              if (textContent !== "" && textContent !== null) {
                node2.value = textContent;
              }
            }
          }
          function restoreControlledState$2(element, props) {
            updateWrapper$1(element, props);
          }
          var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
          var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
          var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
          function getIntrinsicNamespace(type) {
            switch (type) {
              case "svg":
                return SVG_NAMESPACE;
              case "math":
                return MATH_NAMESPACE;
              default:
                return HTML_NAMESPACE;
            }
          }
          function getChildNamespace(parentNamespace, type) {
            if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
              return getIntrinsicNamespace(type);
            }
            if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
              return HTML_NAMESPACE;
            }
            return parentNamespace;
          }
          var createMicrosoftUnsafeLocalFunction = function(func) {
            if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
              return function(arg0, arg1, arg2, arg3) {
                MSApp.execUnsafeLocalFunction(function() {
                  return func(arg0, arg1, arg2, arg3);
                });
              };
            } else {
              return func;
            }
          };
          var reusableSVGContainer;
          var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node2, html2) {
            if (node2.namespaceURI === SVG_NAMESPACE) {
              if (!("innerHTML" in node2)) {
                reusableSVGContainer = reusableSVGContainer || document.createElement("div");
                reusableSVGContainer.innerHTML = "<svg>" + html2.valueOf().toString() + "</svg>";
                var svgNode = reusableSVGContainer.firstChild;
                while (node2.firstChild) {
                  node2.removeChild(node2.firstChild);
                }
                while (svgNode.firstChild) {
                  node2.appendChild(svgNode.firstChild);
                }
                return;
              }
            }
            node2.innerHTML = html2;
          });
          var ELEMENT_NODE = 1;
          var TEXT_NODE = 3;
          var COMMENT_NODE = 8;
          var DOCUMENT_NODE = 9;
          var DOCUMENT_FRAGMENT_NODE = 11;
          var setTextContent = function(node2, text) {
            if (text) {
              var firstChild = node2.firstChild;
              if (firstChild && firstChild === node2.lastChild && firstChild.nodeType === TEXT_NODE) {
                firstChild.nodeValue = text;
                return;
              }
            }
            node2.textContent = text;
          };
          var shorthandToLonghand = {
            animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
            background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
            backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
            border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
            borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
            borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
            borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
            borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
            borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
            borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
            borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
            borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
            borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
            borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
            borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
            borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
            columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
            columns: ["columnCount", "columnWidth"],
            flex: ["flexBasis", "flexGrow", "flexShrink"],
            flexFlow: ["flexDirection", "flexWrap"],
            font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
            fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
            gap: ["columnGap", "rowGap"],
            grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
            gridColumn: ["gridColumnEnd", "gridColumnStart"],
            gridColumnGap: ["columnGap"],
            gridGap: ["columnGap", "rowGap"],
            gridRow: ["gridRowEnd", "gridRowStart"],
            gridRowGap: ["rowGap"],
            gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
            listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
            margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
            marker: ["markerEnd", "markerMid", "markerStart"],
            mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
            maskPosition: ["maskPositionX", "maskPositionY"],
            outline: ["outlineColor", "outlineStyle", "outlineWidth"],
            overflow: ["overflowX", "overflowY"],
            padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
            placeContent: ["alignContent", "justifyContent"],
            placeItems: ["alignItems", "justifyItems"],
            placeSelf: ["alignSelf", "justifySelf"],
            textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
            textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
            transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
            wordWrap: ["overflowWrap"]
          };
          var isUnitlessNumber = {
            animationIterationCount: true,
            aspectRatio: true,
            borderImageOutset: true,
            borderImageSlice: true,
            borderImageWidth: true,
            boxFlex: true,
            boxFlexGroup: true,
            boxOrdinalGroup: true,
            columnCount: true,
            columns: true,
            flex: true,
            flexGrow: true,
            flexPositive: true,
            flexShrink: true,
            flexNegative: true,
            flexOrder: true,
            gridArea: true,
            gridRow: true,
            gridRowEnd: true,
            gridRowSpan: true,
            gridRowStart: true,
            gridColumn: true,
            gridColumnEnd: true,
            gridColumnSpan: true,
            gridColumnStart: true,
            fontWeight: true,
            lineClamp: true,
            lineHeight: true,
            opacity: true,
            order: true,
            orphans: true,
            tabSize: true,
            widows: true,
            zIndex: true,
            zoom: true,
            // SVG-related properties
            fillOpacity: true,
            floodOpacity: true,
            stopOpacity: true,
            strokeDasharray: true,
            strokeDashoffset: true,
            strokeMiterlimit: true,
            strokeOpacity: true,
            strokeWidth: true
          };
          function prefixKey(prefix4, key) {
            return prefix4 + key.charAt(0).toUpperCase() + key.substring(1);
          }
          var prefixes = ["Webkit", "ms", "Moz", "O"];
          Object.keys(isUnitlessNumber).forEach(function(prop) {
            prefixes.forEach(function(prefix4) {
              isUnitlessNumber[prefixKey(prefix4, prop)] = isUnitlessNumber[prop];
            });
          });
          function dangerousStyleValue(name, value, isCustomProperty3) {
            var isEmpty5 = value == null || typeof value === "boolean" || value === "";
            if (isEmpty5) {
              return "";
            }
            if (!isCustomProperty3 && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
              return value + "px";
            }
            {
              checkCSSPropertyStringCoercion(value, name);
            }
            return ("" + value).trim();
          }
          var uppercasePattern2 = /([A-Z])/g;
          var msPattern2 = /^ms-/;
          function hyphenateStyleName2(name) {
            return name.replace(uppercasePattern2, "-$1").toLowerCase().replace(msPattern2, "-ms-");
          }
          var warnValidStyle = function() {
          };
          {
            var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
            var msPattern$1 = /^-ms-/;
            var hyphenPattern = /-(.)/g;
            var badStyleValueWithSemicolonPattern = /;\s*$/;
            var warnedStyleNames = {};
            var warnedStyleValues = {};
            var warnedForNaNValue = false;
            var warnedForInfinityValue = false;
            var camelize2 = function(string) {
              return string.replace(hyphenPattern, function(_5, character2) {
                return character2.toUpperCase();
              });
            };
            var warnHyphenatedStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error(
                "Unsupported style property %s. Did you mean %s?",
                name,
                // As Andi Smith suggests
                // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
                // is converted to lowercase `ms`.
                camelize2(name.replace(msPattern$1, "ms-"))
              );
            };
            var warnBadVendoredStyleName = function(name) {
              if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
                return;
              }
              warnedStyleNames[name] = true;
              error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
            };
            var warnStyleValueWithSemicolon = function(name, value) {
              if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
                return;
              }
              warnedStyleValues[value] = true;
              error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
            };
            var warnStyleValueIsNaN = function(name, value) {
              if (warnedForNaNValue) {
                return;
              }
              warnedForNaNValue = true;
              error("`NaN` is an invalid value for the `%s` css style property.", name);
            };
            var warnStyleValueIsInfinity = function(name, value) {
              if (warnedForInfinityValue) {
                return;
              }
              warnedForInfinityValue = true;
              error("`Infinity` is an invalid value for the `%s` css style property.", name);
            };
            warnValidStyle = function(name, value) {
              if (name.indexOf("-") > -1) {
                warnHyphenatedStyleName(name);
              } else if (badVendoredStyleNamePattern.test(name)) {
                warnBadVendoredStyleName(name);
              } else if (badStyleValueWithSemicolonPattern.test(value)) {
                warnStyleValueWithSemicolon(name, value);
              }
              if (typeof value === "number") {
                if (isNaN(value)) {
                  warnStyleValueIsNaN(name, value);
                } else if (!isFinite(value)) {
                  warnStyleValueIsInfinity(name, value);
                }
              }
            };
          }
          var warnValidStyle$1 = warnValidStyle;
          function createDangerousStringForStyles(styles7) {
            {
              var serialized = "";
              var delimiter2 = "";
              for (var styleName in styles7) {
                if (!styles7.hasOwnProperty(styleName)) {
                  continue;
                }
                var styleValue = styles7[styleName];
                if (styleValue != null) {
                  var isCustomProperty3 = styleName.indexOf("--") === 0;
                  serialized += delimiter2 + (isCustomProperty3 ? styleName : hyphenateStyleName2(styleName)) + ":";
                  serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty3);
                  delimiter2 = ";";
                }
              }
              return serialized || null;
            }
          }
          function setValueForStyles(node2, styles7) {
            var style2 = node2.style;
            for (var styleName in styles7) {
              if (!styles7.hasOwnProperty(styleName)) {
                continue;
              }
              var isCustomProperty3 = styleName.indexOf("--") === 0;
              {
                if (!isCustomProperty3) {
                  warnValidStyle$1(styleName, styles7[styleName]);
                }
              }
              var styleValue = dangerousStyleValue(styleName, styles7[styleName], isCustomProperty3);
              if (styleName === "float") {
                styleName = "cssFloat";
              }
              if (isCustomProperty3) {
                style2.setProperty(styleName, styleValue);
              } else {
                style2[styleName] = styleValue;
              }
            }
          }
          function isValueEmpty(value) {
            return value == null || typeof value === "boolean" || value === "";
          }
          function expandShorthandMap(styles7) {
            var expanded = {};
            for (var key in styles7) {
              var longhands = shorthandToLonghand[key] || [key];
              for (var i = 0; i < longhands.length; i++) {
                expanded[longhands[i]] = key;
              }
            }
            return expanded;
          }
          function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
            {
              if (!nextStyles) {
                return;
              }
              var expandedUpdates = expandShorthandMap(styleUpdates);
              var expandedStyles = expandShorthandMap(nextStyles);
              var warnedAbout = {};
              for (var key in expandedUpdates) {
                var originalKey = expandedUpdates[key];
                var correctOriginalKey = expandedStyles[key];
                if (correctOriginalKey && originalKey !== correctOriginalKey) {
                  var warningKey = originalKey + "," + correctOriginalKey;
                  if (warnedAbout[warningKey]) {
                    continue;
                  }
                  warnedAbout[warningKey] = true;
                  error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
                }
              }
            }
          }
          var omittedCloseTags = {
            area: true,
            base: true,
            br: true,
            col: true,
            embed: true,
            hr: true,
            img: true,
            input: true,
            keygen: true,
            link: true,
            meta: true,
            param: true,
            source: true,
            track: true,
            wbr: true
            // NOTE: menuitem's close tag should be omitted, but that causes problems.
          };
          var voidElementTags = assign2({
            menuitem: true
          }, omittedCloseTags);
          var HTML = "__html";
          function assertValidProps(tag, props) {
            if (!props) {
              return;
            }
            if (voidElementTags[tag]) {
              if (props.children != null || props.dangerouslySetInnerHTML != null) {
                throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
              }
            }
            if (props.dangerouslySetInnerHTML != null) {
              if (props.children != null) {
                throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
              }
              if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
                throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
              }
            }
            {
              if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
                error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
              }
            }
            if (props.style != null && typeof props.style !== "object") {
              throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
            }
          }
          function isCustomComponent(tagName, props) {
            if (tagName.indexOf("-") === -1) {
              return typeof props.is === "string";
            }
            switch (tagName) {
              case "annotation-xml":
              case "color-profile":
              case "font-face":
              case "font-face-src":
              case "font-face-uri":
              case "font-face-format":
              case "font-face-name":
              case "missing-glyph":
                return false;
              default:
                return true;
            }
          }
          var possibleStandardNames = {
            // HTML
            accept: "accept",
            acceptcharset: "acceptCharset",
            "accept-charset": "acceptCharset",
            accesskey: "accessKey",
            action: "action",
            allowfullscreen: "allowFullScreen",
            alt: "alt",
            as: "as",
            async: "async",
            autocapitalize: "autoCapitalize",
            autocomplete: "autoComplete",
            autocorrect: "autoCorrect",
            autofocus: "autoFocus",
            autoplay: "autoPlay",
            autosave: "autoSave",
            capture: "capture",
            cellpadding: "cellPadding",
            cellspacing: "cellSpacing",
            challenge: "challenge",
            charset: "charSet",
            checked: "checked",
            children: "children",
            cite: "cite",
            class: "className",
            classid: "classID",
            classname: "className",
            cols: "cols",
            colspan: "colSpan",
            content: "content",
            contenteditable: "contentEditable",
            contextmenu: "contextMenu",
            controls: "controls",
            controlslist: "controlsList",
            coords: "coords",
            crossorigin: "crossOrigin",
            dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
            data: "data",
            datetime: "dateTime",
            default: "default",
            defaultchecked: "defaultChecked",
            defaultvalue: "defaultValue",
            defer: "defer",
            dir: "dir",
            disabled: "disabled",
            disablepictureinpicture: "disablePictureInPicture",
            disableremoteplayback: "disableRemotePlayback",
            download: "download",
            draggable: "draggable",
            enctype: "encType",
            enterkeyhint: "enterKeyHint",
            for: "htmlFor",
            form: "form",
            formmethod: "formMethod",
            formaction: "formAction",
            formenctype: "formEncType",
            formnovalidate: "formNoValidate",
            formtarget: "formTarget",
            frameborder: "frameBorder",
            headers: "headers",
            height: "height",
            hidden: "hidden",
            high: "high",
            href: "href",
            hreflang: "hrefLang",
            htmlfor: "htmlFor",
            httpequiv: "httpEquiv",
            "http-equiv": "httpEquiv",
            icon: "icon",
            id: "id",
            imagesizes: "imageSizes",
            imagesrcset: "imageSrcSet",
            innerhtml: "innerHTML",
            inputmode: "inputMode",
            integrity: "integrity",
            is: "is",
            itemid: "itemID",
            itemprop: "itemProp",
            itemref: "itemRef",
            itemscope: "itemScope",
            itemtype: "itemType",
            keyparams: "keyParams",
            keytype: "keyType",
            kind: "kind",
            label: "label",
            lang: "lang",
            list: "list",
            loop: "loop",
            low: "low",
            manifest: "manifest",
            marginwidth: "marginWidth",
            marginheight: "marginHeight",
            max: "max",
            maxlength: "maxLength",
            media: "media",
            mediagroup: "mediaGroup",
            method: "method",
            min: "min",
            minlength: "minLength",
            multiple: "multiple",
            muted: "muted",
            name: "name",
            nomodule: "noModule",
            nonce: "nonce",
            novalidate: "noValidate",
            open: "open",
            optimum: "optimum",
            pattern: "pattern",
            placeholder: "placeholder",
            playsinline: "playsInline",
            poster: "poster",
            preload: "preload",
            profile: "profile",
            radiogroup: "radioGroup",
            readonly: "readOnly",
            referrerpolicy: "referrerPolicy",
            rel: "rel",
            required: "required",
            reversed: "reversed",
            role: "role",
            rows: "rows",
            rowspan: "rowSpan",
            sandbox: "sandbox",
            scope: "scope",
            scoped: "scoped",
            scrolling: "scrolling",
            seamless: "seamless",
            selected: "selected",
            shape: "shape",
            size: "size",
            sizes: "sizes",
            span: "span",
            spellcheck: "spellCheck",
            src: "src",
            srcdoc: "srcDoc",
            srclang: "srcLang",
            srcset: "srcSet",
            start: "start",
            step: "step",
            style: "style",
            summary: "summary",
            tabindex: "tabIndex",
            target: "target",
            title: "title",
            type: "type",
            usemap: "useMap",
            value: "value",
            width: "width",
            wmode: "wmode",
            wrap: "wrap",
            // SVG
            about: "about",
            accentheight: "accentHeight",
            "accent-height": "accentHeight",
            accumulate: "accumulate",
            additive: "additive",
            alignmentbaseline: "alignmentBaseline",
            "alignment-baseline": "alignmentBaseline",
            allowreorder: "allowReorder",
            alphabetic: "alphabetic",
            amplitude: "amplitude",
            arabicform: "arabicForm",
            "arabic-form": "arabicForm",
            ascent: "ascent",
            attributename: "attributeName",
            attributetype: "attributeType",
            autoreverse: "autoReverse",
            azimuth: "azimuth",
            basefrequency: "baseFrequency",
            baselineshift: "baselineShift",
            "baseline-shift": "baselineShift",
            baseprofile: "baseProfile",
            bbox: "bbox",
            begin: "begin",
            bias: "bias",
            by: "by",
            calcmode: "calcMode",
            capheight: "capHeight",
            "cap-height": "capHeight",
            clip: "clip",
            clippath: "clipPath",
            "clip-path": "clipPath",
            clippathunits: "clipPathUnits",
            cliprule: "clipRule",
            "clip-rule": "clipRule",
            color: "color",
            colorinterpolation: "colorInterpolation",
            "color-interpolation": "colorInterpolation",
            colorinterpolationfilters: "colorInterpolationFilters",
            "color-interpolation-filters": "colorInterpolationFilters",
            colorprofile: "colorProfile",
            "color-profile": "colorProfile",
            colorrendering: "colorRendering",
            "color-rendering": "colorRendering",
            contentscripttype: "contentScriptType",
            contentstyletype: "contentStyleType",
            cursor: "cursor",
            cx: "cx",
            cy: "cy",
            d: "d",
            datatype: "datatype",
            decelerate: "decelerate",
            descent: "descent",
            diffuseconstant: "diffuseConstant",
            direction: "direction",
            display: "display",
            divisor: "divisor",
            dominantbaseline: "dominantBaseline",
            "dominant-baseline": "dominantBaseline",
            dur: "dur",
            dx: "dx",
            dy: "dy",
            edgemode: "edgeMode",
            elevation: "elevation",
            enablebackground: "enableBackground",
            "enable-background": "enableBackground",
            end: "end",
            exponent: "exponent",
            externalresourcesrequired: "externalResourcesRequired",
            fill: "fill",
            fillopacity: "fillOpacity",
            "fill-opacity": "fillOpacity",
            fillrule: "fillRule",
            "fill-rule": "fillRule",
            filter: "filter",
            filterres: "filterRes",
            filterunits: "filterUnits",
            floodopacity: "floodOpacity",
            "flood-opacity": "floodOpacity",
            floodcolor: "floodColor",
            "flood-color": "floodColor",
            focusable: "focusable",
            fontfamily: "fontFamily",
            "font-family": "fontFamily",
            fontsize: "fontSize",
            "font-size": "fontSize",
            fontsizeadjust: "fontSizeAdjust",
            "font-size-adjust": "fontSizeAdjust",
            fontstretch: "fontStretch",
            "font-stretch": "fontStretch",
            fontstyle: "fontStyle",
            "font-style": "fontStyle",
            fontvariant: "fontVariant",
            "font-variant": "fontVariant",
            fontweight: "fontWeight",
            "font-weight": "fontWeight",
            format: "format",
            from: "from",
            fx: "fx",
            fy: "fy",
            g1: "g1",
            g2: "g2",
            glyphname: "glyphName",
            "glyph-name": "glyphName",
            glyphorientationhorizontal: "glyphOrientationHorizontal",
            "glyph-orientation-horizontal": "glyphOrientationHorizontal",
            glyphorientationvertical: "glyphOrientationVertical",
            "glyph-orientation-vertical": "glyphOrientationVertical",
            glyphref: "glyphRef",
            gradienttransform: "gradientTransform",
            gradientunits: "gradientUnits",
            hanging: "hanging",
            horizadvx: "horizAdvX",
            "horiz-adv-x": "horizAdvX",
            horizoriginx: "horizOriginX",
            "horiz-origin-x": "horizOriginX",
            ideographic: "ideographic",
            imagerendering: "imageRendering",
            "image-rendering": "imageRendering",
            in2: "in2",
            in: "in",
            inlist: "inlist",
            intercept: "intercept",
            k1: "k1",
            k2: "k2",
            k3: "k3",
            k4: "k4",
            k: "k",
            kernelmatrix: "kernelMatrix",
            kernelunitlength: "kernelUnitLength",
            kerning: "kerning",
            keypoints: "keyPoints",
            keysplines: "keySplines",
            keytimes: "keyTimes",
            lengthadjust: "lengthAdjust",
            letterspacing: "letterSpacing",
            "letter-spacing": "letterSpacing",
            lightingcolor: "lightingColor",
            "lighting-color": "lightingColor",
            limitingconeangle: "limitingConeAngle",
            local: "local",
            markerend: "markerEnd",
            "marker-end": "markerEnd",
            markerheight: "markerHeight",
            markermid: "markerMid",
            "marker-mid": "markerMid",
            markerstart: "markerStart",
            "marker-start": "markerStart",
            markerunits: "markerUnits",
            markerwidth: "markerWidth",
            mask: "mask",
            maskcontentunits: "maskContentUnits",
            maskunits: "maskUnits",
            mathematical: "mathematical",
            mode: "mode",
            numoctaves: "numOctaves",
            offset: "offset",
            opacity: "opacity",
            operator: "operator",
            order: "order",
            orient: "orient",
            orientation: "orientation",
            origin: "origin",
            overflow: "overflow",
            overlineposition: "overlinePosition",
            "overline-position": "overlinePosition",
            overlinethickness: "overlineThickness",
            "overline-thickness": "overlineThickness",
            paintorder: "paintOrder",
            "paint-order": "paintOrder",
            panose1: "panose1",
            "panose-1": "panose1",
            pathlength: "pathLength",
            patterncontentunits: "patternContentUnits",
            patterntransform: "patternTransform",
            patternunits: "patternUnits",
            pointerevents: "pointerEvents",
            "pointer-events": "pointerEvents",
            points: "points",
            pointsatx: "pointsAtX",
            pointsaty: "pointsAtY",
            pointsatz: "pointsAtZ",
            prefix: "prefix",
            preservealpha: "preserveAlpha",
            preserveaspectratio: "preserveAspectRatio",
            primitiveunits: "primitiveUnits",
            property: "property",
            r: "r",
            radius: "radius",
            refx: "refX",
            refy: "refY",
            renderingintent: "renderingIntent",
            "rendering-intent": "renderingIntent",
            repeatcount: "repeatCount",
            repeatdur: "repeatDur",
            requiredextensions: "requiredExtensions",
            requiredfeatures: "requiredFeatures",
            resource: "resource",
            restart: "restart",
            result: "result",
            results: "results",
            rotate: "rotate",
            rx: "rx",
            ry: "ry",
            scale: "scale",
            security: "security",
            seed: "seed",
            shaperendering: "shapeRendering",
            "shape-rendering": "shapeRendering",
            slope: "slope",
            spacing: "spacing",
            specularconstant: "specularConstant",
            specularexponent: "specularExponent",
            speed: "speed",
            spreadmethod: "spreadMethod",
            startoffset: "startOffset",
            stddeviation: "stdDeviation",
            stemh: "stemh",
            stemv: "stemv",
            stitchtiles: "stitchTiles",
            stopcolor: "stopColor",
            "stop-color": "stopColor",
            stopopacity: "stopOpacity",
            "stop-opacity": "stopOpacity",
            strikethroughposition: "strikethroughPosition",
            "strikethrough-position": "strikethroughPosition",
            strikethroughthickness: "strikethroughThickness",
            "strikethrough-thickness": "strikethroughThickness",
            string: "string",
            stroke: "stroke",
            strokedasharray: "strokeDasharray",
            "stroke-dasharray": "strokeDasharray",
            strokedashoffset: "strokeDashoffset",
            "stroke-dashoffset": "strokeDashoffset",
            strokelinecap: "strokeLinecap",
            "stroke-linecap": "strokeLinecap",
            strokelinejoin: "strokeLinejoin",
            "stroke-linejoin": "strokeLinejoin",
            strokemiterlimit: "strokeMiterlimit",
            "stroke-miterlimit": "strokeMiterlimit",
            strokewidth: "strokeWidth",
            "stroke-width": "strokeWidth",
            strokeopacity: "strokeOpacity",
            "stroke-opacity": "strokeOpacity",
            suppresscontenteditablewarning: "suppressContentEditableWarning",
            suppresshydrationwarning: "suppressHydrationWarning",
            surfacescale: "surfaceScale",
            systemlanguage: "systemLanguage",
            tablevalues: "tableValues",
            targetx: "targetX",
            targety: "targetY",
            textanchor: "textAnchor",
            "text-anchor": "textAnchor",
            textdecoration: "textDecoration",
            "text-decoration": "textDecoration",
            textlength: "textLength",
            textrendering: "textRendering",
            "text-rendering": "textRendering",
            to: "to",
            transform: "transform",
            typeof: "typeof",
            u1: "u1",
            u2: "u2",
            underlineposition: "underlinePosition",
            "underline-position": "underlinePosition",
            underlinethickness: "underlineThickness",
            "underline-thickness": "underlineThickness",
            unicode: "unicode",
            unicodebidi: "unicodeBidi",
            "unicode-bidi": "unicodeBidi",
            unicoderange: "unicodeRange",
            "unicode-range": "unicodeRange",
            unitsperem: "unitsPerEm",
            "units-per-em": "unitsPerEm",
            unselectable: "unselectable",
            valphabetic: "vAlphabetic",
            "v-alphabetic": "vAlphabetic",
            values: "values",
            vectoreffect: "vectorEffect",
            "vector-effect": "vectorEffect",
            version: "version",
            vertadvy: "vertAdvY",
            "vert-adv-y": "vertAdvY",
            vertoriginx: "vertOriginX",
            "vert-origin-x": "vertOriginX",
            vertoriginy: "vertOriginY",
            "vert-origin-y": "vertOriginY",
            vhanging: "vHanging",
            "v-hanging": "vHanging",
            videographic: "vIdeographic",
            "v-ideographic": "vIdeographic",
            viewbox: "viewBox",
            viewtarget: "viewTarget",
            visibility: "visibility",
            vmathematical: "vMathematical",
            "v-mathematical": "vMathematical",
            vocab: "vocab",
            widths: "widths",
            wordspacing: "wordSpacing",
            "word-spacing": "wordSpacing",
            writingmode: "writingMode",
            "writing-mode": "writingMode",
            x1: "x1",
            x2: "x2",
            x: "x",
            xchannelselector: "xChannelSelector",
            xheight: "xHeight",
            "x-height": "xHeight",
            xlinkactuate: "xlinkActuate",
            "xlink:actuate": "xlinkActuate",
            xlinkarcrole: "xlinkArcrole",
            "xlink:arcrole": "xlinkArcrole",
            xlinkhref: "xlinkHref",
            "xlink:href": "xlinkHref",
            xlinkrole: "xlinkRole",
            "xlink:role": "xlinkRole",
            xlinkshow: "xlinkShow",
            "xlink:show": "xlinkShow",
            xlinktitle: "xlinkTitle",
            "xlink:title": "xlinkTitle",
            xlinktype: "xlinkType",
            "xlink:type": "xlinkType",
            xmlbase: "xmlBase",
            "xml:base": "xmlBase",
            xmllang: "xmlLang",
            "xml:lang": "xmlLang",
            xmlns: "xmlns",
            "xml:space": "xmlSpace",
            xmlnsxlink: "xmlnsXlink",
            "xmlns:xlink": "xmlnsXlink",
            xmlspace: "xmlSpace",
            y1: "y1",
            y2: "y2",
            y: "y",
            ychannelselector: "yChannelSelector",
            z: "z",
            zoomandpan: "zoomAndPan"
          };
          var ariaProperties = {
            "aria-current": 0,
            // state
            "aria-description": 0,
            "aria-details": 0,
            "aria-disabled": 0,
            // state
            "aria-hidden": 0,
            // state
            "aria-invalid": 0,
            // state
            "aria-keyshortcuts": 0,
            "aria-label": 0,
            "aria-roledescription": 0,
            // Widget Attributes
            "aria-autocomplete": 0,
            "aria-checked": 0,
            "aria-expanded": 0,
            "aria-haspopup": 0,
            "aria-level": 0,
            "aria-modal": 0,
            "aria-multiline": 0,
            "aria-multiselectable": 0,
            "aria-orientation": 0,
            "aria-placeholder": 0,
            "aria-pressed": 0,
            "aria-readonly": 0,
            "aria-required": 0,
            "aria-selected": 0,
            "aria-sort": 0,
            "aria-valuemax": 0,
            "aria-valuemin": 0,
            "aria-valuenow": 0,
            "aria-valuetext": 0,
            // Live Region Attributes
            "aria-atomic": 0,
            "aria-busy": 0,
            "aria-live": 0,
            "aria-relevant": 0,
            // Drag-and-Drop Attributes
            "aria-dropeffect": 0,
            "aria-grabbed": 0,
            // Relationship Attributes
            "aria-activedescendant": 0,
            "aria-colcount": 0,
            "aria-colindex": 0,
            "aria-colspan": 0,
            "aria-controls": 0,
            "aria-describedby": 0,
            "aria-errormessage": 0,
            "aria-flowto": 0,
            "aria-labelledby": 0,
            "aria-owns": 0,
            "aria-posinset": 0,
            "aria-rowcount": 0,
            "aria-rowindex": 0,
            "aria-rowspan": 0,
            "aria-setsize": 0
          };
          var warnedProperties = {};
          var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          function validateProperty(tagName, name) {
            {
              if (hasOwnProperty3.call(warnedProperties, name) && warnedProperties[name]) {
                return true;
              }
              if (rARIACamel.test(name)) {
                var ariaName = "aria-" + name.slice(4).toLowerCase();
                var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
                if (correctName == null) {
                  error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                  warnedProperties[name] = true;
                  return true;
                }
                if (name !== correctName) {
                  error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
              if (rARIA.test(name)) {
                var lowerCasedName = name.toLowerCase();
                var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
                if (standardName == null) {
                  warnedProperties[name] = true;
                  return false;
                }
                if (name !== standardName) {
                  error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties[name] = true;
                  return true;
                }
              }
            }
            return true;
          }
          function warnInvalidARIAProps(type, props) {
            {
              var invalidProps = [];
              for (var key in props) {
                var isValid = validateProperty(type, key);
                if (!isValid) {
                  invalidProps.push(key);
                }
              }
              var unknownPropString = invalidProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (invalidProps.length === 1) {
                error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              } else if (invalidProps.length > 1) {
                error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
              }
            }
          }
          function validateProperties(type, props) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnInvalidARIAProps(type, props);
          }
          var didWarnValueNull = false;
          function validateProperties$1(type, props) {
            {
              if (type !== "input" && type !== "textarea" && type !== "select") {
                return;
              }
              if (props != null && props.value === null && !didWarnValueNull) {
                didWarnValueNull = true;
                if (type === "select" && props.multiple) {
                  error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
                } else {
                  error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
                }
              }
            }
          }
          var validateProperty$1 = function() {
          };
          {
            var warnedProperties$1 = {};
            var EVENT_NAME_REGEX = /^on./;
            var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
            var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
            var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
            validateProperty$1 = function(tagName, name, value, eventRegistry) {
              if (hasOwnProperty3.call(warnedProperties$1, name) && warnedProperties$1[name]) {
                return true;
              }
              var lowerCasedName = name.toLowerCase();
              if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
                error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (eventRegistry != null) {
                var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
                if (registrationNameDependencies2.hasOwnProperty(name)) {
                  return true;
                }
                var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
                if (registrationName != null) {
                  error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                  warnedProperties$1[name] = true;
                  return true;
                }
                if (EVENT_NAME_REGEX.test(name)) {
                  error("Unknown event handler property `%s`. It will be ignored.", name);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (EVENT_NAME_REGEX.test(name)) {
                if (INVALID_EVENT_NAME_REGEX.test(name)) {
                  error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
                return true;
              }
              if (lowerCasedName === "innerhtml") {
                error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "aria") {
                error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
                warnedProperties$1[name] = true;
                return true;
              }
              if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
                error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "number" && isNaN(value)) {
                error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
                warnedProperties$1[name] = true;
                return true;
              }
              var propertyInfo = getPropertyInfo(name);
              var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
              if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                var standardName = possibleStandardNames[lowerCasedName];
                if (standardName !== name) {
                  error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                  warnedProperties$1[name] = true;
                  return true;
                }
              } else if (!isReserved && name !== lowerCasedName) {
                error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                if (value) {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
                } else {
                  error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
                }
                warnedProperties$1[name] = true;
                return true;
              }
              if (isReserved) {
                return true;
              }
              if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
                warnedProperties$1[name] = true;
                return false;
              }
              if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
                error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
                warnedProperties$1[name] = true;
                return true;
              }
              return true;
            };
          }
          var warnUnknownProperties = function(type, props, eventRegistry) {
            {
              var unknownProps = [];
              for (var key in props) {
                var isValid = validateProperty$1(type, key, props[key], eventRegistry);
                if (!isValid) {
                  unknownProps.push(key);
                }
              }
              var unknownPropString = unknownProps.map(function(prop) {
                return "`" + prop + "`";
              }).join(", ");
              if (unknownProps.length === 1) {
                error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              } else if (unknownProps.length > 1) {
                error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
              }
            }
          };
          function validateProperties$2(type, props, eventRegistry) {
            if (isCustomComponent(type, props)) {
              return;
            }
            warnUnknownProperties(type, props, eventRegistry);
          }
          var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
          var IS_NON_DELEGATED = 1 << 1;
          var IS_CAPTURE_PHASE = 1 << 2;
          var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
          var currentReplayingEvent = null;
          function setReplayingEvent(event) {
            {
              if (currentReplayingEvent !== null) {
                error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = event;
          }
          function resetReplayingEvent() {
            {
              if (currentReplayingEvent === null) {
                error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            currentReplayingEvent = null;
          }
          function isReplayingEvent(event) {
            return event === currentReplayingEvent;
          }
          function getEventTarget(nativeEvent) {
            var target = nativeEvent.target || nativeEvent.srcElement || window;
            if (target.correspondingUseElement) {
              target = target.correspondingUseElement;
            }
            return target.nodeType === TEXT_NODE ? target.parentNode : target;
          }
          var restoreImpl = null;
          var restoreTarget = null;
          var restoreQueue = null;
          function restoreStateOfTarget(target) {
            var internalInstance = getInstanceFromNode(target);
            if (!internalInstance) {
              return;
            }
            if (typeof restoreImpl !== "function") {
              throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
            }
            var stateNode = internalInstance.stateNode;
            if (stateNode) {
              var _props = getFiberCurrentPropsFromNode(stateNode);
              restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
            }
          }
          function setRestoreImplementation(impl) {
            restoreImpl = impl;
          }
          function enqueueStateRestore(target) {
            if (restoreTarget) {
              if (restoreQueue) {
                restoreQueue.push(target);
              } else {
                restoreQueue = [target];
              }
            } else {
              restoreTarget = target;
            }
          }
          function needsStateRestore() {
            return restoreTarget !== null || restoreQueue !== null;
          }
          function restoreStateIfNeeded() {
            if (!restoreTarget) {
              return;
            }
            var target = restoreTarget;
            var queuedTargets = restoreQueue;
            restoreTarget = null;
            restoreQueue = null;
            restoreStateOfTarget(target);
            if (queuedTargets) {
              for (var i = 0; i < queuedTargets.length; i++) {
                restoreStateOfTarget(queuedTargets[i]);
              }
            }
          }
          var batchedUpdatesImpl = function(fn2, bookkeeping) {
            return fn2(bookkeeping);
          };
          var flushSyncImpl = function() {
          };
          var isInsideEventHandler = false;
          function finishEventHandler() {
            var controlledComponentsHavePendingUpdates = needsStateRestore();
            if (controlledComponentsHavePendingUpdates) {
              flushSyncImpl();
              restoreStateIfNeeded();
            }
          }
          function batchedUpdates(fn2, a, b) {
            if (isInsideEventHandler) {
              return fn2(a, b);
            }
            isInsideEventHandler = true;
            try {
              return batchedUpdatesImpl(fn2, a, b);
            } finally {
              isInsideEventHandler = false;
              finishEventHandler();
            }
          }
          function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
            batchedUpdatesImpl = _batchedUpdatesImpl;
            flushSyncImpl = _flushSyncImpl;
          }
          function isInteractive(tag) {
            return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
          }
          function shouldPreventMouseEvent(name, type, props) {
            switch (name) {
              case "onClick":
              case "onClickCapture":
              case "onDoubleClick":
              case "onDoubleClickCapture":
              case "onMouseDown":
              case "onMouseDownCapture":
              case "onMouseMove":
              case "onMouseMoveCapture":
              case "onMouseUp":
              case "onMouseUpCapture":
              case "onMouseEnter":
                return !!(props.disabled && isInteractive(type));
              default:
                return false;
            }
          }
          function getListener(inst, registrationName) {
            var stateNode = inst.stateNode;
            if (stateNode === null) {
              return null;
            }
            var props = getFiberCurrentPropsFromNode(stateNode);
            if (props === null) {
              return null;
            }
            var listener = props[registrationName];
            if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
              return null;
            }
            if (listener && typeof listener !== "function") {
              throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
            }
            return listener;
          }
          var passiveBrowserEventsSupported = false;
          if (canUseDOM) {
            try {
              var options = {};
              Object.defineProperty(options, "passive", {
                get: function() {
                  passiveBrowserEventsSupported = true;
                }
              });
              window.addEventListener("test", options, options);
              window.removeEventListener("test", options, options);
            } catch (e) {
              passiveBrowserEventsSupported = false;
            }
          }
          function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
            var funcArgs = Array.prototype.slice.call(arguments, 3);
            try {
              func.apply(context, funcArgs);
            } catch (error2) {
              this.onError(error2);
            }
          }
          var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
          {
            if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
              var fakeNode = document.createElement("react");
              invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
                if (typeof document === "undefined" || document === null) {
                  throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
                }
                var evt = document.createEvent("Event");
                var didCall = false;
                var didError = true;
                var windowEvent = window.event;
                var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
                function restoreAfterDispatch() {
                  fakeNode.removeEventListener(evtType, callCallback2, false);
                  if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                    window.event = windowEvent;
                  }
                }
                var funcArgs = Array.prototype.slice.call(arguments, 3);
                function callCallback2() {
                  didCall = true;
                  restoreAfterDispatch();
                  func.apply(context, funcArgs);
                  didError = false;
                }
                var error2;
                var didSetError = false;
                var isCrossOriginError = false;
                function handleWindowError(event) {
                  error2 = event.error;
                  didSetError = true;
                  if (error2 === null && event.colno === 0 && event.lineno === 0) {
                    isCrossOriginError = true;
                  }
                  if (event.defaultPrevented) {
                    if (error2 != null && typeof error2 === "object") {
                      try {
                        error2._suppressLogging = true;
                      } catch (inner) {
                      }
                    }
                  }
                }
                var evtType = "react-" + (name ? name : "invokeguardedcallback");
                window.addEventListener("error", handleWindowError);
                fakeNode.addEventListener(evtType, callCallback2, false);
                evt.initEvent(evtType, false, false);
                fakeNode.dispatchEvent(evt);
                if (windowEventDescriptor) {
                  Object.defineProperty(window, "event", windowEventDescriptor);
                }
                if (didCall && didError) {
                  if (!didSetError) {
                    error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                  } else if (isCrossOriginError) {
                    error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                  }
                  this.onError(error2);
                }
                window.removeEventListener("error", handleWindowError);
                if (!didCall) {
                  restoreAfterDispatch();
                  return invokeGuardedCallbackProd.apply(this, arguments);
                }
              };
            }
          }
          var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
          var hasError = false;
          var caughtError = null;
          var hasRethrowError = false;
          var rethrowError = null;
          var reporter = {
            onError: function(error2) {
              hasError = true;
              caughtError = error2;
            }
          };
          function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
            hasError = false;
            caughtError = null;
            invokeGuardedCallbackImpl$1.apply(reporter, arguments);
          }
          function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
            invokeGuardedCallback.apply(this, arguments);
            if (hasError) {
              var error2 = clearCaughtError();
              if (!hasRethrowError) {
                hasRethrowError = true;
                rethrowError = error2;
              }
            }
          }
          function rethrowCaughtError() {
            if (hasRethrowError) {
              var error2 = rethrowError;
              hasRethrowError = false;
              rethrowError = null;
              throw error2;
            }
          }
          function hasCaughtError() {
            return hasError;
          }
          function clearCaughtError() {
            if (hasError) {
              var error2 = caughtError;
              hasError = false;
              caughtError = null;
              return error2;
            } else {
              throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function get(key) {
            return key._reactInternals;
          }
          function has(key) {
            return key._reactInternals !== void 0;
          }
          function set(key, value) {
            key._reactInternals = value;
          }
          var NoFlags = (
            /*                      */
            0
          );
          var PerformedWork = (
            /*                */
            1
          );
          var Placement = (
            /*                    */
            2
          );
          var Update = (
            /*                       */
            4
          );
          var ChildDeletion = (
            /*                */
            16
          );
          var ContentReset = (
            /*                 */
            32
          );
          var Callback = (
            /*                     */
            64
          );
          var DidCapture = (
            /*                   */
            128
          );
          var ForceClientRender = (
            /*            */
            256
          );
          var Ref = (
            /*                          */
            512
          );
          var Snapshot = (
            /*                     */
            1024
          );
          var Passive = (
            /*                      */
            2048
          );
          var Hydrating = (
            /*                    */
            4096
          );
          var Visibility = (
            /*                   */
            8192
          );
          var StoreConsistency = (
            /*             */
            16384
          );
          var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
          var HostEffectMask = (
            /*               */
            32767
          );
          var Incomplete = (
            /*                   */
            32768
          );
          var ShouldCapture = (
            /*                */
            65536
          );
          var ForceUpdateForLegacySuspense = (
            /* */
            131072
          );
          var Forked = (
            /*                       */
            1048576
          );
          var RefStatic = (
            /*                    */
            2097152
          );
          var LayoutStatic = (
            /*                 */
            4194304
          );
          var PassiveStatic = (
            /*                */
            8388608
          );
          var MountLayoutDev = (
            /*               */
            16777216
          );
          var MountPassiveDev = (
            /*              */
            33554432
          );
          var BeforeMutationMask = (
            // TODO: Remove Update flag from before mutation phase by re-landing Visibility
            // flag logic (see #20043)
            Update | Snapshot | 0
          );
          var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
          var LayoutMask = Update | Callback | Ref | Visibility;
          var PassiveMask = Passive | ChildDeletion;
          var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
          var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
          function getNearestMountedFiber(fiber) {
            var node2 = fiber;
            var nearestMounted = fiber;
            if (!fiber.alternate) {
              var nextNode = node2;
              do {
                node2 = nextNode;
                if ((node2.flags & (Placement | Hydrating)) !== NoFlags) {
                  nearestMounted = node2.return;
                }
                nextNode = node2.return;
              } while (nextNode);
            } else {
              while (node2.return) {
                node2 = node2.return;
              }
            }
            if (node2.tag === HostRoot) {
              return nearestMounted;
            }
            return null;
          }
          function getSuspenseInstanceFromFiber(fiber) {
            if (fiber.tag === SuspenseComponent) {
              var suspenseState = fiber.memoizedState;
              if (suspenseState === null) {
                var current2 = fiber.alternate;
                if (current2 !== null) {
                  suspenseState = current2.memoizedState;
                }
              }
              if (suspenseState !== null) {
                return suspenseState.dehydrated;
              }
            }
            return null;
          }
          function getContainerFromFiber(fiber) {
            return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
          }
          function isFiberMounted(fiber) {
            return getNearestMountedFiber(fiber) === fiber;
          }
          function isMounted(component) {
            {
              var owner = ReactCurrentOwner.current;
              if (owner !== null && owner.tag === ClassComponent) {
                var ownerFiber = owner;
                var instance = ownerFiber.stateNode;
                if (!instance._warnedAboutRefsInRender) {
                  error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
                }
                instance._warnedAboutRefsInRender = true;
              }
            }
            var fiber = get(component);
            if (!fiber) {
              return false;
            }
            return getNearestMountedFiber(fiber) === fiber;
          }
          function assertIsMounted(fiber) {
            if (getNearestMountedFiber(fiber) !== fiber) {
              throw new Error("Unable to find node on an unmounted component.");
            }
          }
          function findCurrentFiberUsingSlowPath(fiber) {
            var alternate = fiber.alternate;
            if (!alternate) {
              var nearestMounted = getNearestMountedFiber(fiber);
              if (nearestMounted === null) {
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (nearestMounted !== fiber) {
                return null;
              }
              return fiber;
            }
            var a = fiber;
            var b = alternate;
            while (true) {
              var parentA = a.return;
              if (parentA === null) {
                break;
              }
              var parentB = parentA.alternate;
              if (parentB === null) {
                var nextParent = parentA.return;
                if (nextParent !== null) {
                  a = b = nextParent;
                  continue;
                }
                break;
              }
              if (parentA.child === parentB.child) {
                var child = parentA.child;
                while (child) {
                  if (child === a) {
                    assertIsMounted(parentA);
                    return fiber;
                  }
                  if (child === b) {
                    assertIsMounted(parentA);
                    return alternate;
                  }
                  child = child.sibling;
                }
                throw new Error("Unable to find node on an unmounted component.");
              }
              if (a.return !== b.return) {
                a = parentA;
                b = parentB;
              } else {
                var didFindChild = false;
                var _child = parentA.child;
                while (_child) {
                  if (_child === a) {
                    didFindChild = true;
                    a = parentA;
                    b = parentB;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentA;
                    a = parentB;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  _child = parentB.child;
                  while (_child) {
                    if (_child === a) {
                      didFindChild = true;
                      a = parentB;
                      b = parentA;
                      break;
                    }
                    if (_child === b) {
                      didFindChild = true;
                      b = parentB;
                      a = parentA;
                      break;
                    }
                    _child = _child.sibling;
                  }
                  if (!didFindChild) {
                    throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                  }
                }
              }
              if (a.alternate !== b) {
                throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (a.tag !== HostRoot) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a.stateNode.current === a) {
              return fiber;
            }
            return alternate;
          }
          function findCurrentHostFiber(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
          }
          function findCurrentHostFiberImpl(node2) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            }
            var child = node2.child;
            while (child !== null) {
              var match2 = findCurrentHostFiberImpl(child);
              if (match2 !== null) {
                return match2;
              }
              child = child.sibling;
            }
            return null;
          }
          function findCurrentHostFiberWithNoPortals(parent) {
            var currentParent = findCurrentFiberUsingSlowPath(parent);
            return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
          }
          function findCurrentHostFiberWithNoPortalsImpl(node2) {
            if (node2.tag === HostComponent || node2.tag === HostText) {
              return node2;
            }
            var child = node2.child;
            while (child !== null) {
              if (child.tag !== HostPortal) {
                var match2 = findCurrentHostFiberWithNoPortalsImpl(child);
                if (match2 !== null) {
                  return match2;
                }
              }
              child = child.sibling;
            }
            return null;
          }
          var scheduleCallback = Scheduler.unstable_scheduleCallback;
          var cancelCallback = Scheduler.unstable_cancelCallback;
          var shouldYield = Scheduler.unstable_shouldYield;
          var requestPaint = Scheduler.unstable_requestPaint;
          var now2 = Scheduler.unstable_now;
          var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
          var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
          var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
          var NormalPriority = Scheduler.unstable_NormalPriority;
          var LowPriority = Scheduler.unstable_LowPriority;
          var IdlePriority = Scheduler.unstable_IdlePriority;
          var unstable_yieldValue = Scheduler.unstable_yieldValue;
          var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
          var rendererID = null;
          var injectedHook = null;
          var injectedProfilingHooks = null;
          var hasLoggedError = false;
          var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
          function injectInternals(internals) {
            if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
              return false;
            }
            var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
            if (hook.isDisabled) {
              return true;
            }
            if (!hook.supportsFiber) {
              {
                error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
              }
              return true;
            }
            try {
              if (enableSchedulingProfiler) {
                internals = assign2({}, internals, {
                  getLaneLabelMap,
                  injectProfilingHooks
                });
              }
              rendererID = hook.inject(internals);
              injectedHook = hook;
            } catch (err) {
              {
                error("React instrumentation encountered an error: %s.", err);
              }
            }
            if (hook.checkDCE) {
              return true;
            } else {
              return false;
            }
          }
          function onScheduleRoot(root2, children) {
            {
              if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
                try {
                  injectedHook.onScheduleFiberRoot(rendererID, root2, children);
                } catch (err) {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitRoot(root2, eventPriority) {
            if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
              try {
                var didError = (root2.current.flags & DidCapture) === DidCapture;
                if (enableProfilerTimer) {
                  var schedulerPriority;
                  switch (eventPriority) {
                    case DiscreteEventPriority:
                      schedulerPriority = ImmediatePriority;
                      break;
                    case ContinuousEventPriority:
                      schedulerPriority = UserBlockingPriority;
                      break;
                    case DefaultEventPriority:
                      schedulerPriority = NormalPriority;
                      break;
                    case IdleEventPriority:
                      schedulerPriority = IdlePriority;
                      break;
                    default:
                      schedulerPriority = NormalPriority;
                      break;
                  }
                  injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
                } else {
                  injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
                }
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onPostCommitRoot(root2) {
            if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
              try {
                injectedHook.onPostCommitFiberRoot(rendererID, root2);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function onCommitUnmount(fiber) {
            if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
              try {
                injectedHook.onCommitFiberUnmount(rendererID, fiber);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
          function setIsStrictModeForDevtools(newIsStrictMode) {
            {
              if (typeof unstable_yieldValue === "function") {
                unstable_setDisableYieldValue(newIsStrictMode);
                setSuppressWarning(newIsStrictMode);
              }
              if (injectedHook && typeof injectedHook.setStrictMode === "function") {
                try {
                  injectedHook.setStrictMode(rendererID, newIsStrictMode);
                } catch (err) {
                  {
                    if (!hasLoggedError) {
                      hasLoggedError = true;
                      error("React instrumentation encountered an error: %s", err);
                    }
                  }
                }
              }
            }
          }
          function injectProfilingHooks(profilingHooks) {
            injectedProfilingHooks = profilingHooks;
          }
          function getLaneLabelMap() {
            {
              var map = /* @__PURE__ */ new Map();
              var lane = 1;
              for (var index4 = 0; index4 < TotalLanes; index4++) {
                var label = getLabelForLane(lane);
                map.set(lane, label);
                lane *= 2;
              }
              return map;
            }
          }
          function markCommitStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
                injectedProfilingHooks.markCommitStarted(lanes);
              }
            }
          }
          function markCommitStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
                injectedProfilingHooks.markCommitStopped();
              }
            }
          }
          function markComponentRenderStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
                injectedProfilingHooks.markComponentRenderStarted(fiber);
              }
            }
          }
          function markComponentRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
                injectedProfilingHooks.markComponentRenderStopped();
              }
            }
          }
          function markComponentPassiveEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectMountStopped();
              }
            }
          }
          function markComponentPassiveEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentPassiveEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
              }
            }
          }
          function markComponentLayoutEffectMountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectMountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectMountStopped();
              }
            }
          }
          function markComponentLayoutEffectUnmountStarted(fiber) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
              }
            }
          }
          function markComponentLayoutEffectUnmountStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
                injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
              }
            }
          }
          function markComponentErrored(fiber, thrownValue, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
                injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
              }
            }
          }
          function markComponentSuspended(fiber, wakeable, lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
                injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
              }
            }
          }
          function markLayoutEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
                injectedProfilingHooks.markLayoutEffectsStarted(lanes);
              }
            }
          }
          function markLayoutEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
                injectedProfilingHooks.markLayoutEffectsStopped();
              }
            }
          }
          function markPassiveEffectsStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
                injectedProfilingHooks.markPassiveEffectsStarted(lanes);
              }
            }
          }
          function markPassiveEffectsStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
                injectedProfilingHooks.markPassiveEffectsStopped();
              }
            }
          }
          function markRenderStarted(lanes) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
                injectedProfilingHooks.markRenderStarted(lanes);
              }
            }
          }
          function markRenderYielded() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
                injectedProfilingHooks.markRenderYielded();
              }
            }
          }
          function markRenderStopped() {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
                injectedProfilingHooks.markRenderStopped();
              }
            }
          }
          function markRenderScheduled(lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
                injectedProfilingHooks.markRenderScheduled(lane);
              }
            }
          }
          function markForceUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
                injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
              }
            }
          }
          function markStateUpdateScheduled(fiber, lane) {
            {
              if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
                injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
              }
            }
          }
          var NoMode = (
            /*                         */
            0
          );
          var ConcurrentMode = (
            /*                 */
            1
          );
          var ProfileMode = (
            /*                    */
            2
          );
          var StrictLegacyMode = (
            /*               */
            8
          );
          var StrictEffectsMode = (
            /*              */
            16
          );
          var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
          var log = Math.log;
          var LN2 = Math.LN2;
          function clz32Fallback(x) {
            var asUint = x >>> 0;
            if (asUint === 0) {
              return 32;
            }
            return 31 - (log(asUint) / LN2 | 0) | 0;
          }
          var TotalLanes = 31;
          var NoLanes = (
            /*                        */
            0
          );
          var NoLane = (
            /*                          */
            0
          );
          var SyncLane = (
            /*                        */
            1
          );
          var InputContinuousHydrationLane = (
            /*    */
            2
          );
          var InputContinuousLane = (
            /*             */
            4
          );
          var DefaultHydrationLane = (
            /*            */
            8
          );
          var DefaultLane = (
            /*                     */
            16
          );
          var TransitionHydrationLane = (
            /*                */
            32
          );
          var TransitionLanes = (
            /*                       */
            4194240
          );
          var TransitionLane1 = (
            /*                        */
            64
          );
          var TransitionLane2 = (
            /*                        */
            128
          );
          var TransitionLane3 = (
            /*                        */
            256
          );
          var TransitionLane4 = (
            /*                        */
            512
          );
          var TransitionLane5 = (
            /*                        */
            1024
          );
          var TransitionLane6 = (
            /*                        */
            2048
          );
          var TransitionLane7 = (
            /*                        */
            4096
          );
          var TransitionLane8 = (
            /*                        */
            8192
          );
          var TransitionLane9 = (
            /*                        */
            16384
          );
          var TransitionLane10 = (
            /*                       */
            32768
          );
          var TransitionLane11 = (
            /*                       */
            65536
          );
          var TransitionLane12 = (
            /*                       */
            131072
          );
          var TransitionLane13 = (
            /*                       */
            262144
          );
          var TransitionLane14 = (
            /*                       */
            524288
          );
          var TransitionLane15 = (
            /*                       */
            1048576
          );
          var TransitionLane16 = (
            /*                       */
            2097152
          );
          var RetryLanes = (
            /*                            */
            130023424
          );
          var RetryLane1 = (
            /*                             */
            4194304
          );
          var RetryLane2 = (
            /*                             */
            8388608
          );
          var RetryLane3 = (
            /*                             */
            16777216
          );
          var RetryLane4 = (
            /*                             */
            33554432
          );
          var RetryLane5 = (
            /*                             */
            67108864
          );
          var SomeRetryLane = RetryLane1;
          var SelectiveHydrationLane = (
            /*          */
            134217728
          );
          var NonIdleLanes = (
            /*                          */
            268435455
          );
          var IdleHydrationLane = (
            /*               */
            268435456
          );
          var IdleLane = (
            /*                        */
            536870912
          );
          var OffscreenLane = (
            /*                   */
            1073741824
          );
          function getLabelForLane(lane) {
            {
              if (lane & SyncLane) {
                return "Sync";
              }
              if (lane & InputContinuousHydrationLane) {
                return "InputContinuousHydration";
              }
              if (lane & InputContinuousLane) {
                return "InputContinuous";
              }
              if (lane & DefaultHydrationLane) {
                return "DefaultHydration";
              }
              if (lane & DefaultLane) {
                return "Default";
              }
              if (lane & TransitionHydrationLane) {
                return "TransitionHydration";
              }
              if (lane & TransitionLanes) {
                return "Transition";
              }
              if (lane & RetryLanes) {
                return "Retry";
              }
              if (lane & SelectiveHydrationLane) {
                return "SelectiveHydration";
              }
              if (lane & IdleHydrationLane) {
                return "IdleHydration";
              }
              if (lane & IdleLane) {
                return "Idle";
              }
              if (lane & OffscreenLane) {
                return "Offscreen";
              }
            }
          }
          var NoTimestamp = -1;
          var nextTransitionLane = TransitionLane1;
          var nextRetryLane = RetryLane1;
          function getHighestPriorityLanes(lanes) {
            switch (getHighestPriorityLane(lanes)) {
              case SyncLane:
                return SyncLane;
              case InputContinuousHydrationLane:
                return InputContinuousHydrationLane;
              case InputContinuousLane:
                return InputContinuousLane;
              case DefaultHydrationLane:
                return DefaultHydrationLane;
              case DefaultLane:
                return DefaultLane;
              case TransitionHydrationLane:
                return TransitionHydrationLane;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return lanes & TransitionLanes;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return lanes & RetryLanes;
              case SelectiveHydrationLane:
                return SelectiveHydrationLane;
              case IdleHydrationLane:
                return IdleHydrationLane;
              case IdleLane:
                return IdleLane;
              case OffscreenLane:
                return OffscreenLane;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return lanes;
            }
          }
          function getNextLanes(root2, wipLanes) {
            var pendingLanes = root2.pendingLanes;
            if (pendingLanes === NoLanes) {
              return NoLanes;
            }
            var nextLanes = NoLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
            if (nonIdlePendingLanes !== NoLanes) {
              var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
              if (nonIdleUnblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
              } else {
                var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
                if (nonIdlePingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
                }
              }
            } else {
              var unblockedLanes = pendingLanes & ~suspendedLanes;
              if (unblockedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(unblockedLanes);
              } else {
                if (pingedLanes !== NoLanes) {
                  nextLanes = getHighestPriorityLanes(pingedLanes);
                }
              }
            }
            if (nextLanes === NoLanes) {
              return NoLanes;
            }
            if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
            // bother waiting until the root is complete.
            (wipLanes & suspendedLanes) === NoLanes) {
              var nextLane = getHighestPriorityLane(nextLanes);
              var wipLane = getHighestPriorityLane(wipLanes);
              if (
                // Tests whether the next lane is equal or lower priority than the wip
                // one. This works because the bits decrease in priority as you go left.
                nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
                // only difference between default updates and transition updates is that
                // default updates do not support refresh transitions.
                nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
              ) {
                return wipLanes;
              }
            }
            if ((nextLanes & InputContinuousLane) !== NoLanes) {
              nextLanes |= pendingLanes & DefaultLane;
            }
            var entangledLanes = root2.entangledLanes;
            if (entangledLanes !== NoLanes) {
              var entanglements = root2.entanglements;
              var lanes = nextLanes & entangledLanes;
              while (lanes > 0) {
                var index4 = pickArbitraryLaneIndex(lanes);
                var lane = 1 << index4;
                nextLanes |= entanglements[index4];
                lanes &= ~lane;
              }
            }
            return nextLanes;
          }
          function getMostRecentEventTime(root2, lanes) {
            var eventTimes = root2.eventTimes;
            var mostRecentEventTime = NoTimestamp;
            while (lanes > 0) {
              var index4 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index4;
              var eventTime = eventTimes[index4];
              if (eventTime > mostRecentEventTime) {
                mostRecentEventTime = eventTime;
              }
              lanes &= ~lane;
            }
            return mostRecentEventTime;
          }
          function computeExpirationTime(lane, currentTime) {
            switch (lane) {
              case SyncLane:
              case InputContinuousHydrationLane:
              case InputContinuousLane:
                return currentTime + 250;
              case DefaultHydrationLane:
              case DefaultLane:
              case TransitionHydrationLane:
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
                return currentTime + 5e3;
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                return NoTimestamp;
              case SelectiveHydrationLane:
              case IdleHydrationLane:
              case IdleLane:
              case OffscreenLane:
                return NoTimestamp;
              default:
                {
                  error("Should have found matching lanes. This is a bug in React.");
                }
                return NoTimestamp;
            }
          }
          function markStarvedLanesAsExpired(root2, currentTime) {
            var pendingLanes = root2.pendingLanes;
            var suspendedLanes = root2.suspendedLanes;
            var pingedLanes = root2.pingedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = pendingLanes;
            while (lanes > 0) {
              var index4 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index4;
              var expirationTime = expirationTimes[index4];
              if (expirationTime === NoTimestamp) {
                if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                  expirationTimes[index4] = computeExpirationTime(lane, currentTime);
                }
              } else if (expirationTime <= currentTime) {
                root2.expiredLanes |= lane;
              }
              lanes &= ~lane;
            }
          }
          function getHighestPriorityPendingLanes(root2) {
            return getHighestPriorityLanes(root2.pendingLanes);
          }
          function getLanesToRetrySynchronouslyOnError(root2) {
            var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
            if (everythingButOffscreen !== NoLanes) {
              return everythingButOffscreen;
            }
            if (everythingButOffscreen & OffscreenLane) {
              return OffscreenLane;
            }
            return NoLanes;
          }
          function includesSyncLane(lanes) {
            return (lanes & SyncLane) !== NoLanes;
          }
          function includesNonIdleWork(lanes) {
            return (lanes & NonIdleLanes) !== NoLanes;
          }
          function includesOnlyRetries(lanes) {
            return (lanes & RetryLanes) === lanes;
          }
          function includesOnlyNonUrgentLanes(lanes) {
            var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
            return (lanes & UrgentLanes) === NoLanes;
          }
          function includesOnlyTransitions(lanes) {
            return (lanes & TransitionLanes) === lanes;
          }
          function includesBlockingLane(root2, lanes) {
            var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
            return (lanes & SyncDefaultLanes) !== NoLanes;
          }
          function includesExpiredLane(root2, lanes) {
            return (lanes & root2.expiredLanes) !== NoLanes;
          }
          function isTransitionLane(lane) {
            return (lane & TransitionLanes) !== NoLanes;
          }
          function claimNextTransitionLane() {
            var lane = nextTransitionLane;
            nextTransitionLane <<= 1;
            if ((nextTransitionLane & TransitionLanes) === NoLanes) {
              nextTransitionLane = TransitionLane1;
            }
            return lane;
          }
          function claimNextRetryLane() {
            var lane = nextRetryLane;
            nextRetryLane <<= 1;
            if ((nextRetryLane & RetryLanes) === NoLanes) {
              nextRetryLane = RetryLane1;
            }
            return lane;
          }
          function getHighestPriorityLane(lanes) {
            return lanes & -lanes;
          }
          function pickArbitraryLane(lanes) {
            return getHighestPriorityLane(lanes);
          }
          function pickArbitraryLaneIndex(lanes) {
            return 31 - clz32(lanes);
          }
          function laneToIndex(lane) {
            return pickArbitraryLaneIndex(lane);
          }
          function includesSomeLane(a, b) {
            return (a & b) !== NoLanes;
          }
          function isSubsetOfLanes(set2, subset) {
            return (set2 & subset) === subset;
          }
          function mergeLanes(a, b) {
            return a | b;
          }
          function removeLanes(set2, subset) {
            return set2 & ~subset;
          }
          function intersectLanes(a, b) {
            return a & b;
          }
          function laneToLanes(lane) {
            return lane;
          }
          function higherPriorityLane(a, b) {
            return a !== NoLane && a < b ? a : b;
          }
          function createLaneMap(initial) {
            var laneMap = [];
            for (var i = 0; i < TotalLanes; i++) {
              laneMap.push(initial);
            }
            return laneMap;
          }
          function markRootUpdated(root2, updateLane, eventTime) {
            root2.pendingLanes |= updateLane;
            if (updateLane !== IdleLane) {
              root2.suspendedLanes = NoLanes;
              root2.pingedLanes = NoLanes;
            }
            var eventTimes = root2.eventTimes;
            var index4 = laneToIndex(updateLane);
            eventTimes[index4] = eventTime;
          }
          function markRootSuspended(root2, suspendedLanes) {
            root2.suspendedLanes |= suspendedLanes;
            root2.pingedLanes &= ~suspendedLanes;
            var expirationTimes = root2.expirationTimes;
            var lanes = suspendedLanes;
            while (lanes > 0) {
              var index4 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index4;
              expirationTimes[index4] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootPinged(root2, pingedLanes, eventTime) {
            root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
          }
          function markRootFinished(root2, remainingLanes) {
            var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
            root2.pendingLanes = remainingLanes;
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
            root2.expiredLanes &= remainingLanes;
            root2.mutableReadLanes &= remainingLanes;
            root2.entangledLanes &= remainingLanes;
            var entanglements = root2.entanglements;
            var eventTimes = root2.eventTimes;
            var expirationTimes = root2.expirationTimes;
            var lanes = noLongerPendingLanes;
            while (lanes > 0) {
              var index4 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index4;
              entanglements[index4] = NoLanes;
              eventTimes[index4] = NoTimestamp;
              expirationTimes[index4] = NoTimestamp;
              lanes &= ~lane;
            }
          }
          function markRootEntangled(root2, entangledLanes) {
            var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
            var entanglements = root2.entanglements;
            var lanes = rootEntangledLanes;
            while (lanes) {
              var index4 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index4;
              if (
                // Is this one of the newly entangled lanes?
                lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
                entanglements[index4] & entangledLanes
              ) {
                entanglements[index4] |= entangledLanes;
              }
              lanes &= ~lane;
            }
          }
          function getBumpedLaneForHydration(root2, renderLanes2) {
            var renderLane = getHighestPriorityLane(renderLanes2);
            var lane;
            switch (renderLane) {
              case InputContinuousLane:
                lane = InputContinuousHydrationLane;
                break;
              case DefaultLane:
                lane = DefaultHydrationLane;
                break;
              case TransitionLane1:
              case TransitionLane2:
              case TransitionLane3:
              case TransitionLane4:
              case TransitionLane5:
              case TransitionLane6:
              case TransitionLane7:
              case TransitionLane8:
              case TransitionLane9:
              case TransitionLane10:
              case TransitionLane11:
              case TransitionLane12:
              case TransitionLane13:
              case TransitionLane14:
              case TransitionLane15:
              case TransitionLane16:
              case RetryLane1:
              case RetryLane2:
              case RetryLane3:
              case RetryLane4:
              case RetryLane5:
                lane = TransitionHydrationLane;
                break;
              case IdleLane:
                lane = IdleHydrationLane;
                break;
              default:
                lane = NoLane;
                break;
            }
            if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
              return NoLane;
            }
            return lane;
          }
          function addFiberToLanesMap(root2, fiber, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            while (lanes > 0) {
              var index4 = laneToIndex(lanes);
              var lane = 1 << index4;
              var updaters = pendingUpdatersLaneMap[index4];
              updaters.add(fiber);
              lanes &= ~lane;
            }
          }
          function movePendingFibersToMemoized(root2, lanes) {
            if (!isDevToolsPresent) {
              return;
            }
            var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
            var memoizedUpdaters = root2.memoizedUpdaters;
            while (lanes > 0) {
              var index4 = laneToIndex(lanes);
              var lane = 1 << index4;
              var updaters = pendingUpdatersLaneMap[index4];
              if (updaters.size > 0) {
                updaters.forEach(function(fiber) {
                  var alternate = fiber.alternate;
                  if (alternate === null || !memoizedUpdaters.has(alternate)) {
                    memoizedUpdaters.add(fiber);
                  }
                });
                updaters.clear();
              }
              lanes &= ~lane;
            }
          }
          function getTransitionsForLanes(root2, lanes) {
            {
              return null;
            }
          }
          var DiscreteEventPriority = SyncLane;
          var ContinuousEventPriority = InputContinuousLane;
          var DefaultEventPriority = DefaultLane;
          var IdleEventPriority = IdleLane;
          var currentUpdatePriority = NoLane;
          function getCurrentUpdatePriority() {
            return currentUpdatePriority;
          }
          function setCurrentUpdatePriority(newPriority) {
            currentUpdatePriority = newPriority;
          }
          function runWithPriority(priority, fn2) {
            var previousPriority = currentUpdatePriority;
            try {
              currentUpdatePriority = priority;
              return fn2();
            } finally {
              currentUpdatePriority = previousPriority;
            }
          }
          function higherEventPriority(a, b) {
            return a !== 0 && a < b ? a : b;
          }
          function lowerEventPriority(a, b) {
            return a === 0 || a > b ? a : b;
          }
          function isHigherEventPriority(a, b) {
            return a !== 0 && a < b;
          }
          function lanesToEventPriority(lanes) {
            var lane = getHighestPriorityLane(lanes);
            if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
              return DiscreteEventPriority;
            }
            if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
              return ContinuousEventPriority;
            }
            if (includesNonIdleWork(lane)) {
              return DefaultEventPriority;
            }
            return IdleEventPriority;
          }
          function isRootDehydrated(root2) {
            var currentState = root2.current.memoizedState;
            return currentState.isDehydrated;
          }
          var _attemptSynchronousHydration;
          function setAttemptSynchronousHydration(fn2) {
            _attemptSynchronousHydration = fn2;
          }
          function attemptSynchronousHydration(fiber) {
            _attemptSynchronousHydration(fiber);
          }
          var attemptContinuousHydration;
          function setAttemptContinuousHydration(fn2) {
            attemptContinuousHydration = fn2;
          }
          var attemptHydrationAtCurrentPriority;
          function setAttemptHydrationAtCurrentPriority(fn2) {
            attemptHydrationAtCurrentPriority = fn2;
          }
          var getCurrentUpdatePriority$1;
          function setGetCurrentUpdatePriority(fn2) {
            getCurrentUpdatePriority$1 = fn2;
          }
          var attemptHydrationAtPriority;
          function setAttemptHydrationAtPriority(fn2) {
            attemptHydrationAtPriority = fn2;
          }
          var hasScheduledReplayAttempt = false;
          var queuedDiscreteEvents = [];
          var queuedFocus = null;
          var queuedDrag = null;
          var queuedMouse = null;
          var queuedPointers = /* @__PURE__ */ new Map();
          var queuedPointerCaptures = /* @__PURE__ */ new Map();
          var queuedExplicitHydrationTargets = [];
          var discreteReplayableEvents = [
            "mousedown",
            "mouseup",
            "touchcancel",
            "touchend",
            "touchstart",
            "auxclick",
            "dblclick",
            "pointercancel",
            "pointerdown",
            "pointerup",
            "dragend",
            "dragstart",
            "drop",
            "compositionend",
            "compositionstart",
            "keydown",
            "keypress",
            "keyup",
            "input",
            "textInput",
            // Intentionally camelCase
            "copy",
            "cut",
            "paste",
            "click",
            "change",
            "contextmenu",
            "reset",
            "submit"
          ];
          function isDiscreteEventThatRequiresHydration(eventType) {
            return discreteReplayableEvents.indexOf(eventType) > -1;
          }
          function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return {
              blockedOn,
              domEventName,
              eventSystemFlags,
              nativeEvent,
              targetContainers: [targetContainer]
            };
          }
          function clearIfContinuousEvent(domEventName, nativeEvent) {
            switch (domEventName) {
              case "focusin":
              case "focusout":
                queuedFocus = null;
                break;
              case "dragenter":
              case "dragleave":
                queuedDrag = null;
                break;
              case "mouseover":
              case "mouseout":
                queuedMouse = null;
                break;
              case "pointerover":
              case "pointerout": {
                var pointerId = nativeEvent.pointerId;
                queuedPointers.delete(pointerId);
                break;
              }
              case "gotpointercapture":
              case "lostpointercapture": {
                var _pointerId = nativeEvent.pointerId;
                queuedPointerCaptures.delete(_pointerId);
                break;
              }
            }
          }
          function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
              var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (blockedOn !== null) {
                var _fiber2 = getInstanceFromNode(blockedOn);
                if (_fiber2 !== null) {
                  attemptContinuousHydration(_fiber2);
                }
              }
              return queuedEvent;
            }
            existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
            var targetContainers = existingQueuedEvent.targetContainers;
            if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
              targetContainers.push(targetContainer);
            }
            return existingQueuedEvent;
          }
          function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            switch (domEventName) {
              case "focusin": {
                var focusEvent = nativeEvent;
                queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
                return true;
              }
              case "dragenter": {
                var dragEvent = nativeEvent;
                queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
                return true;
              }
              case "mouseover": {
                var mouseEvent = nativeEvent;
                queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
                return true;
              }
              case "pointerover": {
                var pointerEvent = nativeEvent;
                var pointerId = pointerEvent.pointerId;
                queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
                return true;
              }
              case "gotpointercapture": {
                var _pointerEvent = nativeEvent;
                var _pointerId2 = _pointerEvent.pointerId;
                queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
                return true;
              }
            }
            return false;
          }
          function attemptExplicitHydrationTarget(queuedTarget) {
            var targetInst = getClosestInstanceFromNode(queuedTarget.target);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted !== null) {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    queuedTarget.blockedOn = instance;
                    attemptHydrationAtPriority(queuedTarget.priority, function() {
                      attemptHydrationAtCurrentPriority(nearestMounted);
                    });
                    return;
                  }
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                    return;
                  }
                }
              }
            }
            queuedTarget.blockedOn = null;
          }
          function queueExplicitHydrationTarget(target) {
            var updatePriority = getCurrentUpdatePriority$1();
            var queuedTarget = {
              blockedOn: null,
              target,
              priority: updatePriority
            };
            var i = 0;
            for (; i < queuedExplicitHydrationTargets.length; i++) {
              if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
                break;
              }
            }
            queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
            if (i === 0) {
              attemptExplicitHydrationTarget(queuedTarget);
            }
          }
          function attemptReplayContinuousQueuedEvent(queuedEvent) {
            if (queuedEvent.blockedOn !== null) {
              return false;
            }
            var targetContainers = queuedEvent.targetContainers;
            while (targetContainers.length > 0) {
              var targetContainer = targetContainers[0];
              var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
              if (nextBlockedOn === null) {
                {
                  var nativeEvent = queuedEvent.nativeEvent;
                  var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                  setReplayingEvent(nativeEventClone);
                  nativeEvent.target.dispatchEvent(nativeEventClone);
                  resetReplayingEvent();
                }
              } else {
                var _fiber3 = getInstanceFromNode(nextBlockedOn);
                if (_fiber3 !== null) {
                  attemptContinuousHydration(_fiber3);
                }
                queuedEvent.blockedOn = nextBlockedOn;
                return false;
              }
              targetContainers.shift();
            }
            return true;
          }
          function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
            if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
              map.delete(key);
            }
          }
          function replayUnblockedEvents() {
            hasScheduledReplayAttempt = false;
            if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
              queuedFocus = null;
            }
            if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
              queuedDrag = null;
            }
            if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
              queuedMouse = null;
            }
            queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
            queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
          }
          function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null;
              if (!hasScheduledReplayAttempt) {
                hasScheduledReplayAttempt = true;
                Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
              }
            }
          }
          function retryIfBlockedOn(unblocked) {
            if (queuedDiscreteEvents.length > 0) {
              scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
              for (var i = 1; i < queuedDiscreteEvents.length; i++) {
                var queuedEvent = queuedDiscreteEvents[i];
                if (queuedEvent.blockedOn === unblocked) {
                  queuedEvent.blockedOn = null;
                }
              }
            }
            if (queuedFocus !== null) {
              scheduleCallbackIfUnblocked(queuedFocus, unblocked);
            }
            if (queuedDrag !== null) {
              scheduleCallbackIfUnblocked(queuedDrag, unblocked);
            }
            if (queuedMouse !== null) {
              scheduleCallbackIfUnblocked(queuedMouse, unblocked);
            }
            var unblock = function(queuedEvent2) {
              return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
            };
            queuedPointers.forEach(unblock);
            queuedPointerCaptures.forEach(unblock);
            for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
              var queuedTarget = queuedExplicitHydrationTargets[_i];
              if (queuedTarget.blockedOn === unblocked) {
                queuedTarget.blockedOn = null;
              }
            }
            while (queuedExplicitHydrationTargets.length > 0) {
              var nextExplicitTarget = queuedExplicitHydrationTargets[0];
              if (nextExplicitTarget.blockedOn !== null) {
                break;
              } else {
                attemptExplicitHydrationTarget(nextExplicitTarget);
                if (nextExplicitTarget.blockedOn === null) {
                  queuedExplicitHydrationTargets.shift();
                }
              }
            }
          }
          var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
          var _enabled = true;
          function setEnabled(enabled) {
            _enabled = !!enabled;
          }
          function isEnabled() {
            return _enabled;
          }
          function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
            var eventPriority = getEventPriority(domEventName);
            var listenerWrapper;
            switch (eventPriority) {
              case DiscreteEventPriority:
                listenerWrapper = dispatchDiscreteEvent;
                break;
              case ContinuousEventPriority:
                listenerWrapper = dispatchContinuousEvent;
                break;
              case DefaultEventPriority:
              default:
                listenerWrapper = dispatchEvent;
                break;
            }
            return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
          }
          function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(DiscreteEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = null;
            try {
              setCurrentUpdatePriority(ContinuousEventPriority);
              dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig.transition = prevTransition;
            }
          }
          function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            if (!_enabled) {
              return;
            }
            {
              dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            }
          }
          function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn === null) {
              dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              clearIfContinuousEvent(domEventName, nativeEvent);
              return;
            }
            if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
              nativeEvent.stopPropagation();
              return;
            }
            clearIfContinuousEvent(domEventName, nativeEvent);
            if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
              while (blockedOn !== null) {
                var fiber = getInstanceFromNode(blockedOn);
                if (fiber !== null) {
                  attemptSynchronousHydration(fiber);
                }
                var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
                if (nextBlockedOn === null) {
                  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
                }
                if (nextBlockedOn === blockedOn) {
                  break;
                }
                blockedOn = nextBlockedOn;
              }
              if (blockedOn !== null) {
                nativeEvent.stopPropagation();
              }
              return;
            }
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
          }
          var return_targetInst = null;
          function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
            return_targetInst = null;
            var nativeEventTarget = getEventTarget(nativeEvent);
            var targetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (targetInst !== null) {
              var nearestMounted = getNearestMountedFiber(targetInst);
              if (nearestMounted === null) {
                targetInst = null;
              } else {
                var tag = nearestMounted.tag;
                if (tag === SuspenseComponent) {
                  var instance = getSuspenseInstanceFromFiber(nearestMounted);
                  if (instance !== null) {
                    return instance;
                  }
                  targetInst = null;
                } else if (tag === HostRoot) {
                  var root2 = nearestMounted.stateNode;
                  if (isRootDehydrated(root2)) {
                    return getContainerFromFiber(nearestMounted);
                  }
                  targetInst = null;
                } else if (nearestMounted !== targetInst) {
                  targetInst = null;
                }
              }
            }
            return_targetInst = targetInst;
            return null;
          }
          function getEventPriority(domEventName) {
            switch (domEventName) {
              case "cancel":
              case "click":
              case "close":
              case "contextmenu":
              case "copy":
              case "cut":
              case "auxclick":
              case "dblclick":
              case "dragend":
              case "dragstart":
              case "drop":
              case "focusin":
              case "focusout":
              case "input":
              case "invalid":
              case "keydown":
              case "keypress":
              case "keyup":
              case "mousedown":
              case "mouseup":
              case "paste":
              case "pause":
              case "play":
              case "pointercancel":
              case "pointerdown":
              case "pointerup":
              case "ratechange":
              case "reset":
              case "resize":
              case "seeked":
              case "submit":
              case "touchcancel":
              case "touchend":
              case "touchstart":
              case "volumechange":
              case "change":
              case "selectionchange":
              case "textInput":
              case "compositionstart":
              case "compositionend":
              case "compositionupdate":
              case "beforeblur":
              case "afterblur":
              case "beforeinput":
              case "blur":
              case "fullscreenchange":
              case "focus":
              case "hashchange":
              case "popstate":
              case "select":
              case "selectstart":
                return DiscreteEventPriority;
              case "drag":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "mousemove":
              case "mouseout":
              case "mouseover":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "scroll":
              case "toggle":
              case "touchmove":
              case "wheel":
              case "mouseenter":
              case "mouseleave":
              case "pointerenter":
              case "pointerleave":
                return ContinuousEventPriority;
              case "message": {
                var schedulerPriority = getCurrentPriorityLevel();
                switch (schedulerPriority) {
                  case ImmediatePriority:
                    return DiscreteEventPriority;
                  case UserBlockingPriority:
                    return ContinuousEventPriority;
                  case NormalPriority:
                  case LowPriority:
                    return DefaultEventPriority;
                  case IdlePriority:
                    return IdleEventPriority;
                  default:
                    return DefaultEventPriority;
                }
              }
              default:
                return DefaultEventPriority;
            }
          }
          function addEventBubbleListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, false);
            return listener;
          }
          function addEventCaptureListener(target, eventType, listener) {
            target.addEventListener(eventType, listener, true);
            return listener;
          }
          function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive2) {
            target.addEventListener(eventType, listener, {
              capture: true,
              passive: passive2
            });
            return listener;
          }
          function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive2) {
            target.addEventListener(eventType, listener, {
              passive: passive2
            });
            return listener;
          }
          var root = null;
          var startText = null;
          var fallbackText = null;
          function initialize(nativeEventTarget) {
            root = nativeEventTarget;
            startText = getText();
            return true;
          }
          function reset() {
            root = null;
            startText = null;
            fallbackText = null;
          }
          function getData() {
            if (fallbackText) {
              return fallbackText;
            }
            var start2;
            var startValue = startText;
            var startLength = startValue.length;
            var end2;
            var endValue = getText();
            var endLength = endValue.length;
            for (start2 = 0; start2 < startLength; start2++) {
              if (startValue[start2] !== endValue[start2]) {
                break;
              }
            }
            var minEnd = startLength - start2;
            for (end2 = 1; end2 <= minEnd; end2++) {
              if (startValue[startLength - end2] !== endValue[endLength - end2]) {
                break;
              }
            }
            var sliceTail = end2 > 1 ? 1 - end2 : void 0;
            fallbackText = endValue.slice(start2, sliceTail);
            return fallbackText;
          }
          function getText() {
            if ("value" in root) {
              return root.value;
            }
            return root.textContent;
          }
          function getEventCharCode(nativeEvent) {
            var charCode;
            var keyCode = nativeEvent.keyCode;
            if ("charCode" in nativeEvent) {
              charCode = nativeEvent.charCode;
              if (charCode === 0 && keyCode === 13) {
                charCode = 13;
              }
            } else {
              charCode = keyCode;
            }
            if (charCode === 10) {
              charCode = 13;
            }
            if (charCode >= 32 || charCode === 13) {
              return charCode;
            }
            return 0;
          }
          function functionThatReturnsTrue() {
            return true;
          }
          function functionThatReturnsFalse() {
            return false;
          }
          function createSyntheticEvent(Interface) {
            function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
              this._reactName = reactName;
              this._targetInst = targetInst;
              this.type = reactEventType;
              this.nativeEvent = nativeEvent;
              this.target = nativeEventTarget;
              this.currentTarget = null;
              for (var _propName in Interface) {
                if (!Interface.hasOwnProperty(_propName)) {
                  continue;
                }
                var normalize = Interface[_propName];
                if (normalize) {
                  this[_propName] = normalize(nativeEvent);
                } else {
                  this[_propName] = nativeEvent[_propName];
                }
              }
              var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
              if (defaultPrevented) {
                this.isDefaultPrevented = functionThatReturnsTrue;
              } else {
                this.isDefaultPrevented = functionThatReturnsFalse;
              }
              this.isPropagationStopped = functionThatReturnsFalse;
              return this;
            }
            assign2(SyntheticBaseEvent.prototype, {
              preventDefault: function() {
                this.defaultPrevented = true;
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.preventDefault) {
                  event.preventDefault();
                } else if (typeof event.returnValue !== "unknown") {
                  event.returnValue = false;
                }
                this.isDefaultPrevented = functionThatReturnsTrue;
              },
              stopPropagation: function() {
                var event = this.nativeEvent;
                if (!event) {
                  return;
                }
                if (event.stopPropagation) {
                  event.stopPropagation();
                } else if (typeof event.cancelBubble !== "unknown") {
                  event.cancelBubble = true;
                }
                this.isPropagationStopped = functionThatReturnsTrue;
              },
              /**
               * We release all dispatched `SyntheticEvent`s after each event loop, adding
               * them back into the pool. This allows a way to hold onto a reference that
               * won't be added back into the pool.
               */
              persist: function() {
              },
              /**
               * Checks if this event should be released back into the pool.
               *
               * @return {boolean} True if this should not be released, false otherwise.
               */
              isPersistent: functionThatReturnsTrue
            });
            return SyntheticBaseEvent;
          }
          var EventInterface = {
            eventPhase: 0,
            bubbles: 0,
            cancelable: 0,
            timeStamp: function(event) {
              return event.timeStamp || Date.now();
            },
            defaultPrevented: 0,
            isTrusted: 0
          };
          var SyntheticEvent = createSyntheticEvent(EventInterface);
          var UIEventInterface = assign2({}, EventInterface, {
            view: 0,
            detail: 0
          });
          var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
          var lastMovementX;
          var lastMovementY;
          var lastMouseEvent;
          function updateMouseMovementPolyfillState(event) {
            if (event !== lastMouseEvent) {
              if (lastMouseEvent && event.type === "mousemove") {
                lastMovementX = event.screenX - lastMouseEvent.screenX;
                lastMovementY = event.screenY - lastMouseEvent.screenY;
              } else {
                lastMovementX = 0;
                lastMovementY = 0;
              }
              lastMouseEvent = event;
            }
          }
          var MouseEventInterface = assign2({}, UIEventInterface, {
            screenX: 0,
            screenY: 0,
            clientX: 0,
            clientY: 0,
            pageX: 0,
            pageY: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            getModifierState: getEventModifierState,
            button: 0,
            buttons: 0,
            relatedTarget: function(event) {
              if (event.relatedTarget === void 0)
                return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
              return event.relatedTarget;
            },
            movementX: function(event) {
              if ("movementX" in event) {
                return event.movementX;
              }
              updateMouseMovementPolyfillState(event);
              return lastMovementX;
            },
            movementY: function(event) {
              if ("movementY" in event) {
                return event.movementY;
              }
              return lastMovementY;
            }
          });
          var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
          var DragEventInterface = assign2({}, MouseEventInterface, {
            dataTransfer: 0
          });
          var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
          var FocusEventInterface = assign2({}, UIEventInterface, {
            relatedTarget: 0
          });
          var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
          var AnimationEventInterface = assign2({}, EventInterface, {
            animationName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
          var ClipboardEventInterface = assign2({}, EventInterface, {
            clipboardData: function(event) {
              return "clipboardData" in event ? event.clipboardData : window.clipboardData;
            }
          });
          var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
          var CompositionEventInterface = assign2({}, EventInterface, {
            data: 0
          });
          var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
          var SyntheticInputEvent = SyntheticCompositionEvent;
          var normalizeKey = {
            Esc: "Escape",
            Spacebar: " ",
            Left: "ArrowLeft",
            Up: "ArrowUp",
            Right: "ArrowRight",
            Down: "ArrowDown",
            Del: "Delete",
            Win: "OS",
            Menu: "ContextMenu",
            Apps: "ContextMenu",
            Scroll: "ScrollLock",
            MozPrintableKey: "Unidentified"
          };
          var translateToKey = {
            "8": "Backspace",
            "9": "Tab",
            "12": "Clear",
            "13": "Enter",
            "16": "Shift",
            "17": "Control",
            "18": "Alt",
            "19": "Pause",
            "20": "CapsLock",
            "27": "Escape",
            "32": " ",
            "33": "PageUp",
            "34": "PageDown",
            "35": "End",
            "36": "Home",
            "37": "ArrowLeft",
            "38": "ArrowUp",
            "39": "ArrowRight",
            "40": "ArrowDown",
            "45": "Insert",
            "46": "Delete",
            "112": "F1",
            "113": "F2",
            "114": "F3",
            "115": "F4",
            "116": "F5",
            "117": "F6",
            "118": "F7",
            "119": "F8",
            "120": "F9",
            "121": "F10",
            "122": "F11",
            "123": "F12",
            "144": "NumLock",
            "145": "ScrollLock",
            "224": "Meta"
          };
          function getEventKey(nativeEvent) {
            if (nativeEvent.key) {
              var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
              if (key !== "Unidentified") {
                return key;
              }
            }
            if (nativeEvent.type === "keypress") {
              var charCode = getEventCharCode(nativeEvent);
              return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
            }
            if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
              return translateToKey[nativeEvent.keyCode] || "Unidentified";
            }
            return "";
          }
          var modifierKeyToProp = {
            Alt: "altKey",
            Control: "ctrlKey",
            Meta: "metaKey",
            Shift: "shiftKey"
          };
          function modifierStateGetter(keyArg) {
            var syntheticEvent = this;
            var nativeEvent = syntheticEvent.nativeEvent;
            if (nativeEvent.getModifierState) {
              return nativeEvent.getModifierState(keyArg);
            }
            var keyProp = modifierKeyToProp[keyArg];
            return keyProp ? !!nativeEvent[keyProp] : false;
          }
          function getEventModifierState(nativeEvent) {
            return modifierStateGetter;
          }
          var KeyboardEventInterface = assign2({}, UIEventInterface, {
            key: getEventKey,
            code: 0,
            location: 0,
            ctrlKey: 0,
            shiftKey: 0,
            altKey: 0,
            metaKey: 0,
            repeat: 0,
            locale: 0,
            getModifierState: getEventModifierState,
            // Legacy Interface
            charCode: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              return 0;
            },
            keyCode: function(event) {
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            },
            which: function(event) {
              if (event.type === "keypress") {
                return getEventCharCode(event);
              }
              if (event.type === "keydown" || event.type === "keyup") {
                return event.keyCode;
              }
              return 0;
            }
          });
          var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
          var PointerEventInterface = assign2({}, MouseEventInterface, {
            pointerId: 0,
            width: 0,
            height: 0,
            pressure: 0,
            tangentialPressure: 0,
            tiltX: 0,
            tiltY: 0,
            twist: 0,
            pointerType: 0,
            isPrimary: 0
          });
          var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
          var TouchEventInterface = assign2({}, UIEventInterface, {
            touches: 0,
            targetTouches: 0,
            changedTouches: 0,
            altKey: 0,
            metaKey: 0,
            ctrlKey: 0,
            shiftKey: 0,
            getModifierState: getEventModifierState
          });
          var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
          var TransitionEventInterface = assign2({}, EventInterface, {
            propertyName: 0,
            elapsedTime: 0,
            pseudoElement: 0
          });
          var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
          var WheelEventInterface = assign2({}, MouseEventInterface, {
            deltaX: function(event) {
              return "deltaX" in event ? event.deltaX : (
                // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
                "wheelDeltaX" in event ? -event.wheelDeltaX : 0
              );
            },
            deltaY: function(event) {
              return "deltaY" in event ? event.deltaY : (
                // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
                "wheelDeltaY" in event ? -event.wheelDeltaY : (
                  // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                  "wheelDelta" in event ? -event.wheelDelta : 0
                )
              );
            },
            deltaZ: 0,
            // Browsers without "deltaMode" is reporting in raw wheel delta where one
            // notch on the scroll is always +/- 120, roughly equivalent to pixels.
            // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
            // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
            deltaMode: 0
          });
          var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
          var END_KEYCODES = [9, 13, 27, 32];
          var START_KEYCODE = 229;
          var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
          var documentMode = null;
          if (canUseDOM && "documentMode" in document) {
            documentMode = document.documentMode;
          }
          var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
          var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
          var SPACEBAR_CODE = 32;
          var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
          function registerEvents() {
            registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
            registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
            registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          }
          var hasSpaceKeypress = false;
          function isKeypressCommand(nativeEvent) {
            return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
            !(nativeEvent.ctrlKey && nativeEvent.altKey);
          }
          function getCompositionEventType(domEventName) {
            switch (domEventName) {
              case "compositionstart":
                return "onCompositionStart";
              case "compositionend":
                return "onCompositionEnd";
              case "compositionupdate":
                return "onCompositionUpdate";
            }
          }
          function isFallbackCompositionStart(domEventName, nativeEvent) {
            return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
          }
          function isFallbackCompositionEnd(domEventName, nativeEvent) {
            switch (domEventName) {
              case "keyup":
                return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
              case "keydown":
                return nativeEvent.keyCode !== START_KEYCODE;
              case "keypress":
              case "mousedown":
              case "focusout":
                return true;
              default:
                return false;
            }
          }
          function getDataFromCustomEvent(nativeEvent) {
            var detail = nativeEvent.detail;
            if (typeof detail === "object" && "data" in detail) {
              return detail.data;
            }
            return null;
          }
          function isUsingKoreanIME(nativeEvent) {
            return nativeEvent.locale === "ko";
          }
          var isComposing = false;
          function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var eventType;
            var fallbackData;
            if (canUseCompositionEvent) {
              eventType = getCompositionEventType(domEventName);
            } else if (!isComposing) {
              if (isFallbackCompositionStart(domEventName, nativeEvent)) {
                eventType = "onCompositionStart";
              }
            } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
              eventType = "onCompositionEnd";
            }
            if (!eventType) {
              return null;
            }
            if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
              if (!isComposing && eventType === "onCompositionStart") {
                isComposing = initialize(nativeEventTarget);
              } else if (eventType === "onCompositionEnd") {
                if (isComposing) {
                  fallbackData = getData();
                }
              }
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
            if (listeners.length > 0) {
              var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              if (fallbackData) {
                event.data = fallbackData;
              } else {
                var customData = getDataFromCustomEvent(nativeEvent);
                if (customData !== null) {
                  event.data = customData;
                }
              }
            }
          }
          function getNativeBeforeInputChars(domEventName, nativeEvent) {
            switch (domEventName) {
              case "compositionend":
                return getDataFromCustomEvent(nativeEvent);
              case "keypress":
                var which = nativeEvent.which;
                if (which !== SPACEBAR_CODE) {
                  return null;
                }
                hasSpaceKeypress = true;
                return SPACEBAR_CHAR;
              case "textInput":
                var chars = nativeEvent.data;
                if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                  return null;
                }
                return chars;
              default:
                return null;
            }
          }
          function getFallbackBeforeInputChars(domEventName, nativeEvent) {
            if (isComposing) {
              if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
                var chars = getData();
                reset();
                isComposing = false;
                return chars;
              }
              return null;
            }
            switch (domEventName) {
              case "paste":
                return null;
              case "keypress":
                if (!isKeypressCommand(nativeEvent)) {
                  if (nativeEvent.char && nativeEvent.char.length > 1) {
                    return nativeEvent.char;
                  } else if (nativeEvent.which) {
                    return String.fromCharCode(nativeEvent.which);
                  }
                }
                return null;
              case "compositionend":
                return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
              default:
                return null;
            }
          }
          function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
            var chars;
            if (canUseTextInputEvent) {
              chars = getNativeBeforeInputChars(domEventName, nativeEvent);
            } else {
              chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
            }
            if (!chars) {
              return null;
            }
            var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
            if (listeners.length > 0) {
              var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.data = chars;
            }
          }
          function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
          var supportedInputTypes = {
            color: true,
            date: true,
            datetime: true,
            "datetime-local": true,
            email: true,
            month: true,
            number: true,
            password: true,
            range: true,
            search: true,
            tel: true,
            text: true,
            time: true,
            url: true,
            week: true
          };
          function isTextInputElement(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            if (nodeName === "input") {
              return !!supportedInputTypes[elem.type];
            }
            if (nodeName === "textarea") {
              return true;
            }
            return false;
          }
          function isEventSupported(eventNameSuffix) {
            if (!canUseDOM) {
              return false;
            }
            var eventName = "on" + eventNameSuffix;
            var isSupported = eventName in document;
            if (!isSupported) {
              var element = document.createElement("div");
              element.setAttribute(eventName, "return;");
              isSupported = typeof element[eventName] === "function";
            }
            return isSupported;
          }
          function registerEvents$1() {
            registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
          }
          function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
            enqueueStateRestore(target);
            var listeners = accumulateTwoPhaseListeners(inst, "onChange");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          var activeElement = null;
          var activeElementInst = null;
          function shouldUseChangeEvent(elem) {
            var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName === "select" || nodeName === "input" && elem.type === "file";
          }
          function manualDispatchChangeEvent(nativeEvent) {
            var dispatchQueue = [];
            createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
            batchedUpdates(runEventInBatch, dispatchQueue);
          }
          function runEventInBatch(dispatchQueue) {
            processDispatchQueue(dispatchQueue, 0);
          }
          function getInstIfValueChanged(targetInst) {
            var targetNode = getNodeFromInstance(targetInst);
            if (updateValueIfChanged(targetNode)) {
              return targetInst;
            }
          }
          function getTargetInstForChangeEvent(domEventName, targetInst) {
            if (domEventName === "change") {
              return targetInst;
            }
          }
          var isInputEventSupported = false;
          if (canUseDOM) {
            isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
          }
          function startWatchingForValueChange(target, targetInst) {
            activeElement = target;
            activeElementInst = targetInst;
            activeElement.attachEvent("onpropertychange", handlePropertyChange);
          }
          function stopWatchingForValueChange() {
            if (!activeElement) {
              return;
            }
            activeElement.detachEvent("onpropertychange", handlePropertyChange);
            activeElement = null;
            activeElementInst = null;
          }
          function handlePropertyChange(nativeEvent) {
            if (nativeEvent.propertyName !== "value") {
              return;
            }
            if (getInstIfValueChanged(activeElementInst)) {
              manualDispatchChangeEvent(nativeEvent);
            }
          }
          function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
            if (domEventName === "focusin") {
              stopWatchingForValueChange();
              startWatchingForValueChange(target, targetInst);
            } else if (domEventName === "focusout") {
              stopWatchingForValueChange();
            }
          }
          function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
            if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
              return getInstIfValueChanged(activeElementInst);
            }
          }
          function shouldUseClickEvent(elem) {
            var nodeName = elem.nodeName;
            return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
          }
          function getTargetInstForClickEvent(domEventName, targetInst) {
            if (domEventName === "click") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
            if (domEventName === "input" || domEventName === "change") {
              return getInstIfValueChanged(targetInst);
            }
          }
          function handleControlledInputBlur(node2) {
            var state = node2._wrapperState;
            if (!state || !state.controlled || node2.type !== "number") {
              return;
            }
            {
              setDefaultValue(node2, "number", node2.value);
            }
          }
          function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            var getTargetInstFunc, handleEventFunc;
            if (shouldUseChangeEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForChangeEvent;
            } else if (isTextInputElement(targetNode)) {
              if (isInputEventSupported) {
                getTargetInstFunc = getTargetInstForInputOrChangeEvent;
              } else {
                getTargetInstFunc = getTargetInstForInputEventPolyfill;
                handleEventFunc = handleEventsForInputEventPolyfill;
              }
            } else if (shouldUseClickEvent(targetNode)) {
              getTargetInstFunc = getTargetInstForClickEvent;
            }
            if (getTargetInstFunc) {
              var inst = getTargetInstFunc(domEventName, targetInst);
              if (inst) {
                createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
                return;
              }
            }
            if (handleEventFunc) {
              handleEventFunc(domEventName, targetNode, targetInst);
            }
            if (domEventName === "focusout") {
              handleControlledInputBlur(targetNode);
            }
          }
          function registerEvents$2() {
            registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
            registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
            registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
            registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
          }
          function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
            var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
            if (isOverEvent && !isReplayingEvent(nativeEvent)) {
              var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
              if (related) {
                if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                  return;
                }
              }
            }
            if (!isOutEvent && !isOverEvent) {
              return;
            }
            var win;
            if (nativeEventTarget.window === nativeEventTarget) {
              win = nativeEventTarget;
            } else {
              var doc = nativeEventTarget.ownerDocument;
              if (doc) {
                win = doc.defaultView || doc.parentWindow;
              } else {
                win = window;
              }
            }
            var from2;
            var to;
            if (isOutEvent) {
              var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
              from2 = targetInst;
              to = _related ? getClosestInstanceFromNode(_related) : null;
              if (to !== null) {
                var nearestMounted = getNearestMountedFiber(to);
                if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
                  to = null;
                }
              }
            } else {
              from2 = null;
              to = targetInst;
            }
            if (from2 === to) {
              return;
            }
            var SyntheticEventCtor = SyntheticMouseEvent;
            var leaveEventType = "onMouseLeave";
            var enterEventType = "onMouseEnter";
            var eventTypePrefix = "mouse";
            if (domEventName === "pointerout" || domEventName === "pointerover") {
              SyntheticEventCtor = SyntheticPointerEvent;
              leaveEventType = "onPointerLeave";
              enterEventType = "onPointerEnter";
              eventTypePrefix = "pointer";
            }
            var fromNode = from2 == null ? win : getNodeFromInstance(from2);
            var toNode = to == null ? win : getNodeFromInstance(to);
            var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from2, nativeEvent, nativeEventTarget);
            leave.target = fromNode;
            leave.relatedTarget = toNode;
            var enter = null;
            var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
            if (nativeTargetInst === targetInst) {
              var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to, nativeEvent, nativeEventTarget);
              enterEvent.target = toNode;
              enterEvent.relatedTarget = fromNode;
              enter = enterEvent;
            }
            accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from2, to);
          }
          function is(x, y) {
            return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
          }
          var objectIs = typeof Object.is === "function" ? Object.is : is;
          function shallowEqual(objA, objB) {
            if (objectIs(objA, objB)) {
              return true;
            }
            if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
              return false;
            }
            var keysA = Object.keys(objA);
            var keysB = Object.keys(objB);
            if (keysA.length !== keysB.length) {
              return false;
            }
            for (var i = 0; i < keysA.length; i++) {
              var currentKey = keysA[i];
              if (!hasOwnProperty3.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
                return false;
              }
            }
            return true;
          }
          function getLeafNode(node2) {
            while (node2 && node2.firstChild) {
              node2 = node2.firstChild;
            }
            return node2;
          }
          function getSiblingNode(node2) {
            while (node2) {
              if (node2.nextSibling) {
                return node2.nextSibling;
              }
              node2 = node2.parentNode;
            }
          }
          function getNodeForCharacterOffset(root2, offset3) {
            var node2 = getLeafNode(root2);
            var nodeStart = 0;
            var nodeEnd = 0;
            while (node2) {
              if (node2.nodeType === TEXT_NODE) {
                nodeEnd = nodeStart + node2.textContent.length;
                if (nodeStart <= offset3 && nodeEnd >= offset3) {
                  return {
                    node: node2,
                    offset: offset3 - nodeStart
                  };
                }
                nodeStart = nodeEnd;
              }
              node2 = getLeafNode(getSiblingNode(node2));
            }
          }
          function getOffsets(outerNode) {
            var ownerDocument8 = outerNode.ownerDocument;
            var win = ownerDocument8 && ownerDocument8.defaultView || window;
            var selection = win.getSelection && win.getSelection();
            if (!selection || selection.rangeCount === 0) {
              return null;
            }
            var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
            try {
              anchorNode.nodeType;
              focusNode.nodeType;
            } catch (e) {
              return null;
            }
            return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
          }
          function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
            var length2 = 0;
            var start2 = -1;
            var end2 = -1;
            var indexWithinAnchor = 0;
            var indexWithinFocus = 0;
            var node2 = outerNode;
            var parentNode = null;
            outer:
              while (true) {
                var next2 = null;
                while (true) {
                  if (node2 === anchorNode && (anchorOffset === 0 || node2.nodeType === TEXT_NODE)) {
                    start2 = length2 + anchorOffset;
                  }
                  if (node2 === focusNode && (focusOffset === 0 || node2.nodeType === TEXT_NODE)) {
                    end2 = length2 + focusOffset;
                  }
                  if (node2.nodeType === TEXT_NODE) {
                    length2 += node2.nodeValue.length;
                  }
                  if ((next2 = node2.firstChild) === null) {
                    break;
                  }
                  parentNode = node2;
                  node2 = next2;
                }
                while (true) {
                  if (node2 === outerNode) {
                    break outer;
                  }
                  if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                    start2 = length2;
                  }
                  if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                    end2 = length2;
                  }
                  if ((next2 = node2.nextSibling) !== null) {
                    break;
                  }
                  node2 = parentNode;
                  parentNode = node2.parentNode;
                }
                node2 = next2;
              }
            if (start2 === -1 || end2 === -1) {
              return null;
            }
            return {
              start: start2,
              end: end2
            };
          }
          function setOffsets(node2, offsets) {
            var doc = node2.ownerDocument || document;
            var win = doc && doc.defaultView || window;
            if (!win.getSelection) {
              return;
            }
            var selection = win.getSelection();
            var length2 = node2.textContent.length;
            var start2 = Math.min(offsets.start, length2);
            var end2 = offsets.end === void 0 ? start2 : Math.min(offsets.end, length2);
            if (!selection.extend && start2 > end2) {
              var temp = end2;
              end2 = start2;
              start2 = temp;
            }
            var startMarker = getNodeForCharacterOffset(node2, start2);
            var endMarker = getNodeForCharacterOffset(node2, end2);
            if (startMarker && endMarker) {
              if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
                return;
              }
              var range = doc.createRange();
              range.setStart(startMarker.node, startMarker.offset);
              selection.removeAllRanges();
              if (start2 > end2) {
                selection.addRange(range);
                selection.extend(endMarker.node, endMarker.offset);
              } else {
                range.setEnd(endMarker.node, endMarker.offset);
                selection.addRange(range);
              }
            }
          }
          function isTextNode(node2) {
            return node2 && node2.nodeType === TEXT_NODE;
          }
          function containsNode(outerNode, innerNode) {
            if (!outerNode || !innerNode) {
              return false;
            } else if (outerNode === innerNode) {
              return true;
            } else if (isTextNode(outerNode)) {
              return false;
            } else if (isTextNode(innerNode)) {
              return containsNode(outerNode, innerNode.parentNode);
            } else if ("contains" in outerNode) {
              return outerNode.contains(innerNode);
            } else if (outerNode.compareDocumentPosition) {
              return !!(outerNode.compareDocumentPosition(innerNode) & 16);
            } else {
              return false;
            }
          }
          function isInDocument(node2) {
            return node2 && node2.ownerDocument && containsNode(node2.ownerDocument.documentElement, node2);
          }
          function isSameOriginFrame(iframe) {
            try {
              return typeof iframe.contentWindow.location.href === "string";
            } catch (err) {
              return false;
            }
          }
          function getActiveElementDeep() {
            var win = window;
            var element = getActiveElement();
            while (element instanceof win.HTMLIFrameElement) {
              if (isSameOriginFrame(element)) {
                win = element.contentWindow;
              } else {
                return element;
              }
              element = getActiveElement(win.document);
            }
            return element;
          }
          function hasSelectionCapabilities(elem) {
            var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
            return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
          }
          function getSelectionInformation() {
            var focusedElem = getActiveElementDeep();
            return {
              focusedElem,
              selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection2(focusedElem) : null
            };
          }
          function restoreSelection(priorSelectionInformation) {
            var curFocusedElem = getActiveElementDeep();
            var priorFocusedElem = priorSelectionInformation.focusedElem;
            var priorSelectionRange = priorSelectionInformation.selectionRange;
            if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
              if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
                setSelection(priorFocusedElem, priorSelectionRange);
              }
              var ancestors = [];
              var ancestor = priorFocusedElem;
              while (ancestor = ancestor.parentNode) {
                if (ancestor.nodeType === ELEMENT_NODE) {
                  ancestors.push({
                    element: ancestor,
                    left: ancestor.scrollLeft,
                    top: ancestor.scrollTop
                  });
                }
              }
              if (typeof priorFocusedElem.focus === "function") {
                priorFocusedElem.focus();
              }
              for (var i = 0; i < ancestors.length; i++) {
                var info = ancestors[i];
                info.element.scrollLeft = info.left;
                info.element.scrollTop = info.top;
              }
            }
          }
          function getSelection2(input) {
            var selection;
            if ("selectionStart" in input) {
              selection = {
                start: input.selectionStart,
                end: input.selectionEnd
              };
            } else {
              selection = getOffsets(input);
            }
            return selection || {
              start: 0,
              end: 0
            };
          }
          function setSelection(input, offsets) {
            var start2 = offsets.start;
            var end2 = offsets.end;
            if (end2 === void 0) {
              end2 = start2;
            }
            if ("selectionStart" in input) {
              input.selectionStart = start2;
              input.selectionEnd = Math.min(end2, input.value.length);
            } else {
              setOffsets(input, offsets);
            }
          }
          var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
          function registerEvents$3() {
            registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
          }
          var activeElement$1 = null;
          var activeElementInst$1 = null;
          var lastSelection = null;
          var mouseDown = false;
          function getSelection$1(node2) {
            if ("selectionStart" in node2 && hasSelectionCapabilities(node2)) {
              return {
                start: node2.selectionStart,
                end: node2.selectionEnd
              };
            } else {
              var win = node2.ownerDocument && node2.ownerDocument.defaultView || window;
              var selection = win.getSelection();
              return {
                anchorNode: selection.anchorNode,
                anchorOffset: selection.anchorOffset,
                focusNode: selection.focusNode,
                focusOffset: selection.focusOffset
              };
            }
          }
          function getEventTargetDocument(eventTarget) {
            return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
          }
          function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
            var doc = getEventTargetDocument(nativeEventTarget);
            if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
              return;
            }
            var currentSelection = getSelection$1(activeElement$1);
            if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
              lastSelection = currentSelection;
              var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
              if (listeners.length > 0) {
                var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event,
                  listeners
                });
                event.target = activeElement$1;
              }
            }
          }
          function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                  activeElement$1 = targetNode;
                  activeElementInst$1 = targetInst;
                  lastSelection = null;
                }
                break;
              case "focusout":
                activeElement$1 = null;
                activeElementInst$1 = null;
                lastSelection = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) {
                  break;
                }
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
          }
          function makePrefixMap(styleProp, eventName) {
            var prefixes2 = {};
            prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
            prefixes2["Webkit" + styleProp] = "webkit" + eventName;
            prefixes2["Moz" + styleProp] = "moz" + eventName;
            return prefixes2;
          }
          var vendorPrefixes = {
            animationend: makePrefixMap("Animation", "AnimationEnd"),
            animationiteration: makePrefixMap("Animation", "AnimationIteration"),
            animationstart: makePrefixMap("Animation", "AnimationStart"),
            transitionend: makePrefixMap("Transition", "TransitionEnd")
          };
          var prefixedEventNames = {};
          var style = {};
          if (canUseDOM) {
            style = document.createElement("div").style;
            if (!("AnimationEvent" in window)) {
              delete vendorPrefixes.animationend.animation;
              delete vendorPrefixes.animationiteration.animation;
              delete vendorPrefixes.animationstart.animation;
            }
            if (!("TransitionEvent" in window)) {
              delete vendorPrefixes.transitionend.transition;
            }
          }
          function getVendorPrefixedEventName(eventName) {
            if (prefixedEventNames[eventName]) {
              return prefixedEventNames[eventName];
            } else if (!vendorPrefixes[eventName]) {
              return eventName;
            }
            var prefixMap = vendorPrefixes[eventName];
            for (var styleProp in prefixMap) {
              if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
                return prefixedEventNames[eventName] = prefixMap[styleProp];
              }
            }
            return eventName;
          }
          var ANIMATION_END = getVendorPrefixedEventName("animationend");
          var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
          var ANIMATION_START = getVendorPrefixedEventName("animationstart");
          var TRANSITION_END = getVendorPrefixedEventName("transitionend");
          var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
          var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
          function registerSimpleEvent(domEventName, reactName) {
            topLevelEventsToReactNames.set(domEventName, reactName);
            registerTwoPhaseEvent(reactName, [domEventName]);
          }
          function registerSimpleEvents() {
            for (var i = 0; i < simpleEventPluginEvents.length; i++) {
              var eventName = simpleEventPluginEvents[i];
              var domEventName = eventName.toLowerCase();
              var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
              registerSimpleEvent(domEventName, "on" + capitalizedEvent);
            }
            registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
            registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
            registerSimpleEvent(ANIMATION_START, "onAnimationStart");
            registerSimpleEvent("dblclick", "onDoubleClick");
            registerSimpleEvent("focusin", "onFocus");
            registerSimpleEvent("focusout", "onBlur");
            registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
          }
          function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (reactName === void 0) {
              return;
            }
            var SyntheticEventCtor = SyntheticEvent;
            var reactEventType = domEventName;
            switch (domEventName) {
              case "keypress":
                if (getEventCharCode(nativeEvent) === 0) {
                  return;
                }
              case "keydown":
              case "keyup":
                SyntheticEventCtor = SyntheticKeyboardEvent;
                break;
              case "focusin":
                reactEventType = "focus";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "focusout":
                reactEventType = "blur";
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "beforeblur":
              case "afterblur":
                SyntheticEventCtor = SyntheticFocusEvent;
                break;
              case "click":
                if (nativeEvent.button === 2) {
                  return;
                }
              case "auxclick":
              case "dblclick":
              case "mousedown":
              case "mousemove":
              case "mouseup":
              case "mouseout":
              case "mouseover":
              case "contextmenu":
                SyntheticEventCtor = SyntheticMouseEvent;
                break;
              case "drag":
              case "dragend":
              case "dragenter":
              case "dragexit":
              case "dragleave":
              case "dragover":
              case "dragstart":
              case "drop":
                SyntheticEventCtor = SyntheticDragEvent;
                break;
              case "touchcancel":
              case "touchend":
              case "touchmove":
              case "touchstart":
                SyntheticEventCtor = SyntheticTouchEvent;
                break;
              case ANIMATION_END:
              case ANIMATION_ITERATION:
              case ANIMATION_START:
                SyntheticEventCtor = SyntheticAnimationEvent;
                break;
              case TRANSITION_END:
                SyntheticEventCtor = SyntheticTransitionEvent;
                break;
              case "scroll":
                SyntheticEventCtor = SyntheticUIEvent;
                break;
              case "wheel":
                SyntheticEventCtor = SyntheticWheelEvent;
                break;
              case "copy":
              case "cut":
              case "paste":
                SyntheticEventCtor = SyntheticClipboardEvent;
                break;
              case "gotpointercapture":
              case "lostpointercapture":
              case "pointercancel":
              case "pointerdown":
              case "pointermove":
              case "pointerout":
              case "pointerover":
              case "pointerup":
                SyntheticEventCtor = SyntheticPointerEvent;
                break;
            }
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            {
              var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
              // nonDelegatedEvents list in DOMPluginEventSystem.
              // Then we can remove this special list.
              // This is a breaking change that can wait until React 18.
              domEventName === "scroll";
              var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
              if (_listeners.length > 0) {
                var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
                dispatchQueue.push({
                  event: _event,
                  listeners: _listeners
                });
              }
            }
          }
          registerSimpleEvents();
          registerEvents$2();
          registerEvents$1();
          registerEvents$3();
          registerEvents();
          function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
            extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
            if (shouldProcessPolyfillPlugins) {
              extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
              extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            }
          }
          var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
          var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
          function executeDispatch(event, listener, currentTarget) {
            var type = event.type || "unknown-event";
            event.currentTarget = currentTarget;
            invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
            event.currentTarget = null;
          }
          function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
            var previousInstance;
            if (inCapturePhase) {
              for (var i = dispatchListeners.length - 1; i >= 0; i--) {
                var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, listener, currentTarget);
                previousInstance = instance;
              }
            } else {
              for (var _i = 0; _i < dispatchListeners.length; _i++) {
                var _dispatchListeners$_i = dispatchListeners[_i], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
                if (_instance !== previousInstance && event.isPropagationStopped()) {
                  return;
                }
                executeDispatch(event, _listener, _currentTarget);
                previousInstance = _instance;
              }
            }
          }
          function processDispatchQueue(dispatchQueue, eventSystemFlags) {
            var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
            for (var i = 0; i < dispatchQueue.length; i++) {
              var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
              processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
            }
            rethrowCaughtError();
          }
          function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var nativeEventTarget = getEventTarget(nativeEvent);
            var dispatchQueue = [];
            extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
            processDispatchQueue(dispatchQueue, eventSystemFlags);
          }
          function listenToNonDelegatedEvent(domEventName, targetElement) {
            {
              if (!nonDelegatedEvents.has(domEventName)) {
                error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var isCapturePhaseListener = false;
            var listenerSet = getEventListenerSet(targetElement);
            var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
            if (!listenerSet.has(listenerSetKey)) {
              addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
              listenerSet.add(listenerSetKey);
            }
          }
          function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
            {
              if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
                error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
              }
            }
            var eventSystemFlags = 0;
            if (isCapturePhaseListener) {
              eventSystemFlags |= IS_CAPTURE_PHASE;
            }
            addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
          }
          var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
          function listenToAllSupportedEvents(rootContainerElement) {
            if (!rootContainerElement[listeningMarker]) {
              rootContainerElement[listeningMarker] = true;
              allNativeEvents.forEach(function(domEventName) {
                if (domEventName !== "selectionchange") {
                  if (!nonDelegatedEvents.has(domEventName)) {
                    listenToNativeEvent(domEventName, false, rootContainerElement);
                  }
                  listenToNativeEvent(domEventName, true, rootContainerElement);
                }
              });
              var ownerDocument8 = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
              if (ownerDocument8 !== null) {
                if (!ownerDocument8[listeningMarker]) {
                  ownerDocument8[listeningMarker] = true;
                  listenToNativeEvent("selectionchange", false, ownerDocument8);
                }
              }
            }
          }
          function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
            var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
            var isPassiveListener = void 0;
            if (passiveBrowserEventsSupported) {
              if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
                isPassiveListener = true;
              }
            }
            targetContainer = targetContainer;
            var unsubscribeListener;
            if (isCapturePhaseListener) {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
              }
            } else {
              if (isPassiveListener !== void 0) {
                unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
              } else {
                unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
              }
            }
          }
          function isMatchingRootContainer(grandContainer, targetContainer) {
            return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
          }
          function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
            var ancestorInst = targetInst;
            if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
              var targetContainerNode = targetContainer;
              if (targetInst !== null) {
                var node2 = targetInst;
                mainLoop:
                  while (true) {
                    if (node2 === null) {
                      return;
                    }
                    var nodeTag = node2.tag;
                    if (nodeTag === HostRoot || nodeTag === HostPortal) {
                      var container = node2.stateNode.containerInfo;
                      if (isMatchingRootContainer(container, targetContainerNode)) {
                        break;
                      }
                      if (nodeTag === HostPortal) {
                        var grandNode = node2.return;
                        while (grandNode !== null) {
                          var grandTag = grandNode.tag;
                          if (grandTag === HostRoot || grandTag === HostPortal) {
                            var grandContainer = grandNode.stateNode.containerInfo;
                            if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                              return;
                            }
                          }
                          grandNode = grandNode.return;
                        }
                      }
                      while (container !== null) {
                        var parentNode = getClosestInstanceFromNode(container);
                        if (parentNode === null) {
                          return;
                        }
                        var parentTag = parentNode.tag;
                        if (parentTag === HostComponent || parentTag === HostText) {
                          node2 = ancestorInst = parentNode;
                          continue mainLoop;
                        }
                        container = container.parentNode;
                      }
                    }
                    node2 = node2.return;
                  }
              }
            }
            batchedUpdates(function() {
              return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
            });
          }
          function createDispatchListener(instance, listener, currentTarget) {
            return {
              instance,
              listener,
              currentTarget
            };
          }
          function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
            var captureName = reactName !== null ? reactName + "Capture" : null;
            var reactEventName = inCapturePhase ? captureName : reactName;
            var listeners = [];
            var instance = targetFiber;
            var lastHostComponent = null;
            while (instance !== null) {
              var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
              if (tag === HostComponent && stateNode !== null) {
                lastHostComponent = stateNode;
                if (reactEventName !== null) {
                  var listener = getListener(instance, reactEventName);
                  if (listener != null) {
                    listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                  }
                }
              }
              if (accumulateTargetOnly) {
                break;
              }
              instance = instance.return;
            }
            return listeners;
          }
          function accumulateTwoPhaseListeners(targetFiber, reactName) {
            var captureName = reactName + "Capture";
            var listeners = [];
            var instance = targetFiber;
            while (instance !== null) {
              var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                var captureListener = getListener(instance, captureName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
                var bubbleListener = getListener(instance, reactName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
              instance = instance.return;
            }
            return listeners;
          }
          function getParent(inst) {
            if (inst === null) {
              return null;
            }
            do {
              inst = inst.return;
            } while (inst && inst.tag !== HostComponent);
            if (inst) {
              return inst;
            }
            return null;
          }
          function getLowestCommonAncestor(instA, instB) {
            var nodeA = instA;
            var nodeB = instB;
            var depthA = 0;
            for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
              depthA++;
            }
            var depthB = 0;
            for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
              depthB++;
            }
            while (depthA - depthB > 0) {
              nodeA = getParent(nodeA);
              depthA--;
            }
            while (depthB - depthA > 0) {
              nodeB = getParent(nodeB);
              depthB--;
            }
            var depth = depthA;
            while (depth--) {
              if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
                return nodeA;
              }
              nodeA = getParent(nodeA);
              nodeB = getParent(nodeB);
            }
            return null;
          }
          function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common2, inCapturePhase) {
            var registrationName = event._reactName;
            var listeners = [];
            var instance = target;
            while (instance !== null) {
              if (instance === common2) {
                break;
              }
              var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
              if (alternate !== null && alternate === common2) {
                break;
              }
              if (tag === HostComponent && stateNode !== null) {
                var currentTarget = stateNode;
                if (inCapturePhase) {
                  var captureListener = getListener(instance, registrationName);
                  if (captureListener != null) {
                    listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                  }
                } else if (!inCapturePhase) {
                  var bubbleListener = getListener(instance, registrationName);
                  if (bubbleListener != null) {
                    listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                  }
                }
              }
              instance = instance.return;
            }
            if (listeners.length !== 0) {
              dispatchQueue.push({
                event,
                listeners
              });
            }
          }
          function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from2, to) {
            var common2 = from2 && to ? getLowestCommonAncestor(from2, to) : null;
            if (from2 !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from2, common2, false);
            }
            if (to !== null && enterEvent !== null) {
              accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common2, true);
            }
          }
          function getListenerSetKey(domEventName, capture) {
            return domEventName + "__" + (capture ? "capture" : "bubble");
          }
          var didWarnInvalidHydration = false;
          var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
          var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
          var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
          var AUTOFOCUS = "autoFocus";
          var CHILDREN = "children";
          var STYLE = "style";
          var HTML$1 = "__html";
          var warnedUnknownTags;
          var validatePropertiesInDevelopment;
          var warnForPropDifference;
          var warnForExtraAttributes;
          var warnForInvalidEventListener;
          var canDiffStyleForHydrationWarning;
          var normalizeHTML;
          {
            warnedUnknownTags = {
              // There are working polyfills for <dialog>. Let people use it.
              dialog: true,
              // Electron ships a custom <webview> tag to display external web content in
              // an isolated frame and process.
              // This tag is not present in non Electron environments such as JSDom which
              // is often used for testing purposes.
              // @see https://electronjs.org/docs/api/webview-tag
              webview: true
            };
            validatePropertiesInDevelopment = function(type, props) {
              validateProperties(type, props);
              validateProperties$1(type, props);
              validateProperties$2(type, props, {
                registrationNameDependencies,
                possibleRegistrationNames
              });
            };
            canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
            warnForPropDifference = function(propName, serverValue, clientValue) {
              if (didWarnInvalidHydration) {
                return;
              }
              var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
              var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
              if (normalizedServerValue === normalizedClientValue) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
            };
            warnForExtraAttributes = function(attributeNames) {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              var names = [];
              attributeNames.forEach(function(name) {
                names.push(name);
              });
              error("Extra attributes from the server: %s", names);
            };
            warnForInvalidEventListener = function(registrationName, listener) {
              if (listener === false) {
                error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
              } else {
                error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
              }
            };
            normalizeHTML = function(parent, html2) {
              var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
              testElement.innerHTML = html2;
              return testElement.innerHTML;
            };
          }
          var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
          var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
          function normalizeMarkupForTextOrAttribute(markup) {
            {
              checkHtmlStringCoercion(markup);
            }
            var markupString = typeof markup === "string" ? markup : "" + markup;
            return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
          }
          function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
            var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
            var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
            if (normalizedServerText === normalizedClientText) {
              return;
            }
            if (shouldWarnDev) {
              {
                if (!didWarnInvalidHydration) {
                  didWarnInvalidHydration = true;
                  error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
                }
              }
            }
            if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
              throw new Error("Text content does not match server-rendered HTML.");
            }
          }
          function getOwnerDocumentFromRootContainer(rootContainerElement) {
            return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
          }
          function noop4() {
          }
          function trapClickOnNonInteractiveElement(node2) {
            node2.onclick = noop4;
          }
          function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
            for (var propKey in nextProps) {
              if (!nextProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = nextProps[propKey];
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                setValueForStyles(domElement, nextProp);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  setInnerHTML(domElement, nextHtml);
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  var canSetTextContent = tag !== "textarea" || nextProp !== "";
                  if (canSetTextContent) {
                    setTextContent(domElement, nextProp);
                  }
                } else if (typeof nextProp === "number") {
                  setTextContent(domElement, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (nextProp != null) {
                setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
              }
            }
          }
          function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
            for (var i = 0; i < updatePayload.length; i += 2) {
              var propKey = updatePayload[i];
              var propValue = updatePayload[i + 1];
              if (propKey === STYLE) {
                setValueForStyles(domElement, propValue);
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                setInnerHTML(domElement, propValue);
              } else if (propKey === CHILDREN) {
                setTextContent(domElement, propValue);
              } else {
                setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
              }
            }
          }
          function createElement5(type, props, rootContainerElement, parentNamespace) {
            var isCustomComponentTag;
            var ownerDocument8 = getOwnerDocumentFromRootContainer(rootContainerElement);
            var domElement;
            var namespaceURI = parentNamespace;
            if (namespaceURI === HTML_NAMESPACE) {
              namespaceURI = getIntrinsicNamespace(type);
            }
            if (namespaceURI === HTML_NAMESPACE) {
              {
                isCustomComponentTag = isCustomComponent(type, props);
                if (!isCustomComponentTag && type !== type.toLowerCase()) {
                  error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
                }
              }
              if (type === "script") {
                var div = ownerDocument8.createElement("div");
                div.innerHTML = "<script><\/script>";
                var firstChild = div.firstChild;
                domElement = div.removeChild(firstChild);
              } else if (typeof props.is === "string") {
                domElement = ownerDocument8.createElement(type, {
                  is: props.is
                });
              } else {
                domElement = ownerDocument8.createElement(type);
                if (type === "select") {
                  var node2 = domElement;
                  if (props.multiple) {
                    node2.multiple = true;
                  } else if (props.size) {
                    node2.size = props.size;
                  }
                }
              }
            } else {
              domElement = ownerDocument8.createElementNS(namespaceURI, type);
            }
            {
              if (namespaceURI === HTML_NAMESPACE) {
                if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty3.call(warnedUnknownTags, type)) {
                  warnedUnknownTags[type] = true;
                  error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
                }
              }
            }
            return domElement;
          }
          function createTextNode(text, rootContainerElement) {
            return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
          }
          function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
            var isCustomComponentTag = isCustomComponent(tag, rawProps);
            {
              validatePropertiesInDevelopment(tag, rawProps);
            }
            var props;
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                props = rawProps;
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                props = rawProps;
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                props = rawProps;
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                props = rawProps;
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                props = rawProps;
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                props = getHostProps(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                props = rawProps;
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                props = getHostProps$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                props = getHostProps$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              default:
                props = rawProps;
            }
            assertValidProps(tag, props);
            setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, false);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "option":
                postMountWrapper$1(domElement, rawProps);
                break;
              case "select":
                postMountWrapper$2(domElement, rawProps);
                break;
              default:
                if (typeof props.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
          }
          function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
            {
              validatePropertiesInDevelopment(tag, nextRawProps);
            }
            var updatePayload = null;
            var lastProps;
            var nextProps;
            switch (tag) {
              case "input":
                lastProps = getHostProps(domElement, lastRawProps);
                nextProps = getHostProps(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "select":
                lastProps = getHostProps$1(domElement, lastRawProps);
                nextProps = getHostProps$1(domElement, nextRawProps);
                updatePayload = [];
                break;
              case "textarea":
                lastProps = getHostProps$2(domElement, lastRawProps);
                nextProps = getHostProps$2(domElement, nextRawProps);
                updatePayload = [];
                break;
              default:
                lastProps = lastRawProps;
                nextProps = nextRawProps;
                if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            assertValidProps(tag, nextProps);
            var propKey;
            var styleName;
            var styleUpdates = null;
            for (propKey in lastProps) {
              if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
                continue;
              }
              if (propKey === STYLE) {
                var lastStyle = lastProps[propKey];
                for (styleName in lastStyle) {
                  if (lastStyle.hasOwnProperty(styleName)) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN)
                ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (propKey === AUTOFOCUS)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (!updatePayload) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, null);
              }
            }
            for (propKey in nextProps) {
              var nextProp = nextProps[propKey];
              var lastProp = lastProps != null ? lastProps[propKey] : void 0;
              if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
                continue;
              }
              if (propKey === STYLE) {
                {
                  if (nextProp) {
                    Object.freeze(nextProp);
                  }
                }
                if (lastProp) {
                  for (styleName in lastProp) {
                    if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = "";
                    }
                  }
                  for (styleName in nextProp) {
                    if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                      if (!styleUpdates) {
                        styleUpdates = {};
                      }
                      styleUpdates[styleName] = nextProp[styleName];
                    }
                  }
                } else {
                  if (!styleUpdates) {
                    if (!updatePayload) {
                      updatePayload = [];
                    }
                    updatePayload.push(propKey, styleUpdates);
                  }
                  styleUpdates = nextProp;
                }
              } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  if (lastHtml !== nextHtml) {
                    (updatePayload = updatePayload || []).push(propKey, nextHtml);
                  }
                }
              } else if (propKey === CHILDREN) {
                if (typeof nextProp === "string" || typeof nextProp === "number") {
                  (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
                }
              } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING)
                ;
              else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
                if (!updatePayload && lastProp !== nextProp) {
                  updatePayload = [];
                }
              } else {
                (updatePayload = updatePayload || []).push(propKey, nextProp);
              }
            }
            if (styleUpdates) {
              {
                validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
              }
              (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
            }
            return updatePayload;
          }
          function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
            if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
              updateChecked(domElement, nextRawProps);
            }
            var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
            var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
            updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
            switch (tag) {
              case "input":
                updateWrapper(domElement, nextRawProps);
                break;
              case "textarea":
                updateWrapper$1(domElement, nextRawProps);
                break;
              case "select":
                postUpdateWrapper(domElement, nextRawProps);
                break;
            }
          }
          function getPossibleStandardName(propName) {
            {
              var lowerCasedName = propName.toLowerCase();
              if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
                return null;
              }
              return possibleStandardNames[lowerCasedName] || null;
            }
          }
          function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
            var isCustomComponentTag;
            var extraAttributeNames;
            {
              isCustomComponentTag = isCustomComponent(tag, rawProps);
              validatePropertiesInDevelopment(tag, rawProps);
            }
            switch (tag) {
              case "dialog":
                listenToNonDelegatedEvent("cancel", domElement);
                listenToNonDelegatedEvent("close", domElement);
                break;
              case "iframe":
              case "object":
              case "embed":
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "video":
              case "audio":
                for (var i = 0; i < mediaEventTypes.length; i++) {
                  listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
                }
                break;
              case "source":
                listenToNonDelegatedEvent("error", domElement);
                break;
              case "img":
              case "image":
              case "link":
                listenToNonDelegatedEvent("error", domElement);
                listenToNonDelegatedEvent("load", domElement);
                break;
              case "details":
                listenToNonDelegatedEvent("toggle", domElement);
                break;
              case "input":
                initWrapperState(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "option":
                validateProps(domElement, rawProps);
                break;
              case "select":
                initWrapperState$1(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
              case "textarea":
                initWrapperState$2(domElement, rawProps);
                listenToNonDelegatedEvent("invalid", domElement);
                break;
            }
            assertValidProps(tag, rawProps);
            {
              extraAttributeNames = /* @__PURE__ */ new Set();
              var attributes = domElement.attributes;
              for (var _i = 0; _i < attributes.length; _i++) {
                var name = attributes[_i].name.toLowerCase();
                switch (name) {
                  case "value":
                    break;
                  case "checked":
                    break;
                  case "selected":
                    break;
                  default:
                    extraAttributeNames.add(attributes[_i].name);
                }
              }
            }
            var updatePayload = null;
            for (var propKey in rawProps) {
              if (!rawProps.hasOwnProperty(propKey)) {
                continue;
              }
              var nextProp = rawProps[propKey];
              if (propKey === CHILDREN) {
                if (typeof nextProp === "string") {
                  if (domElement.textContent !== nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, nextProp];
                  }
                } else if (typeof nextProp === "number") {
                  if (domElement.textContent !== "" + nextProp) {
                    if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                      checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                    }
                    updatePayload = [CHILDREN, "" + nextProp];
                  }
                }
              } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
                if (nextProp != null) {
                  if (typeof nextProp !== "function") {
                    warnForInvalidEventListener(propKey, nextProp);
                  }
                  if (propKey === "onScroll") {
                    listenToNonDelegatedEvent("scroll", domElement);
                  }
                }
              } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
              typeof isCustomComponentTag === "boolean") {
                var serverValue = void 0;
                var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
                if (rawProps[SUPPRESS_HYDRATION_WARNING] === true)
                  ;
                else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                propKey === "value" || propKey === "checked" || propKey === "selected")
                  ;
                else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                  var serverHTML = domElement.innerHTML;
                  var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                  if (nextHtml != null) {
                    var expectedHTML = normalizeHTML(domElement, nextHtml);
                    if (expectedHTML !== serverHTML) {
                      warnForPropDifference(propKey, serverHTML, expectedHTML);
                    }
                  }
                } else if (propKey === STYLE) {
                  extraAttributeNames.delete(propKey);
                  if (canDiffStyleForHydrationWarning) {
                    var expectedStyle = createDangerousStringForStyles(nextProp);
                    serverValue = domElement.getAttribute("style");
                    if (expectedStyle !== serverValue) {
                      warnForPropDifference(propKey, serverValue, expectedStyle);
                    }
                  }
                } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                  extraAttributeNames.delete(propKey.toLowerCase());
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  if (nextProp !== serverValue) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                  var isMismatchDueToBadCasing = false;
                  if (propertyInfo !== null) {
                    extraAttributeNames.delete(propertyInfo.attributeName);
                    serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                  } else {
                    var ownNamespace = parentNamespace;
                    if (ownNamespace === HTML_NAMESPACE) {
                      ownNamespace = getIntrinsicNamespace(tag);
                    }
                    if (ownNamespace === HTML_NAMESPACE) {
                      extraAttributeNames.delete(propKey.toLowerCase());
                    } else {
                      var standardName = getPossibleStandardName(propKey);
                      if (standardName !== null && standardName !== propKey) {
                        isMismatchDueToBadCasing = true;
                        extraAttributeNames.delete(standardName);
                      }
                      extraAttributeNames.delete(propKey);
                    }
                    serverValue = getValueForAttribute(domElement, propKey, nextProp);
                  }
                  var dontWarnCustomElement = enableCustomElementPropertySupport;
                  if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                    warnForPropDifference(propKey, serverValue, nextProp);
                  }
                }
              }
            }
            {
              if (shouldWarnDev) {
                if (
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
                ) {
                  warnForExtraAttributes(extraAttributeNames);
                }
              }
            }
            switch (tag) {
              case "input":
                track(domElement);
                postMountWrapper(domElement, rawProps, true);
                break;
              case "textarea":
                track(domElement);
                postMountWrapper$3(domElement);
                break;
              case "select":
              case "option":
                break;
              default:
                if (typeof rawProps.onClick === "function") {
                  trapClickOnNonInteractiveElement(domElement);
                }
                break;
            }
            return updatePayload;
          }
          function diffHydratedText(textNode, text, isConcurrentMode) {
            var isDifferent = textNode.nodeValue !== text;
            return isDifferent;
          }
          function warnForDeletedHydratableElement(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
            }
          }
          function warnForDeletedHydratableText(parentNode, child) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedElement(parentNode, tag, props) {
            {
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
            }
          }
          function warnForInsertedHydratedText(parentNode, text) {
            {
              if (text === "") {
                return;
              }
              if (didWarnInvalidHydration) {
                return;
              }
              didWarnInvalidHydration = true;
              error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
            }
          }
          function restoreControlledState$3(domElement, tag, props) {
            switch (tag) {
              case "input":
                restoreControlledState(domElement, props);
                return;
              case "textarea":
                restoreControlledState$2(domElement, props);
                return;
              case "select":
                restoreControlledState$1(domElement, props);
                return;
            }
          }
          var validateDOMNesting = function() {
          };
          var updatedAncestorInfo = function() {
          };
          {
            var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
            var inScopeTags = [
              "applet",
              "caption",
              "html",
              "table",
              "td",
              "th",
              "marquee",
              "object",
              "template",
              // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
              // TODO: Distinguish by namespace here -- for <title>, including it here
              // errs on the side of fewer warnings
              "foreignObject",
              "desc",
              "title"
            ];
            var buttonScopeTags = inScopeTags.concat(["button"]);
            var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
            var emptyAncestorInfo = {
              current: null,
              formTag: null,
              aTagInScope: null,
              buttonTagInScope: null,
              nobrTagInScope: null,
              pTagInButtonScope: null,
              listItemTagAutoclosing: null,
              dlItemTagAutoclosing: null
            };
            updatedAncestorInfo = function(oldInfo, tag) {
              var ancestorInfo = assign2({}, oldInfo || emptyAncestorInfo);
              var info = {
                tag
              };
              if (inScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.aTagInScope = null;
                ancestorInfo.buttonTagInScope = null;
                ancestorInfo.nobrTagInScope = null;
              }
              if (buttonScopeTags.indexOf(tag) !== -1) {
                ancestorInfo.pTagInButtonScope = null;
              }
              if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
                ancestorInfo.listItemTagAutoclosing = null;
                ancestorInfo.dlItemTagAutoclosing = null;
              }
              ancestorInfo.current = info;
              if (tag === "form") {
                ancestorInfo.formTag = info;
              }
              if (tag === "a") {
                ancestorInfo.aTagInScope = info;
              }
              if (tag === "button") {
                ancestorInfo.buttonTagInScope = info;
              }
              if (tag === "nobr") {
                ancestorInfo.nobrTagInScope = info;
              }
              if (tag === "p") {
                ancestorInfo.pTagInButtonScope = info;
              }
              if (tag === "li") {
                ancestorInfo.listItemTagAutoclosing = info;
              }
              if (tag === "dd" || tag === "dt") {
                ancestorInfo.dlItemTagAutoclosing = info;
              }
              return ancestorInfo;
            };
            var isTagValidWithParent = function(tag, parentTag) {
              switch (parentTag) {
                case "select":
                  return tag === "option" || tag === "optgroup" || tag === "#text";
                case "optgroup":
                  return tag === "option" || tag === "#text";
                case "option":
                  return tag === "#text";
                case "tr":
                  return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
                case "tbody":
                case "thead":
                case "tfoot":
                  return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
                case "colgroup":
                  return tag === "col" || tag === "template";
                case "table":
                  return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
                case "head":
                  return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
                case "html":
                  return tag === "head" || tag === "body" || tag === "frameset";
                case "frameset":
                  return tag === "frame";
                case "#document":
                  return tag === "html";
              }
              switch (tag) {
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
                case "rp":
                case "rt":
                  return impliedEndTags.indexOf(parentTag) === -1;
                case "body":
                case "caption":
                case "col":
                case "colgroup":
                case "frameset":
                case "frame":
                case "head":
                case "html":
                case "tbody":
                case "td":
                case "tfoot":
                case "th":
                case "thead":
                case "tr":
                  return parentTag == null;
              }
              return true;
            };
            var findInvalidAncestorForTag = function(tag, ancestorInfo) {
              switch (tag) {
                case "address":
                case "article":
                case "aside":
                case "blockquote":
                case "center":
                case "details":
                case "dialog":
                case "dir":
                case "div":
                case "dl":
                case "fieldset":
                case "figcaption":
                case "figure":
                case "footer":
                case "header":
                case "hgroup":
                case "main":
                case "menu":
                case "nav":
                case "ol":
                case "p":
                case "section":
                case "summary":
                case "ul":
                case "pre":
                case "listing":
                case "table":
                case "hr":
                case "xmp":
                case "h1":
                case "h2":
                case "h3":
                case "h4":
                case "h5":
                case "h6":
                  return ancestorInfo.pTagInButtonScope;
                case "form":
                  return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
                case "li":
                  return ancestorInfo.listItemTagAutoclosing;
                case "dd":
                case "dt":
                  return ancestorInfo.dlItemTagAutoclosing;
                case "button":
                  return ancestorInfo.buttonTagInScope;
                case "a":
                  return ancestorInfo.aTagInScope;
                case "nobr":
                  return ancestorInfo.nobrTagInScope;
              }
              return null;
            };
            var didWarn$1 = {};
            validateDOMNesting = function(childTag, childText, ancestorInfo) {
              ancestorInfo = ancestorInfo || emptyAncestorInfo;
              var parentInfo = ancestorInfo.current;
              var parentTag = parentInfo && parentInfo.tag;
              if (childText != null) {
                if (childTag != null) {
                  error("validateDOMNesting: when childText is passed, childTag should be null");
                }
                childTag = "#text";
              }
              var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
              var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
              var invalidParentOrAncestor = invalidParent || invalidAncestor;
              if (!invalidParentOrAncestor) {
                return;
              }
              var ancestorTag = invalidParentOrAncestor.tag;
              var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
              if (didWarn$1[warnKey]) {
                return;
              }
              didWarn$1[warnKey] = true;
              var tagDisplayName = childTag;
              var whitespaceInfo = "";
              if (childTag === "#text") {
                if (/\S/.test(childText)) {
                  tagDisplayName = "Text nodes";
                } else {
                  tagDisplayName = "Whitespace text nodes";
                  whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
                }
              } else {
                tagDisplayName = "<" + childTag + ">";
              }
              if (invalidParent) {
                var info = "";
                if (ancestorTag === "table" && childTag === "tr") {
                  info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
                }
                error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
              } else {
                error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
              }
            };
          }
          var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
          var SUSPENSE_START_DATA = "$";
          var SUSPENSE_END_DATA = "/$";
          var SUSPENSE_PENDING_START_DATA = "$?";
          var SUSPENSE_FALLBACK_START_DATA = "$!";
          var STYLE$1 = "style";
          var eventsEnabled = null;
          var selectionInformation = null;
          function getRootHostContext(rootContainerInstance) {
            var type;
            var namespace;
            var nodeType = rootContainerInstance.nodeType;
            switch (nodeType) {
              case DOCUMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE: {
                type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
                var root2 = rootContainerInstance.documentElement;
                namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
                break;
              }
              default: {
                var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
                var ownNamespace = container.namespaceURI || null;
                type = container.tagName;
                namespace = getChildNamespace(ownNamespace, type);
                break;
              }
            }
            {
              var validatedTag = type.toLowerCase();
              var ancestorInfo = updatedAncestorInfo(null, validatedTag);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getChildHostContext(parentHostContext, type, rootContainerInstance) {
            {
              var parentHostContextDev = parentHostContext;
              var namespace = getChildNamespace(parentHostContextDev.namespace, type);
              var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
              return {
                namespace,
                ancestorInfo
              };
            }
          }
          function getPublicInstance(instance) {
            return instance;
          }
          function prepareForCommit(containerInfo) {
            eventsEnabled = isEnabled();
            selectionInformation = getSelectionInformation();
            var activeInstance = null;
            setEnabled(false);
            return activeInstance;
          }
          function resetAfterCommit(containerInfo) {
            restoreSelection(selectionInformation);
            setEnabled(eventsEnabled);
            eventsEnabled = null;
            selectionInformation = null;
          }
          function createInstance2(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              validateDOMNesting(type, null, hostContextDev.ancestorInfo);
              if (typeof props.children === "string" || typeof props.children === "number") {
                var string = "" + props.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
              parentNamespace = hostContextDev.namespace;
            }
            var domElement = createElement5(type, props, rootContainerInstance, parentNamespace);
            precacheFiberNode(internalInstanceHandle, domElement);
            updateFiberProps(domElement, props);
            return domElement;
          }
          function appendInitialChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
            setInitialProperties(domElement, type, props, rootContainerInstance);
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                return !!props.autoFocus;
              case "img":
                return true;
              default:
                return false;
            }
          }
          function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
            {
              var hostContextDev = hostContext;
              if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
                var string = "" + newProps.children;
                var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
                validateDOMNesting(null, string, ownAncestorInfo);
              }
            }
            return diffProperties(domElement, type, oldProps, newProps);
          }
          function shouldSetTextContent(type, props) {
            return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
          }
          function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
            {
              var hostContextDev = hostContext;
              validateDOMNesting(null, text, hostContextDev.ancestorInfo);
            }
            var textNode = createTextNode(text, rootContainerInstance);
            precacheFiberNode(internalInstanceHandle, textNode);
            return textNode;
          }
          function getCurrentEventPriority() {
            var currentEvent = window.event;
            if (currentEvent === void 0) {
              return DefaultEventPriority;
            }
            return getEventPriority(currentEvent.type);
          }
          var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
          var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
          var noTimeout = -1;
          var localPromise = typeof Promise === "function" ? Promise : void 0;
          var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
            return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
          } : scheduleTimeout;
          function handleErrorInNextTick(error2) {
            setTimeout(function() {
              throw error2;
            });
          }
          function commitMount(domElement, type, newProps, internalInstanceHandle) {
            switch (type) {
              case "button":
              case "input":
              case "select":
              case "textarea":
                if (newProps.autoFocus) {
                  domElement.focus();
                }
                return;
              case "img": {
                if (newProps.src) {
                  domElement.src = newProps.src;
                }
                return;
              }
            }
          }
          function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
            updateProperties(domElement, updatePayload, type, oldProps, newProps);
            updateFiberProps(domElement, newProps);
          }
          function resetTextContent(domElement) {
            setTextContent(domElement, "");
          }
          function commitTextUpdate(textInstance, oldText, newText) {
            textInstance.nodeValue = newText;
          }
          function appendChild(parentInstance, child) {
            parentInstance.appendChild(child);
          }
          function appendChildToContainer(container, child) {
            var parentNode;
            if (container.nodeType === COMMENT_NODE) {
              parentNode = container.parentNode;
              parentNode.insertBefore(child, container);
            } else {
              parentNode = container;
              parentNode.appendChild(child);
            }
            var reactRootContainer = container._reactRootContainer;
            if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
              trapClickOnNonInteractiveElement(parentNode);
            }
          }
          function insertBefore(parentInstance, child, beforeChild) {
            parentInstance.insertBefore(child, beforeChild);
          }
          function insertInContainerBefore(container, child, beforeChild) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.insertBefore(child, beforeChild);
            } else {
              container.insertBefore(child, beforeChild);
            }
          }
          function removeChild(parentInstance, child) {
            parentInstance.removeChild(child);
          }
          function removeChildFromContainer(container, child) {
            if (container.nodeType === COMMENT_NODE) {
              container.parentNode.removeChild(child);
            } else {
              container.removeChild(child);
            }
          }
          function clearSuspenseBoundary(parentInstance, suspenseInstance) {
            var node2 = suspenseInstance;
            var depth = 0;
            do {
              var nextNode = node2.nextSibling;
              parentInstance.removeChild(node2);
              if (nextNode && nextNode.nodeType === COMMENT_NODE) {
                var data = nextNode.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    parentInstance.removeChild(nextNode);
                    retryIfBlockedOn(suspenseInstance);
                    return;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                  depth++;
                }
              }
              node2 = nextNode;
            } while (node2);
            retryIfBlockedOn(suspenseInstance);
          }
          function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
            if (container.nodeType === COMMENT_NODE) {
              clearSuspenseBoundary(container.parentNode, suspenseInstance);
            } else if (container.nodeType === ELEMENT_NODE) {
              clearSuspenseBoundary(container, suspenseInstance);
            }
            retryIfBlockedOn(container);
          }
          function hideInstance(instance) {
            instance = instance;
            var style2 = instance.style;
            if (typeof style2.setProperty === "function") {
              style2.setProperty("display", "none", "important");
            } else {
              style2.display = "none";
            }
          }
          function hideTextInstance(textInstance) {
            textInstance.nodeValue = "";
          }
          function unhideInstance(instance, props) {
            instance = instance;
            var styleProp = props[STYLE$1];
            var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
            instance.style.display = dangerousStyleValue("display", display);
          }
          function unhideTextInstance(textInstance, text) {
            textInstance.nodeValue = text;
          }
          function clearContainer(container) {
            if (container.nodeType === ELEMENT_NODE) {
              container.textContent = "";
            } else if (container.nodeType === DOCUMENT_NODE) {
              if (container.documentElement) {
                container.removeChild(container.documentElement);
              }
            }
          }
          function canHydrateInstance(instance, type, props) {
            if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
              return null;
            }
            return instance;
          }
          function canHydrateTextInstance(instance, text) {
            if (text === "" || instance.nodeType !== TEXT_NODE) {
              return null;
            }
            return instance;
          }
          function canHydrateSuspenseInstance(instance) {
            if (instance.nodeType !== COMMENT_NODE) {
              return null;
            }
            return instance;
          }
          function isSuspenseInstancePending(instance) {
            return instance.data === SUSPENSE_PENDING_START_DATA;
          }
          function isSuspenseInstanceFallback(instance) {
            return instance.data === SUSPENSE_FALLBACK_START_DATA;
          }
          function getSuspenseInstanceFallbackErrorDetails(instance) {
            var dataset = instance.nextSibling && instance.nextSibling.dataset;
            var digest, message, stack;
            if (dataset) {
              digest = dataset.dgst;
              {
                message = dataset.msg;
                stack = dataset.stck;
              }
            }
            {
              return {
                message,
                digest,
                stack
              };
            }
          }
          function registerSuspenseInstanceRetry(instance, callback) {
            instance._reactRetry = callback;
          }
          function getNextHydratable(node2) {
            for (; node2 != null; node2 = node2.nextSibling) {
              var nodeType = node2.nodeType;
              if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
                break;
              }
              if (nodeType === COMMENT_NODE) {
                var nodeData = node2.data;
                if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                  break;
                }
                if (nodeData === SUSPENSE_END_DATA) {
                  return null;
                }
              }
            }
            return node2;
          }
          function getNextHydratableSibling(instance) {
            return getNextHydratable(instance.nextSibling);
          }
          function getFirstHydratableChild(parentInstance) {
            return getNextHydratable(parentInstance.firstChild);
          }
          function getFirstHydratableChildWithinContainer(parentContainer) {
            return getNextHydratable(parentContainer.firstChild);
          }
          function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
            return getNextHydratable(parentInstance.nextSibling);
          }
          function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, instance);
            updateFiberProps(instance, props);
            var parentNamespace;
            {
              var hostContextDev = hostContext;
              parentNamespace = hostContextDev.namespace;
            }
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
          }
          function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
            precacheFiberNode(internalInstanceHandle, textInstance);
            var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
            return diffHydratedText(textInstance, text);
          }
          function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
            precacheFiberNode(internalInstanceHandle, suspenseInstance);
          }
          function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
            var node2 = suspenseInstance.nextSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data = node2.data;
                if (data === SUSPENSE_END_DATA) {
                  if (depth === 0) {
                    return getNextHydratableSibling(node2);
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  depth++;
                }
              }
              node2 = node2.nextSibling;
            }
            return null;
          }
          function getParentSuspenseInstance(targetInstance) {
            var node2 = targetInstance.previousSibling;
            var depth = 0;
            while (node2) {
              if (node2.nodeType === COMMENT_NODE) {
                var data = node2.data;
                if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                  if (depth === 0) {
                    return node2;
                  } else {
                    depth--;
                  }
                } else if (data === SUSPENSE_END_DATA) {
                  depth++;
                }
              }
              node2 = node2.previousSibling;
            }
            return null;
          }
          function commitHydratedContainer(container) {
            retryIfBlockedOn(container);
          }
          function commitHydratedSuspenseInstance(suspenseInstance) {
            retryIfBlockedOn(suspenseInstance);
          }
          function shouldDeleteUnhydratedTailInstances(parentType) {
            return parentType !== "head" && parentType !== "body";
          }
          function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
          function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
            if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              var shouldWarnDev = true;
              checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
            }
          }
          function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
            {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentContainer, instance);
              } else if (instance.nodeType === COMMENT_NODE)
                ;
              else {
                warnForDeletedHydratableText(parentContainer, instance);
              }
            }
          }
          function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentNode, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentNode, instance);
                }
              }
            }
          }
          function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                if (instance.nodeType === ELEMENT_NODE) {
                  warnForDeletedHydratableElement(parentInstance, instance);
                } else if (instance.nodeType === COMMENT_NODE)
                  ;
                else {
                  warnForDeletedHydratableText(parentInstance, instance);
                }
              }
            }
          }
          function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
            {
              warnForInsertedHydratedElement(parentContainer, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
            {
              warnForInsertedHydratedText(parentContainer, text);
            }
          }
          function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedElement(parentNode, type);
            }
          }
          function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
            {
              var parentNode = parentInstance.parentNode;
              if (parentNode !== null)
                warnForInsertedHydratedText(parentNode, text);
            }
          }
          function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedElement(parentInstance, type);
              }
            }
          }
          function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
            {
              if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
                warnForInsertedHydratedText(parentInstance, text);
              }
            }
          }
          function errorHydratingContainer(parentContainer) {
            {
              error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
            }
          }
          function preparePortalMount(portalInstance) {
            listenToAllSupportedEvents(portalInstance);
          }
          var randomKey = Math.random().toString(36).slice(2);
          var internalInstanceKey = "__reactFiber$" + randomKey;
          var internalPropsKey = "__reactProps$" + randomKey;
          var internalContainerInstanceKey = "__reactContainer$" + randomKey;
          var internalEventHandlersKey = "__reactEvents$" + randomKey;
          var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
          var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
          function detachDeletedInstance(node2) {
            delete node2[internalInstanceKey];
            delete node2[internalPropsKey];
            delete node2[internalEventHandlersKey];
            delete node2[internalEventHandlerListenersKey];
            delete node2[internalEventHandlesSetKey];
          }
          function precacheFiberNode(hostInst, node2) {
            node2[internalInstanceKey] = hostInst;
          }
          function markContainerAsRoot(hostRoot, node2) {
            node2[internalContainerInstanceKey] = hostRoot;
          }
          function unmarkContainerAsRoot(node2) {
            node2[internalContainerInstanceKey] = null;
          }
          function isContainerMarkedAsRoot(node2) {
            return !!node2[internalContainerInstanceKey];
          }
          function getClosestInstanceFromNode(targetNode) {
            var targetInst = targetNode[internalInstanceKey];
            if (targetInst) {
              return targetInst;
            }
            var parentNode = targetNode.parentNode;
            while (parentNode) {
              targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
              if (targetInst) {
                var alternate = targetInst.alternate;
                if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                  var suspenseInstance = getParentSuspenseInstance(targetNode);
                  while (suspenseInstance !== null) {
                    var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                    if (targetSuspenseInst) {
                      return targetSuspenseInst;
                    }
                    suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                  }
                }
                return targetInst;
              }
              targetNode = parentNode;
              parentNode = targetNode.parentNode;
            }
            return null;
          }
          function getInstanceFromNode(node2) {
            var inst = node2[internalInstanceKey] || node2[internalContainerInstanceKey];
            if (inst) {
              if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
                return inst;
              } else {
                return null;
              }
            }
            return null;
          }
          function getNodeFromInstance(inst) {
            if (inst.tag === HostComponent || inst.tag === HostText) {
              return inst.stateNode;
            }
            throw new Error("getNodeFromInstance: Invalid argument.");
          }
          function getFiberCurrentPropsFromNode(node2) {
            return node2[internalPropsKey] || null;
          }
          function updateFiberProps(node2, props) {
            node2[internalPropsKey] = props;
          }
          function getEventListenerSet(node2) {
            var elementListenerSet = node2[internalEventHandlersKey];
            if (elementListenerSet === void 0) {
              elementListenerSet = node2[internalEventHandlersKey] = /* @__PURE__ */ new Set();
            }
            return elementListenerSet;
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values2, location, componentName, element) {
            {
              var has2 = Function.call.bind(hasOwnProperty3);
              for (var typeSpecName in typeSpecs) {
                if (has2(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          var valueStack = [];
          var fiberStack;
          {
            fiberStack = [];
          }
          var index3 = -1;
          function createCursor(defaultValue) {
            return {
              current: defaultValue
            };
          }
          function pop(cursor2, fiber) {
            if (index3 < 0) {
              {
                error("Unexpected pop.");
              }
              return;
            }
            {
              if (fiber !== fiberStack[index3]) {
                error("Unexpected Fiber popped.");
              }
            }
            cursor2.current = valueStack[index3];
            valueStack[index3] = null;
            {
              fiberStack[index3] = null;
            }
            index3--;
          }
          function push(cursor2, value, fiber) {
            index3++;
            valueStack[index3] = cursor2.current;
            {
              fiberStack[index3] = fiber;
            }
            cursor2.current = value;
          }
          var warnedAboutMissingGetChildContext;
          {
            warnedAboutMissingGetChildContext = {};
          }
          var emptyContextObject = {};
          {
            Object.freeze(emptyContextObject);
          }
          var contextStackCursor = createCursor(emptyContextObject);
          var didPerformWorkStackCursor = createCursor(false);
          var previousContext = emptyContextObject;
          function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
            {
              if (didPushOwnContextIfProvider && isContextProvider(Component)) {
                return previousContext;
              }
              return contextStackCursor.current;
            }
          }
          function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
            {
              var instance = workInProgress2.stateNode;
              instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
              instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
            }
          }
          function getMaskedContext(workInProgress2, unmaskedContext) {
            {
              var type = workInProgress2.type;
              var contextTypes = type.contextTypes;
              if (!contextTypes) {
                return emptyContextObject;
              }
              var instance = workInProgress2.stateNode;
              if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
                return instance.__reactInternalMemoizedMaskedChildContext;
              }
              var context = {};
              for (var key in contextTypes) {
                context[key] = unmaskedContext[key];
              }
              {
                var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
                checkPropTypes(contextTypes, context, "context", name);
              }
              if (instance) {
                cacheContext(workInProgress2, unmaskedContext, context);
              }
              return context;
            }
          }
          function hasContextChanged() {
            {
              return didPerformWorkStackCursor.current;
            }
          }
          function isContextProvider(type) {
            {
              var childContextTypes = type.childContextTypes;
              return childContextTypes !== null && childContextTypes !== void 0;
            }
          }
          function popContext(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function popTopLevelContextObject(fiber) {
            {
              pop(didPerformWorkStackCursor, fiber);
              pop(contextStackCursor, fiber);
            }
          }
          function pushTopLevelContextObject(fiber, context, didChange) {
            {
              if (contextStackCursor.current !== emptyContextObject) {
                throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
              }
              push(contextStackCursor, context, fiber);
              push(didPerformWorkStackCursor, didChange, fiber);
            }
          }
          function processChildContext(fiber, type, parentContext) {
            {
              var instance = fiber.stateNode;
              var childContextTypes = type.childContextTypes;
              if (typeof instance.getChildContext !== "function") {
                {
                  var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                  if (!warnedAboutMissingGetChildContext[componentName]) {
                    warnedAboutMissingGetChildContext[componentName] = true;
                    error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                  }
                }
                return parentContext;
              }
              var childContext = instance.getChildContext();
              for (var contextKey in childContext) {
                if (!(contextKey in childContextTypes)) {
                  throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
                }
              }
              {
                var name = getComponentNameFromFiber(fiber) || "Unknown";
                checkPropTypes(childContextTypes, childContext, "child context", name);
              }
              return assign2({}, parentContext, childContext);
            }
          }
          function pushContextProvider(workInProgress2) {
            {
              var instance = workInProgress2.stateNode;
              var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
              previousContext = contextStackCursor.current;
              push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
              push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
              return true;
            }
          }
          function invalidateContextProvider(workInProgress2, type, didChange) {
            {
              var instance = workInProgress2.stateNode;
              if (!instance) {
                throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
              }
              if (didChange) {
                var mergedContext = processChildContext(workInProgress2, type, previousContext);
                instance.__reactInternalMemoizedMergedChildContext = mergedContext;
                pop(didPerformWorkStackCursor, workInProgress2);
                pop(contextStackCursor, workInProgress2);
                push(contextStackCursor, mergedContext, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              } else {
                pop(didPerformWorkStackCursor, workInProgress2);
                push(didPerformWorkStackCursor, didChange, workInProgress2);
              }
            }
          }
          function findCurrentUnmaskedContext(fiber) {
            {
              if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
                throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
              }
              var node2 = fiber;
              do {
                switch (node2.tag) {
                  case HostRoot:
                    return node2.stateNode.context;
                  case ClassComponent: {
                    var Component = node2.type;
                    if (isContextProvider(Component)) {
                      return node2.stateNode.__reactInternalMemoizedMergedChildContext;
                    }
                    break;
                  }
                }
                node2 = node2.return;
              } while (node2 !== null);
              throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          var LegacyRoot = 0;
          var ConcurrentRoot = 1;
          var syncQueue = null;
          var includesLegacySyncCallbacks = false;
          var isFlushingSyncQueue = false;
          function scheduleSyncCallback(callback) {
            if (syncQueue === null) {
              syncQueue = [callback];
            } else {
              syncQueue.push(callback);
            }
          }
          function scheduleLegacySyncCallback(callback) {
            includesLegacySyncCallbacks = true;
            scheduleSyncCallback(callback);
          }
          function flushSyncCallbacksOnlyInLegacyMode() {
            if (includesLegacySyncCallbacks) {
              flushSyncCallbacks();
            }
          }
          function flushSyncCallbacks() {
            if (!isFlushingSyncQueue && syncQueue !== null) {
              isFlushingSyncQueue = true;
              var i = 0;
              var previousUpdatePriority = getCurrentUpdatePriority();
              try {
                var isSync = true;
                var queue = syncQueue;
                setCurrentUpdatePriority(DiscreteEventPriority);
                for (; i < queue.length; i++) {
                  var callback = queue[i];
                  do {
                    callback = callback(isSync);
                  } while (callback !== null);
                }
                syncQueue = null;
                includesLegacySyncCallbacks = false;
              } catch (error2) {
                if (syncQueue !== null) {
                  syncQueue = syncQueue.slice(i + 1);
                }
                scheduleCallback(ImmediatePriority, flushSyncCallbacks);
                throw error2;
              } finally {
                setCurrentUpdatePriority(previousUpdatePriority);
                isFlushingSyncQueue = false;
              }
            }
            return null;
          }
          var forkStack = [];
          var forkStackIndex = 0;
          var treeForkProvider = null;
          var treeForkCount = 0;
          var idStack = [];
          var idStackIndex = 0;
          var treeContextProvider = null;
          var treeContextId = 1;
          var treeContextOverflow = "";
          function isForkedChild(workInProgress2) {
            warnIfNotHydrating();
            return (workInProgress2.flags & Forked) !== NoFlags;
          }
          function getForksAtLevel(workInProgress2) {
            warnIfNotHydrating();
            return treeForkCount;
          }
          function getTreeId() {
            var overflow = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
            return id.toString(32) + overflow;
          }
          function pushTreeFork(workInProgress2, totalChildren) {
            warnIfNotHydrating();
            forkStack[forkStackIndex++] = treeForkCount;
            forkStack[forkStackIndex++] = treeForkProvider;
            treeForkProvider = workInProgress2;
            treeForkCount = totalChildren;
          }
          function pushTreeId(workInProgress2, totalChildren, index4) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextProvider = workInProgress2;
            var baseIdWithLeadingBit = treeContextId;
            var baseOverflow = treeContextOverflow;
            var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
            var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
            var slot = index4 + 1;
            var length2 = getBitLength(totalChildren) + baseLength;
            if (length2 > 30) {
              var numberOfOverflowBits = baseLength - baseLength % 5;
              var newOverflowBits = (1 << numberOfOverflowBits) - 1;
              var newOverflow = (baseId & newOverflowBits).toString(32);
              var restOfBaseId = baseId >> numberOfOverflowBits;
              var restOfBaseLength = baseLength - numberOfOverflowBits;
              var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
              var restOfNewBits = slot << restOfBaseLength;
              var id = restOfNewBits | restOfBaseId;
              var overflow = newOverflow + baseOverflow;
              treeContextId = 1 << restOfLength | id;
              treeContextOverflow = overflow;
            } else {
              var newBits = slot << baseLength;
              var _id = newBits | baseId;
              var _overflow = baseOverflow;
              treeContextId = 1 << length2 | _id;
              treeContextOverflow = _overflow;
            }
          }
          function pushMaterializedTreeId(workInProgress2) {
            warnIfNotHydrating();
            var returnFiber = workInProgress2.return;
            if (returnFiber !== null) {
              var numberOfForks = 1;
              var slotIndex = 0;
              pushTreeFork(workInProgress2, numberOfForks);
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          function getBitLength(number) {
            return 32 - clz32(number);
          }
          function getLeadingBit(id) {
            return 1 << getBitLength(id) - 1;
          }
          function popTreeContext(workInProgress2) {
            while (workInProgress2 === treeForkProvider) {
              treeForkProvider = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
              treeForkCount = forkStack[--forkStackIndex];
              forkStack[forkStackIndex] = null;
            }
            while (workInProgress2 === treeContextProvider) {
              treeContextProvider = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextOverflow = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
              treeContextId = idStack[--idStackIndex];
              idStack[idStackIndex] = null;
            }
          }
          function getSuspendedTreeContext() {
            warnIfNotHydrating();
            if (treeContextProvider !== null) {
              return {
                id: treeContextId,
                overflow: treeContextOverflow
              };
            } else {
              return null;
            }
          }
          function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
            warnIfNotHydrating();
            idStack[idStackIndex++] = treeContextId;
            idStack[idStackIndex++] = treeContextOverflow;
            idStack[idStackIndex++] = treeContextProvider;
            treeContextId = suspendedContext.id;
            treeContextOverflow = suspendedContext.overflow;
            treeContextProvider = workInProgress2;
          }
          function warnIfNotHydrating() {
            {
              if (!getIsHydrating()) {
                error("Expected to be hydrating. This is a bug in React. Please file an issue.");
              }
            }
          }
          var hydrationParentFiber = null;
          var nextHydratableInstance = null;
          var isHydrating = false;
          var didSuspendOrErrorDEV = false;
          var hydrationErrors = null;
          function warnIfHydrating() {
            {
              if (isHydrating) {
                error("We should not be hydrating here. This is a bug in React. Please file a bug.");
              }
            }
          }
          function markDidThrowWhileHydratingDEV() {
            {
              didSuspendOrErrorDEV = true;
            }
          }
          function didSuspendOrErrorWhileHydratingDEV() {
            {
              return didSuspendOrErrorDEV;
            }
          }
          function enterHydrationState(fiber) {
            var parentInstance = fiber.stateNode.containerInfo;
            nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            return true;
          }
          function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
            nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
            hydrationParentFiber = fiber;
            isHydrating = true;
            hydrationErrors = null;
            didSuspendOrErrorDEV = false;
            if (treeContext !== null) {
              restoreSuspendedTreeContext(fiber, treeContext);
            }
            return true;
          }
          function warnUnhydratedInstance(returnFiber, instance) {
            {
              switch (returnFiber.tag) {
                case HostRoot: {
                  didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                  break;
                }
                case HostComponent: {
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotHydrateInstance(
                    returnFiber.type,
                    returnFiber.memoizedProps,
                    returnFiber.stateNode,
                    instance,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  if (suspenseState.dehydrated !== null)
                    didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                  break;
                }
              }
            }
          }
          function deleteHydratableInstance(returnFiber, instance) {
            warnUnhydratedInstance(returnFiber, instance);
            var childToDelete = createFiberFromHostInstanceForDeletion();
            childToDelete.stateNode = instance;
            childToDelete.return = returnFiber;
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function warnNonhydratedInstance(returnFiber, fiber) {
            {
              if (didSuspendOrErrorDEV) {
                return;
              }
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  switch (fiber.tag) {
                    case HostComponent:
                      var type = fiber.type;
                      var props = fiber.pendingProps;
                      didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                      break;
                    case HostText:
                      var text = fiber.pendingProps;
                      didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                      break;
                  }
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  switch (fiber.tag) {
                    case HostComponent: {
                      var _type = fiber.type;
                      var _props = fiber.pendingProps;
                      var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _type,
                        _props,
                        // TODO: Delete this argument when we remove the legacy root API.
                        isConcurrentMode
                      );
                      break;
                    }
                    case HostText: {
                      var _text = fiber.pendingProps;
                      var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                      didNotFindHydratableTextInstance(
                        parentType,
                        parentProps,
                        parentInstance,
                        _text,
                        // TODO: Delete this argument when we remove the legacy root API.
                        _isConcurrentMode
                      );
                      break;
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  var suspenseState = returnFiber.memoizedState;
                  var _parentInstance = suspenseState.dehydrated;
                  if (_parentInstance !== null)
                    switch (fiber.tag) {
                      case HostComponent:
                        var _type2 = fiber.type;
                        var _props2 = fiber.pendingProps;
                        didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                        break;
                      case HostText:
                        var _text2 = fiber.pendingProps;
                        didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                        break;
                    }
                  break;
                }
                default:
                  return;
              }
            }
          }
          function insertNonHydratedInstance(returnFiber, fiber) {
            fiber.flags = fiber.flags & ~Hydrating | Placement;
            warnNonhydratedInstance(returnFiber, fiber);
          }
          function tryHydrate(fiber, nextInstance) {
            switch (fiber.tag) {
              case HostComponent: {
                var type = fiber.type;
                var props = fiber.pendingProps;
                var instance = canHydrateInstance(nextInstance, type);
                if (instance !== null) {
                  fiber.stateNode = instance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = getFirstHydratableChild(instance);
                  return true;
                }
                return false;
              }
              case HostText: {
                var text = fiber.pendingProps;
                var textInstance = canHydrateTextInstance(nextInstance, text);
                if (textInstance !== null) {
                  fiber.stateNode = textInstance;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              case SuspenseComponent: {
                var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
                if (suspenseInstance !== null) {
                  var suspenseState = {
                    dehydrated: suspenseInstance,
                    treeContext: getSuspendedTreeContext(),
                    retryLane: OffscreenLane
                  };
                  fiber.memoizedState = suspenseState;
                  var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                  dehydratedFragment.return = fiber;
                  fiber.child = dehydratedFragment;
                  hydrationParentFiber = fiber;
                  nextHydratableInstance = null;
                  return true;
                }
                return false;
              }
              default:
                return false;
            }
          }
          function shouldClientRenderOnMismatch(fiber) {
            return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
          }
          function throwOnHydrationMismatch(fiber) {
            throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
          }
          function tryToClaimNextHydratableInstance(fiber) {
            if (!isHydrating) {
              return;
            }
            var nextInstance = nextHydratableInstance;
            if (!nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            var firstAttemptedInstance = nextInstance;
            if (!tryHydrate(fiber, nextInstance)) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnNonhydratedInstance(hydrationParentFiber, fiber);
                throwOnHydrationMismatch();
              }
              nextInstance = getNextHydratableSibling(firstAttemptedInstance);
              var prevHydrationParentFiber = hydrationParentFiber;
              if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
                insertNonHydratedInstance(hydrationParentFiber, fiber);
                isHydrating = false;
                hydrationParentFiber = fiber;
                return;
              }
              deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
            }
          }
          function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
            var instance = fiber.stateNode;
            var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
            var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
            fiber.updateQueue = updatePayload;
            if (updatePayload !== null) {
              return true;
            }
            return false;
          }
          function prepareToHydrateHostTextInstance(fiber) {
            var textInstance = fiber.stateNode;
            var textContent = fiber.memoizedProps;
            var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
            if (shouldUpdate) {
              var returnFiber = hydrationParentFiber;
              if (returnFiber !== null) {
                switch (returnFiber.tag) {
                  case HostRoot: {
                    var parentContainer = returnFiber.stateNode.containerInfo;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedContainerTextInstance(
                      parentContainer,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostComponent: {
                    var parentType = returnFiber.type;
                    var parentProps = returnFiber.memoizedProps;
                    var parentInstance = returnFiber.stateNode;
                    var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotMatchHydratedTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      textInstance,
                      textContent,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode2
                    );
                    break;
                  }
                }
              }
            }
            return shouldUpdate;
          }
          function prepareToHydrateHostSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            hydrateSuspenseInstance(suspenseInstance, fiber);
          }
          function skipPastDehydratedSuspenseInstance(fiber) {
            var suspenseState = fiber.memoizedState;
            var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
            if (!suspenseInstance) {
              throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
            }
            return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
          }
          function popToNextHostParent(fiber) {
            var parent = fiber.return;
            while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
              parent = parent.return;
            }
            hydrationParentFiber = parent;
          }
          function popHydrationState(fiber) {
            if (fiber !== hydrationParentFiber) {
              return false;
            }
            if (!isHydrating) {
              popToNextHostParent(fiber);
              isHydrating = true;
              return false;
            }
            if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
              var nextInstance = nextHydratableInstance;
              if (nextInstance) {
                if (shouldClientRenderOnMismatch(fiber)) {
                  warnIfUnhydratedTailNodes(fiber);
                  throwOnHydrationMismatch();
                } else {
                  while (nextInstance) {
                    deleteHydratableInstance(fiber, nextInstance);
                    nextInstance = getNextHydratableSibling(nextInstance);
                  }
                }
              }
            }
            popToNextHostParent(fiber);
            if (fiber.tag === SuspenseComponent) {
              nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
            } else {
              nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
            }
            return true;
          }
          function hasUnhydratedTailNodes() {
            return isHydrating && nextHydratableInstance !== null;
          }
          function warnIfUnhydratedTailNodes(fiber) {
            var nextInstance = nextHydratableInstance;
            while (nextInstance) {
              warnUnhydratedInstance(fiber, nextInstance);
              nextInstance = getNextHydratableSibling(nextInstance);
            }
          }
          function resetHydrationState() {
            hydrationParentFiber = null;
            nextHydratableInstance = null;
            isHydrating = false;
            didSuspendOrErrorDEV = false;
          }
          function upgradeHydrationErrorsToRecoverable() {
            if (hydrationErrors !== null) {
              queueRecoverableErrors(hydrationErrors);
              hydrationErrors = null;
            }
          }
          function getIsHydrating() {
            return isHydrating;
          }
          function queueHydrationError(error2) {
            if (hydrationErrors === null) {
              hydrationErrors = [error2];
            } else {
              hydrationErrors.push(error2);
            }
          }
          var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
          var NoTransition = null;
          function requestCurrentTransition() {
            return ReactCurrentBatchConfig$1.transition;
          }
          var ReactStrictModeWarnings = {
            recordUnsafeLifecycleWarnings: function(fiber, instance) {
            },
            flushPendingUnsafeLifecycleWarnings: function() {
            },
            recordLegacyContextWarning: function(fiber, instance) {
            },
            flushLegacyContextWarning: function() {
            },
            discardPendingWarnings: function() {
            }
          };
          {
            var findStrictRoot = function(fiber) {
              var maybeStrictRoot = null;
              var node2 = fiber;
              while (node2 !== null) {
                if (node2.mode & StrictLegacyMode) {
                  maybeStrictRoot = node2;
                }
                node2 = node2.return;
              }
              return maybeStrictRoot;
            };
            var setToSortedString = function(set2) {
              var array = [];
              set2.forEach(function(value) {
                array.push(value);
              });
              return array.sort().join(", ");
            };
            var pendingComponentWillMountWarnings = [];
            var pendingUNSAFE_ComponentWillMountWarnings = [];
            var pendingComponentWillReceivePropsWarnings = [];
            var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            var pendingComponentWillUpdateWarnings = [];
            var pendingUNSAFE_ComponentWillUpdateWarnings = [];
            var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
              if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
                return;
              }
              if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
              instance.componentWillMount.__suppressDeprecationWarning !== true) {
                pendingComponentWillMountWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
                pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                pendingComponentWillReceivePropsWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                pendingComponentWillUpdateWarnings.push(fiber);
              }
              if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
                pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
              var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillMountWarnings.length > 0) {
                pendingComponentWillMountWarnings.forEach(function(fiber) {
                  componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillMountWarnings = [];
              }
              var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
                pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillMountWarnings = [];
              }
              var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillReceivePropsWarnings.length > 0) {
                pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillReceivePropsWarnings = [];
              }
              var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
                pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              }
              var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingComponentWillUpdateWarnings.length > 0) {
                pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                  componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingComponentWillUpdateWarnings = [];
              }
              var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
              if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
                pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                  UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutUnsafeLifecycles.add(fiber.type);
                });
                pendingUNSAFE_ComponentWillUpdateWarnings = [];
              }
              if (UNSAFE_componentWillMountUniqueNames.size > 0) {
                var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
                error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
              }
              if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
                error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
              }
              if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
                error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
              }
              if (componentWillMountUniqueNames.size > 0) {
                var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
                warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
              }
              if (componentWillReceivePropsUniqueNames.size > 0) {
                var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
                warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
              }
              if (componentWillUpdateUniqueNames.size > 0) {
                var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
                warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
              }
            };
            var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
            ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
              var strictRoot = findStrictRoot(fiber);
              if (strictRoot === null) {
                error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
                return;
              }
              if (didWarnAboutLegacyContext.has(fiber.type)) {
                return;
              }
              var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
              if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
                if (warningsForRoot === void 0) {
                  warningsForRoot = [];
                  pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
                }
                warningsForRoot.push(fiber);
              }
            };
            ReactStrictModeWarnings.flushLegacyContextWarning = function() {
              pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
                if (fiberArray.length === 0) {
                  return;
                }
                var firstFiber = fiberArray[0];
                var uniqueNames = /* @__PURE__ */ new Set();
                fiberArray.forEach(function(fiber) {
                  uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                  didWarnAboutLegacyContext.add(fiber.type);
                });
                var sortedNames = setToSortedString(uniqueNames);
                try {
                  setCurrentFiber(firstFiber);
                  error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
                } finally {
                  resetCurrentFiber();
                }
              });
            };
            ReactStrictModeWarnings.discardPendingWarnings = function() {
              pendingComponentWillMountWarnings = [];
              pendingUNSAFE_ComponentWillMountWarnings = [];
              pendingComponentWillReceivePropsWarnings = [];
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
              pendingComponentWillUpdateWarnings = [];
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
              pendingLegacyContextWarning = /* @__PURE__ */ new Map();
            };
          }
          function resolveDefaultProps(Component, baseProps) {
            if (Component && Component.defaultProps) {
              var props = assign2({}, baseProps);
              var defaultProps2 = Component.defaultProps;
              for (var propName in defaultProps2) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps2[propName];
                }
              }
              return props;
            }
            return baseProps;
          }
          var valueCursor = createCursor(null);
          var rendererSigil;
          {
            rendererSigil = {};
          }
          var currentlyRenderingFiber = null;
          var lastContextDependency = null;
          var lastFullyObservedContext = null;
          var isDisallowedContextReadInDEV = false;
          function resetContextDependencies() {
            currentlyRenderingFiber = null;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function enterDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = true;
            }
          }
          function exitDisallowedContextReadInDEV() {
            {
              isDisallowedContextReadInDEV = false;
            }
          }
          function pushProvider(providerFiber, context, nextValue) {
            {
              push(valueCursor, context._currentValue, providerFiber);
              context._currentValue = nextValue;
              {
                if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                  error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                }
                context._currentRenderer = rendererSigil;
              }
            }
          }
          function popProvider(context, providerFiber) {
            var currentValue = valueCursor.current;
            pop(valueCursor, providerFiber);
            {
              {
                context._currentValue = currentValue;
              }
            }
          }
          function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
            var node2 = parent;
            while (node2 !== null) {
              var alternate = node2.alternate;
              if (!isSubsetOfLanes(node2.childLanes, renderLanes2)) {
                node2.childLanes = mergeLanes(node2.childLanes, renderLanes2);
                if (alternate !== null) {
                  alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
                }
              } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
              if (node2 === propagationRoot) {
                break;
              }
              node2 = node2.return;
            }
            {
              if (node2 !== propagationRoot) {
                error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
          }
          function propagateContextChange(workInProgress2, context, renderLanes2) {
            {
              propagateContextChange_eager(workInProgress2, context, renderLanes2);
            }
          }
          function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
            var fiber = workInProgress2.child;
            if (fiber !== null) {
              fiber.return = workInProgress2;
            }
            while (fiber !== null) {
              var nextFiber = void 0;
              var list = fiber.dependencies;
              if (list !== null) {
                nextFiber = fiber.child;
                var dependency = list.firstContext;
                while (dependency !== null) {
                  if (dependency.context === context) {
                    if (fiber.tag === ClassComponent) {
                      var lane = pickArbitraryLane(renderLanes2);
                      var update2 = createUpdate(NoTimestamp, lane);
                      update2.tag = ForceUpdate;
                      var updateQueue = fiber.updateQueue;
                      if (updateQueue === null)
                        ;
                      else {
                        var sharedQueue = updateQueue.shared;
                        var pending = sharedQueue.pending;
                        if (pending === null) {
                          update2.next = update2;
                        } else {
                          update2.next = pending.next;
                          pending.next = update2;
                        }
                        sharedQueue.pending = update2;
                      }
                    }
                    fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                    var alternate = fiber.alternate;
                    if (alternate !== null) {
                      alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                    }
                    scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                    list.lanes = mergeLanes(list.lanes, renderLanes2);
                    break;
                  }
                  dependency = dependency.next;
                }
              } else if (fiber.tag === ContextProvider) {
                nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
              } else if (fiber.tag === DehydratedFragment) {
                var parentSuspense = fiber.return;
                if (parentSuspense === null) {
                  throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
                }
                parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
                var _alternate = parentSuspense.alternate;
                if (_alternate !== null) {
                  _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
                }
                scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
                nextFiber = fiber.sibling;
              } else {
                nextFiber = fiber.child;
              }
              if (nextFiber !== null) {
                nextFiber.return = fiber;
              } else {
                nextFiber = fiber;
                while (nextFiber !== null) {
                  if (nextFiber === workInProgress2) {
                    nextFiber = null;
                    break;
                  }
                  var sibling = nextFiber.sibling;
                  if (sibling !== null) {
                    sibling.return = nextFiber.return;
                    nextFiber = sibling;
                    break;
                  }
                  nextFiber = nextFiber.return;
                }
              }
              fiber = nextFiber;
            }
          }
          function prepareToReadContext(workInProgress2, renderLanes2) {
            currentlyRenderingFiber = workInProgress2;
            lastContextDependency = null;
            lastFullyObservedContext = null;
            var dependencies = workInProgress2.dependencies;
            if (dependencies !== null) {
              {
                var firstContext = dependencies.firstContext;
                if (firstContext !== null) {
                  if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                    markWorkInProgressReceivedUpdate();
                  }
                  dependencies.firstContext = null;
                }
              }
            }
          }
          function readContext(context) {
            {
              if (isDisallowedContextReadInDEV) {
                error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
            }
            var value = context._currentValue;
            if (lastFullyObservedContext === context)
              ;
            else {
              var contextItem = {
                context,
                memoizedValue: value,
                next: null
              };
              if (lastContextDependency === null) {
                if (currentlyRenderingFiber === null) {
                  throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
                }
                lastContextDependency = contextItem;
                currentlyRenderingFiber.dependencies = {
                  lanes: NoLanes,
                  firstContext: contextItem
                };
              } else {
                lastContextDependency = lastContextDependency.next = contextItem;
              }
            }
            return value;
          }
          var concurrentQueues = null;
          function pushConcurrentUpdateQueue(queue) {
            if (concurrentQueues === null) {
              concurrentQueues = [queue];
            } else {
              concurrentQueues.push(queue);
            }
          }
          function finishQueueingConcurrentUpdates() {
            if (concurrentQueues !== null) {
              for (var i = 0; i < concurrentQueues.length; i++) {
                var queue = concurrentQueues[i];
                var lastInterleavedUpdate = queue.interleaved;
                if (lastInterleavedUpdate !== null) {
                  queue.interleaved = null;
                  var firstInterleavedUpdate = lastInterleavedUpdate.next;
                  var lastPendingUpdate = queue.pending;
                  if (lastPendingUpdate !== null) {
                    var firstPendingUpdate = lastPendingUpdate.next;
                    lastPendingUpdate.next = firstInterleavedUpdate;
                    lastInterleavedUpdate.next = firstPendingUpdate;
                  }
                  queue.pending = lastInterleavedUpdate;
                }
              }
              concurrentQueues = null;
            }
          }
          function enqueueConcurrentHookUpdate(fiber, queue, update2, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update2.next = update2;
              pushConcurrentUpdateQueue(queue);
            } else {
              update2.next = interleaved.next;
              interleaved.next = update2;
            }
            queue.interleaved = update2;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update2, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update2.next = update2;
              pushConcurrentUpdateQueue(queue);
            } else {
              update2.next = interleaved.next;
              interleaved.next = update2;
            }
            queue.interleaved = update2;
          }
          function enqueueConcurrentClassUpdate(fiber, queue, update2, lane) {
            var interleaved = queue.interleaved;
            if (interleaved === null) {
              update2.next = update2;
              pushConcurrentUpdateQueue(queue);
            } else {
              update2.next = interleaved.next;
              interleaved.next = update2;
            }
            queue.interleaved = update2;
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          function enqueueConcurrentRenderForLane(fiber, lane) {
            return markUpdateLaneFromFiberToRoot(fiber, lane);
          }
          var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
          function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
            sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
            var alternate = sourceFiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, lane);
            }
            {
              if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
              }
            }
            var node2 = sourceFiber;
            var parent = sourceFiber.return;
            while (parent !== null) {
              parent.childLanes = mergeLanes(parent.childLanes, lane);
              alternate = parent.alternate;
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, lane);
              } else {
                {
                  if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                    warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                  }
                }
              }
              node2 = parent;
              parent = parent.return;
            }
            if (node2.tag === HostRoot) {
              var root2 = node2.stateNode;
              return root2;
            } else {
              return null;
            }
          }
          var UpdateState = 0;
          var ReplaceState = 1;
          var ForceUpdate = 2;
          var CaptureUpdate = 3;
          var hasForceUpdate = false;
          var didWarnUpdateInsideUpdate;
          var currentlyProcessingQueue;
          {
            didWarnUpdateInsideUpdate = false;
            currentlyProcessingQueue = null;
          }
          function initializeUpdateQueue(fiber) {
            var queue = {
              baseState: fiber.memoizedState,
              firstBaseUpdate: null,
              lastBaseUpdate: null,
              shared: {
                pending: null,
                interleaved: null,
                lanes: NoLanes
              },
              effects: null
            };
            fiber.updateQueue = queue;
          }
          function cloneUpdateQueue(current2, workInProgress2) {
            var queue = workInProgress2.updateQueue;
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var clone = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: currentQueue.firstBaseUpdate,
                lastBaseUpdate: currentQueue.lastBaseUpdate,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = clone;
            }
          }
          function createUpdate(eventTime, lane) {
            var update2 = {
              eventTime,
              lane,
              tag: UpdateState,
              payload: null,
              callback: null,
              next: null
            };
            return update2;
          }
          function enqueueUpdate(fiber, update2, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return null;
            }
            var sharedQueue = updateQueue.shared;
            {
              if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
                error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
                didWarnUpdateInsideUpdate = true;
              }
            }
            if (isUnsafeClassRenderPhaseUpdate()) {
              var pending = sharedQueue.pending;
              if (pending === null) {
                update2.next = update2;
              } else {
                update2.next = pending.next;
                pending.next = update2;
              }
              sharedQueue.pending = update2;
              return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
            } else {
              return enqueueConcurrentClassUpdate(fiber, sharedQueue, update2, lane);
            }
          }
          function entangleTransitions(root2, fiber, lane) {
            var updateQueue = fiber.updateQueue;
            if (updateQueue === null) {
              return;
            }
            var sharedQueue = updateQueue.shared;
            if (isTransitionLane(lane)) {
              var queueLanes = sharedQueue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              sharedQueue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
            var queue = workInProgress2.updateQueue;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              if (queue === currentQueue) {
                var newFirst = null;
                var newLast = null;
                var firstBaseUpdate = queue.firstBaseUpdate;
                if (firstBaseUpdate !== null) {
                  var update2 = firstBaseUpdate;
                  do {
                    var clone = {
                      eventTime: update2.eventTime,
                      lane: update2.lane,
                      tag: update2.tag,
                      payload: update2.payload,
                      callback: update2.callback,
                      next: null
                    };
                    if (newLast === null) {
                      newFirst = newLast = clone;
                    } else {
                      newLast.next = clone;
                      newLast = clone;
                    }
                    update2 = update2.next;
                  } while (update2 !== null);
                  if (newLast === null) {
                    newFirst = newLast = capturedUpdate;
                  } else {
                    newLast.next = capturedUpdate;
                    newLast = capturedUpdate;
                  }
                } else {
                  newFirst = newLast = capturedUpdate;
                }
                queue = {
                  baseState: currentQueue.baseState,
                  firstBaseUpdate: newFirst,
                  lastBaseUpdate: newLast,
                  shared: currentQueue.shared,
                  effects: currentQueue.effects
                };
                workInProgress2.updateQueue = queue;
                return;
              }
            }
            var lastBaseUpdate = queue.lastBaseUpdate;
            if (lastBaseUpdate === null) {
              queue.firstBaseUpdate = capturedUpdate;
            } else {
              lastBaseUpdate.next = capturedUpdate;
            }
            queue.lastBaseUpdate = capturedUpdate;
          }
          function getStateFromUpdate(workInProgress2, queue, update2, prevState, nextProps, instance) {
            switch (update2.tag) {
              case ReplaceState: {
                var payload = update2.payload;
                if (typeof payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  var nextState = payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                  return nextState;
                }
                return payload;
              }
              case CaptureUpdate: {
                workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
              }
              case UpdateState: {
                var _payload = update2.payload;
                var partialState;
                if (typeof _payload === "function") {
                  {
                    enterDisallowedContextReadInDEV();
                  }
                  partialState = _payload.call(instance, prevState, nextProps);
                  {
                    if (workInProgress2.mode & StrictLegacyMode) {
                      setIsStrictModeForDevtools(true);
                      try {
                        _payload.call(instance, prevState, nextProps);
                      } finally {
                        setIsStrictModeForDevtools(false);
                      }
                    }
                    exitDisallowedContextReadInDEV();
                  }
                } else {
                  partialState = _payload;
                }
                if (partialState === null || partialState === void 0) {
                  return prevState;
                }
                return assign2({}, prevState, partialState);
              }
              case ForceUpdate: {
                hasForceUpdate = true;
                return prevState;
              }
            }
            return prevState;
          }
          function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
            var queue = workInProgress2.updateQueue;
            hasForceUpdate = false;
            {
              currentlyProcessingQueue = queue.shared;
            }
            var firstBaseUpdate = queue.firstBaseUpdate;
            var lastBaseUpdate = queue.lastBaseUpdate;
            var pendingQueue = queue.shared.pending;
            if (pendingQueue !== null) {
              queue.shared.pending = null;
              var lastPendingUpdate = pendingQueue;
              var firstPendingUpdate = lastPendingUpdate.next;
              lastPendingUpdate.next = null;
              if (lastBaseUpdate === null) {
                firstBaseUpdate = firstPendingUpdate;
              } else {
                lastBaseUpdate.next = firstPendingUpdate;
              }
              lastBaseUpdate = lastPendingUpdate;
              var current2 = workInProgress2.alternate;
              if (current2 !== null) {
                var currentQueue = current2.updateQueue;
                var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
                if (currentLastBaseUpdate !== lastBaseUpdate) {
                  if (currentLastBaseUpdate === null) {
                    currentQueue.firstBaseUpdate = firstPendingUpdate;
                  } else {
                    currentLastBaseUpdate.next = firstPendingUpdate;
                  }
                  currentQueue.lastBaseUpdate = lastPendingUpdate;
                }
              }
            }
            if (firstBaseUpdate !== null) {
              var newState = queue.baseState;
              var newLanes = NoLanes;
              var newBaseState = null;
              var newFirstBaseUpdate = null;
              var newLastBaseUpdate = null;
              var update2 = firstBaseUpdate;
              do {
                var updateLane = update2.lane;
                var updateEventTime = update2.eventTime;
                if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                  var clone = {
                    eventTime: updateEventTime,
                    lane: updateLane,
                    tag: update2.tag,
                    payload: update2.payload,
                    callback: update2.callback,
                    next: null
                  };
                  if (newLastBaseUpdate === null) {
                    newFirstBaseUpdate = newLastBaseUpdate = clone;
                    newBaseState = newState;
                  } else {
                    newLastBaseUpdate = newLastBaseUpdate.next = clone;
                  }
                  newLanes = mergeLanes(newLanes, updateLane);
                } else {
                  if (newLastBaseUpdate !== null) {
                    var _clone = {
                      eventTime: updateEventTime,
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      tag: update2.tag,
                      payload: update2.payload,
                      callback: update2.callback,
                      next: null
                    };
                    newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                  }
                  newState = getStateFromUpdate(workInProgress2, queue, update2, newState, props, instance);
                  var callback = update2.callback;
                  if (callback !== null && // If the update was already committed, we should not queue its
                  // callback again.
                  update2.lane !== NoLane) {
                    workInProgress2.flags |= Callback;
                    var effects = queue.effects;
                    if (effects === null) {
                      queue.effects = [update2];
                    } else {
                      effects.push(update2);
                    }
                  }
                }
                update2 = update2.next;
                if (update2 === null) {
                  pendingQueue = queue.shared.pending;
                  if (pendingQueue === null) {
                    break;
                  } else {
                    var _lastPendingUpdate = pendingQueue;
                    var _firstPendingUpdate = _lastPendingUpdate.next;
                    _lastPendingUpdate.next = null;
                    update2 = _firstPendingUpdate;
                    queue.lastBaseUpdate = _lastPendingUpdate;
                    queue.shared.pending = null;
                  }
                }
              } while (true);
              if (newLastBaseUpdate === null) {
                newBaseState = newState;
              }
              queue.baseState = newBaseState;
              queue.firstBaseUpdate = newFirstBaseUpdate;
              queue.lastBaseUpdate = newLastBaseUpdate;
              var lastInterleaved = queue.shared.interleaved;
              if (lastInterleaved !== null) {
                var interleaved = lastInterleaved;
                do {
                  newLanes = mergeLanes(newLanes, interleaved.lane);
                  interleaved = interleaved.next;
                } while (interleaved !== lastInterleaved);
              } else if (firstBaseUpdate === null) {
                queue.shared.lanes = NoLanes;
              }
              markSkippedUpdateLanes(newLanes);
              workInProgress2.lanes = newLanes;
              workInProgress2.memoizedState = newState;
            }
            {
              currentlyProcessingQueue = null;
            }
          }
          function callCallback(callback, context) {
            if (typeof callback !== "function") {
              throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
            }
            callback.call(context);
          }
          function resetHasForceUpdateBeforeProcessing() {
            hasForceUpdate = false;
          }
          function checkHasForceUpdateAfterProcessing() {
            return hasForceUpdate;
          }
          function commitUpdateQueue(finishedWork, finishedQueue, instance) {
            var effects = finishedQueue.effects;
            finishedQueue.effects = null;
            if (effects !== null) {
              for (var i = 0; i < effects.length; i++) {
                var effect4 = effects[i];
                var callback = effect4.callback;
                if (callback !== null) {
                  effect4.callback = null;
                  callCallback(callback, instance);
                }
              }
            }
          }
          var fakeInternalInstance = {};
          var emptyRefsObject = new React264.Component().refs;
          var didWarnAboutStateAssignmentForComponent;
          var didWarnAboutUninitializedState;
          var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
          var didWarnAboutLegacyLifecyclesAndDerivedState;
          var didWarnAboutUndefinedDerivedState;
          var warnOnUndefinedDerivedState;
          var warnOnInvalidCallback;
          var didWarnAboutDirectlyAssigningPropsToState;
          var didWarnAboutContextTypeAndContextTypes;
          var didWarnAboutInvalidateContextType;
          {
            didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
            didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
            didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
            didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
            didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
            didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
            var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
            warnOnInvalidCallback = function(callback, callerName) {
              if (callback === null || typeof callback === "function") {
                return;
              }
              var key = callerName + "_" + callback;
              if (!didWarnOnInvalidCallback.has(key)) {
                didWarnOnInvalidCallback.add(key);
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            };
            warnOnUndefinedDerivedState = function(type, partialState) {
              if (partialState === void 0) {
                var componentName = getComponentNameFromType(type) || "Component";
                if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                  didWarnAboutUndefinedDerivedState.add(componentName);
                  error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
                }
              }
            };
            Object.defineProperty(fakeInternalInstance, "_processChildContext", {
              enumerable: false,
              value: function() {
                throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
              }
            });
            Object.freeze(fakeInternalInstance);
          }
          function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
            var prevState = workInProgress2.memoizedState;
            var partialState = getDerivedStateFromProps(nextProps, prevState);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  partialState = getDerivedStateFromProps(nextProps, prevState);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              warnOnUndefinedDerivedState(ctor, partialState);
            }
            var memoizedState = partialState === null || partialState === void 0 ? prevState : assign2({}, prevState, partialState);
            workInProgress2.memoizedState = memoizedState;
            if (workInProgress2.lanes === NoLanes) {
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = memoizedState;
            }
          }
          var classComponentUpdater = {
            isMounted,
            enqueueSetState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update2 = createUpdate(eventTime, lane);
              update2.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "setState");
                }
                update2.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update2, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueReplaceState: function(inst, payload, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update2 = createUpdate(eventTime, lane);
              update2.tag = ReplaceState;
              update2.payload = payload;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "replaceState");
                }
                update2.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update2, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markStateUpdateScheduled(fiber, lane);
              }
            },
            enqueueForceUpdate: function(inst, callback) {
              var fiber = get(inst);
              var eventTime = requestEventTime();
              var lane = requestUpdateLane(fiber);
              var update2 = createUpdate(eventTime, lane);
              update2.tag = ForceUpdate;
              if (callback !== void 0 && callback !== null) {
                {
                  warnOnInvalidCallback(callback, "forceUpdate");
                }
                update2.callback = callback;
              }
              var root2 = enqueueUpdate(fiber, update2, lane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitions(root2, fiber, lane);
              }
              {
                markForceUpdateScheduled(fiber, lane);
              }
            }
          };
          function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
            var instance = workInProgress2.stateNode;
            if (typeof instance.shouldComponentUpdate === "function") {
              var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                if (shouldUpdate === void 0) {
                  error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
                }
              }
              return shouldUpdate;
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent) {
              return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
            }
            return true;
          }
          function checkClassInstance(workInProgress2, ctor, newProps) {
            var instance = workInProgress2.stateNode;
            {
              var name = getComponentNameFromType(ctor) || "Component";
              var renderPresent = instance.render;
              if (!renderPresent) {
                if (ctor.prototype && typeof ctor.prototype.render === "function") {
                  error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
                } else {
                  error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
                }
              }
              if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
                error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
              }
              if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
              }
              if (instance.propTypes) {
                error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
              }
              if (instance.contextType) {
                error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
              }
              {
                if (instance.contextTypes) {
                  error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
                }
                if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                  didWarnAboutContextTypeAndContextTypes.add(ctor);
                  error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
                }
              }
              if (typeof instance.componentShouldUpdate === "function") {
                error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
              }
              if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
                error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
              }
              if (typeof instance.componentDidUnmount === "function") {
                error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
              }
              if (typeof instance.componentDidReceiveProps === "function") {
                error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
              }
              if (typeof instance.componentWillRecieveProps === "function") {
                error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
              }
              if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
                error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
              }
              var hasMutatedProps = instance.props !== newProps;
              if (instance.props !== void 0 && hasMutatedProps) {
                error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
              }
              if (instance.defaultProps) {
                error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
                didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
                error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
              }
              if (typeof instance.getDerivedStateFromProps === "function") {
                error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof instance.getDerivedStateFromError === "function") {
                error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
              }
              if (typeof ctor.getSnapshotBeforeUpdate === "function") {
                error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
              }
              var _state = instance.state;
              if (_state && (typeof _state !== "object" || isArray2(_state))) {
                error("%s.state: must be set to an object or null", name);
              }
              if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
                error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
              }
            }
          }
          function adoptClassInstance(workInProgress2, instance) {
            instance.updater = classComponentUpdater;
            workInProgress2.stateNode = instance;
            set(instance, workInProgress2);
            {
              instance._reactInternalInstance = fakeInternalInstance;
            }
          }
          function constructClassInstance(workInProgress2, ctor, props) {
            var isLegacyContextConsumer = false;
            var unmaskedContext = emptyContextObject;
            var context = emptyContextObject;
            var contextType = ctor.contextType;
            {
              if ("contextType" in ctor) {
                var isValid = (
                  // Allow null for conditional declaration
                  contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
                );
                if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                  didWarnAboutInvalidateContextType.add(ctor);
                  var addendum = "";
                  if (contextType === void 0) {
                    addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                  } else if (typeof contextType !== "object") {
                    addendum = " However, it is set to a " + typeof contextType + ".";
                  } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                    addendum = " Did you accidentally pass the Context.Provider instead?";
                  } else if (contextType._context !== void 0) {
                    addendum = " Did you accidentally pass the Context.Consumer instead?";
                  } else {
                    addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                  }
                  error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
                }
              }
            }
            if (typeof contextType === "object" && contextType !== null) {
              context = readContext(contextType);
            } else {
              unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              var contextTypes = ctor.contextTypes;
              isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
              context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
            }
            var instance = new ctor(props, context);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance = new ctor(props, context);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
            adoptClassInstance(workInProgress2, instance);
            {
              if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutUninitializedState.has(componentName)) {
                  didWarnAboutUninitializedState.add(componentName);
                  error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
                }
              }
              if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
                var foundWillMountName = null;
                var foundWillReceivePropsName = null;
                var foundWillUpdateName = null;
                if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                  foundWillMountName = "componentWillMount";
                } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                  foundWillMountName = "UNSAFE_componentWillMount";
                }
                if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                  foundWillReceivePropsName = "componentWillReceiveProps";
                } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                  foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
                }
                if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                  foundWillUpdateName = "componentWillUpdate";
                } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  foundWillUpdateName = "UNSAFE_componentWillUpdate";
                }
                if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                  var _componentName = getComponentNameFromType(ctor) || "Component";
                  var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                  if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                    didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                    error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                  }
                }
              }
            }
            if (isLegacyContextConsumer) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return instance;
          }
          function callComponentWillMount(workInProgress2, instance) {
            var oldState = instance.state;
            if (typeof instance.componentWillMount === "function") {
              instance.componentWillMount();
            }
            if (typeof instance.UNSAFE_componentWillMount === "function") {
              instance.UNSAFE_componentWillMount();
            }
            if (oldState !== instance.state) {
              {
                error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
            var oldState = instance.state;
            if (typeof instance.componentWillReceiveProps === "function") {
              instance.componentWillReceiveProps(newProps, nextContext);
            }
            if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
            }
            if (instance.state !== oldState) {
              {
                var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
                if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                  didWarnAboutStateAssignmentForComponent.add(componentName);
                  error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
                }
              }
              classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
            }
          }
          function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            {
              checkClassInstance(workInProgress2, ctor, newProps);
            }
            var instance = workInProgress2.stateNode;
            instance.props = newProps;
            instance.state = workInProgress2.memoizedState;
            instance.refs = emptyRefsObject;
            initializeUpdateQueue(workInProgress2);
            var contextType = ctor.contextType;
            if (typeof contextType === "object" && contextType !== null) {
              instance.context = readContext(contextType);
            } else {
              var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              instance.context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            {
              if (instance.state === newProps) {
                var componentName = getComponentNameFromType(ctor) || "Component";
                if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                  didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                  error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
              }
              {
                ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
              }
            }
            instance.state = workInProgress2.memoizedState;
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              callComponentWillMount(workInProgress2, instance);
              processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
              instance.state = workInProgress2.memoizedState;
            }
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
          }
          function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            var oldProps = workInProgress2.memoizedProps;
            instance.props = oldProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (oldProps !== newProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
              if (typeof instance.componentDidMount === "function") {
                var fiberFlags = Update;
                {
                  fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= fiberFlags;
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
                if (typeof instance.componentWillMount === "function") {
                  instance.componentWillMount();
                }
                if (typeof instance.UNSAFE_componentWillMount === "function") {
                  instance.UNSAFE_componentWillMount();
                }
              }
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags = Update;
                {
                  _fiberFlags |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags;
              }
            } else {
              if (typeof instance.componentDidMount === "function") {
                var _fiberFlags2 = Update;
                {
                  _fiberFlags2 |= LayoutStatic;
                }
                if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                  _fiberFlags2 |= MountLayoutDev;
                }
                workInProgress2.flags |= _fiberFlags2;
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
            var instance = workInProgress2.stateNode;
            cloneUpdateQueue(current2, workInProgress2);
            var unresolvedOldProps = workInProgress2.memoizedProps;
            var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
            instance.props = oldProps;
            var unresolvedNewProps = workInProgress2.pendingProps;
            var oldContext = instance.context;
            var contextType = ctor.contextType;
            var nextContext = emptyContextObject;
            if (typeof contextType === "object" && contextType !== null) {
              nextContext = readContext(contextType);
            } else {
              var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
              nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
            }
            var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
            var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
              if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
                callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
              }
            }
            resetHasForceUpdateBeforeProcessing();
            var oldState = workInProgress2.memoizedState;
            var newState = instance.state = oldState;
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            newState = workInProgress2.memoizedState;
            if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              return false;
            }
            if (typeof getDerivedStateFromProps === "function") {
              applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
              newState = workInProgress2.memoizedState;
            }
            var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
            // both before and after `shouldComponentUpdate` has been called. Not ideal,
            // but I'm loath to refactor this function. This only happens for memoized
            // components so it's not that common.
            enableLazyContextPropagation;
            if (shouldUpdate) {
              if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
                if (typeof instance.componentWillUpdate === "function") {
                  instance.componentWillUpdate(newProps, newState, nextContext);
                }
                if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                  instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
                }
              }
              if (typeof instance.componentDidUpdate === "function") {
                workInProgress2.flags |= Update;
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                workInProgress2.flags |= Snapshot;
              }
            } else {
              if (typeof instance.componentDidUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Update;
                }
              }
              if (typeof instance.getSnapshotBeforeUpdate === "function") {
                if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                  workInProgress2.flags |= Snapshot;
                }
              }
              workInProgress2.memoizedProps = newProps;
              workInProgress2.memoizedState = newState;
            }
            instance.props = newProps;
            instance.state = newState;
            instance.context = nextContext;
            return shouldUpdate;
          }
          var didWarnAboutMaps;
          var didWarnAboutGenerators;
          var didWarnAboutStringRefs;
          var ownerHasKeyUseWarning;
          var ownerHasFunctionTypeWarning;
          var warnForMissingKey = function(child, returnFiber) {
          };
          {
            didWarnAboutMaps = false;
            didWarnAboutGenerators = false;
            didWarnAboutStringRefs = {};
            ownerHasKeyUseWarning = {};
            ownerHasFunctionTypeWarning = {};
            warnForMissingKey = function(child, returnFiber) {
              if (child === null || typeof child !== "object") {
                return;
              }
              if (!child._store || child._store.validated || child.key != null) {
                return;
              }
              if (typeof child._store !== "object") {
                throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
              }
              child._store.validated = true;
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasKeyUseWarning[componentName]) {
                return;
              }
              ownerHasKeyUseWarning[componentName] = true;
              error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
            };
          }
          function coerceRef(returnFiber, current2, element) {
            var mixedRef = element.ref;
            if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
              {
                if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
                // because these cannot be automatically converted to an arrow function
                // using a codemod. Therefore, we don't have to warn about string refs again.
                !(element._owner && element._self && element._owner.stateNode !== element._self)) {
                  var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                  if (!didWarnAboutStringRefs[componentName]) {
                    {
                      error('A string ref, "%s", has been found within a strict mode tree. String refs are a source of potential bugs and should be avoided. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', mixedRef);
                    }
                    didWarnAboutStringRefs[componentName] = true;
                  }
                }
              }
              if (element._owner) {
                var owner = element._owner;
                var inst;
                if (owner) {
                  var ownerFiber = owner;
                  if (ownerFiber.tag !== ClassComponent) {
                    throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                  }
                  inst = ownerFiber.stateNode;
                }
                if (!inst) {
                  throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
                }
                var resolvedInst = inst;
                {
                  checkPropStringCoercion(mixedRef, "ref");
                }
                var stringRef = "" + mixedRef;
                if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                  return current2.ref;
                }
                var ref = function(value) {
                  var refs = resolvedInst.refs;
                  if (refs === emptyRefsObject) {
                    refs = resolvedInst.refs = {};
                  }
                  if (value === null) {
                    delete refs[stringRef];
                  } else {
                    refs[stringRef] = value;
                  }
                };
                ref._stringRef = stringRef;
                return ref;
              } else {
                if (typeof mixedRef !== "string") {
                  throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
                }
                if (!element._owner) {
                  throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
                }
              }
            }
            return mixedRef;
          }
          function throwOnInvalidObjectType(returnFiber, newChild) {
            var childString = Object.prototype.toString.call(newChild);
            throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          function warnOnFunctionType(returnFiber) {
            {
              var componentName = getComponentNameFromFiber(returnFiber) || "Component";
              if (ownerHasFunctionTypeWarning[componentName]) {
                return;
              }
              ownerHasFunctionTypeWarning[componentName] = true;
              error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          function resolveLazy(lazyType) {
            var payload = lazyType._payload;
            var init = lazyType._init;
            return init(payload);
          }
          function ChildReconciler(shouldTrackSideEffects) {
            function deleteChild(returnFiber, childToDelete) {
              if (!shouldTrackSideEffects) {
                return;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [childToDelete];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(childToDelete);
              }
            }
            function deleteRemainingChildren(returnFiber, currentFirstChild) {
              if (!shouldTrackSideEffects) {
                return null;
              }
              var childToDelete = currentFirstChild;
              while (childToDelete !== null) {
                deleteChild(returnFiber, childToDelete);
                childToDelete = childToDelete.sibling;
              }
              return null;
            }
            function mapRemainingChildren(returnFiber, currentFirstChild) {
              var existingChildren = /* @__PURE__ */ new Map();
              var existingChild = currentFirstChild;
              while (existingChild !== null) {
                if (existingChild.key !== null) {
                  existingChildren.set(existingChild.key, existingChild);
                } else {
                  existingChildren.set(existingChild.index, existingChild);
                }
                existingChild = existingChild.sibling;
              }
              return existingChildren;
            }
            function useFiber(fiber, pendingProps) {
              var clone = createWorkInProgress(fiber, pendingProps);
              clone.index = 0;
              clone.sibling = null;
              return clone;
            }
            function placeChild(newFiber, lastPlacedIndex, newIndex) {
              newFiber.index = newIndex;
              if (!shouldTrackSideEffects) {
                newFiber.flags |= Forked;
                return lastPlacedIndex;
              }
              var current2 = newFiber.alternate;
              if (current2 !== null) {
                var oldIndex = current2.index;
                if (oldIndex < lastPlacedIndex) {
                  newFiber.flags |= Placement;
                  return lastPlacedIndex;
                } else {
                  return oldIndex;
                }
              } else {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              }
            }
            function placeSingleChild(newFiber) {
              if (shouldTrackSideEffects && newFiber.alternate === null) {
                newFiber.flags |= Placement;
              }
              return newFiber;
            }
            function updateTextNode(returnFiber, current2, textContent, lanes) {
              if (current2 === null || current2.tag !== HostText) {
                var created = createFiberFromText(textContent, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, textContent);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateElement(returnFiber, current2, element, lanes) {
              var elementType = element.type;
              if (elementType === REACT_FRAGMENT_TYPE) {
                return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
              }
              if (current2 !== null) {
                if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
                isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
                // We need to do this after the Hot Reloading check above,
                // because hot reloading has different semantics than prod because
                // it doesn't resuspend. So we can't let the call below suspend.
                typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                  var existing = useFiber(current2, element.props);
                  existing.ref = coerceRef(returnFiber, current2, element);
                  existing.return = returnFiber;
                  {
                    existing._debugSource = element._source;
                    existing._debugOwner = element._owner;
                  }
                  return existing;
                }
              }
              var created = createFiberFromElement(element, returnFiber.mode, lanes);
              created.ref = coerceRef(returnFiber, current2, element);
              created.return = returnFiber;
              return created;
            }
            function updatePortal(returnFiber, current2, portal, lanes) {
              if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
                var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, portal.children || []);
                existing.return = returnFiber;
                return existing;
              }
            }
            function updateFragment2(returnFiber, current2, fragment, lanes, key) {
              if (current2 === null || current2.tag !== Fragment29) {
                var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
                created.return = returnFiber;
                return created;
              } else {
                var existing = useFiber(current2, fragment);
                existing.return = returnFiber;
                return existing;
              }
            }
            function createChild(returnFiber, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
                created.return = returnFiber;
                return created;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                    _created.ref = coerceRef(returnFiber, null, newChild);
                    _created.return = returnFiber;
                    return _created;
                  }
                  case REACT_PORTAL_TYPE: {
                    var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                    _created2.return = returnFiber;
                    return _created2;
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return createChild(returnFiber, init(payload), lanes);
                  }
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                  _created3.return = returnFiber;
                  return _created3;
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateSlot(returnFiber, oldFiber, newChild, lanes) {
              var key = oldFiber !== null ? oldFiber.key : null;
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                if (key !== null) {
                  return null;
                }
                return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    if (newChild.key === key) {
                      return updateElement(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_PORTAL_TYPE: {
                    if (newChild.key === key) {
                      return updatePortal(returnFiber, oldFiber, newChild, lanes);
                    } else {
                      return null;
                    }
                  }
                  case REACT_LAZY_TYPE: {
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                  }
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  if (key !== null) {
                    return null;
                  }
                  return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                var matchedFiber = existingChildren.get(newIdx) || null;
                return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE: {
                    var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                  }
                  case REACT_PORTAL_TYPE: {
                    var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                    return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                  }
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
                }
                if (isArray2(newChild) || getIteratorFn(newChild)) {
                  var _matchedFiber3 = existingChildren.get(newIdx) || null;
                  return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return null;
            }
            function warnOnInvalidKey(child, knownKeys, returnFiber) {
              {
                if (typeof child !== "object" || child === null) {
                  return knownKeys;
                }
                switch (child.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    warnForMissingKey(child, returnFiber);
                    var key = child.key;
                    if (typeof key !== "string") {
                      break;
                    }
                    if (knownKeys === null) {
                      knownKeys = /* @__PURE__ */ new Set();
                      knownKeys.add(key);
                      break;
                    }
                    if (!knownKeys.has(key)) {
                      knownKeys.add(key);
                      break;
                    }
                    error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.", key);
                    break;
                  case REACT_LAZY_TYPE:
                    var payload = child._payload;
                    var init = child._init;
                    warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                    break;
                }
              }
              return knownKeys;
            }
            function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
              {
                var knownKeys = null;
                for (var i = 0; i < newChildren.length; i++) {
                  var child = newChildren[i];
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (newIdx === newChildren.length) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; newIdx < newChildren.length; newIdx++) {
                  var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                  if (_newFiber === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber;
                  } else {
                    previousNewFiber.sibling = _newFiber;
                  }
                  previousNewFiber = _newFiber;
                }
                if (getIsHydrating()) {
                  var _numberOfForks = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
                if (_newFiber2 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber2.alternate !== null) {
                      existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber2;
                  } else {
                    previousNewFiber.sibling = _newFiber2;
                  }
                  previousNewFiber = _newFiber2;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks2 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks2);
              }
              return resultingFirstChild;
            }
            function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
              var iteratorFn = getIteratorFn(newChildrenIterable);
              if (typeof iteratorFn !== "function") {
                throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
              }
              {
                if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
                newChildrenIterable[Symbol.toStringTag] === "Generator") {
                  if (!didWarnAboutGenerators) {
                    error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                  }
                  didWarnAboutGenerators = true;
                }
                if (newChildrenIterable.entries === iteratorFn) {
                  if (!didWarnAboutMaps) {
                    error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                  }
                  didWarnAboutMaps = true;
                }
                var _newChildren = iteratorFn.call(newChildrenIterable);
                if (_newChildren) {
                  var knownKeys = null;
                  var _step = _newChildren.next();
                  for (; !_step.done; _step = _newChildren.next()) {
                    var child = _step.value;
                    knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                  }
                }
              }
              var newChildren = iteratorFn.call(newChildrenIterable);
              if (newChildren == null) {
                throw new Error("An iterable object provided no iterator.");
              }
              var resultingFirstChild = null;
              var previousNewFiber = null;
              var oldFiber = currentFirstChild;
              var lastPlacedIndex = 0;
              var newIdx = 0;
              var nextOldFiber = null;
              var step = newChildren.next();
              for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
                if (oldFiber.index > newIdx) {
                  nextOldFiber = oldFiber;
                  oldFiber = null;
                } else {
                  nextOldFiber = oldFiber.sibling;
                }
                var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
                if (newFiber === null) {
                  if (oldFiber === null) {
                    oldFiber = nextOldFiber;
                  }
                  break;
                }
                if (shouldTrackSideEffects) {
                  if (oldFiber && newFiber.alternate === null) {
                    deleteChild(returnFiber, oldFiber);
                  }
                }
                lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = newFiber;
                } else {
                  previousNewFiber.sibling = newFiber;
                }
                previousNewFiber = newFiber;
                oldFiber = nextOldFiber;
              }
              if (step.done) {
                deleteRemainingChildren(returnFiber, oldFiber);
                if (getIsHydrating()) {
                  var numberOfForks = newIdx;
                  pushTreeFork(returnFiber, numberOfForks);
                }
                return resultingFirstChild;
              }
              if (oldFiber === null) {
                for (; !step.done; newIdx++, step = newChildren.next()) {
                  var _newFiber3 = createChild(returnFiber, step.value, lanes);
                  if (_newFiber3 === null) {
                    continue;
                  }
                  lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber3;
                  } else {
                    previousNewFiber.sibling = _newFiber3;
                  }
                  previousNewFiber = _newFiber3;
                }
                if (getIsHydrating()) {
                  var _numberOfForks3 = newIdx;
                  pushTreeFork(returnFiber, _numberOfForks3);
                }
                return resultingFirstChild;
              }
              var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
                if (_newFiber4 !== null) {
                  if (shouldTrackSideEffects) {
                    if (_newFiber4.alternate !== null) {
                      existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                    }
                  }
                  lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                  if (previousNewFiber === null) {
                    resultingFirstChild = _newFiber4;
                  } else {
                    previousNewFiber.sibling = _newFiber4;
                  }
                  previousNewFiber = _newFiber4;
                }
              }
              if (shouldTrackSideEffects) {
                existingChildren.forEach(function(child2) {
                  return deleteChild(returnFiber, child2);
                });
              }
              if (getIsHydrating()) {
                var _numberOfForks4 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks4);
              }
              return resultingFirstChild;
            }
            function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
              if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
                deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
                var existing = useFiber(currentFirstChild, textContent);
                existing.return = returnFiber;
                return existing;
              }
              deleteRemainingChildren(returnFiber, currentFirstChild);
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
              var key = element.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  var elementType = element.type;
                  if (elementType === REACT_FRAGMENT_TYPE) {
                    if (child.tag === Fragment29) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var existing = useFiber(child, element.props.children);
                      existing.return = returnFiber;
                      {
                        existing._debugSource = element._source;
                        existing._debugOwner = element._owner;
                      }
                      return existing;
                    }
                  } else {
                    if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                    // We need to do this after the Hot Reloading check above,
                    // because hot reloading has different semantics than prod because
                    // it doesn't resuspend. So we can't let the call below suspend.
                    typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                      deleteRemainingChildren(returnFiber, child.sibling);
                      var _existing = useFiber(child, element.props);
                      _existing.ref = coerceRef(returnFiber, child, element);
                      _existing.return = returnFiber;
                      {
                        _existing._debugSource = element._source;
                        _existing._debugOwner = element._owner;
                      }
                      return _existing;
                    }
                  }
                  deleteRemainingChildren(returnFiber, child);
                  break;
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              if (element.type === REACT_FRAGMENT_TYPE) {
                var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
                created.return = returnFiber;
                return created;
              } else {
                var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
                _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
                _created4.return = returnFiber;
                return _created4;
              }
            }
            function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
              var key = portal.key;
              var child = currentFirstChild;
              while (child !== null) {
                if (child.key === key) {
                  if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, portal.children || []);
                    existing.return = returnFiber;
                    return existing;
                  } else {
                    deleteRemainingChildren(returnFiber, child);
                    break;
                  }
                } else {
                  deleteChild(returnFiber, child);
                }
                child = child.sibling;
              }
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
              var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
              if (isUnkeyedTopLevelFragment) {
                newChild = newChild.props.children;
              }
              if (typeof newChild === "object" && newChild !== null) {
                switch (newChild.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_PORTAL_TYPE:
                    return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                  case REACT_LAZY_TYPE:
                    var payload = newChild._payload;
                    var init = newChild._init;
                    return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
                }
                if (isArray2(newChild)) {
                  return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
                }
                if (getIteratorFn(newChild)) {
                  return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
                }
                throwOnInvalidObjectType(returnFiber, newChild);
              }
              if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
                return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
              }
              {
                if (typeof newChild === "function") {
                  warnOnFunctionType(returnFiber);
                }
              }
              return deleteRemainingChildren(returnFiber, currentFirstChild);
            }
            return reconcileChildFibers2;
          }
          var reconcileChildFibers = ChildReconciler(true);
          var mountChildFibers = ChildReconciler(false);
          function cloneChildFibers(current2, workInProgress2) {
            if (current2 !== null && workInProgress2.child !== current2.child) {
              throw new Error("Resuming work not yet implemented.");
            }
            if (workInProgress2.child === null) {
              return;
            }
            var currentChild = workInProgress2.child;
            var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
            workInProgress2.child = newChild;
            newChild.return = workInProgress2;
            while (currentChild.sibling !== null) {
              currentChild = currentChild.sibling;
              newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
              newChild.return = workInProgress2;
            }
            newChild.sibling = null;
          }
          function resetChildFibers(workInProgress2, lanes) {
            var child = workInProgress2.child;
            while (child !== null) {
              resetWorkInProgress(child, lanes);
              child = child.sibling;
            }
          }
          var NO_CONTEXT = {};
          var contextStackCursor$1 = createCursor(NO_CONTEXT);
          var contextFiberStackCursor = createCursor(NO_CONTEXT);
          var rootInstanceStackCursor = createCursor(NO_CONTEXT);
          function requiredContext(c) {
            if (c === NO_CONTEXT) {
              throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
            }
            return c;
          }
          function getRootHostContainer() {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            return rootInstance;
          }
          function pushHostContainer(fiber, nextRootInstance) {
            push(rootInstanceStackCursor, nextRootInstance, fiber);
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, NO_CONTEXT, fiber);
            var nextRootContext = getRootHostContext(nextRootInstance);
            pop(contextStackCursor$1, fiber);
            push(contextStackCursor$1, nextRootContext, fiber);
          }
          function popHostContainer(fiber) {
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
            pop(rootInstanceStackCursor, fiber);
          }
          function getHostContext() {
            var context = requiredContext(contextStackCursor$1.current);
            return context;
          }
          function pushHostContext(fiber) {
            var rootInstance = requiredContext(rootInstanceStackCursor.current);
            var context = requiredContext(contextStackCursor$1.current);
            var nextContext = getChildHostContext(context, fiber.type);
            if (context === nextContext) {
              return;
            }
            push(contextFiberStackCursor, fiber, fiber);
            push(contextStackCursor$1, nextContext, fiber);
          }
          function popHostContext(fiber) {
            if (contextFiberStackCursor.current !== fiber) {
              return;
            }
            pop(contextStackCursor$1, fiber);
            pop(contextFiberStackCursor, fiber);
          }
          var DefaultSuspenseContext = 0;
          var SubtreeSuspenseContextMask = 1;
          var InvisibleParentSuspenseContext = 1;
          var ForceSuspenseFallback = 2;
          var suspenseStackCursor = createCursor(DefaultSuspenseContext);
          function hasSuspenseContext(parentContext, flag) {
            return (parentContext & flag) !== 0;
          }
          function setDefaultShallowSuspenseContext(parentContext) {
            return parentContext & SubtreeSuspenseContextMask;
          }
          function setShallowSuspenseContext(parentContext, shallowContext) {
            return parentContext & SubtreeSuspenseContextMask | shallowContext;
          }
          function addSubtreeSuspenseContext(parentContext, subtreeContext) {
            return parentContext | subtreeContext;
          }
          function pushSuspenseContext(fiber, newContext) {
            push(suspenseStackCursor, newContext, fiber);
          }
          function popSuspenseContext(fiber) {
            pop(suspenseStackCursor, fiber);
          }
          function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
            var nextState = workInProgress2.memoizedState;
            if (nextState !== null) {
              if (nextState.dehydrated !== null) {
                return true;
              }
              return false;
            }
            var props = workInProgress2.memoizedProps;
            {
              return true;
            }
          }
          function findFirstSuspended(row) {
            var node2 = row;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state = node2.memoizedState;
                if (state !== null) {
                  var dehydrated = state.dehydrated;
                  if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                    return node2;
                  }
                }
              } else if (node2.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
              // keep track of whether it suspended or not.
              node2.memoizedProps.revealOrder !== void 0) {
                var didSuspend = (node2.flags & DidCapture) !== NoFlags;
                if (didSuspend) {
                  return node2;
                }
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === row) {
                return null;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === row) {
                  return null;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return null;
          }
          var NoFlags$1 = (
            /*   */
            0
          );
          var HasEffect = (
            /* */
            1
          );
          var Insertion7 = (
            /*  */
            2
          );
          var Layout = (
            /*    */
            4
          );
          var Passive$1 = (
            /*   */
            8
          );
          var workInProgressSources = [];
          function resetWorkInProgressVersions() {
            for (var i = 0; i < workInProgressSources.length; i++) {
              var mutableSource = workInProgressSources[i];
              {
                mutableSource._workInProgressVersionPrimary = null;
              }
            }
            workInProgressSources.length = 0;
          }
          function registerMutableSourceForHydration(root2, mutableSource) {
            var getVersion = mutableSource._getVersion;
            var version = getVersion(mutableSource._source);
            if (root2.mutableSourceEagerHydrationData == null) {
              root2.mutableSourceEagerHydrationData = [mutableSource, version];
            } else {
              root2.mutableSourceEagerHydrationData.push(mutableSource, version);
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
          var didWarnAboutMismatchedHooksForComponent;
          var didWarnUncachedGetSnapshot;
          {
            didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
          }
          var renderLanes = NoLanes;
          var currentlyRenderingFiber$1 = null;
          var currentHook = null;
          var workInProgressHook = null;
          var didScheduleRenderPhaseUpdate = false;
          var didScheduleRenderPhaseUpdateDuringThisPass = false;
          var localIdCounter = 0;
          var globalClientIdCounter = 0;
          var RE_RENDER_LIMIT = 25;
          var currentHookNameInDev = null;
          var hookTypesDev = null;
          var hookTypesUpdateIndexDev = -1;
          var ignorePreviousDependencies = false;
          function mountHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev === null) {
                hookTypesDev = [hookName];
              } else {
                hookTypesDev.push(hookName);
              }
            }
          }
          function updateHookTypesDev() {
            {
              var hookName = currentHookNameInDev;
              if (hookTypesDev !== null) {
                hookTypesUpdateIndexDev++;
                if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                  warnOnHookMismatchInDev(hookName);
                }
              }
            }
          }
          function checkDepsAreArrayDev(deps) {
            {
              if (deps !== void 0 && deps !== null && !isArray2(deps)) {
                error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
              }
            }
          }
          function warnOnHookMismatchInDev(currentHookName) {
            {
              var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
              if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
                didWarnAboutMismatchedHooksForComponent.add(componentName);
                if (hookTypesDev !== null) {
                  var table = "";
                  var secondColumnStart = 30;
                  for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                    var oldHookName = hookTypesDev[i];
                    var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                    var row = i + 1 + ". " + oldHookName;
                    while (row.length < secondColumnStart) {
                      row += " ";
                    }
                    row += newHookName + "\n";
                    table += row;
                  }
                  error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
                }
              }
            }
          }
          function throwInvalidHookError() {
            throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
          }
          function areHookInputsEqual(nextDeps, prevDeps) {
            {
              if (ignorePreviousDependencies) {
                return false;
              }
            }
            if (prevDeps === null) {
              {
                error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
              }
              return false;
            }
            {
              if (nextDeps.length !== prevDeps.length) {
                error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
              }
            }
            for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
              if (objectIs(nextDeps[i], prevDeps[i])) {
                continue;
              }
              return false;
            }
            return true;
          }
          function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
            renderLanes = nextRenderLanes;
            currentlyRenderingFiber$1 = workInProgress2;
            {
              hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
              hookTypesUpdateIndexDev = -1;
              ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
            }
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.lanes = NoLanes;
            {
              if (current2 !== null && current2.memoizedState !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
              } else if (hookTypesDev !== null) {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
              } else {
                ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
              }
            }
            var children = Component(props, secondArg);
            if (didScheduleRenderPhaseUpdateDuringThisPass) {
              var numberOfReRenders = 0;
              do {
                didScheduleRenderPhaseUpdateDuringThisPass = false;
                localIdCounter = 0;
                if (numberOfReRenders >= RE_RENDER_LIMIT) {
                  throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
                }
                numberOfReRenders += 1;
                {
                  ignorePreviousDependencies = false;
                }
                currentHook = null;
                workInProgressHook = null;
                workInProgress2.updateQueue = null;
                {
                  hookTypesUpdateIndexDev = -1;
                }
                ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
                children = Component(props, secondArg);
              } while (didScheduleRenderPhaseUpdateDuringThisPass);
            }
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            {
              workInProgress2._debugHookTypes = hookTypesDev;
            }
            var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              currentHookNameInDev = null;
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
              // and creates false positives. To make this work in legacy mode, we'd
              // need to mark fibers that commit in an incomplete state, somehow. For
              // now I'll disable the warning that most of the bugs that would trigger
              // it are either exclusive to concurrent mode or exist in both.
              (current2.mode & ConcurrentMode) !== NoMode) {
                error("Internal React error: Expected static flag was missing. Please notify the React team.");
              }
            }
            didScheduleRenderPhaseUpdate = false;
            if (didRenderTooFewHooks) {
              throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
            }
            return children;
          }
          function checkDidRenderIdHook() {
            var didRenderIdHook = localIdCounter !== 0;
            localIdCounter = 0;
            return didRenderIdHook;
          }
          function bailoutHooks(current2, workInProgress2, lanes) {
            workInProgress2.updateQueue = current2.updateQueue;
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
            } else {
              workInProgress2.flags &= ~(Passive | Update);
            }
            current2.lanes = removeLanes(current2.lanes, lanes);
          }
          function resetHooksAfterThrow() {
            ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
            if (didScheduleRenderPhaseUpdate) {
              var hook = currentlyRenderingFiber$1.memoizedState;
              while (hook !== null) {
                var queue = hook.queue;
                if (queue !== null) {
                  queue.pending = null;
                }
                hook = hook.next;
              }
              didScheduleRenderPhaseUpdate = false;
            }
            renderLanes = NoLanes;
            currentlyRenderingFiber$1 = null;
            currentHook = null;
            workInProgressHook = null;
            {
              hookTypesDev = null;
              hookTypesUpdateIndexDev = -1;
              currentHookNameInDev = null;
              isUpdatingOpaqueValueInRenderPhase = false;
            }
            didScheduleRenderPhaseUpdateDuringThisPass = false;
            localIdCounter = 0;
          }
          function mountWorkInProgressHook() {
            var hook = {
              memoizedState: null,
              baseState: null,
              baseQueue: null,
              queue: null,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
            } else {
              workInProgressHook = workInProgressHook.next = hook;
            }
            return workInProgressHook;
          }
          function updateWorkInProgressHook() {
            var nextCurrentHook;
            if (currentHook === null) {
              var current2 = currentlyRenderingFiber$1.alternate;
              if (current2 !== null) {
                nextCurrentHook = current2.memoizedState;
              } else {
                nextCurrentHook = null;
              }
            } else {
              nextCurrentHook = currentHook.next;
            }
            var nextWorkInProgressHook;
            if (workInProgressHook === null) {
              nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
            } else {
              nextWorkInProgressHook = workInProgressHook.next;
            }
            if (nextWorkInProgressHook !== null) {
              workInProgressHook = nextWorkInProgressHook;
              nextWorkInProgressHook = workInProgressHook.next;
              currentHook = nextCurrentHook;
            } else {
              if (nextCurrentHook === null) {
                throw new Error("Rendered more hooks than during the previous render.");
              }
              currentHook = nextCurrentHook;
              var newHook = {
                memoizedState: currentHook.memoizedState,
                baseState: currentHook.baseState,
                baseQueue: currentHook.baseQueue,
                queue: currentHook.queue,
                next: null
              };
              if (workInProgressHook === null) {
                currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
              } else {
                workInProgressHook = workInProgressHook.next = newHook;
              }
            }
            return workInProgressHook;
          }
          function createFunctionComponentUpdateQueue() {
            return {
              lastEffect: null,
              stores: null
            };
          }
          function basicStateReducer(state, action) {
            return typeof action === "function" ? action(state) : action;
          }
          function mountReducer(reducer, initialArg, init) {
            var hook = mountWorkInProgressHook();
            var initialState;
            if (init !== void 0) {
              initialState = init(initialArg);
            } else {
              initialState = initialArg;
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: reducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var current2 = currentHook;
            var baseQueue = current2.baseQueue;
            var pendingQueue = queue.pending;
            if (pendingQueue !== null) {
              if (baseQueue !== null) {
                var baseFirst = baseQueue.next;
                var pendingFirst = pendingQueue.next;
                baseQueue.next = pendingFirst;
                pendingQueue.next = baseFirst;
              }
              {
                if (current2.baseQueue !== baseQueue) {
                  error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
                }
              }
              current2.baseQueue = baseQueue = pendingQueue;
              queue.pending = null;
            }
            if (baseQueue !== null) {
              var first = baseQueue.next;
              var newState = current2.baseState;
              var newBaseState = null;
              var newBaseQueueFirst = null;
              var newBaseQueueLast = null;
              var update2 = first;
              do {
                var updateLane = update2.lane;
                if (!isSubsetOfLanes(renderLanes, updateLane)) {
                  var clone = {
                    lane: updateLane,
                    action: update2.action,
                    hasEagerState: update2.hasEagerState,
                    eagerState: update2.eagerState,
                    next: null
                  };
                  if (newBaseQueueLast === null) {
                    newBaseQueueFirst = newBaseQueueLast = clone;
                    newBaseState = newState;
                  } else {
                    newBaseQueueLast = newBaseQueueLast.next = clone;
                  }
                  currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                  markSkippedUpdateLanes(updateLane);
                } else {
                  if (newBaseQueueLast !== null) {
                    var _clone = {
                      // This update is going to be committed so we never want uncommit
                      // it. Using NoLane works because 0 is a subset of all bitmasks, so
                      // this will never be skipped by the check above.
                      lane: NoLane,
                      action: update2.action,
                      hasEagerState: update2.hasEagerState,
                      eagerState: update2.eagerState,
                      next: null
                    };
                    newBaseQueueLast = newBaseQueueLast.next = _clone;
                  }
                  if (update2.hasEagerState) {
                    newState = update2.eagerState;
                  } else {
                    var action = update2.action;
                    newState = reducer(newState, action);
                  }
                }
                update2 = update2.next;
              } while (update2 !== null && update2 !== first);
              if (newBaseQueueLast === null) {
                newBaseState = newState;
              } else {
                newBaseQueueLast.next = newBaseQueueFirst;
              }
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              hook.baseState = newBaseState;
              hook.baseQueue = newBaseQueueLast;
              queue.lastRenderedState = newState;
            }
            var lastInterleaved = queue.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                var interleavedLane = interleaved.lane;
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
                markSkippedUpdateLanes(interleavedLane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (baseQueue === null) {
              queue.lanes = NoLanes;
            }
            var dispatch = queue.dispatch;
            return [hook.memoizedState, dispatch];
          }
          function rerenderReducer(reducer, initialArg, init) {
            var hook = updateWorkInProgressHook();
            var queue = hook.queue;
            if (queue === null) {
              throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
            }
            queue.lastRenderedReducer = reducer;
            var dispatch = queue.dispatch;
            var lastRenderPhaseUpdate = queue.pending;
            var newState = hook.memoizedState;
            if (lastRenderPhaseUpdate !== null) {
              queue.pending = null;
              var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
              var update2 = firstRenderPhaseUpdate;
              do {
                var action = update2.action;
                newState = reducer(newState, action);
                update2 = update2.next;
              } while (update2 !== firstRenderPhaseUpdate);
              if (!objectIs(newState, hook.memoizedState)) {
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = newState;
              if (hook.baseQueue === null) {
                hook.baseState = newState;
              }
              queue.lastRenderedState = newState;
            }
            return [newState, dispatch];
          }
          function mountMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function updateMutableSource(source, getSnapshot, subscribe) {
            {
              return void 0;
            }
          }
          function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = mountWorkInProgressHook();
            var nextSnapshot;
            var isHydrating2 = getIsHydrating();
            if (isHydrating2) {
              if (getServerSnapshot === void 0) {
                throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
              }
              nextSnapshot = getServerSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  if (nextSnapshot !== getServerSnapshot()) {
                    error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
            } else {
              nextSnapshot = getSnapshot();
              {
                if (!didWarnUncachedGetSnapshot) {
                  var cachedSnapshot = getSnapshot();
                  if (!objectIs(nextSnapshot, cachedSnapshot)) {
                    error("The result of getSnapshot should be cached to avoid an infinite loop");
                    didWarnUncachedGetSnapshot = true;
                  }
                }
              }
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            hook.memoizedState = nextSnapshot;
            var inst = {
              value: nextSnapshot,
              getSnapshot
            };
            hook.queue = inst;
            mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            return nextSnapshot;
          }
          function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var fiber = currentlyRenderingFiber$1;
            var hook = updateWorkInProgressHook();
            var nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var prevSnapshot = hook.memoizedState;
            var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
            if (snapshotChanged) {
              hook.memoizedState = nextSnapshot;
              markWorkInProgressReceivedUpdate();
            }
            var inst = hook.queue;
            updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
            if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
            // checking whether we scheduled a subscription effect above.
            workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
              fiber.flags |= Passive;
              pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
              var root2 = getWorkInProgressRoot();
              if (root2 === null) {
                throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
              }
              if (!includesBlockingLane(root2, renderLanes)) {
                pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
              }
            }
            return nextSnapshot;
          }
          function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
            fiber.flags |= StoreConsistency;
            var check = {
              getSnapshot,
              value: renderedSnapshot
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.stores = [check];
            } else {
              var stores = componentUpdateQueue.stores;
              if (stores === null) {
                componentUpdateQueue.stores = [check];
              } else {
                stores.push(check);
              }
            }
          }
          function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
            inst.value = nextSnapshot;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          }
          function subscribeToStore(fiber, inst, subscribe) {
            var handleStoreChange = function() {
              if (checkIfSnapshotChanged(inst)) {
                forceStoreRerender(fiber);
              }
            };
            return subscribe(handleStoreChange);
          }
          function checkIfSnapshotChanged(inst) {
            var latestGetSnapshot = inst.getSnapshot;
            var prevValue = inst.value;
            try {
              var nextValue = latestGetSnapshot();
              return !objectIs(prevValue, nextValue);
            } catch (error2) {
              return true;
            }
          }
          function forceStoreRerender(fiber) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          }
          function mountState(initialState) {
            var hook = mountWorkInProgressHook();
            if (typeof initialState === "function") {
              initialState = initialState();
            }
            hook.memoizedState = hook.baseState = initialState;
            var queue = {
              pending: null,
              interleaved: null,
              lanes: NoLanes,
              dispatch: null,
              lastRenderedReducer: basicStateReducer,
              lastRenderedState: initialState
            };
            hook.queue = queue;
            var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
            return [hook.memoizedState, dispatch];
          }
          function updateState(initialState) {
            return updateReducer(basicStateReducer);
          }
          function rerenderState(initialState) {
            return rerenderReducer(basicStateReducer);
          }
          function pushEffect(tag, create, destroy, deps) {
            var effect4 = {
              tag,
              create,
              destroy,
              deps,
              // Circular
              next: null
            };
            var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
            if (componentUpdateQueue === null) {
              componentUpdateQueue = createFunctionComponentUpdateQueue();
              currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
              componentUpdateQueue.lastEffect = effect4.next = effect4;
            } else {
              var lastEffect = componentUpdateQueue.lastEffect;
              if (lastEffect === null) {
                componentUpdateQueue.lastEffect = effect4.next = effect4;
              } else {
                var firstEffect = lastEffect.next;
                lastEffect.next = effect4;
                effect4.next = firstEffect;
                componentUpdateQueue.lastEffect = effect4;
              }
            }
            return effect4;
          }
          function mountRef(initialValue) {
            var hook = mountWorkInProgressHook();
            {
              var _ref2 = {
                current: initialValue
              };
              hook.memoizedState = _ref2;
              return _ref2;
            }
          }
          function updateRef(initialValue) {
            var hook = updateWorkInProgressHook();
            return hook.memoizedState;
          }
          function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
          }
          function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var destroy = void 0;
            if (currentHook !== null) {
              var prevEffect = currentHook.memoizedState;
              destroy = prevEffect.destroy;
              if (nextDeps !== null) {
                var prevDeps = prevEffect.deps;
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                  return;
                }
              }
            }
            currentlyRenderingFiber$1.flags |= fiberFlags;
            hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
          }
          function mountEffect(create, deps) {
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
            } else {
              return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
            }
          }
          function updateEffect(create, deps) {
            return updateEffectImpl(Passive, Passive$1, create, deps);
          }
          function mountInsertionEffect(create, deps) {
            return mountEffectImpl(Update, Insertion7, create, deps);
          }
          function updateInsertionEffect(create, deps) {
            return updateEffectImpl(Update, Insertion7, create, deps);
          }
          function mountLayoutEffect(create, deps) {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, create, deps);
          }
          function updateLayoutEffect(create, deps) {
            return updateEffectImpl(Update, Layout, create, deps);
          }
          function imperativeHandleEffect(create, ref) {
            if (typeof ref === "function") {
              var refCallback = ref;
              var _inst = create();
              refCallback(_inst);
              return function() {
                refCallback(null);
              };
            } else if (ref !== null && ref !== void 0) {
              var refObject = ref;
              {
                if (!refObject.hasOwnProperty("current")) {
                  error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
                }
              }
              var _inst2 = create();
              refObject.current = _inst2;
              return function() {
                refObject.current = null;
              };
            }
          }
          function mountImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function updateImperativeHandle(ref, create, deps) {
            {
              if (typeof create !== "function") {
                error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
              }
            }
            var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
            return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
          }
          function mountDebugValue(value, formatterFn) {
          }
          var updateDebugValue = mountDebugValue;
          function mountCallback(callback, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function updateCallback(callback, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            hook.memoizedState = [callback, nextDeps];
            return callback;
          }
          function mountMemo(nextCreate, deps) {
            var hook = mountWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function updateMemo(nextCreate, deps) {
            var hook = updateWorkInProgressHook();
            var nextDeps = deps === void 0 ? null : deps;
            var prevState = hook.memoizedState;
            if (prevState !== null) {
              if (nextDeps !== null) {
                var prevDeps = prevState[1];
                if (areHookInputsEqual(nextDeps, prevDeps)) {
                  return prevState[0];
                }
              }
            }
            var nextValue = nextCreate();
            hook.memoizedState = [nextValue, nextDeps];
            return nextValue;
          }
          function mountDeferredValue(value) {
            var hook = mountWorkInProgressHook();
            hook.memoizedState = value;
            return value;
          }
          function updateDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            var resolvedCurrentHook = currentHook;
            var prevValue = resolvedCurrentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
          function rerenderDeferredValue(value) {
            var hook = updateWorkInProgressHook();
            if (currentHook === null) {
              hook.memoizedState = value;
              return value;
            } else {
              var prevValue = currentHook.memoizedState;
              return updateDeferredValueImpl(hook, prevValue, value);
            }
          }
          function updateDeferredValueImpl(hook, prevValue, value) {
            var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
            if (shouldDeferValue) {
              if (!objectIs(value, prevValue)) {
                var deferredLane = claimNextTransitionLane();
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
                markSkippedUpdateLanes(deferredLane);
                hook.baseState = true;
              }
              return prevValue;
            } else {
              if (hook.baseState) {
                hook.baseState = false;
                markWorkInProgressReceivedUpdate();
              }
              hook.memoizedState = value;
              return value;
            }
          }
          function startTransition(setPending, callback, options2) {
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
            setPending(true);
            var prevTransition = ReactCurrentBatchConfig$2.transition;
            ReactCurrentBatchConfig$2.transition = {};
            var currentTransition = ReactCurrentBatchConfig$2.transition;
            {
              ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              setPending(false);
              callback();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$2.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          function mountTransition() {
            var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
            var start2 = startTransition.bind(null, setPending);
            var hook = mountWorkInProgressHook();
            hook.memoizedState = start2;
            return [isPending, start2];
          }
          function updateTransition() {
            var _updateState = updateState(), isPending = _updateState[0];
            var hook = updateWorkInProgressHook();
            var start2 = hook.memoizedState;
            return [isPending, start2];
          }
          function rerenderTransition() {
            var _rerenderState = rerenderState(), isPending = _rerenderState[0];
            var hook = updateWorkInProgressHook();
            var start2 = hook.memoizedState;
            return [isPending, start2];
          }
          var isUpdatingOpaqueValueInRenderPhase = false;
          function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
            {
              return isUpdatingOpaqueValueInRenderPhase;
            }
          }
          function mountId() {
            var hook = mountWorkInProgressHook();
            var root2 = getWorkInProgressRoot();
            var identifierPrefix = root2.identifierPrefix;
            var id;
            if (getIsHydrating()) {
              var treeId = getTreeId();
              id = ":" + identifierPrefix + "R" + treeId;
              var localId = localIdCounter++;
              if (localId > 0) {
                id += "H" + localId.toString(32);
              }
              id += ":";
            } else {
              var globalClientId = globalClientIdCounter++;
              id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
            }
            hook.memoizedState = id;
            return id;
          }
          function updateId() {
            var hook = updateWorkInProgressHook();
            var id = hook.memoizedState;
            return id;
          }
          function dispatchReducerAction(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update2 = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update2);
            } else {
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update2, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function dispatchSetState(fiber, queue, action) {
            {
              if (typeof arguments[3] === "function") {
                error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
              }
            }
            var lane = requestUpdateLane(fiber);
            var update2 = {
              lane,
              action,
              hasEagerState: false,
              eagerState: null,
              next: null
            };
            if (isRenderPhaseUpdate(fiber)) {
              enqueueRenderPhaseUpdate(queue, update2);
            } else {
              var alternate = fiber.alternate;
              if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
                var lastRenderedReducer = queue.lastRenderedReducer;
                if (lastRenderedReducer !== null) {
                  var prevDispatcher;
                  {
                    prevDispatcher = ReactCurrentDispatcher$1.current;
                    ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                  }
                  try {
                    var currentState = queue.lastRenderedState;
                    var eagerState = lastRenderedReducer(currentState, action);
                    update2.hasEagerState = true;
                    update2.eagerState = eagerState;
                    if (objectIs(eagerState, currentState)) {
                      enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update2, lane);
                      return;
                    }
                  } catch (error2) {
                  } finally {
                    {
                      ReactCurrentDispatcher$1.current = prevDispatcher;
                    }
                  }
                }
              }
              var root2 = enqueueConcurrentHookUpdate(fiber, queue, update2, lane);
              if (root2 !== null) {
                var eventTime = requestEventTime();
                scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
                entangleTransitionUpdate(root2, queue, lane);
              }
            }
            markUpdateInDevTools(fiber, lane);
          }
          function isRenderPhaseUpdate(fiber) {
            var alternate = fiber.alternate;
            return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
          }
          function enqueueRenderPhaseUpdate(queue, update2) {
            didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
            var pending = queue.pending;
            if (pending === null) {
              update2.next = update2;
            } else {
              update2.next = pending.next;
              pending.next = update2;
            }
            queue.pending = update2;
          }
          function entangleTransitionUpdate(root2, queue, lane) {
            if (isTransitionLane(lane)) {
              var queueLanes = queue.lanes;
              queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
              var newQueueLanes = mergeLanes(queueLanes, lane);
              queue.lanes = newQueueLanes;
              markRootEntangled(root2, newQueueLanes);
            }
          }
          function markUpdateInDevTools(fiber, lane, action) {
            {
              markStateUpdateScheduled(fiber, lane);
            }
          }
          var ContextOnlyDispatcher = {
            readContext,
            useCallback: throwInvalidHookError,
            useContext: throwInvalidHookError,
            useEffect: throwInvalidHookError,
            useImperativeHandle: throwInvalidHookError,
            useInsertionEffect: throwInvalidHookError,
            useLayoutEffect: throwInvalidHookError,
            useMemo: throwInvalidHookError,
            useReducer: throwInvalidHookError,
            useRef: throwInvalidHookError,
            useState: throwInvalidHookError,
            useDebugValue: throwInvalidHookError,
            useDeferredValue: throwInvalidHookError,
            useTransition: throwInvalidHookError,
            useMutableSource: throwInvalidHookError,
            useSyncExternalStore: throwInvalidHookError,
            useId: throwInvalidHookError,
            unstable_isNewReconciler: enableNewReconciler
          };
          var HooksDispatcherOnMountInDEV = null;
          var HooksDispatcherOnMountWithHookTypesInDEV = null;
          var HooksDispatcherOnUpdateInDEV = null;
          var HooksDispatcherOnRerenderInDEV = null;
          var InvalidNestedHooksDispatcherOnMountInDEV = null;
          var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
          var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
          {
            var warnInvalidContextAccess = function() {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            };
            var warnInvalidHookAccess = function() {
              error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
            };
            HooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                mountHookTypesDev();
                checkDepsAreArrayDev(deps);
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnMountWithHookTypesInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            HooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnMountInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountRef(initialValue);
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                mountHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
                try {
                  return mountState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                mountHookTypesDev();
                return mountId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnUpdateInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
            InvalidNestedHooksDispatcherOnRerenderInDEV = {
              readContext: function(context) {
                warnInvalidContextAccess();
                return readContext(context);
              },
              useCallback: function(callback, deps) {
                currentHookNameInDev = "useCallback";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateCallback(callback, deps);
              },
              useContext: function(context) {
                currentHookNameInDev = "useContext";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return readContext(context);
              },
              useEffect: function(create, deps) {
                currentHookNameInDev = "useEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateEffect(create, deps);
              },
              useImperativeHandle: function(ref, create, deps) {
                currentHookNameInDev = "useImperativeHandle";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateImperativeHandle(ref, create, deps);
              },
              useInsertionEffect: function(create, deps) {
                currentHookNameInDev = "useInsertionEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateInsertionEffect(create, deps);
              },
              useLayoutEffect: function(create, deps) {
                currentHookNameInDev = "useLayoutEffect";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateLayoutEffect(create, deps);
              },
              useMemo: function(create, deps) {
                currentHookNameInDev = "useMemo";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return updateMemo(create, deps);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useReducer: function(reducer, initialArg, init) {
                currentHookNameInDev = "useReducer";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderReducer(reducer, initialArg, init);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useRef: function(initialValue) {
                currentHookNameInDev = "useRef";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateRef();
              },
              useState: function(initialState) {
                currentHookNameInDev = "useState";
                warnInvalidHookAccess();
                updateHookTypesDev();
                var prevDispatcher = ReactCurrentDispatcher$1.current;
                ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                try {
                  return rerenderState(initialState);
                } finally {
                  ReactCurrentDispatcher$1.current = prevDispatcher;
                }
              },
              useDebugValue: function(value, formatterFn) {
                currentHookNameInDev = "useDebugValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateDebugValue();
              },
              useDeferredValue: function(value) {
                currentHookNameInDev = "useDeferredValue";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderDeferredValue(value);
              },
              useTransition: function() {
                currentHookNameInDev = "useTransition";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return rerenderTransition();
              },
              useMutableSource: function(source, getSnapshot, subscribe) {
                currentHookNameInDev = "useMutableSource";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateMutableSource();
              },
              useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
                currentHookNameInDev = "useSyncExternalStore";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateSyncExternalStore(subscribe, getSnapshot);
              },
              useId: function() {
                currentHookNameInDev = "useId";
                warnInvalidHookAccess();
                updateHookTypesDev();
                return updateId();
              },
              unstable_isNewReconciler: enableNewReconciler
            };
          }
          var now$1 = Scheduler.unstable_now;
          var commitTime = 0;
          var layoutEffectStartTime = -1;
          var profilerStartTime = -1;
          var passiveEffectStartTime = -1;
          var currentUpdateIsNested = false;
          var nestedUpdateScheduled = false;
          function isCurrentUpdateNested() {
            return currentUpdateIsNested;
          }
          function markNestedUpdateScheduled() {
            {
              nestedUpdateScheduled = true;
            }
          }
          function resetNestedUpdateFlag() {
            {
              currentUpdateIsNested = false;
              nestedUpdateScheduled = false;
            }
          }
          function syncNestedUpdateFlag() {
            {
              currentUpdateIsNested = nestedUpdateScheduled;
              nestedUpdateScheduled = false;
            }
          }
          function getCommitTime() {
            return commitTime;
          }
          function recordCommitTime() {
            commitTime = now$1();
          }
          function startProfilerTimer(fiber) {
            profilerStartTime = now$1();
            if (fiber.actualStartTime < 0) {
              fiber.actualStartTime = now$1();
            }
          }
          function stopProfilerTimerIfRunning(fiber) {
            profilerStartTime = -1;
          }
          function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
            if (profilerStartTime >= 0) {
              var elapsedTime = now$1() - profilerStartTime;
              fiber.actualDuration += elapsedTime;
              if (overrideBaseTime) {
                fiber.selfBaseDuration = elapsedTime;
              }
              profilerStartTime = -1;
            }
          }
          function recordLayoutEffectDuration(fiber) {
            if (layoutEffectStartTime >= 0) {
              var elapsedTime = now$1() - layoutEffectStartTime;
              layoutEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    root2.effectDuration += elapsedTime;
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    parentStateNode.effectDuration += elapsedTime;
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function recordPassiveEffectDuration(fiber) {
            if (passiveEffectStartTime >= 0) {
              var elapsedTime = now$1() - passiveEffectStartTime;
              passiveEffectStartTime = -1;
              var parentFiber = fiber.return;
              while (parentFiber !== null) {
                switch (parentFiber.tag) {
                  case HostRoot:
                    var root2 = parentFiber.stateNode;
                    if (root2 !== null) {
                      root2.passiveEffectDuration += elapsedTime;
                    }
                    return;
                  case Profiler:
                    var parentStateNode = parentFiber.stateNode;
                    if (parentStateNode !== null) {
                      parentStateNode.passiveEffectDuration += elapsedTime;
                    }
                    return;
                }
                parentFiber = parentFiber.return;
              }
            }
          }
          function startLayoutEffectTimer() {
            layoutEffectStartTime = now$1();
          }
          function startPassiveEffectTimer() {
            passiveEffectStartTime = now$1();
          }
          function transferActualDuration(fiber) {
            var child = fiber.child;
            while (child) {
              fiber.actualDuration += child.actualDuration;
              child = child.sibling;
            }
          }
          function createCapturedValueAtFiber(value, source) {
            return {
              value,
              source,
              stack: getStackByFiberInDevAndProd(source),
              digest: null
            };
          }
          function createCapturedValue(value, digest, stack) {
            return {
              value,
              source: null,
              stack: stack != null ? stack : null,
              digest: digest != null ? digest : null
            };
          }
          function showErrorDialog(boundary, errorInfo) {
            return true;
          }
          function logCapturedError(boundary, errorInfo) {
            try {
              var logError = showErrorDialog(boundary, errorInfo);
              if (logError === false) {
                return;
              }
              var error2 = errorInfo.value;
              if (true) {
                var source = errorInfo.source;
                var stack = errorInfo.stack;
                var componentStack = stack !== null ? stack : "";
                if (error2 != null && error2._suppressLogging) {
                  if (boundary.tag === ClassComponent) {
                    return;
                  }
                  console["error"](error2);
                }
                var componentName = source ? getComponentNameFromFiber(source) : null;
                var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
                var errorBoundaryMessage;
                if (boundary.tag === HostRoot) {
                  errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
                } else {
                  var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                  errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
                }
                var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
                console["error"](combinedMessage);
              } else {
                console["error"](error2);
              }
            } catch (e) {
              setTimeout(function() {
                throw e;
              });
            }
          }
          var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
          function createRootErrorUpdate(fiber, errorInfo, lane) {
            var update2 = createUpdate(NoTimestamp, lane);
            update2.tag = CaptureUpdate;
            update2.payload = {
              element: null
            };
            var error2 = errorInfo.value;
            update2.callback = function() {
              onUncaughtError(error2);
              logCapturedError(fiber, errorInfo);
            };
            return update2;
          }
          function createClassErrorUpdate(fiber, errorInfo, lane) {
            var update2 = createUpdate(NoTimestamp, lane);
            update2.tag = CaptureUpdate;
            var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
            if (typeof getDerivedStateFromError === "function") {
              var error$1 = errorInfo.value;
              update2.payload = function() {
                return getDerivedStateFromError(error$1);
              };
              update2.callback = function() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
              };
            }
            var inst = fiber.stateNode;
            if (inst !== null && typeof inst.componentDidCatch === "function") {
              update2.callback = function callback() {
                {
                  markFailedErrorBoundaryForHotReloading(fiber);
                }
                logCapturedError(fiber, errorInfo);
                if (typeof getDerivedStateFromError !== "function") {
                  markLegacyErrorBoundaryAsFailed(this);
                }
                var error$12 = errorInfo.value;
                var stack = errorInfo.stack;
                this.componentDidCatch(error$12, {
                  componentStack: stack !== null ? stack : ""
                });
                {
                  if (typeof getDerivedStateFromError !== "function") {
                    if (!includesSomeLane(fiber.lanes, SyncLane)) {
                      error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                    }
                  }
                }
              };
            }
            return update2;
          }
          function attachPingListener(root2, wakeable, lanes) {
            var pingCache = root2.pingCache;
            var threadIDs;
            if (pingCache === null) {
              pingCache = root2.pingCache = new PossiblyWeakMap$1();
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            } else {
              threadIDs = pingCache.get(wakeable);
              if (threadIDs === void 0) {
                threadIDs = /* @__PURE__ */ new Set();
                pingCache.set(wakeable, threadIDs);
              }
            }
            if (!threadIDs.has(lanes)) {
              threadIDs.add(lanes);
              var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
              {
                if (isDevToolsPresent) {
                  restorePendingUpdaters(root2, lanes);
                }
              }
              wakeable.then(ping, ping);
            }
          }
          function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
            var wakeables = suspenseBoundary.updateQueue;
            if (wakeables === null) {
              var updateQueue = /* @__PURE__ */ new Set();
              updateQueue.add(wakeable);
              suspenseBoundary.updateQueue = updateQueue;
            } else {
              wakeables.add(wakeable);
            }
          }
          function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
            var tag = sourceFiber.tag;
            if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
              var currentSource = sourceFiber.alternate;
              if (currentSource) {
                sourceFiber.updateQueue = currentSource.updateQueue;
                sourceFiber.memoizedState = currentSource.memoizedState;
                sourceFiber.lanes = currentSource.lanes;
              } else {
                sourceFiber.updateQueue = null;
                sourceFiber.memoizedState = null;
              }
            }
          }
          function getNearestSuspenseBoundaryToCapture(returnFiber) {
            var node2 = returnFiber;
            do {
              if (node2.tag === SuspenseComponent && shouldCaptureSuspense(node2)) {
                return node2;
              }
              node2 = node2.return;
            } while (node2 !== null);
            return null;
          }
          function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
            if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
              if (suspenseBoundary === returnFiber) {
                suspenseBoundary.flags |= ShouldCapture;
              } else {
                suspenseBoundary.flags |= DidCapture;
                sourceFiber.flags |= ForceUpdateForLegacySuspense;
                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate;
                  if (currentSourceFiber === null) {
                    sourceFiber.tag = IncompleteClassComponent;
                  } else {
                    var update2 = createUpdate(NoTimestamp, SyncLane);
                    update2.tag = ForceUpdate;
                    enqueueUpdate(sourceFiber, update2, SyncLane);
                  }
                }
                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
              }
              return suspenseBoundary;
            }
            suspenseBoundary.flags |= ShouldCapture;
            suspenseBoundary.lanes = rootRenderLanes;
            return suspenseBoundary;
          }
          function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
            sourceFiber.flags |= Incomplete;
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, rootRenderLanes);
              }
            }
            if (value !== null && typeof value === "object" && typeof value.then === "function") {
              var wakeable = value;
              resetSuspendedComponent(sourceFiber);
              {
                if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                  markDidThrowWhileHydratingDEV();
                }
              }
              var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (suspenseBoundary !== null) {
                suspenseBoundary.flags &= ~ForceClientRender;
                markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                if (suspenseBoundary.mode & ConcurrentMode) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                }
                attachRetryListener(suspenseBoundary, root2, wakeable);
                return;
              } else {
                if (!includesSyncLane(rootRenderLanes)) {
                  attachPingListener(root2, wakeable, rootRenderLanes);
                  renderDidSuspendDelayIfPossible();
                  return;
                }
                var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
                value = uncaughtSuspenseError;
              }
            } else {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
                var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
                if (_suspenseBoundary !== null) {
                  if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                    _suspenseBoundary.flags |= ForceClientRender;
                  }
                  markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                  queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                  return;
                }
              }
            }
            value = createCapturedValueAtFiber(value, sourceFiber);
            renderDidError(value);
            var workInProgress2 = returnFiber;
            do {
              switch (workInProgress2.tag) {
                case HostRoot: {
                  var _errorInfo = value;
                  workInProgress2.flags |= ShouldCapture;
                  var lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update2 = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                  enqueueCapturedUpdate(workInProgress2, update2);
                  return;
                }
                case ClassComponent:
                  var errorInfo = value;
                  var ctor = workInProgress2.type;
                  var instance = workInProgress2.stateNode;
                  if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                    workInProgress2.flags |= ShouldCapture;
                    var _lane = pickArbitraryLane(rootRenderLanes);
                    workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                    var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                    enqueueCapturedUpdate(workInProgress2, _update);
                    return;
                  }
                  break;
              }
              workInProgress2 = workInProgress2.return;
            } while (workInProgress2 !== null);
          }
          function getSuspendedCache() {
            {
              return null;
            }
          }
          var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
          var didReceiveUpdate = false;
          var didWarnAboutBadClass;
          var didWarnAboutModulePatternComponent;
          var didWarnAboutContextTypeOnFunctionComponent;
          var didWarnAboutGetDerivedStateOnFunctionComponent;
          var didWarnAboutFunctionRefs;
          var didWarnAboutReassigningProps;
          var didWarnAboutRevealOrder;
          var didWarnAboutTailOptions;
          {
            didWarnAboutBadClass = {};
            didWarnAboutModulePatternComponent = {};
            didWarnAboutContextTypeOnFunctionComponent = {};
            didWarnAboutGetDerivedStateOnFunctionComponent = {};
            didWarnAboutFunctionRefs = {};
            didWarnAboutReassigningProps = false;
            didWarnAboutRevealOrder = {};
            didWarnAboutTailOptions = {};
          }
          function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
            if (current2 === null) {
              workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
            }
          }
          function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          }
          function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var render2 = Component.render;
            var ref = workInProgress2.ref;
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            if (current2 === null) {
              var type = Component.type;
              if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
              Component.defaultProps === void 0) {
                var resolvedType = type;
                {
                  resolvedType = resolveFunctionForHotReloading(type);
                }
                workInProgress2.tag = SimpleMemoComponent;
                workInProgress2.type = resolvedType;
                {
                  validateFunctionComponentInDev(workInProgress2, type);
                }
                return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
              }
              {
                var innerPropTypes = type.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(type)
                  );
                }
              }
              var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
              child.ref = workInProgress2.ref;
              child.return = workInProgress2;
              workInProgress2.child = child;
              return child;
            }
            {
              var _type = Component.type;
              var _innerPropTypes = _type.propTypes;
              if (_innerPropTypes) {
                checkPropTypes(
                  _innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(_type)
                );
              }
            }
            var currentChild = current2.child;
            var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
            if (!hasScheduledUpdateOrContext) {
              var prevProps = currentChild.memoizedProps;
              var compare = Component.compare;
              compare = compare !== null ? compare : shallowEqual;
              if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
            }
            workInProgress2.flags |= PerformedWork;
            var newChild = createWorkInProgress(currentChild, nextProps);
            newChild.ref = workInProgress2.ref;
            newChild.return = workInProgress2;
            workInProgress2.child = newChild;
            return newChild;
          }
          function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var outerMemoType = workInProgress2.elementType;
                if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                  var lazyComponent = outerMemoType;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    outerMemoType = init(payload);
                  } catch (x) {
                    outerMemoType = null;
                  }
                  var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      nextProps,
                      // Resolved (SimpleMemoComponent has no defaultProps)
                      "prop",
                      getComponentNameFromType(outerMemoType)
                    );
                  }
                }
              }
            }
            if (current2 !== null) {
              var prevProps = current2.memoizedProps;
              if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
              workInProgress2.type === current2.type) {
                didReceiveUpdate = false;
                workInProgress2.pendingProps = nextProps = prevProps;
                if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                  workInProgress2.lanes = current2.lanes;
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                }
              }
            }
            return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            var prevState = current2 !== null ? current2.memoizedState : null;
            if (nextProps.mode === "hidden" || enableLegacyHidden) {
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                var nextState = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = nextState;
                pushRenderLanes(workInProgress2, renderLanes2);
              } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
                var spawnedCachePool = null;
                var nextBaseLanes;
                if (prevState !== null) {
                  var prevBaseLanes = prevState.baseLanes;
                  nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
                } else {
                  nextBaseLanes = renderLanes2;
                }
                workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
                var _nextState = {
                  baseLanes: nextBaseLanes,
                  cachePool: spawnedCachePool,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState;
                workInProgress2.updateQueue = null;
                pushRenderLanes(workInProgress2, nextBaseLanes);
                return null;
              } else {
                var _nextState2 = {
                  baseLanes: NoLanes,
                  cachePool: null,
                  transitions: null
                };
                workInProgress2.memoizedState = _nextState2;
                var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
                pushRenderLanes(workInProgress2, subtreeRenderLanes2);
              }
            } else {
              var _subtreeRenderLanes;
              if (prevState !== null) {
                _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
                workInProgress2.memoizedState = null;
              } else {
                _subtreeRenderLanes = renderLanes2;
              }
              pushRenderLanes(workInProgress2, _subtreeRenderLanes);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateFragment(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateMode(current2, workInProgress2, renderLanes2) {
            var nextChildren = workInProgress2.pendingProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateProfiler(current2, workInProgress2, renderLanes2) {
            {
              workInProgress2.flags |= Update;
              {
                var stateNode = workInProgress2.stateNode;
                stateNode.effectDuration = 0;
                stateNode.passiveEffectDuration = 0;
              }
            }
            var nextProps = workInProgress2.pendingProps;
            var nextChildren = nextProps.children;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markRef(current2, workInProgress2) {
            var ref = workInProgress2.ref;
            if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
              workInProgress2.flags |= Ref;
              {
                workInProgress2.flags |= RefStatic;
              }
            }
          }
          function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            var nextChildren;
            var hasId;
            prepareToReadContext(workInProgress2, renderLanes2);
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            if (current2 !== null && !didReceiveUpdate) {
              bailoutHooks(current2, workInProgress2, renderLanes2);
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
            {
              switch (shouldError(workInProgress2)) {
                case false: {
                  var _instance = workInProgress2.stateNode;
                  var ctor = workInProgress2.type;
                  var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                  var state = tempInstance.state;
                  _instance.updater.enqueueSetState(_instance, state, null);
                  break;
                }
                case true: {
                  workInProgress2.flags |= DidCapture;
                  workInProgress2.flags |= ShouldCapture;
                  var error$1 = new Error("Simulated error coming from DevTools");
                  var lane = pickArbitraryLane(renderLanes2);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                  var update2 = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                  enqueueCapturedUpdate(workInProgress2, update2);
                  break;
                }
              }
              if (workInProgress2.type !== workInProgress2.elementType) {
                var innerPropTypes = Component.propTypes;
                if (innerPropTypes) {
                  checkPropTypes(
                    innerPropTypes,
                    nextProps,
                    // Resolved props
                    "prop",
                    getComponentNameFromType(Component)
                  );
                }
              }
            }
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var instance = workInProgress2.stateNode;
            var shouldUpdate;
            if (instance === null) {
              resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
              constructClassInstance(workInProgress2, Component, nextProps);
              mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
              shouldUpdate = true;
            } else if (current2 === null) {
              shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            } else {
              shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
            }
            var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
            {
              var inst = workInProgress2.stateNode;
              if (shouldUpdate && inst.props !== nextProps) {
                if (!didWarnAboutReassigningProps) {
                  error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
                }
                didWarnAboutReassigningProps = true;
              }
            }
            return nextUnitOfWork;
          }
          function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
            markRef(current2, workInProgress2);
            var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (!shouldUpdate && !didCaptureError) {
              if (hasContext) {
                invalidateContextProvider(workInProgress2, Component, false);
              }
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            var instance = workInProgress2.stateNode;
            ReactCurrentOwner$1.current = workInProgress2;
            var nextChildren;
            if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
              nextChildren = null;
              {
                stopProfilerTimerIfRunning();
              }
            } else {
              {
                markComponentRenderStarted(workInProgress2);
              }
              {
                setIsRendering(true);
                nextChildren = instance.render();
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    instance.render();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
                setIsRendering(false);
              }
              {
                markComponentRenderStopped();
              }
            }
            workInProgress2.flags |= PerformedWork;
            if (current2 !== null && didCaptureError) {
              forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            workInProgress2.memoizedState = instance.state;
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, true);
            }
            return workInProgress2.child;
          }
          function pushHostRootContext(workInProgress2) {
            var root2 = workInProgress2.stateNode;
            if (root2.pendingContext) {
              pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
            } else if (root2.context) {
              pushTopLevelContextObject(workInProgress2, root2.context, false);
            }
            pushHostContainer(workInProgress2, root2.containerInfo);
          }
          function updateHostRoot(current2, workInProgress2, renderLanes2) {
            pushHostRootContext(workInProgress2);
            if (current2 === null) {
              throw new Error("Should have a current fiber. This is a bug in React.");
            }
            var nextProps = workInProgress2.pendingProps;
            var prevState = workInProgress2.memoizedState;
            var prevChildren = prevState.element;
            cloneUpdateQueue(current2, workInProgress2);
            processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
            var nextState = workInProgress2.memoizedState;
            var root2 = workInProgress2.stateNode;
            var nextChildren = nextState.element;
            if (prevState.isDehydrated) {
              var overrideState = {
                element: nextChildren,
                isDehydrated: false,
                cache: nextState.cache,
                pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
                transitions: nextState.transitions
              };
              var updateQueue = workInProgress2.updateQueue;
              updateQueue.baseState = overrideState;
              workInProgress2.memoizedState = overrideState;
              if (workInProgress2.flags & ForceClientRender) {
                var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
              } else if (nextChildren !== prevChildren) {
                var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
                return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
              } else {
                enterHydrationState(workInProgress2);
                var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
                workInProgress2.child = child;
                var node2 = child;
                while (node2) {
                  node2.flags = node2.flags & ~Placement | Hydrating;
                  node2 = node2.sibling;
                }
              }
            } else {
              resetHydrationState();
              if (nextChildren === prevChildren) {
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              }
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
            resetHydrationState();
            queueHydrationError(recoverableError);
            workInProgress2.flags |= ForceClientRender;
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostComponent(current2, workInProgress2, renderLanes2) {
            pushHostContext(workInProgress2);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            var type = workInProgress2.type;
            var nextProps = workInProgress2.pendingProps;
            var prevProps = current2 !== null ? current2.memoizedProps : null;
            var nextChildren = nextProps.children;
            var isDirectTextChild = shouldSetTextContent(type, nextProps);
            if (isDirectTextChild) {
              nextChildren = null;
            } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
              workInProgress2.flags |= ContentReset;
            }
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            return workInProgress2.child;
          }
          function updateHostText(current2, workInProgress2) {
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
            }
            return null;
          }
          function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var lazyComponent = elementType;
            var payload = lazyComponent._payload;
            var init = lazyComponent._init;
            var Component = init(payload);
            workInProgress2.type = Component;
            var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
            var resolvedProps = resolveDefaultProps(Component, props);
            var child;
            switch (resolvedTag) {
              case FunctionComponent: {
                {
                  validateFunctionComponentInDev(workInProgress2, Component);
                  workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
                }
                child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ClassComponent: {
                {
                  workInProgress2.type = Component = resolveClassForHotReloading(Component);
                }
                child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case ForwardRef: {
                {
                  workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
                }
                child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
                return child;
              }
              case MemoComponent: {
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = Component.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        resolvedProps,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(Component)
                      );
                    }
                  }
                }
                child = updateMemoComponent(
                  null,
                  workInProgress2,
                  Component,
                  resolveDefaultProps(Component.type, resolvedProps),
                  // The inner type can have defaults too
                  renderLanes2
                );
                return child;
              }
            }
            var hint = "";
            {
              if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = " Did you wrap a component in React.lazy() more than once?";
              }
            }
            throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
          }
          function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            workInProgress2.tag = ClassComponent;
            var hasContext;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          }
          function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
            resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
            var props = workInProgress2.pendingProps;
            var context;
            {
              var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
              context = getMaskedContext(workInProgress2, unmaskedContext);
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var value;
            var hasId;
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              if (Component.prototype && typeof Component.prototype.render === "function") {
                var componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutBadClass[componentName]) {
                  error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                  didWarnAboutBadClass[componentName] = true;
                }
              }
              if (workInProgress2.mode & StrictLegacyMode) {
                ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
              }
              setIsRendering(true);
              ReactCurrentOwner$1.current = workInProgress2;
              value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
              hasId = checkDidRenderIdHook();
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            {
              if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
                var _componentName = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                  didWarnAboutModulePatternComponent[_componentName] = true;
                }
              }
            }
            if (
              // Run these checks in production only if the flag is off.
              // Eventually we'll delete this branch altogether.
              typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
            ) {
              {
                var _componentName2 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutModulePatternComponent[_componentName2]) {
                  error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                  didWarnAboutModulePatternComponent[_componentName2] = true;
                }
              }
              workInProgress2.tag = ClassComponent;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              var hasContext = false;
              if (isContextProvider(Component)) {
                hasContext = true;
                pushContextProvider(workInProgress2);
              } else {
                hasContext = false;
              }
              workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
              initializeUpdateQueue(workInProgress2);
              adoptClassInstance(workInProgress2, value);
              mountClassInstance(workInProgress2, Component, props, renderLanes2);
              return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
            } else {
              workInProgress2.tag = FunctionComponent;
              {
                if (workInProgress2.mode & StrictLegacyMode) {
                  setIsStrictModeForDevtools(true);
                  try {
                    value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                    hasId = checkDidRenderIdHook();
                  } finally {
                    setIsStrictModeForDevtools(false);
                  }
                }
              }
              if (getIsHydrating() && hasId) {
                pushMaterializedTreeId(workInProgress2);
              }
              reconcileChildren(null, workInProgress2, value, renderLanes2);
              {
                validateFunctionComponentInDev(workInProgress2, Component);
              }
              return workInProgress2.child;
            }
          }
          function validateFunctionComponentInDev(workInProgress2, Component) {
            {
              if (Component) {
                if (Component.childContextTypes) {
                  error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
                }
              }
              if (workInProgress2.ref !== null) {
                var info = "";
                var ownerName = getCurrentFiberOwnerNameInDevOrNull();
                if (ownerName) {
                  info += "\n\nCheck the render method of `" + ownerName + "`.";
                }
                var warningKey = ownerName || "";
                var debugSource = workInProgress2._debugSource;
                if (debugSource) {
                  warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
                }
                if (!didWarnAboutFunctionRefs[warningKey]) {
                  didWarnAboutFunctionRefs[warningKey] = true;
                  error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
                }
              }
              if (typeof Component.getDerivedStateFromProps === "function") {
                var _componentName3 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                  error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                  didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
                }
              }
              if (typeof Component.contextType === "object" && Component.contextType !== null) {
                var _componentName4 = getComponentNameFromType(Component) || "Unknown";
                if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                  error("%s: Function components do not support contextType.", _componentName4);
                  didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
                }
              }
            }
          }
          var SUSPENDED_MARKER = {
            dehydrated: null,
            treeContext: null,
            retryLane: NoLane
          };
          function mountSuspenseOffscreenState(renderLanes2) {
            return {
              baseLanes: renderLanes2,
              cachePool: getSuspendedCache(),
              transitions: null
            };
          }
          function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
            var cachePool = null;
            return {
              baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
              cachePool,
              transitions: prevOffscreenState.transitions
            };
          }
          function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              var suspenseState = current2.memoizedState;
              if (suspenseState === null) {
                return false;
              }
            }
            return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          }
          function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
            return removeLanes(current2.childLanes, renderLanes2);
          }
          function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            {
              if (shouldSuspend(workInProgress2)) {
                workInProgress2.flags |= DidCapture;
              }
            }
            var suspenseContext = suspenseStackCursor.current;
            var showFallback = false;
            var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
            if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
              showFallback = true;
              workInProgress2.flags &= ~DidCapture;
            } else {
              if (current2 === null || current2.memoizedState !== null) {
                {
                  suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
                }
              }
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            pushSuspenseContext(workInProgress2, suspenseContext);
            if (current2 === null) {
              tryToClaimNextHydratableInstance(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null) {
                var dehydrated = suspenseState.dehydrated;
                if (dehydrated !== null) {
                  return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
                }
              }
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              if (showFallback) {
                var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var primaryChildFragment = workInProgress2.child;
                primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackFragment;
              } else {
                return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
              }
            } else {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var _dehydrated = prevState.dehydrated;
                if (_dehydrated !== null) {
                  return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
                }
              }
              if (showFallback) {
                var _nextFallbackChildren = nextProps.fallback;
                var _nextPrimaryChildren = nextProps.children;
                var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
                var _primaryChildFragment2 = workInProgress2.child;
                var prevOffscreenState = current2.child.memoizedState;
                _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
                _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              } else {
                var _nextPrimaryChildren2 = nextProps.children;
                var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
                workInProgress2.memoizedState = null;
                return _primaryChildFragment3;
              }
            }
          }
          function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            primaryChildFragment.return = workInProgress2;
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var progressedPrimaryFragment = workInProgress2.child;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            var fallbackChildFragment;
            if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = 0;
                primaryChildFragment.treeBaseDuration = 0;
              }
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            } else {
              primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            }
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
            return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
          }
          function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
            return createWorkInProgress(current2, offscreenProps);
          }
          function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
              mode: "visible",
              children: primaryChildren
            });
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              primaryChildFragment.lanes = renderLanes2;
            }
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = null;
            if (currentFallbackChildFragment !== null) {
              var deletions = workInProgress2.deletions;
              if (deletions === null) {
                workInProgress2.deletions = [currentFallbackChildFragment];
                workInProgress2.flags |= ChildDeletion;
              } else {
                deletions.push(currentFallbackChildFragment);
              }
            }
            workInProgress2.child = primaryChildFragment;
            return primaryChildFragment;
          }
          function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var mode = workInProgress2.mode;
            var currentPrimaryChildFragment = current2.child;
            var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
            var primaryChildProps = {
              mode: "hidden",
              children: primaryChildren
            };
            var primaryChildFragment;
            if (
              // In legacy mode, we commit the primary tree as if it successfully
              // completed, even though it's in an inconsistent state.
              (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
              // already cloned. In legacy mode, the only case where this isn't true is
              // when DevTools forces us to display a fallback; we skip the first render
              // pass entirely and go straight to rendering the fallback. (In Concurrent
              // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
              // only codepath.)
              workInProgress2.child !== currentPrimaryChildFragment
            ) {
              var progressedPrimaryFragment = workInProgress2.child;
              primaryChildFragment = progressedPrimaryFragment;
              primaryChildFragment.childLanes = NoLanes;
              primaryChildFragment.pendingProps = primaryChildProps;
              if (workInProgress2.mode & ProfileMode) {
                primaryChildFragment.actualDuration = 0;
                primaryChildFragment.actualStartTime = -1;
                primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
                primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
              }
              workInProgress2.deletions = null;
            } else {
              primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
              primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
            }
            var fallbackChildFragment;
            if (currentFallbackChildFragment !== null) {
              fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
            } else {
              fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
              fallbackChildFragment.flags |= Placement;
            }
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            return fallbackChildFragment;
          }
          function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
            if (recoverableError !== null) {
              queueHydrationError(recoverableError);
            }
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            var nextProps = workInProgress2.pendingProps;
            var primaryChildren = nextProps.children;
            var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
            primaryChildFragment.flags |= Placement;
            workInProgress2.memoizedState = null;
            return primaryChildFragment;
          }
          function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
            var fiberMode = workInProgress2.mode;
            var primaryChildProps = {
              mode: "visible",
              children: primaryChildren
            };
            var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
            var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
            primaryChildFragment.return = workInProgress2;
            fallbackChildFragment.return = workInProgress2;
            primaryChildFragment.sibling = fallbackChildFragment;
            workInProgress2.child = primaryChildFragment;
            if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
              reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
            }
            return fallbackChildFragment;
          }
          function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              {
                error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
              }
              workInProgress2.lanes = laneToLanes(SyncLane);
            } else if (isSuspenseInstanceFallback(suspenseInstance)) {
              workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
            } else {
              workInProgress2.lanes = laneToLanes(OffscreenLane);
            }
            return null;
          }
          function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
            if (!didSuspend) {
              warnIfHydrating();
              if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
                return retrySuspenseComponentWithoutHydrating(
                  current2,
                  workInProgress2,
                  renderLanes2,
                  // TODO: When we delete legacy mode, we should make this error argument
                  // required — every concurrent mode path that causes hydration to
                  // de-opt to client rendering should have an error message.
                  null
                );
              }
              if (isSuspenseInstanceFallback(suspenseInstance)) {
                var digest, message, stack;
                {
                  var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                  digest = _getSuspenseInstanceF.digest;
                  message = _getSuspenseInstanceF.message;
                  stack = _getSuspenseInstanceF.stack;
                }
                var error2;
                if (message) {
                  error2 = new Error(message);
                } else {
                  error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
                }
                var capturedValue = createCapturedValue(error2, digest, stack);
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
              }
              var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
              if (didReceiveUpdate || hasContextChanged2) {
                var root2 = getWorkInProgressRoot();
                if (root2 !== null) {
                  var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                  if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                    suspenseState.retryLane = attemptHydrationAtLane;
                    var eventTime = NoTimestamp;
                    enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                    scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
                  }
                }
                renderDidSuspendDelayIfPossible();
                var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
              } else if (isSuspenseInstancePending(suspenseInstance)) {
                workInProgress2.flags |= DidCapture;
                workInProgress2.child = current2.child;
                var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
                registerSuspenseInstanceRetry(suspenseInstance, retry);
                return null;
              } else {
                reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
                var primaryChildren = nextProps.children;
                var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
                primaryChildFragment.flags |= Hydrating;
                return primaryChildFragment;
              }
            } else {
              if (workInProgress2.flags & ForceClientRender) {
                workInProgress2.flags &= ~ForceClientRender;
                var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
                return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
              } else if (workInProgress2.memoizedState !== null) {
                workInProgress2.child = current2.child;
                workInProgress2.flags |= DidCapture;
                return null;
              } else {
                var nextPrimaryChildren = nextProps.children;
                var nextFallbackChildren = nextProps.fallback;
                var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
                var _primaryChildFragment4 = workInProgress2.child;
                _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
                workInProgress2.memoizedState = SUSPENDED_MARKER;
                return fallbackChildFragment;
              }
            }
          }
          function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
            fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
            }
            scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
          }
          function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
            var node2 = firstChild;
            while (node2 !== null) {
              if (node2.tag === SuspenseComponent) {
                var state = node2.memoizedState;
                if (state !== null) {
                  scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
                }
              } else if (node2.tag === SuspenseListComponent) {
                scheduleSuspenseWorkOnFiber(node2, renderLanes2, workInProgress2);
              } else if (node2.child !== null) {
                node2.child.return = node2;
                node2 = node2.child;
                continue;
              }
              if (node2 === workInProgress2) {
                return;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === workInProgress2) {
                  return;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
          }
          function findLastContentRow(firstChild) {
            var row = firstChild;
            var lastContentRow = null;
            while (row !== null) {
              var currentRow = row.alternate;
              if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                lastContentRow = row;
              }
              row = row.sibling;
            }
            return lastContentRow;
          }
          function validateRevealOrder(revealOrder) {
            {
              if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
                didWarnAboutRevealOrder[revealOrder] = true;
                if (typeof revealOrder === "string") {
                  switch (revealOrder.toLowerCase()) {
                    case "together":
                    case "forwards":
                    case "backwards": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    case "forward":
                    case "backward": {
                      error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                      break;
                    }
                    default:
                      error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                      break;
                  }
                } else {
                  error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                }
              }
            }
          }
          function validateTailOptions(tailMode, revealOrder) {
            {
              if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
                if (tailMode !== "collapsed" && tailMode !== "hidden") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
                } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                  didWarnAboutTailOptions[tailMode] = true;
                  error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
                }
              }
            }
          }
          function validateSuspenseListNestedChild(childSlot, index4) {
            {
              var isAnArray = isArray2(childSlot);
              var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
              if (isAnArray || isIterable) {
                var type = isAnArray ? "array" : "iterable";
                error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index4, type);
                return false;
              }
            }
            return true;
          }
          function validateSuspenseListChildren(children, revealOrder) {
            {
              if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
                if (isArray2(children)) {
                  for (var i = 0; i < children.length; i++) {
                    if (!validateSuspenseListNestedChild(children[i], i)) {
                      return;
                    }
                  }
                } else {
                  var iteratorFn = getIteratorFn(children);
                  if (typeof iteratorFn === "function") {
                    var childrenIterator = iteratorFn.call(children);
                    if (childrenIterator) {
                      var step = childrenIterator.next();
                      var _i = 0;
                      for (; !step.done; step = childrenIterator.next()) {
                        if (!validateSuspenseListNestedChild(step.value, _i)) {
                          return;
                        }
                        _i++;
                      }
                    }
                  } else {
                    error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                  }
                }
              }
            }
          }
          function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
            var renderState = workInProgress2.memoizedState;
            if (renderState === null) {
              workInProgress2.memoizedState = {
                isBackwards,
                rendering: null,
                renderingStartTime: 0,
                last: lastContentRow,
                tail,
                tailMode
              };
            } else {
              renderState.isBackwards = isBackwards;
              renderState.rendering = null;
              renderState.renderingStartTime = 0;
              renderState.last = lastContentRow;
              renderState.tail = tail;
              renderState.tailMode = tailMode;
            }
          }
          function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
            var nextProps = workInProgress2.pendingProps;
            var revealOrder = nextProps.revealOrder;
            var tailMode = nextProps.tail;
            var newChildren = nextProps.children;
            validateRevealOrder(revealOrder);
            validateTailOptions(tailMode, revealOrder);
            validateSuspenseListChildren(newChildren, revealOrder);
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            var suspenseContext = suspenseStackCursor.current;
            var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
            if (shouldForceFallback) {
              suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
              workInProgress2.flags |= DidCapture;
            } else {
              var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
              if (didSuspendBefore) {
                propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
              }
              suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
            }
            pushSuspenseContext(workInProgress2, suspenseContext);
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              workInProgress2.memoizedState = null;
            } else {
              switch (revealOrder) {
                case "forwards": {
                  var lastContentRow = findLastContentRow(workInProgress2.child);
                  var tail;
                  if (lastContentRow === null) {
                    tail = workInProgress2.child;
                    workInProgress2.child = null;
                  } else {
                    tail = lastContentRow.sibling;
                    lastContentRow.sibling = null;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    tail,
                    lastContentRow,
                    tailMode
                  );
                  break;
                }
                case "backwards": {
                  var _tail = null;
                  var row = workInProgress2.child;
                  workInProgress2.child = null;
                  while (row !== null) {
                    var currentRow = row.alternate;
                    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                      workInProgress2.child = row;
                      break;
                    }
                    var nextRow = row.sibling;
                    row.sibling = _tail;
                    _tail = row;
                    row = nextRow;
                  }
                  initSuspenseListRenderState(
                    workInProgress2,
                    true,
                    // isBackwards
                    _tail,
                    null,
                    // last
                    tailMode
                  );
                  break;
                }
                case "together": {
                  initSuspenseListRenderState(
                    workInProgress2,
                    false,
                    // isBackwards
                    null,
                    // tail
                    null,
                    // last
                    void 0
                  );
                  break;
                }
                default: {
                  workInProgress2.memoizedState = null;
                }
              }
            }
            return workInProgress2.child;
          }
          function updatePortalComponent(current2, workInProgress2, renderLanes2) {
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            var nextChildren = workInProgress2.pendingProps;
            if (current2 === null) {
              workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
            } else {
              reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
            }
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
          function updateContextProvider(current2, workInProgress2, renderLanes2) {
            var providerType = workInProgress2.type;
            var context = providerType._context;
            var newProps = workInProgress2.pendingProps;
            var oldProps = workInProgress2.memoizedProps;
            var newValue = newProps.value;
            {
              if (!("value" in newProps)) {
                if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                  hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                  error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
                }
              }
              var providerPropTypes = workInProgress2.type.propTypes;
              if (providerPropTypes) {
                checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
              }
            }
            pushProvider(workInProgress2, context, newValue);
            {
              if (oldProps !== null) {
                var oldValue = oldProps.value;
                if (objectIs(oldValue, newValue)) {
                  if (oldProps.children === newProps.children && !hasContextChanged()) {
                    return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  }
                } else {
                  propagateContextChange(workInProgress2, context, renderLanes2);
                }
              }
            }
            var newChildren = newProps.children;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          var hasWarnedAboutUsingContextAsConsumer = false;
          function updateContextConsumer(current2, workInProgress2, renderLanes2) {
            var context = workInProgress2.type;
            {
              if (context._context === void 0) {
                if (context !== context.Consumer) {
                  if (!hasWarnedAboutUsingContextAsConsumer) {
                    hasWarnedAboutUsingContextAsConsumer = true;
                    error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                  }
                }
              } else {
                context = context._context;
              }
            }
            var newProps = workInProgress2.pendingProps;
            var render2 = newProps.children;
            {
              if (typeof render2 !== "function") {
                error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
              }
            }
            prepareToReadContext(workInProgress2, renderLanes2);
            var newValue = readContext(context);
            {
              markComponentRenderStarted(workInProgress2);
            }
            var newChildren;
            {
              ReactCurrentOwner$1.current = workInProgress2;
              setIsRendering(true);
              newChildren = render2(newValue);
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
            workInProgress2.flags |= PerformedWork;
            reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
            return workInProgress2.child;
          }
          function markWorkInProgressReceivedUpdate() {
            didReceiveUpdate = true;
          }
          function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              if (current2 !== null) {
                current2.alternate = null;
                workInProgress2.alternate = null;
                workInProgress2.flags |= Placement;
              }
            }
          }
          function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
            if (current2 !== null) {
              workInProgress2.dependencies = current2.dependencies;
            }
            {
              stopProfilerTimerIfRunning();
            }
            markSkippedUpdateLanes(workInProgress2.lanes);
            if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
              {
                return null;
              }
            }
            cloneChildFibers(current2, workInProgress2);
            return workInProgress2.child;
          }
          function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
            {
              var returnFiber = oldWorkInProgress.return;
              if (returnFiber === null) {
                throw new Error("Cannot swap the root fiber.");
              }
              current2.alternate = null;
              oldWorkInProgress.alternate = null;
              newWorkInProgress.index = oldWorkInProgress.index;
              newWorkInProgress.sibling = oldWorkInProgress.sibling;
              newWorkInProgress.return = oldWorkInProgress.return;
              newWorkInProgress.ref = oldWorkInProgress.ref;
              if (oldWorkInProgress === returnFiber.child) {
                returnFiber.child = newWorkInProgress;
              } else {
                var prevSibling = returnFiber.child;
                if (prevSibling === null) {
                  throw new Error("Expected parent to have a child.");
                }
                while (prevSibling.sibling !== oldWorkInProgress) {
                  prevSibling = prevSibling.sibling;
                  if (prevSibling === null) {
                    throw new Error("Expected to find the previous sibling.");
                  }
                }
                prevSibling.sibling = newWorkInProgress;
              }
              var deletions = returnFiber.deletions;
              if (deletions === null) {
                returnFiber.deletions = [current2];
                returnFiber.flags |= ChildDeletion;
              } else {
                deletions.push(current2);
              }
              newWorkInProgress.flags |= Placement;
              return newWorkInProgress;
            }
          }
          function checkScheduledUpdateOrContext(current2, renderLanes2) {
            var updateLanes = current2.lanes;
            if (includesSomeLane(updateLanes, renderLanes2)) {
              return true;
            }
            return false;
          }
          function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
            switch (workInProgress2.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress2);
                var root2 = workInProgress2.stateNode;
                resetHydrationState();
                break;
              case HostComponent:
                pushHostContext(workInProgress2);
                break;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  pushContextProvider(workInProgress2);
                }
                break;
              }
              case HostPortal:
                pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
                break;
              case ContextProvider: {
                var newValue = workInProgress2.memoizedProps.value;
                var context = workInProgress2.type._context;
                pushProvider(workInProgress2, context, newValue);
                break;
              }
              case Profiler:
                {
                  var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                  if (hasChildWork) {
                    workInProgress2.flags |= Update;
                  }
                  {
                    var stateNode = workInProgress2.stateNode;
                    stateNode.effectDuration = 0;
                    stateNode.passiveEffectDuration = 0;
                  }
                }
                break;
              case SuspenseComponent: {
                var state = workInProgress2.memoizedState;
                if (state !== null) {
                  if (state.dehydrated !== null) {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    workInProgress2.flags |= DidCapture;
                    return null;
                  }
                  var primaryChildFragment = workInProgress2.child;
                  var primaryChildLanes = primaryChildFragment.childLanes;
                  if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                    return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                  } else {
                    pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                    var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                    if (child !== null) {
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                }
                break;
              }
              case SuspenseListComponent: {
                var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
                var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                  }
                  workInProgress2.flags |= DidCapture;
                }
                var renderState = workInProgress2.memoizedState;
                if (renderState !== null) {
                  renderState.rendering = null;
                  renderState.tail = null;
                  renderState.lastEffect = null;
                }
                pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
                if (_hasChildWork) {
                  break;
                } else {
                  return null;
                }
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                workInProgress2.lanes = NoLanes;
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          function beginWork(current2, workInProgress2, renderLanes2) {
            {
              if (workInProgress2._debugNeedsRemount && current2 !== null) {
                return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
              }
            }
            if (current2 !== null) {
              var oldProps = current2.memoizedProps;
              var newProps = workInProgress2.pendingProps;
              if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
              workInProgress2.type !== current2.type) {
                didReceiveUpdate = true;
              } else {
                var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
                if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
                // may not be work scheduled on `current`, so we check for this flag.
                (workInProgress2.flags & DidCapture) === NoFlags) {
                  didReceiveUpdate = false;
                  return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
                }
                if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                  didReceiveUpdate = true;
                } else {
                  didReceiveUpdate = false;
                }
              }
            } else {
              didReceiveUpdate = false;
              if (getIsHydrating() && isForkedChild(workInProgress2)) {
                var slotIndex = workInProgress2.index;
                var numberOfForks = getForksAtLevel();
                pushTreeId(workInProgress2, numberOfForks, slotIndex);
              }
            }
            workInProgress2.lanes = NoLanes;
            switch (workInProgress2.tag) {
              case IndeterminateComponent: {
                return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
              }
              case LazyComponent: {
                var elementType = workInProgress2.elementType;
                return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
              }
              case FunctionComponent: {
                var Component = workInProgress2.type;
                var unresolvedProps = workInProgress2.pendingProps;
                var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
                return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
              }
              case ClassComponent: {
                var _Component = workInProgress2.type;
                var _unresolvedProps = workInProgress2.pendingProps;
                var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
                return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
              }
              case HostRoot:
                return updateHostRoot(current2, workInProgress2, renderLanes2);
              case HostComponent:
                return updateHostComponent(current2, workInProgress2, renderLanes2);
              case HostText:
                return updateHostText(current2, workInProgress2);
              case SuspenseComponent:
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              case HostPortal:
                return updatePortalComponent(current2, workInProgress2, renderLanes2);
              case ForwardRef: {
                var type = workInProgress2.type;
                var _unresolvedProps2 = workInProgress2.pendingProps;
                var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
                return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
              }
              case Fragment29:
                return updateFragment(current2, workInProgress2, renderLanes2);
              case Mode:
                return updateMode(current2, workInProgress2, renderLanes2);
              case Profiler:
                return updateProfiler(current2, workInProgress2, renderLanes2);
              case ContextProvider:
                return updateContextProvider(current2, workInProgress2, renderLanes2);
              case ContextConsumer:
                return updateContextConsumer(current2, workInProgress2, renderLanes2);
              case MemoComponent: {
                var _type2 = workInProgress2.type;
                var _unresolvedProps3 = workInProgress2.pendingProps;
                var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
                {
                  if (workInProgress2.type !== workInProgress2.elementType) {
                    var outerPropTypes = _type2.propTypes;
                    if (outerPropTypes) {
                      checkPropTypes(
                        outerPropTypes,
                        _resolvedProps3,
                        // Resolved for outer only
                        "prop",
                        getComponentNameFromType(_type2)
                      );
                    }
                  }
                }
                _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
                return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
              }
              case SimpleMemoComponent: {
                return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
              }
              case IncompleteClassComponent: {
                var _Component2 = workInProgress2.type;
                var _unresolvedProps4 = workInProgress2.pendingProps;
                var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
                return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
              }
              case SuspenseListComponent: {
                return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent: {
                return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function markUpdate(workInProgress2) {
            workInProgress2.flags |= Update;
          }
          function markRef$1(workInProgress2) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
          var appendAllChildren;
          var updateHostContainer;
          var updateHostComponent$1;
          var updateHostText$1;
          {
            appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
              var node2 = workInProgress2.child;
              while (node2 !== null) {
                if (node2.tag === HostComponent || node2.tag === HostText) {
                  appendInitialChild(parent, node2.stateNode);
                } else if (node2.tag === HostPortal)
                  ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === workInProgress2) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === workInProgress2) {
                    return;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            };
            updateHostContainer = function(current2, workInProgress2) {
            };
            updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
              var oldProps = current2.memoizedProps;
              if (oldProps === newProps) {
                return;
              }
              var instance = workInProgress2.stateNode;
              var currentHostContext = getHostContext();
              var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
              workInProgress2.updateQueue = updatePayload;
              if (updatePayload) {
                markUpdate(workInProgress2);
              }
            };
            updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
              if (oldText !== newText) {
                markUpdate(workInProgress2);
              }
            };
          }
          function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
            if (getIsHydrating()) {
              return;
            }
            switch (renderState.tailMode) {
              case "hidden": {
                var tailNode = renderState.tail;
                var lastTailNode = null;
                while (tailNode !== null) {
                  if (tailNode.alternate !== null) {
                    lastTailNode = tailNode;
                  }
                  tailNode = tailNode.sibling;
                }
                if (lastTailNode === null) {
                  renderState.tail = null;
                } else {
                  lastTailNode.sibling = null;
                }
                break;
              }
              case "collapsed": {
                var _tailNode = renderState.tail;
                var _lastTailNode = null;
                while (_tailNode !== null) {
                  if (_tailNode.alternate !== null) {
                    _lastTailNode = _tailNode;
                  }
                  _tailNode = _tailNode.sibling;
                }
                if (_lastTailNode === null) {
                  if (!hasRenderedATailFallback && renderState.tail !== null) {
                    renderState.tail.sibling = null;
                  } else {
                    renderState.tail = null;
                  }
                } else {
                  _lastTailNode.sibling = null;
                }
                break;
              }
            }
          }
          function bubbleProperties(completedWork) {
            var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
            var newChildLanes = NoLanes;
            var subtreeFlags = NoFlags;
            if (!didBailout) {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var actualDuration = completedWork.actualDuration;
                var treeBaseDuration = completedWork.selfBaseDuration;
                var child = completedWork.child;
                while (child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                  subtreeFlags |= child.subtreeFlags;
                  subtreeFlags |= child.flags;
                  actualDuration += child.actualDuration;
                  treeBaseDuration += child.treeBaseDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
                completedWork.treeBaseDuration = treeBaseDuration;
              } else {
                var _child = completedWork.child;
                while (_child !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                  subtreeFlags |= _child.subtreeFlags;
                  subtreeFlags |= _child.flags;
                  _child.return = completedWork;
                  _child = _child.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            } else {
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                var _treeBaseDuration = completedWork.selfBaseDuration;
                var _child2 = completedWork.child;
                while (_child2 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                  subtreeFlags |= _child2.subtreeFlags & StaticMask;
                  subtreeFlags |= _child2.flags & StaticMask;
                  _treeBaseDuration += _child2.treeBaseDuration;
                  _child2 = _child2.sibling;
                }
                completedWork.treeBaseDuration = _treeBaseDuration;
              } else {
                var _child3 = completedWork.child;
                while (_child3 !== null) {
                  newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                  subtreeFlags |= _child3.subtreeFlags & StaticMask;
                  subtreeFlags |= _child3.flags & StaticMask;
                  _child3.return = completedWork;
                  _child3 = _child3.sibling;
                }
              }
              completedWork.subtreeFlags |= subtreeFlags;
            }
            completedWork.childLanes = newChildLanes;
            return didBailout;
          }
          function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
            if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
              warnIfUnhydratedTailNodes(workInProgress2);
              resetHydrationState();
              workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
              return false;
            }
            var wasHydrated = popHydrationState(workInProgress2);
            if (nextState !== null && nextState.dehydrated !== null) {
              if (current2 === null) {
                if (!wasHydrated) {
                  throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
                }
                prepareToHydrateHostSuspenseInstance(workInProgress2);
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var isTimedOutSuspense = nextState !== null;
                    if (isTimedOutSuspense) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              } else {
                resetHydrationState();
                if ((workInProgress2.flags & DidCapture) === NoFlags) {
                  workInProgress2.memoizedState = null;
                }
                workInProgress2.flags |= Update;
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    var _isTimedOutSuspense = nextState !== null;
                    if (_isTimedOutSuspense) {
                      var _primaryChildFragment = workInProgress2.child;
                      if (_primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return false;
              }
            } else {
              upgradeHydrationErrorsToRecoverable();
              return true;
            }
          }
          function completeWork(current2, workInProgress2, renderLanes2) {
            var newProps = workInProgress2.pendingProps;
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case LazyComponent:
              case SimpleMemoComponent:
              case FunctionComponent:
              case ForwardRef:
              case Fragment29:
              case Mode:
              case Profiler:
              case ContextConsumer:
              case MemoComponent:
                bubbleProperties(workInProgress2);
                return null;
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostRoot: {
                var fiberRoot = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                if (fiberRoot.pendingContext) {
                  fiberRoot.context = fiberRoot.pendingContext;
                  fiberRoot.pendingContext = null;
                }
                if (current2 === null || current2.child === null) {
                  var wasHydrated = popHydrationState(workInProgress2);
                  if (wasHydrated) {
                    markUpdate(workInProgress2);
                  } else {
                    if (current2 !== null) {
                      var prevState = current2.memoizedState;
                      if (
                        // Check if this is a client root
                        !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                        (workInProgress2.flags & ForceClientRender) !== NoFlags
                      ) {
                        workInProgress2.flags |= Snapshot;
                        upgradeHydrationErrorsToRecoverable();
                      }
                    }
                  }
                }
                updateHostContainer(current2, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                var rootContainerInstance = getRootHostContainer();
                var type = workInProgress2.type;
                if (current2 !== null && workInProgress2.stateNode != null) {
                  updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                  if (current2.ref !== workInProgress2.ref) {
                    markRef$1(workInProgress2);
                  }
                } else {
                  if (!newProps) {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    bubbleProperties(workInProgress2);
                    return null;
                  }
                  var currentHostContext = getHostContext();
                  var _wasHydrated = popHydrationState(workInProgress2);
                  if (_wasHydrated) {
                    if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    var instance = createInstance2(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                    appendAllChildren(instance, workInProgress2, false, false);
                    workInProgress2.stateNode = instance;
                    if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                      markUpdate(workInProgress2);
                    }
                  }
                  if (workInProgress2.ref !== null) {
                    markRef$1(workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case HostText: {
                var newText = newProps;
                if (current2 && workInProgress2.stateNode != null) {
                  var oldText = current2.memoizedProps;
                  updateHostText$1(current2, workInProgress2, oldText, newText);
                } else {
                  if (typeof newText !== "string") {
                    if (workInProgress2.stateNode === null) {
                      throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                    }
                  }
                  var _rootContainerInstance = getRootHostContainer();
                  var _currentHostContext = getHostContext();
                  var _wasHydrated2 = popHydrationState(workInProgress2);
                  if (_wasHydrated2) {
                    if (prepareToHydrateHostTextInstance(workInProgress2)) {
                      markUpdate(workInProgress2);
                    }
                  } else {
                    workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                  }
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var nextState = workInProgress2.memoizedState;
                if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                  var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                  if (!fallthroughToNormalSuspensePath) {
                    if (workInProgress2.flags & ShouldCapture) {
                      return workInProgress2;
                    } else {
                      return null;
                    }
                  }
                }
                if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                  workInProgress2.lanes = renderLanes2;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                var nextDidTimeout = nextState !== null;
                var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
                if (nextDidTimeout !== prevDidTimeout) {
                  if (nextDidTimeout) {
                    var _offscreenFiber2 = workInProgress2.child;
                    _offscreenFiber2.flags |= Visibility;
                    if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                      var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                      if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                        renderDidSuspend();
                      } else {
                        renderDidSuspendDelayIfPossible();
                      }
                    }
                  }
                }
                var wakeables = workInProgress2.updateQueue;
                if (wakeables !== null) {
                  workInProgress2.flags |= Update;
                }
                bubbleProperties(workInProgress2);
                {
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    if (nextDidTimeout) {
                      var primaryChildFragment = workInProgress2.child;
                      if (primaryChildFragment !== null) {
                        workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                      }
                    }
                  }
                }
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                updateHostContainer(current2, workInProgress2);
                if (current2 === null) {
                  preparePortalMount(workInProgress2.stateNode.containerInfo);
                }
                bubbleProperties(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                bubbleProperties(workInProgress2);
                return null;
              case IncompleteClassComponent: {
                var _Component = workInProgress2.type;
                if (isContextProvider(_Component)) {
                  popContext(workInProgress2);
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                var renderState = workInProgress2.memoizedState;
                if (renderState === null) {
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
                var renderedTail = renderState.rendering;
                if (renderedTail === null) {
                  if (!didSuspendAlready) {
                    var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                    if (!cannotBeSuspended) {
                      var row = workInProgress2.child;
                      while (row !== null) {
                        var suspended = findFirstSuspended(row);
                        if (suspended !== null) {
                          didSuspendAlready = true;
                          workInProgress2.flags |= DidCapture;
                          cutOffTailIfNeeded(renderState, false);
                          var newThenables = suspended.updateQueue;
                          if (newThenables !== null) {
                            workInProgress2.updateQueue = newThenables;
                            workInProgress2.flags |= Update;
                          }
                          workInProgress2.subtreeFlags = NoFlags;
                          resetChildFibers(workInProgress2, renderLanes2);
                          pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                          return workInProgress2.child;
                        }
                        row = row.sibling;
                      }
                    }
                    if (renderState.tail !== null && now2() > getRenderTargetTime()) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  } else {
                    cutOffTailIfNeeded(renderState, false);
                  }
                } else {
                  if (!didSuspendAlready) {
                    var _suspended = findFirstSuspended(renderedTail);
                    if (_suspended !== null) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      var _newThenables = _suspended.updateQueue;
                      if (_newThenables !== null) {
                        workInProgress2.updateQueue = _newThenables;
                        workInProgress2.flags |= Update;
                      }
                      cutOffTailIfNeeded(renderState, true);
                      if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                        bubbleProperties(workInProgress2);
                        return null;
                      }
                    } else if (
                      // The time it took to render last row is greater than the remaining
                      // time we have to render. So rendering one more row would likely
                      // exceed it.
                      now2() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                    ) {
                      workInProgress2.flags |= DidCapture;
                      didSuspendAlready = true;
                      cutOffTailIfNeeded(renderState, false);
                      workInProgress2.lanes = SomeRetryLane;
                    }
                  }
                  if (renderState.isBackwards) {
                    renderedTail.sibling = workInProgress2.child;
                    workInProgress2.child = renderedTail;
                  } else {
                    var previousSibling = renderState.last;
                    if (previousSibling !== null) {
                      previousSibling.sibling = renderedTail;
                    } else {
                      workInProgress2.child = renderedTail;
                    }
                    renderState.last = renderedTail;
                  }
                }
                if (renderState.tail !== null) {
                  var next2 = renderState.tail;
                  renderState.rendering = next2;
                  renderState.tail = next2.sibling;
                  renderState.renderingStartTime = now2();
                  next2.sibling = null;
                  var suspenseContext = suspenseStackCursor.current;
                  if (didSuspendAlready) {
                    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                  } else {
                    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                  }
                  pushSuspenseContext(workInProgress2, suspenseContext);
                  return next2;
                }
                bubbleProperties(workInProgress2);
                return null;
              }
              case ScopeComponent: {
                break;
              }
              case OffscreenComponent:
              case LegacyHiddenComponent: {
                popRenderLanes(workInProgress2);
                var _nextState = workInProgress2.memoizedState;
                var nextIsHidden = _nextState !== null;
                if (current2 !== null) {
                  var _prevState = current2.memoizedState;
                  var prevIsHidden = _prevState !== null;
                  if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                  !enableLegacyHidden) {
                    workInProgress2.flags |= Visibility;
                  }
                }
                if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                  bubbleProperties(workInProgress2);
                } else {
                  if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                    bubbleProperties(workInProgress2);
                    {
                      if (workInProgress2.subtreeFlags & (Placement | Update)) {
                        workInProgress2.flags |= Visibility;
                      }
                    }
                  }
                }
                return null;
              }
              case CacheComponent: {
                return null;
              }
              case TracingMarkerComponent: {
                return null;
              }
            }
            throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
          }
          function unwindWork(current2, workInProgress2, renderLanes2) {
            popTreeContext(workInProgress2);
            switch (workInProgress2.tag) {
              case ClassComponent: {
                var Component = workInProgress2.type;
                if (isContextProvider(Component)) {
                  popContext(workInProgress2);
                }
                var flags = workInProgress2.flags;
                if (flags & ShouldCapture) {
                  workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case HostRoot: {
                var root2 = workInProgress2.stateNode;
                popHostContainer(workInProgress2);
                popTopLevelContextObject(workInProgress2);
                resetWorkInProgressVersions();
                var _flags = workInProgress2.flags;
                if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                  workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                  return workInProgress2;
                }
                return null;
              }
              case HostComponent: {
                popHostContext(workInProgress2);
                return null;
              }
              case SuspenseComponent: {
                popSuspenseContext(workInProgress2);
                var suspenseState = workInProgress2.memoizedState;
                if (suspenseState !== null && suspenseState.dehydrated !== null) {
                  if (workInProgress2.alternate === null) {
                    throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                  }
                  resetHydrationState();
                }
                var _flags2 = workInProgress2.flags;
                if (_flags2 & ShouldCapture) {
                  workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                  if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                    transferActualDuration(workInProgress2);
                  }
                  return workInProgress2;
                }
                return null;
              }
              case SuspenseListComponent: {
                popSuspenseContext(workInProgress2);
                return null;
              }
              case HostPortal:
                popHostContainer(workInProgress2);
                return null;
              case ContextProvider:
                var context = workInProgress2.type._context;
                popProvider(context, workInProgress2);
                return null;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(workInProgress2);
                return null;
              case CacheComponent:
                return null;
              default:
                return null;
            }
          }
          function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
            popTreeContext(interruptedWork);
            switch (interruptedWork.tag) {
              case ClassComponent: {
                var childContextTypes = interruptedWork.type.childContextTypes;
                if (childContextTypes !== null && childContextTypes !== void 0) {
                  popContext(interruptedWork);
                }
                break;
              }
              case HostRoot: {
                var root2 = interruptedWork.stateNode;
                popHostContainer(interruptedWork);
                popTopLevelContextObject(interruptedWork);
                resetWorkInProgressVersions();
                break;
              }
              case HostComponent: {
                popHostContext(interruptedWork);
                break;
              }
              case HostPortal:
                popHostContainer(interruptedWork);
                break;
              case SuspenseComponent:
                popSuspenseContext(interruptedWork);
                break;
              case SuspenseListComponent:
                popSuspenseContext(interruptedWork);
                break;
              case ContextProvider:
                var context = interruptedWork.type._context;
                popProvider(context, interruptedWork);
                break;
              case OffscreenComponent:
              case LegacyHiddenComponent:
                popRenderLanes(interruptedWork);
                break;
            }
          }
          var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
          {
            didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
          }
          var offscreenSubtreeIsHidden = false;
          var offscreenSubtreeWasHidden = false;
          var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
          var nextEffect = null;
          var inProgressLanes = null;
          var inProgressRoot = null;
          function reportUncaughtErrorInDEV(error2) {
            {
              invokeGuardedCallback(null, function() {
                throw error2;
              });
              clearCaughtError();
            }
          }
          var callComponentWillUnmountWithTimer = function(current2, instance) {
            instance.props = current2.memoizedProps;
            instance.state = current2.memoizedState;
            if (current2.mode & ProfileMode) {
              try {
                startLayoutEffectTimer();
                instance.componentWillUnmount();
              } finally {
                recordLayoutEffectDuration(current2);
              }
            } else {
              instance.componentWillUnmount();
            }
          };
          function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
            try {
              commitHookEffectListMount(Layout, current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
            try {
              callComponentWillUnmountWithTimer(current2, instance);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
            try {
              instance.componentDidMount();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyAttachRef(current2, nearestMountedAncestor) {
            try {
              commitAttachRef(current2);
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          function safelyDetachRef(current2, nearestMountedAncestor) {
            var ref = current2.ref;
            if (ref !== null) {
              if (typeof ref === "function") {
                var retVal;
                try {
                  if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      retVal = ref(null);
                    } finally {
                      recordLayoutEffectDuration(current2);
                    }
                  } else {
                    retVal = ref(null);
                  }
                } catch (error2) {
                  captureCommitPhaseError(current2, nearestMountedAncestor, error2);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                  }
                }
              } else {
                ref.current = null;
              }
            }
          }
          function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
            try {
              destroy();
            } catch (error2) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error2);
            }
          }
          var focusedInstanceHandle = null;
          var shouldFireAfterActiveInstanceBlur = false;
          function commitBeforeMutationEffects(root2, firstChild) {
            focusedInstanceHandle = prepareForCommit(root2.containerInfo);
            nextEffect = firstChild;
            commitBeforeMutationEffects_begin();
            var shouldFire = shouldFireAfterActiveInstanceBlur;
            shouldFireAfterActiveInstanceBlur = false;
            focusedInstanceHandle = null;
            return shouldFire;
          }
          function commitBeforeMutationEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitBeforeMutationEffects_complete();
              }
            }
          }
          function commitBeforeMutationEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                commitBeforeMutationEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitBeforeMutationEffectsOnFiber(finishedWork) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            if ((flags & Snapshot) !== NoFlags) {
              setCurrentFiber(finishedWork);
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  break;
                }
                case ClassComponent: {
                  if (current2 !== null) {
                    var prevProps = current2.memoizedProps;
                    var prevState = current2.memoizedState;
                    var instance = finishedWork.stateNode;
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                    {
                      var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                      if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                        didWarnSet.add(finishedWork.type);
                        error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                      }
                    }
                    instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                  }
                  break;
                }
                case HostRoot: {
                  {
                    var root2 = finishedWork.stateNode;
                    clearContainer(root2.containerInfo);
                  }
                  break;
                }
                case HostComponent:
                case HostText:
                case HostPortal:
                case IncompleteClassComponent:
                  break;
                default: {
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              resetCurrentFiber();
            }
          }
          function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect4 = firstEffect;
              do {
                if ((effect4.tag & flags) === flags) {
                  var destroy = effect4.destroy;
                  effect4.destroy = void 0;
                  if (destroy !== void 0) {
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStarted(finishedWork);
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStarted(finishedWork);
                      }
                    }
                    {
                      if ((flags & Insertion7) !== NoFlags$1) {
                        setIsRunningInsertionEffect(true);
                      }
                    }
                    safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                    {
                      if ((flags & Insertion7) !== NoFlags$1) {
                        setIsRunningInsertionEffect(false);
                      }
                    }
                    {
                      if ((flags & Passive$1) !== NoFlags$1) {
                        markComponentPassiveEffectUnmountStopped();
                      } else if ((flags & Layout) !== NoFlags$1) {
                        markComponentLayoutEffectUnmountStopped();
                      }
                    }
                  }
                }
                effect4 = effect4.next;
              } while (effect4 !== firstEffect);
            }
          }
          function commitHookEffectListMount(flags, finishedWork) {
            var updateQueue = finishedWork.updateQueue;
            var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
            if (lastEffect !== null) {
              var firstEffect = lastEffect.next;
              var effect4 = firstEffect;
              do {
                if ((effect4.tag & flags) === flags) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStarted(finishedWork);
                    }
                  }
                  var create = effect4.create;
                  {
                    if ((flags & Insertion7) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  effect4.destroy = create();
                  {
                    if ((flags & Insertion7) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectMountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectMountStopped();
                    }
                  }
                  {
                    var destroy = effect4.destroy;
                    if (destroy !== void 0 && typeof destroy !== "function") {
                      var hookName = void 0;
                      if ((effect4.tag & Layout) !== NoFlags) {
                        hookName = "useLayoutEffect";
                      } else if ((effect4.tag & Insertion7) !== NoFlags) {
                        hookName = "useInsertionEffect";
                      } else {
                        hookName = "useEffect";
                      }
                      var addendum = void 0;
                      if (destroy === null) {
                        addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                      } else if (typeof destroy.then === "function") {
                        addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                      } else {
                        addendum = " You returned: " + destroy;
                      }
                      error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                    }
                  }
                }
                effect4 = effect4.next;
              } while (effect4 !== firstEffect);
            }
          }
          function commitPassiveEffectDurations(finishedRoot, finishedWork) {
            {
              if ((finishedWork.flags & Update) !== NoFlags) {
                switch (finishedWork.tag) {
                  case Profiler: {
                    var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                    var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                    var commitTime2 = getCommitTime();
                    var phase = finishedWork.alternate === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onPostCommit === "function") {
                      onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                    }
                    var parentFiber = finishedWork.return;
                    outer:
                      while (parentFiber !== null) {
                        switch (parentFiber.tag) {
                          case HostRoot:
                            var root2 = parentFiber.stateNode;
                            root2.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                          case Profiler:
                            var parentStateNode = parentFiber.stateNode;
                            parentStateNode.passiveEffectDuration += passiveEffectDuration;
                            break outer;
                        }
                        parentFiber = parentFiber.return;
                      }
                    break;
                  }
                }
              }
            }
          }
          function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
            if ((finishedWork.flags & LayoutMask) !== NoFlags) {
              switch (finishedWork.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  if (!offscreenSubtreeWasHidden) {
                    if (finishedWork.mode & ProfileMode) {
                      try {
                        startLayoutEffectTimer();
                        commitHookEffectListMount(Layout | HasEffect, finishedWork);
                      } finally {
                        recordLayoutEffectDuration(finishedWork);
                      }
                    } else {
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    }
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = finishedWork.stateNode;
                  if (finishedWork.flags & Update) {
                    if (!offscreenSubtreeWasHidden) {
                      if (current2 === null) {
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidMount();
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidMount();
                        }
                      } else {
                        var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                        var prevState = current2.memoizedState;
                        {
                          if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                            if (instance.props !== finishedWork.memoizedProps) {
                              error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                            if (instance.state !== finishedWork.memoizedState) {
                              error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                            }
                          }
                        }
                        if (finishedWork.mode & ProfileMode) {
                          try {
                            startLayoutEffectTimer();
                            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                          } finally {
                            recordLayoutEffectDuration(finishedWork);
                          }
                        } else {
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        }
                      }
                    }
                  }
                  var updateQueue = finishedWork.updateQueue;
                  if (updateQueue !== null) {
                    {
                      if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                        if (instance.props !== finishedWork.memoizedProps) {
                          error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                        if (instance.state !== finishedWork.memoizedState) {
                          error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                        }
                      }
                    }
                    commitUpdateQueue(finishedWork, updateQueue, instance);
                  }
                  break;
                }
                case HostRoot: {
                  var _updateQueue = finishedWork.updateQueue;
                  if (_updateQueue !== null) {
                    var _instance = null;
                    if (finishedWork.child !== null) {
                      switch (finishedWork.child.tag) {
                        case HostComponent:
                          _instance = getPublicInstance(finishedWork.child.stateNode);
                          break;
                        case ClassComponent:
                          _instance = finishedWork.child.stateNode;
                          break;
                      }
                    }
                    commitUpdateQueue(finishedWork, _updateQueue, _instance);
                  }
                  break;
                }
                case HostComponent: {
                  var _instance2 = finishedWork.stateNode;
                  if (current2 === null && finishedWork.flags & Update) {
                    var type = finishedWork.type;
                    var props = finishedWork.memoizedProps;
                    commitMount(_instance2, type, props);
                  }
                  break;
                }
                case HostText: {
                  break;
                }
                case HostPortal: {
                  break;
                }
                case Profiler: {
                  {
                    var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                    var effectDuration = finishedWork.stateNode.effectDuration;
                    var commitTime2 = getCommitTime();
                    var phase = current2 === null ? "mount" : "update";
                    {
                      if (isCurrentUpdateNested()) {
                        phase = "nested-update";
                      }
                    }
                    if (typeof onRender === "function") {
                      onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                    }
                    {
                      if (typeof onCommit === "function") {
                        onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                      }
                      enqueuePendingPassiveProfilerEffect(finishedWork);
                      var parentFiber = finishedWork.return;
                      outer:
                        while (parentFiber !== null) {
                          switch (parentFiber.tag) {
                            case HostRoot:
                              var root2 = parentFiber.stateNode;
                              root2.effectDuration += effectDuration;
                              break outer;
                            case Profiler:
                              var parentStateNode = parentFiber.stateNode;
                              parentStateNode.effectDuration += effectDuration;
                              break outer;
                          }
                          parentFiber = parentFiber.return;
                        }
                    }
                  }
                  break;
                }
                case SuspenseComponent: {
                  commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                  break;
                }
                case SuspenseListComponent:
                case IncompleteClassComponent:
                case ScopeComponent:
                case OffscreenComponent:
                case LegacyHiddenComponent:
                case TracingMarkerComponent: {
                  break;
                }
                default:
                  throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            if (!offscreenSubtreeWasHidden) {
              {
                if (finishedWork.flags & Ref) {
                  commitAttachRef(finishedWork);
                }
              }
            }
          }
          function reappearLayoutEffectsOnFiber(node2) {
            switch (node2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (node2.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                  } finally {
                    recordLayoutEffectDuration(node2);
                  }
                } else {
                  safelyCallCommitHookLayoutEffectListMount(node2, node2.return);
                }
                break;
              }
              case ClassComponent: {
                var instance = node2.stateNode;
                if (typeof instance.componentDidMount === "function") {
                  safelyCallComponentDidMount(node2, node2.return, instance);
                }
                safelyAttachRef(node2, node2.return);
                break;
              }
              case HostComponent: {
                safelyAttachRef(node2, node2.return);
                break;
              }
            }
          }
          function hideOrUnhideAllChildren(finishedWork, isHidden) {
            var hostSubtreeRoot = null;
            {
              var node2 = finishedWork;
              while (true) {
                if (node2.tag === HostComponent) {
                  if (hostSubtreeRoot === null) {
                    hostSubtreeRoot = node2;
                    try {
                      var instance = node2.stateNode;
                      if (isHidden) {
                        hideInstance(instance);
                      } else {
                        unhideInstance(node2.stateNode, node2.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if (node2.tag === HostText) {
                  if (hostSubtreeRoot === null) {
                    try {
                      var _instance3 = node2.stateNode;
                      if (isHidden) {
                        hideTextInstance(_instance3);
                      } else {
                        unhideTextInstance(_instance3, node2.memoizedProps);
                      }
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                } else if ((node2.tag === OffscreenComponent || node2.tag === LegacyHiddenComponent) && node2.memoizedState !== null && node2 !== finishedWork)
                  ;
                else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === finishedWork) {
                  return;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === finishedWork) {
                    return;
                  }
                  if (hostSubtreeRoot === node2) {
                    hostSubtreeRoot = null;
                  }
                  node2 = node2.return;
                }
                if (hostSubtreeRoot === node2) {
                  hostSubtreeRoot = null;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
          }
          function commitAttachRef(finishedWork) {
            var ref = finishedWork.ref;
            if (ref !== null) {
              var instance = finishedWork.stateNode;
              var instanceToUse;
              switch (finishedWork.tag) {
                case HostComponent:
                  instanceToUse = getPublicInstance(instance);
                  break;
                default:
                  instanceToUse = instance;
              }
              if (typeof ref === "function") {
                var retVal;
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(instanceToUse);
                  } finally {
                    recordLayoutEffectDuration(finishedWork);
                  }
                } else {
                  retVal = ref(instanceToUse);
                }
                {
                  if (typeof retVal === "function") {
                    error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                  }
                }
              } else {
                {
                  if (!ref.hasOwnProperty("current")) {
                    error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                  }
                }
                ref.current = instanceToUse;
              }
            }
          }
          function detachFiberMutation(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              alternate.return = null;
            }
            fiber.return = null;
          }
          function detachFiberAfterEffects(fiber) {
            var alternate = fiber.alternate;
            if (alternate !== null) {
              fiber.alternate = null;
              detachFiberAfterEffects(alternate);
            }
            {
              fiber.child = null;
              fiber.deletions = null;
              fiber.sibling = null;
              if (fiber.tag === HostComponent) {
                var hostInstance = fiber.stateNode;
                if (hostInstance !== null) {
                  detachDeletedInstance(hostInstance);
                }
              }
              fiber.stateNode = null;
              {
                fiber._debugOwner = null;
              }
              {
                fiber.return = null;
                fiber.dependencies = null;
                fiber.memoizedProps = null;
                fiber.memoizedState = null;
                fiber.pendingProps = null;
                fiber.stateNode = null;
                fiber.updateQueue = null;
              }
            }
          }
          function getHostParentFiber(fiber) {
            var parent = fiber.return;
            while (parent !== null) {
              if (isHostParent(parent)) {
                return parent;
              }
              parent = parent.return;
            }
            throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
          }
          function isHostParent(fiber) {
            return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
          }
          function getHostSibling(fiber) {
            var node2 = fiber;
            siblings:
              while (true) {
                while (node2.sibling === null) {
                  if (node2.return === null || isHostParent(node2.return)) {
                    return null;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
                while (node2.tag !== HostComponent && node2.tag !== HostText && node2.tag !== DehydratedFragment) {
                  if (node2.flags & Placement) {
                    continue siblings;
                  }
                  if (node2.child === null || node2.tag === HostPortal) {
                    continue siblings;
                  } else {
                    node2.child.return = node2;
                    node2 = node2.child;
                  }
                }
                if (!(node2.flags & Placement)) {
                  return node2.stateNode;
                }
              }
          }
          function commitPlacement(finishedWork) {
            var parentFiber = getHostParentFiber(finishedWork);
            switch (parentFiber.tag) {
              case HostComponent: {
                var parent = parentFiber.stateNode;
                if (parentFiber.flags & ContentReset) {
                  resetTextContent(parent);
                  parentFiber.flags &= ~ContentReset;
                }
                var before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              }
              case HostRoot:
              case HostPortal: {
                var _parent = parentFiber.stateNode.containerInfo;
                var _before = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
                break;
              }
              default:
                throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          function insertOrAppendPlacementNodeIntoContainer(node2, before, parent) {
            var tag = node2.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node2.stateNode;
              if (before) {
                insertInContainerBefore(parent, stateNode, before);
              } else {
                appendChildToContainer(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNodeIntoContainer(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          function insertOrAppendPlacementNode(node2, before, parent) {
            var tag = node2.tag;
            var isHost = tag === HostComponent || tag === HostText;
            if (isHost) {
              var stateNode = node2.stateNode;
              if (before) {
                insertBefore(parent, stateNode, before);
              } else {
                appendChild(parent, stateNode);
              }
            } else if (tag === HostPortal)
              ;
            else {
              var child = node2.child;
              if (child !== null) {
                insertOrAppendPlacementNode(child, before, parent);
                var sibling = child.sibling;
                while (sibling !== null) {
                  insertOrAppendPlacementNode(sibling, before, parent);
                  sibling = sibling.sibling;
                }
              }
            }
          }
          var hostParent = null;
          var hostParentIsContainer = false;
          function commitDeletionEffects(root2, returnFiber, deletedFiber) {
            {
              var parent = returnFiber;
              findParent:
                while (parent !== null) {
                  switch (parent.tag) {
                    case HostComponent: {
                      hostParent = parent.stateNode;
                      hostParentIsContainer = false;
                      break findParent;
                    }
                    case HostRoot: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                    case HostPortal: {
                      hostParent = parent.stateNode.containerInfo;
                      hostParentIsContainer = true;
                      break findParent;
                    }
                  }
                  parent = parent.return;
                }
              if (hostParent === null) {
                throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
              }
              commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
              hostParent = null;
              hostParentIsContainer = false;
            }
            detachFiberMutation(deletedFiber);
          }
          function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
            var child = parent.child;
            while (child !== null) {
              commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
              child = child.sibling;
            }
          }
          function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
            onCommitUnmount(deletedFiber);
            switch (deletedFiber.tag) {
              case HostComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                }
              }
              case HostText: {
                {
                  var prevHostParent = hostParent;
                  var prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = prevHostParent;
                  hostParentIsContainer = prevHostParentIsContainer;
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      removeChildFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      removeChild(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case DehydratedFragment: {
                {
                  if (hostParent !== null) {
                    if (hostParentIsContainer) {
                      clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                    } else {
                      clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                {
                  var _prevHostParent = hostParent;
                  var _prevHostParentIsContainer = hostParentIsContainer;
                  hostParent = deletedFiber.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  hostParent = _prevHostParent;
                  hostParentIsContainer = _prevHostParentIsContainer;
                }
                return;
              }
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  var updateQueue = deletedFiber.updateQueue;
                  if (updateQueue !== null) {
                    var lastEffect = updateQueue.lastEffect;
                    if (lastEffect !== null) {
                      var firstEffect = lastEffect.next;
                      var effect4 = firstEffect;
                      do {
                        var _effect = effect4, destroy = _effect.destroy, tag = _effect.tag;
                        if (destroy !== void 0) {
                          if ((tag & Insertion7) !== NoFlags$1) {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          } else if ((tag & Layout) !== NoFlags$1) {
                            {
                              markComponentLayoutEffectUnmountStarted(deletedFiber);
                            }
                            if (deletedFiber.mode & ProfileMode) {
                              startLayoutEffectTimer();
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                              recordLayoutEffectDuration(deletedFiber);
                            } else {
                              safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            }
                            {
                              markComponentLayoutEffectUnmountStopped();
                            }
                          }
                        }
                        effect4 = effect4.next;
                      } while (effect4 !== firstEffect);
                    }
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ClassComponent: {
                if (!offscreenSubtreeWasHidden) {
                  safelyDetachRef(deletedFiber, nearestMountedAncestor);
                  var instance = deletedFiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                  }
                }
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case ScopeComponent: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
              case OffscreenComponent: {
                if (
                  // TODO: Remove this dead flag
                  deletedFiber.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                }
                break;
              }
              default: {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                return;
              }
            }
          }
          function commitSuspenseCallback(finishedWork) {
            var newState = finishedWork.memoizedState;
          }
          function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
            var newState = finishedWork.memoizedState;
            if (newState === null) {
              var current2 = finishedWork.alternate;
              if (current2 !== null) {
                var prevState = current2.memoizedState;
                if (prevState !== null) {
                  var suspenseInstance = prevState.dehydrated;
                  if (suspenseInstance !== null) {
                    commitHydratedSuspenseInstance(suspenseInstance);
                  }
                }
              }
            }
          }
          function attachSuspenseRetryListeners(finishedWork) {
            var wakeables = finishedWork.updateQueue;
            if (wakeables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;
              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet();
              }
              wakeables.forEach(function(wakeable) {
                var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
                if (!retryCache.has(wakeable)) {
                  retryCache.add(wakeable);
                  {
                    if (isDevToolsPresent) {
                      if (inProgressLanes !== null && inProgressRoot !== null) {
                        restorePendingUpdaters(inProgressRoot, inProgressLanes);
                      } else {
                        throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                      }
                    }
                  }
                  wakeable.then(retry, retry);
                }
              });
            }
          }
          function commitMutationEffects(root2, finishedWork, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            setCurrentFiber(finishedWork);
            commitMutationEffectsOnFiber(finishedWork, root2);
            setCurrentFiber(finishedWork);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
            var deletions = parentFiber.deletions;
            if (deletions !== null) {
              for (var i = 0; i < deletions.length; i++) {
                var childToDelete = deletions[i];
                try {
                  commitDeletionEffects(root2, parentFiber, childToDelete);
                } catch (error2) {
                  captureCommitPhaseError(childToDelete, parentFiber, error2);
                }
              }
            }
            var prevDebugFiber = getCurrentFiber();
            if (parentFiber.subtreeFlags & MutationMask) {
              var child = parentFiber.child;
              while (child !== null) {
                setCurrentFiber(child);
                commitMutationEffectsOnFiber(child, root2);
                child = child.sibling;
              }
            }
            setCurrentFiber(prevDebugFiber);
          }
          function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
            var current2 = finishedWork.alternate;
            var flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  try {
                    commitHookEffectListUnmount(Insertion7 | HasEffect, finishedWork, finishedWork.return);
                    commitHookEffectListMount(Insertion7 | HasEffect, finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                    recordLayoutEffectDuration(finishedWork);
                  } else {
                    try {
                      commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case ClassComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                return;
              }
              case HostComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Ref) {
                  if (current2 !== null) {
                    safelyDetachRef(current2, current2.return);
                  }
                }
                {
                  if (finishedWork.flags & ContentReset) {
                    var instance = finishedWork.stateNode;
                    try {
                      resetTextContent(instance);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                  if (flags & Update) {
                    var _instance4 = finishedWork.stateNode;
                    if (_instance4 != null) {
                      var newProps = finishedWork.memoizedProps;
                      var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                      var type = finishedWork.type;
                      var updatePayload = finishedWork.updateQueue;
                      finishedWork.updateQueue = null;
                      if (updatePayload !== null) {
                        try {
                          commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostText: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (finishedWork.stateNode === null) {
                      throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                    }
                    var textInstance = finishedWork.stateNode;
                    var newText = finishedWork.memoizedProps;
                    var oldText = current2 !== null ? current2.memoizedProps : newText;
                    try {
                      commitTextUpdate(textInstance, oldText, newText);
                    } catch (error2) {
                      captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                    }
                  }
                }
                return;
              }
              case HostRoot: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  {
                    if (current2 !== null) {
                      var prevRootState = current2.memoizedState;
                      if (prevRootState.isDehydrated) {
                        try {
                          commitHydratedContainer(root2.containerInfo);
                        } catch (error2) {
                          captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                        }
                      }
                    }
                  }
                }
                return;
              }
              case HostPortal: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
              case SuspenseComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                var offscreenFiber = finishedWork.child;
                if (offscreenFiber.flags & Visibility) {
                  var offscreenInstance = offscreenFiber.stateNode;
                  var newState = offscreenFiber.memoizedState;
                  var isHidden = newState !== null;
                  offscreenInstance.isHidden = isHidden;
                  if (isHidden) {
                    var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                    if (!wasHidden) {
                      markCommitTimeOfFallback();
                    }
                  }
                }
                if (flags & Update) {
                  try {
                    commitSuspenseCallback(finishedWork);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case OffscreenComponent: {
                var _wasHidden = current2 !== null && current2.memoizedState !== null;
                if (
                  // TODO: Remove this dead flag
                  finishedWork.mode & ConcurrentMode
                ) {
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                } else {
                  recursivelyTraverseMutationEffects(root2, finishedWork);
                }
                commitReconciliationEffects(finishedWork);
                if (flags & Visibility) {
                  var _offscreenInstance = finishedWork.stateNode;
                  var _newState = finishedWork.memoizedState;
                  var _isHidden = _newState !== null;
                  var offscreenBoundary = finishedWork;
                  _offscreenInstance.isHidden = _isHidden;
                  {
                    if (_isHidden) {
                      if (!_wasHidden) {
                        if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                          nextEffect = offscreenBoundary;
                          var offscreenChild = offscreenBoundary.child;
                          while (offscreenChild !== null) {
                            nextEffect = offscreenChild;
                            disappearLayoutEffects_begin(offscreenChild);
                            offscreenChild = offscreenChild.sibling;
                          }
                        }
                      }
                    }
                  }
                  {
                    hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                  }
                }
                return;
              }
              case SuspenseListComponent: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                if (flags & Update) {
                  attachSuspenseRetryListeners(finishedWork);
                }
                return;
              }
              case ScopeComponent: {
                return;
              }
              default: {
                recursivelyTraverseMutationEffects(root2, finishedWork);
                commitReconciliationEffects(finishedWork);
                return;
              }
            }
          }
          function commitReconciliationEffects(finishedWork) {
            var flags = finishedWork.flags;
            if (flags & Placement) {
              try {
                commitPlacement(finishedWork);
              } catch (error2) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error2);
              }
              finishedWork.flags &= ~Placement;
            }
            if (flags & Hydrating) {
              finishedWork.flags &= ~Hydrating;
            }
          }
          function commitLayoutEffects(finishedWork, root2, committedLanes) {
            inProgressLanes = committedLanes;
            inProgressRoot = root2;
            nextEffect = finishedWork;
            commitLayoutEffects_begin(finishedWork, root2, committedLanes);
            inProgressLanes = null;
            inProgressRoot = null;
          }
          function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
            var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent && isModernRoot) {
                var isHidden = fiber.memoizedState !== null;
                var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
                if (newOffscreenSubtreeIsHidden) {
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                } else {
                  var current2 = fiber.alternate;
                  var wasHidden = current2 !== null && current2.memoizedState !== null;
                  var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                  var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                  var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                  offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                  if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                    nextEffect = fiber;
                    reappearLayoutEffects_begin(fiber);
                  }
                  var child = firstChild;
                  while (child !== null) {
                    nextEffect = child;
                    commitLayoutEffects_begin(
                      child,
                      // New root; bubble back up to here and stop.
                      root2,
                      committedLanes
                    );
                    child = child.sibling;
                  }
                  nextEffect = fiber;
                  offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                  offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                  commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                  continue;
                }
              }
              if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
              }
            }
          }
          function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & LayoutMask) !== NoFlags) {
                var current2 = fiber.alternate;
                setCurrentFiber(fiber);
                try {
                  commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function disappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case MemoComponent:
                case SimpleMemoComponent: {
                  if (fiber.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListUnmount(Layout, fiber, fiber.return);
                    } finally {
                      recordLayoutEffectDuration(fiber);
                    }
                  } else {
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  }
                  break;
                }
                case ClassComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
                case HostComponent: {
                  safelyDetachRef(fiber, fiber.return);
                  break;
                }
                case OffscreenComponent: {
                  var isHidden = fiber.memoizedState !== null;
                  if (isHidden) {
                    disappearLayoutEffects_complete(subtreeRoot);
                    continue;
                  }
                  break;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                disappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function disappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function reappearLayoutEffects_begin(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if (fiber.tag === OffscreenComponent) {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  reappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
              }
              if (firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                reappearLayoutEffects_complete(subtreeRoot);
              }
            }
          }
          function reappearLayoutEffects_complete(subtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              try {
                reappearLayoutEffectsOnFiber(fiber);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
            nextEffect = finishedWork;
            commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
          }
          function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var firstChild = fiber.child;
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
                firstChild.return = fiber;
                nextEffect = firstChild;
              } else {
                commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
              }
            }
          }
          function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                try {
                  commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                resetCurrentFiber();
              }
              if (fiber === subtreeRoot) {
                nextEffect = null;
                return;
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                  } finally {
                    recordPassiveEffectDuration(finishedWork);
                  }
                } else {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffects(firstChild) {
            nextEffect = firstChild;
            commitPassiveUnmountEffects_begin();
          }
          function commitPassiveUnmountEffects_begin() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var child = fiber.child;
              if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
                var deletions = fiber.deletions;
                if (deletions !== null) {
                  for (var i = 0; i < deletions.length; i++) {
                    var fiberToDelete = deletions[i];
                    nextEffect = fiberToDelete;
                    commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                  }
                  {
                    var previousFiber = fiber.alternate;
                    if (previousFiber !== null) {
                      var detachedChild = previousFiber.child;
                      if (detachedChild !== null) {
                        previousFiber.child = null;
                        do {
                          var detachedSibling = detachedChild.sibling;
                          detachedChild.sibling = null;
                          detachedChild = detachedSibling;
                        } while (detachedChild !== null);
                      }
                    }
                  }
                  nextEffect = fiber;
                }
              }
              if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffects_complete();
              }
            }
          }
          function commitPassiveUnmountEffects_complete() {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              if ((fiber.flags & Passive) !== NoFlags) {
                setCurrentFiber(fiber);
                commitPassiveUnmountOnFiber(fiber);
                resetCurrentFiber();
              }
              var sibling = fiber.sibling;
              if (sibling !== null) {
                sibling.return = fiber.return;
                nextEffect = sibling;
                return;
              }
              nextEffect = fiber.return;
            }
          }
          function commitPassiveUnmountOnFiber(finishedWork) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (finishedWork.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                  recordPassiveEffectDuration(finishedWork);
                } else {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                }
                break;
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              setCurrentFiber(fiber);
              commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
              resetCurrentFiber();
              var child = fiber.child;
              if (child !== null) {
                child.return = fiber;
                nextEffect = child;
              } else {
                commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
              }
            }
          }
          function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
            while (nextEffect !== null) {
              var fiber = nextEffect;
              var sibling = fiber.sibling;
              var returnFiber = fiber.return;
              {
                detachFiberAfterEffects(fiber);
                if (fiber === deletedSubtreeRoot) {
                  nextEffect = null;
                  return;
                }
              }
              if (sibling !== null) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                return;
              }
              nextEffect = returnFiber;
            }
          }
          function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
            switch (current2.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (current2.mode & ProfileMode) {
                  startPassiveEffectTimer();
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                  recordPassiveEffectDuration(current2);
                } else {
                  commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                }
                break;
              }
            }
          }
          function invokeLayoutEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Layout | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  try {
                    instance.componentDidMount();
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectMountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
              }
            }
          }
          function invokeLayoutEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                  break;
                }
                case ClassComponent: {
                  var instance = fiber.stateNode;
                  if (typeof instance.componentWillUnmount === "function") {
                    safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                  }
                  break;
                }
              }
            }
          }
          function invokePassiveEffectUnmountInDEV(fiber) {
            {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  try {
                    commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                  } catch (error2) {
                    captureCommitPhaseError(fiber, fiber.return, error2);
                  }
                }
              }
            }
          }
          var COMPONENT_TYPE = 0;
          var HAS_PSEUDO_CLASS_TYPE = 1;
          var ROLE_TYPE = 2;
          var TEST_NAME_TYPE = 3;
          var TEXT_TYPE = 4;
          if (typeof Symbol === "function" && Symbol.for) {
            var symbolFor = Symbol.for;
            COMPONENT_TYPE = symbolFor("selector.component");
            HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
            ROLE_TYPE = symbolFor("selector.role");
            TEST_NAME_TYPE = symbolFor("selector.test_id");
            TEXT_TYPE = symbolFor("selector.text");
          }
          var commitHooks = [];
          function onCommitRoot$1() {
            {
              commitHooks.forEach(function(commitHook) {
                return commitHook();
              });
            }
          }
          var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
          function isLegacyActEnvironment(fiber) {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              var jestIsDefined = typeof jest !== "undefined";
              return jestIsDefined && isReactActEnvironmentGlobal !== false;
            }
          }
          function isConcurrentActEnvironment() {
            {
              var isReactActEnvironmentGlobal = (
                // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
                typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
              );
              if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
                error("The current testing environment is not configured to support act(...)");
              }
              return isReactActEnvironmentGlobal;
            }
          }
          var ceil = Math.ceil;
          var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
          var NoContext = (
            /*             */
            0
          );
          var BatchedContext = (
            /*               */
            1
          );
          var RenderContext = (
            /*                */
            2
          );
          var CommitContext = (
            /*                */
            4
          );
          var RootInProgress = 0;
          var RootFatalErrored = 1;
          var RootErrored = 2;
          var RootSuspended = 3;
          var RootSuspendedWithDelay = 4;
          var RootCompleted = 5;
          var RootDidNotComplete = 6;
          var executionContext = NoContext;
          var workInProgressRoot = null;
          var workInProgress = null;
          var workInProgressRootRenderLanes = NoLanes;
          var subtreeRenderLanes = NoLanes;
          var subtreeRenderLanesCursor = createCursor(NoLanes);
          var workInProgressRootExitStatus = RootInProgress;
          var workInProgressRootFatalError = null;
          var workInProgressRootIncludedLanes = NoLanes;
          var workInProgressRootSkippedLanes = NoLanes;
          var workInProgressRootInterleavedUpdatedLanes = NoLanes;
          var workInProgressRootPingedLanes = NoLanes;
          var workInProgressRootConcurrentErrors = null;
          var workInProgressRootRecoverableErrors = null;
          var globalMostRecentFallbackTime = 0;
          var FALLBACK_THROTTLE_MS = 500;
          var workInProgressRootRenderTargetTime = Infinity;
          var RENDER_TIMEOUT_MS = 500;
          var workInProgressTransitions = null;
          function resetRenderTimer() {
            workInProgressRootRenderTargetTime = now2() + RENDER_TIMEOUT_MS;
          }
          function getRenderTargetTime() {
            return workInProgressRootRenderTargetTime;
          }
          var hasUncaughtError = false;
          var firstUncaughtError = null;
          var legacyErrorBoundariesThatAlreadyFailed = null;
          var rootDoesHavePassiveEffects = false;
          var rootWithPendingPassiveEffects = null;
          var pendingPassiveEffectsLanes = NoLanes;
          var pendingPassiveProfilerEffects = [];
          var pendingPassiveTransitions = null;
          var NESTED_UPDATE_LIMIT = 50;
          var nestedUpdateCount = 0;
          var rootWithNestedUpdates = null;
          var isFlushingPassiveEffects = false;
          var didScheduleUpdateDuringPassiveEffects = false;
          var NESTED_PASSIVE_UPDATE_LIMIT = 50;
          var nestedPassiveUpdateCount = 0;
          var rootWithPassiveNestedUpdates = null;
          var currentEventTime = NoTimestamp;
          var currentEventTransitionLane = NoLanes;
          var isRunningInsertionEffect = false;
          function getWorkInProgressRoot() {
            return workInProgressRoot;
          }
          function requestEventTime() {
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              return now2();
            }
            if (currentEventTime !== NoTimestamp) {
              return currentEventTime;
            }
            currentEventTime = now2();
            return currentEventTime;
          }
          function requestUpdateLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
              return pickArbitraryLane(workInProgressRootRenderLanes);
            }
            var isTransition = requestCurrentTransition() !== NoTransition;
            if (isTransition) {
              if (ReactCurrentBatchConfig$3.transition !== null) {
                var transition2 = ReactCurrentBatchConfig$3.transition;
                if (!transition2._updatedFibers) {
                  transition2._updatedFibers = /* @__PURE__ */ new Set();
                }
                transition2._updatedFibers.add(fiber);
              }
              if (currentEventTransitionLane === NoLane) {
                currentEventTransitionLane = claimNextTransitionLane();
              }
              return currentEventTransitionLane;
            }
            var updateLane = getCurrentUpdatePriority();
            if (updateLane !== NoLane) {
              return updateLane;
            }
            var eventLane = getCurrentEventPriority();
            return eventLane;
          }
          function requestRetryLane(fiber) {
            var mode = fiber.mode;
            if ((mode & ConcurrentMode) === NoMode) {
              return SyncLane;
            }
            return claimNextRetryLane();
          }
          function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
            checkForNestedUpdates();
            {
              if (isRunningInsertionEffect) {
                error("useInsertionEffect must not schedule updates.");
              }
            }
            {
              if (isFlushingPassiveEffects) {
                didScheduleUpdateDuringPassiveEffects = true;
              }
            }
            markRootUpdated(root2, lane, eventTime);
            if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
              warnAboutRenderPhaseUpdatesInDEV(fiber);
            } else {
              {
                if (isDevToolsPresent) {
                  addFiberToLanesMap(root2, fiber, lane);
                }
              }
              warnIfUpdatesNotWrappedWithActDEV(fiber);
              if (root2 === workInProgressRoot) {
                if ((executionContext & RenderContext) === NoContext) {
                  workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
                }
                if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                  markRootSuspended$1(root2, workInProgressRootRenderLanes);
                }
              }
              ensureRootIsScheduled(root2, eventTime);
              if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
            var current2 = root2.current;
            current2.lanes = lane;
            markRootUpdated(root2, lane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
          function isUnsafeClassRenderPhaseUpdate(fiber) {
            return (
              // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
              // decided not to enable it.
              (executionContext & RenderContext) !== NoContext
            );
          }
          function ensureRootIsScheduled(root2, currentTime) {
            var existingCallbackNode = root2.callbackNode;
            markStarvedLanesAsExpired(root2, currentTime);
            var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (nextLanes === NoLanes) {
              if (existingCallbackNode !== null) {
                cancelCallback$1(existingCallbackNode);
              }
              root2.callbackNode = null;
              root2.callbackPriority = NoLane;
              return;
            }
            var newCallbackPriority = getHighestPriorityLane(nextLanes);
            var existingCallbackPriority = root2.callbackPriority;
            if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
            // Scheduler task, rather than an `act` task, cancel it and re-scheduled
            // on the `act` queue.
            !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
              {
                if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                  error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
                }
              }
              return;
            }
            if (existingCallbackNode != null) {
              cancelCallback$1(existingCallbackNode);
            }
            var newCallbackNode;
            if (newCallbackPriority === SyncLane) {
              if (root2.tag === LegacyRoot) {
                if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                  ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
                }
                scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
              } else {
                scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
              }
              {
                if (ReactCurrentActQueue$1.current !== null) {
                  ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
                } else {
                  scheduleMicrotask(function() {
                    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                      flushSyncCallbacks();
                    }
                  });
                }
              }
              newCallbackNode = null;
            } else {
              var schedulerPriorityLevel;
              switch (lanesToEventPriority(nextLanes)) {
                case DiscreteEventPriority:
                  schedulerPriorityLevel = ImmediatePriority;
                  break;
                case ContinuousEventPriority:
                  schedulerPriorityLevel = UserBlockingPriority;
                  break;
                case DefaultEventPriority:
                  schedulerPriorityLevel = NormalPriority;
                  break;
                case IdleEventPriority:
                  schedulerPriorityLevel = IdlePriority;
                  break;
                default:
                  schedulerPriorityLevel = NormalPriority;
                  break;
              }
              newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
            }
            root2.callbackPriority = newCallbackPriority;
            root2.callbackNode = newCallbackNode;
          }
          function performConcurrentWorkOnRoot(root2, didTimeout) {
            {
              resetNestedUpdateFlag();
            }
            currentEventTime = NoTimestamp;
            currentEventTransitionLane = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var originalCallbackNode = root2.callbackNode;
            var didFlushPassiveEffects = flushPassiveEffects();
            if (didFlushPassiveEffects) {
              if (root2.callbackNode !== originalCallbackNode) {
                return null;
              }
            }
            var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
            if (lanes === NoLanes) {
              return null;
            }
            var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
            var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
            if (exitStatus !== RootInProgress) {
              if (exitStatus === RootErrored) {
                var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                if (errorRetryLanes !== NoLanes) {
                  lanes = errorRetryLanes;
                  exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
                }
              }
              if (exitStatus === RootFatalErrored) {
                var fatalError = workInProgressRootFatalError;
                prepareFreshStack(root2, NoLanes);
                markRootSuspended$1(root2, lanes);
                ensureRootIsScheduled(root2, now2());
                throw fatalError;
              }
              if (exitStatus === RootDidNotComplete) {
                markRootSuspended$1(root2, lanes);
              } else {
                var renderWasConcurrent = !includesBlockingLane(root2, lanes);
                var finishedWork = root2.current.alternate;
                if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                  exitStatus = renderRootSync(root2, lanes);
                  if (exitStatus === RootErrored) {
                    var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                    if (_errorRetryLanes !== NoLanes) {
                      lanes = _errorRetryLanes;
                      exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                    }
                  }
                  if (exitStatus === RootFatalErrored) {
                    var _fatalError = workInProgressRootFatalError;
                    prepareFreshStack(root2, NoLanes);
                    markRootSuspended$1(root2, lanes);
                    ensureRootIsScheduled(root2, now2());
                    throw _fatalError;
                  }
                }
                root2.finishedWork = finishedWork;
                root2.finishedLanes = lanes;
                finishConcurrentRender(root2, exitStatus, lanes);
              }
            }
            ensureRootIsScheduled(root2, now2());
            if (root2.callbackNode === originalCallbackNode) {
              return performConcurrentWorkOnRoot.bind(null, root2);
            }
            return null;
          }
          function recoverFromConcurrentError(root2, errorRetryLanes) {
            var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
            if (isRootDehydrated(root2)) {
              var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
              rootWorkInProgress.flags |= ForceClientRender;
              {
                errorHydratingContainer(root2.containerInfo);
              }
            }
            var exitStatus = renderRootSync(root2, errorRetryLanes);
            if (exitStatus !== RootErrored) {
              var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
              workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
              if (errorsFromSecondAttempt !== null) {
                queueRecoverableErrors(errorsFromSecondAttempt);
              }
            }
            return exitStatus;
          }
          function queueRecoverableErrors(errors) {
            if (workInProgressRootRecoverableErrors === null) {
              workInProgressRootRecoverableErrors = errors;
            } else {
              workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
            }
          }
          function finishConcurrentRender(root2, exitStatus, lanes) {
            switch (exitStatus) {
              case RootInProgress:
              case RootFatalErrored: {
                throw new Error("Root did not complete. This is a bug in React.");
              }
              case RootErrored: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspended: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
                !shouldForceFlushFallbacksInDEV()) {
                  var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now2();
                  if (msUntilTimeout > 10) {
                    var nextLanes = getNextLanes(root2, NoLanes);
                    if (nextLanes !== NoLanes) {
                      break;
                    }
                    var suspendedLanes = root2.suspendedLanes;
                    if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                      var eventTime = requestEventTime();
                      markRootPinged(root2, suspendedLanes);
                      break;
                    }
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootSuspendedWithDelay: {
                markRootSuspended$1(root2, lanes);
                if (includesOnlyTransitions(lanes)) {
                  break;
                }
                if (!shouldForceFlushFallbacksInDEV()) {
                  var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                  var eventTimeMs = mostRecentEventTime;
                  var timeElapsedMs = now2() - eventTimeMs;
                  var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                  if (_msUntilTimeout > 10) {
                    root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                    break;
                  }
                }
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              case RootCompleted: {
                commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
                break;
              }
              default: {
                throw new Error("Unknown root exit status.");
              }
            }
          }
          function isRenderConsistentWithExternalStores(finishedWork) {
            var node2 = finishedWork;
            while (true) {
              if (node2.flags & StoreConsistency) {
                var updateQueue = node2.updateQueue;
                if (updateQueue !== null) {
                  var checks = updateQueue.stores;
                  if (checks !== null) {
                    for (var i = 0; i < checks.length; i++) {
                      var check = checks[i];
                      var getSnapshot = check.getSnapshot;
                      var renderedValue = check.value;
                      try {
                        if (!objectIs(getSnapshot(), renderedValue)) {
                          return false;
                        }
                      } catch (error2) {
                        return false;
                      }
                    }
                  }
                }
              }
              var child = node2.child;
              if (node2.subtreeFlags & StoreConsistency && child !== null) {
                child.return = node2;
                node2 = child;
                continue;
              }
              if (node2 === finishedWork) {
                return true;
              }
              while (node2.sibling === null) {
                if (node2.return === null || node2.return === finishedWork) {
                  return true;
                }
                node2 = node2.return;
              }
              node2.sibling.return = node2.return;
              node2 = node2.sibling;
            }
            return true;
          }
          function markRootSuspended$1(root2, suspendedLanes) {
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
            suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
            markRootSuspended(root2, suspendedLanes);
          }
          function performSyncWorkOnRoot(root2) {
            {
              syncNestedUpdateFlag();
            }
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            flushPassiveEffects();
            var lanes = getNextLanes(root2, NoLanes);
            if (!includesSomeLane(lanes, SyncLane)) {
              ensureRootIsScheduled(root2, now2());
              return null;
            }
            var exitStatus = renderRootSync(root2, lanes);
            if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now2());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            var finishedWork = root2.current.alternate;
            root2.finishedWork = finishedWork;
            root2.finishedLanes = lanes;
            commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
            ensureRootIsScheduled(root2, now2());
            return null;
          }
          function flushRoot(root2, lanes) {
            if (lanes !== NoLanes) {
              markRootEntangled(root2, mergeLanes(lanes, SyncLane));
              ensureRootIsScheduled(root2, now2());
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                resetRenderTimer();
                flushSyncCallbacks();
              }
            }
          }
          function batchedUpdates$1(fn2, a) {
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            try {
              return fn2(a);
            } finally {
              executionContext = prevExecutionContext;
              if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
              !ReactCurrentActQueue$1.isBatchingLegacy) {
                resetRenderTimer();
                flushSyncCallbacksOnlyInLegacyMode();
              }
            }
          }
          function discreteUpdates(fn2, a, b, c, d) {
            var previousPriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              return fn2(a, b, c, d);
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              if (executionContext === NoContext) {
                resetRenderTimer();
              }
            }
          }
          function flushSync4(fn2) {
            if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushPassiveEffects();
            }
            var prevExecutionContext = executionContext;
            executionContext |= BatchedContext;
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              if (fn2) {
                return fn2();
              } else {
                return void 0;
              }
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
              executionContext = prevExecutionContext;
              if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                flushSyncCallbacks();
              }
            }
          }
          function isAlreadyRendering() {
            return (executionContext & (RenderContext | CommitContext)) !== NoContext;
          }
          function pushRenderLanes(fiber, lanes) {
            push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
            subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
            workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
          }
          function popRenderLanes(fiber) {
            subtreeRenderLanes = subtreeRenderLanesCursor.current;
            pop(subtreeRenderLanesCursor, fiber);
          }
          function prepareFreshStack(root2, lanes) {
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            var timeoutHandle = root2.timeoutHandle;
            if (timeoutHandle !== noTimeout) {
              root2.timeoutHandle = noTimeout;
              cancelTimeout(timeoutHandle);
            }
            if (workInProgress !== null) {
              var interruptedWork = workInProgress.return;
              while (interruptedWork !== null) {
                var current2 = interruptedWork.alternate;
                unwindInterruptedWork(current2, interruptedWork);
                interruptedWork = interruptedWork.return;
              }
            }
            workInProgressRoot = root2;
            var rootWorkInProgress = createWorkInProgress(root2.current, null);
            workInProgress = rootWorkInProgress;
            workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
            workInProgressRootExitStatus = RootInProgress;
            workInProgressRootFatalError = null;
            workInProgressRootSkippedLanes = NoLanes;
            workInProgressRootInterleavedUpdatedLanes = NoLanes;
            workInProgressRootPingedLanes = NoLanes;
            workInProgressRootConcurrentErrors = null;
            workInProgressRootRecoverableErrors = null;
            finishQueueingConcurrentUpdates();
            {
              ReactStrictModeWarnings.discardPendingWarnings();
            }
            return rootWorkInProgress;
          }
          function handleError(root2, thrownValue) {
            do {
              var erroredWork = workInProgress;
              try {
                resetContextDependencies();
                resetHooksAfterThrow();
                resetCurrentFiber();
                ReactCurrentOwner$2.current = null;
                if (erroredWork === null || erroredWork.return === null) {
                  workInProgressRootExitStatus = RootFatalErrored;
                  workInProgressRootFatalError = thrownValue;
                  workInProgress = null;
                  return;
                }
                if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
                }
                if (enableSchedulingProfiler) {
                  markComponentRenderStopped();
                  if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                    var wakeable = thrownValue;
                    markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                  } else {
                    markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                  }
                }
                throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
                completeUnitOfWork(erroredWork);
              } catch (yetAnotherThrownValue) {
                thrownValue = yetAnotherThrownValue;
                if (workInProgress === erroredWork && erroredWork !== null) {
                  erroredWork = erroredWork.return;
                  workInProgress = erroredWork;
                } else {
                  erroredWork = workInProgress;
                }
                continue;
              }
              return;
            } while (true);
          }
          function pushDispatcher() {
            var prevDispatcher = ReactCurrentDispatcher$2.current;
            ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
            if (prevDispatcher === null) {
              return ContextOnlyDispatcher;
            } else {
              return prevDispatcher;
            }
          }
          function popDispatcher(prevDispatcher) {
            ReactCurrentDispatcher$2.current = prevDispatcher;
          }
          function markCommitTimeOfFallback() {
            globalMostRecentFallbackTime = now2();
          }
          function markSkippedUpdateLanes(lane) {
            workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
          }
          function renderDidSuspend() {
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootSuspended;
            }
          }
          function renderDidSuspendDelayIfPossible() {
            if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
              workInProgressRootExitStatus = RootSuspendedWithDelay;
            }
            if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
              markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
            }
          }
          function renderDidError(error2) {
            if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
              workInProgressRootExitStatus = RootErrored;
            }
            if (workInProgressRootConcurrentErrors === null) {
              workInProgressRootConcurrentErrors = [error2];
            } else {
              workInProgressRootConcurrentErrors.push(error2);
            }
          }
          function renderHasNotSuspendedYet() {
            return workInProgressRootExitStatus === RootInProgress;
          }
          function renderRootSync(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopSync();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            executionContext = prevExecutionContext;
            popDispatcher(prevDispatcher);
            if (workInProgress !== null) {
              throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
          function workLoopSync() {
            while (workInProgress !== null) {
              performUnitOfWork(workInProgress);
            }
          }
          function renderRootConcurrent(root2, lanes) {
            var prevExecutionContext = executionContext;
            executionContext |= RenderContext;
            var prevDispatcher = pushDispatcher();
            if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
              {
                if (isDevToolsPresent) {
                  var memoizedUpdaters = root2.memoizedUpdaters;
                  if (memoizedUpdaters.size > 0) {
                    restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                    memoizedUpdaters.clear();
                  }
                  movePendingFibersToMemoized(root2, lanes);
                }
              }
              workInProgressTransitions = getTransitionsForLanes();
              resetRenderTimer();
              prepareFreshStack(root2, lanes);
            }
            {
              markRenderStarted(lanes);
            }
            do {
              try {
                workLoopConcurrent();
                break;
              } catch (thrownValue) {
                handleError(root2, thrownValue);
              }
            } while (true);
            resetContextDependencies();
            popDispatcher(prevDispatcher);
            executionContext = prevExecutionContext;
            if (workInProgress !== null) {
              {
                markRenderYielded();
              }
              return RootInProgress;
            } else {
              {
                markRenderStopped();
              }
              workInProgressRoot = null;
              workInProgressRootRenderLanes = NoLanes;
              return workInProgressRootExitStatus;
            }
          }
          function workLoopConcurrent() {
            while (workInProgress !== null && !shouldYield()) {
              performUnitOfWork(workInProgress);
            }
          }
          function performUnitOfWork(unitOfWork) {
            var current2 = unitOfWork.alternate;
            setCurrentFiber(unitOfWork);
            var next2;
            if ((unitOfWork.mode & ProfileMode) !== NoMode) {
              startProfilerTimer(unitOfWork);
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
              stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
            } else {
              next2 = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            }
            resetCurrentFiber();
            unitOfWork.memoizedProps = unitOfWork.pendingProps;
            if (next2 === null) {
              completeUnitOfWork(unitOfWork);
            } else {
              workInProgress = next2;
            }
            ReactCurrentOwner$2.current = null;
          }
          function completeUnitOfWork(unitOfWork) {
            var completedWork = unitOfWork;
            do {
              var current2 = completedWork.alternate;
              var returnFiber = completedWork.return;
              if ((completedWork.flags & Incomplete) === NoFlags) {
                setCurrentFiber(completedWork);
                var next2 = void 0;
                if ((completedWork.mode & ProfileMode) === NoMode) {
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                } else {
                  startProfilerTimer(completedWork);
                  next2 = completeWork(current2, completedWork, subtreeRenderLanes);
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                }
                resetCurrentFiber();
                if (next2 !== null) {
                  workInProgress = next2;
                  return;
                }
              } else {
                var _next = unwindWork(current2, completedWork);
                if (_next !== null) {
                  _next.flags &= HostEffectMask;
                  workInProgress = _next;
                  return;
                }
                if ((completedWork.mode & ProfileMode) !== NoMode) {
                  stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                  var actualDuration = completedWork.actualDuration;
                  var child = completedWork.child;
                  while (child !== null) {
                    actualDuration += child.actualDuration;
                    child = child.sibling;
                  }
                  completedWork.actualDuration = actualDuration;
                }
                if (returnFiber !== null) {
                  returnFiber.flags |= Incomplete;
                  returnFiber.subtreeFlags = NoFlags;
                  returnFiber.deletions = null;
                } else {
                  workInProgressRootExitStatus = RootDidNotComplete;
                  workInProgress = null;
                  return;
                }
              }
              var siblingFiber = completedWork.sibling;
              if (siblingFiber !== null) {
                workInProgress = siblingFiber;
                return;
              }
              completedWork = returnFiber;
              workInProgress = completedWork;
            } while (completedWork !== null);
            if (workInProgressRootExitStatus === RootInProgress) {
              workInProgressRootExitStatus = RootCompleted;
            }
          }
          function commitRoot(root2, recoverableErrors, transitions) {
            var previousUpdateLanePriority = getCurrentUpdatePriority();
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(DiscreteEventPriority);
              commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
            } finally {
              ReactCurrentBatchConfig$3.transition = prevTransition;
              setCurrentUpdatePriority(previousUpdateLanePriority);
            }
            return null;
          }
          function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
            do {
              flushPassiveEffects();
            } while (rootWithPendingPassiveEffects !== null);
            flushRenderPhaseStrictModeWarningsInDEV();
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Should not already be working.");
            }
            var finishedWork = root2.finishedWork;
            var lanes = root2.finishedLanes;
            {
              markCommitStarted(lanes);
            }
            if (finishedWork === null) {
              {
                markCommitStopped();
              }
              return null;
            } else {
              {
                if (lanes === NoLanes) {
                  error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
                }
              }
            }
            root2.finishedWork = null;
            root2.finishedLanes = NoLanes;
            if (finishedWork === root2.current) {
              throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
            markRootFinished(root2, remainingLanes);
            if (root2 === workInProgressRoot) {
              workInProgressRoot = null;
              workInProgress = null;
              workInProgressRootRenderLanes = NoLanes;
            }
            if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                pendingPassiveTransitions = transitions;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
            var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
            if (subtreeHasEffects || rootHasEffect) {
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              ReactCurrentBatchConfig$3.transition = null;
              var previousPriority = getCurrentUpdatePriority();
              setCurrentUpdatePriority(DiscreteEventPriority);
              var prevExecutionContext = executionContext;
              executionContext |= CommitContext;
              ReactCurrentOwner$2.current = null;
              var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
              {
                recordCommitTime();
              }
              commitMutationEffects(root2, finishedWork, lanes);
              resetAfterCommit(root2.containerInfo);
              root2.current = finishedWork;
              {
                markLayoutEffectsStarted(lanes);
              }
              commitLayoutEffects(finishedWork, root2, lanes);
              {
                markLayoutEffectsStopped();
              }
              requestPaint();
              executionContext = prevExecutionContext;
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            } else {
              root2.current = finishedWork;
              {
                recordCommitTime();
              }
            }
            var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
            if (rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = false;
              rootWithPendingPassiveEffects = root2;
              pendingPassiveEffectsLanes = lanes;
            } else {
              {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
              }
            }
            remainingLanes = root2.pendingLanes;
            if (remainingLanes === NoLanes) {
              legacyErrorBoundariesThatAlreadyFailed = null;
            }
            {
              if (!rootDidHavePassiveEffects) {
                commitDoubleInvokeEffectsInDEV(root2.current, false);
              }
            }
            onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
            {
              if (isDevToolsPresent) {
                root2.memoizedUpdaters.clear();
              }
            }
            {
              onCommitRoot$1();
            }
            ensureRootIsScheduled(root2, now2());
            if (recoverableErrors !== null) {
              var onRecoverableError = root2.onRecoverableError;
              for (var i = 0; i < recoverableErrors.length; i++) {
                var recoverableError = recoverableErrors[i];
                var componentStack = recoverableError.stack;
                var digest = recoverableError.digest;
                onRecoverableError(recoverableError.value, {
                  componentStack,
                  digest
                });
              }
            }
            if (hasUncaughtError) {
              hasUncaughtError = false;
              var error$1 = firstUncaughtError;
              firstUncaughtError = null;
              throw error$1;
            }
            if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
              flushPassiveEffects();
            }
            remainingLanes = root2.pendingLanes;
            if (includesSomeLane(remainingLanes, SyncLane)) {
              {
                markNestedUpdateScheduled();
              }
              if (root2 === rootWithNestedUpdates) {
                nestedUpdateCount++;
              } else {
                nestedUpdateCount = 0;
                rootWithNestedUpdates = root2;
              }
            } else {
              nestedUpdateCount = 0;
            }
            flushSyncCallbacks();
            {
              markCommitStopped();
            }
            return null;
          }
          function flushPassiveEffects() {
            if (rootWithPendingPassiveEffects !== null) {
              var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
              var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
              var prevTransition = ReactCurrentBatchConfig$3.transition;
              var previousPriority = getCurrentUpdatePriority();
              try {
                ReactCurrentBatchConfig$3.transition = null;
                setCurrentUpdatePriority(priority);
                return flushPassiveEffectsImpl();
              } finally {
                setCurrentUpdatePriority(previousPriority);
                ReactCurrentBatchConfig$3.transition = prevTransition;
              }
            }
            return false;
          }
          function enqueuePendingPassiveProfilerEffect(fiber) {
            {
              pendingPassiveProfilerEffects.push(fiber);
              if (!rootDoesHavePassiveEffects) {
                rootDoesHavePassiveEffects = true;
                scheduleCallback$1(NormalPriority, function() {
                  flushPassiveEffects();
                  return null;
                });
              }
            }
          }
          function flushPassiveEffectsImpl() {
            if (rootWithPendingPassiveEffects === null) {
              return false;
            }
            var transitions = pendingPassiveTransitions;
            pendingPassiveTransitions = null;
            var root2 = rootWithPendingPassiveEffects;
            var lanes = pendingPassiveEffectsLanes;
            rootWithPendingPassiveEffects = null;
            pendingPassiveEffectsLanes = NoLanes;
            if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
              throw new Error("Cannot flush passive effects while already rendering.");
            }
            {
              isFlushingPassiveEffects = true;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            {
              markPassiveEffectsStarted(lanes);
            }
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            commitPassiveUnmountEffects(root2.current);
            commitPassiveMountEffects(root2, root2.current, lanes, transitions);
            {
              var profilerEffects = pendingPassiveProfilerEffects;
              pendingPassiveProfilerEffects = [];
              for (var i = 0; i < profilerEffects.length; i++) {
                var _fiber = profilerEffects[i];
                commitPassiveEffectDurations(root2, _fiber);
              }
            }
            {
              markPassiveEffectsStopped();
            }
            {
              commitDoubleInvokeEffectsInDEV(root2.current, true);
            }
            executionContext = prevExecutionContext;
            flushSyncCallbacks();
            {
              if (didScheduleUpdateDuringPassiveEffects) {
                if (root2 === rootWithPassiveNestedUpdates) {
                  nestedPassiveUpdateCount++;
                } else {
                  nestedPassiveUpdateCount = 0;
                  rootWithPassiveNestedUpdates = root2;
                }
              } else {
                nestedPassiveUpdateCount = 0;
              }
              isFlushingPassiveEffects = false;
              didScheduleUpdateDuringPassiveEffects = false;
            }
            onPostCommitRoot(root2);
            {
              var stateNode = root2.current.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
            return true;
          }
          function isAlreadyFailedLegacyErrorBoundary(instance) {
            return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
          }
          function markLegacyErrorBoundaryAsFailed(instance) {
            if (legacyErrorBoundariesThatAlreadyFailed === null) {
              legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
            } else {
              legacyErrorBoundariesThatAlreadyFailed.add(instance);
            }
          }
          function prepareToThrowUncaughtError(error2) {
            if (!hasUncaughtError) {
              hasUncaughtError = true;
              firstUncaughtError = error2;
            }
          }
          var onUncaughtError = prepareToThrowUncaughtError;
          function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
            var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
            var update2 = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
            var root2 = enqueueUpdate(rootFiber, update2, SyncLane);
            var eventTime = requestEventTime();
            if (root2 !== null) {
              markRootUpdated(root2, SyncLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
            {
              reportUncaughtErrorInDEV(error$1);
              setIsRunningInsertionEffect(false);
            }
            if (sourceFiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
              return;
            }
            var fiber = null;
            {
              fiber = nearestMountedAncestor;
            }
            while (fiber !== null) {
              if (fiber.tag === HostRoot) {
                captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
                return;
              } else if (fiber.tag === ClassComponent) {
                var ctor = fiber.type;
                var instance = fiber.stateNode;
                if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                  var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                  var update2 = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                  var root2 = enqueueUpdate(fiber, update2, SyncLane);
                  var eventTime = requestEventTime();
                  if (root2 !== null) {
                    markRootUpdated(root2, SyncLane, eventTime);
                    ensureRootIsScheduled(root2, eventTime);
                  }
                  return;
                }
              }
              fiber = fiber.return;
            }
            {
              error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
            }
          }
          function pingSuspendedRoot(root2, wakeable, pingedLanes) {
            var pingCache = root2.pingCache;
            if (pingCache !== null) {
              pingCache.delete(wakeable);
            }
            var eventTime = requestEventTime();
            markRootPinged(root2, pingedLanes);
            warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
            if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
              if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now2() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
                prepareFreshStack(root2, NoLanes);
              } else {
                workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
          }
          function retryTimedOutBoundary(boundaryFiber, retryLane) {
            if (retryLane === NoLane) {
              retryLane = requestRetryLane(boundaryFiber);
            }
            var eventTime = requestEventTime();
            var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
            if (root2 !== null) {
              markRootUpdated(root2, retryLane, eventTime);
              ensureRootIsScheduled(root2, eventTime);
            }
          }
          function retryDehydratedSuspenseBoundary(boundaryFiber) {
            var suspenseState = boundaryFiber.memoizedState;
            var retryLane = NoLane;
            if (suspenseState !== null) {
              retryLane = suspenseState.retryLane;
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function resolveRetryWakeable(boundaryFiber, wakeable) {
            var retryLane = NoLane;
            var retryCache;
            switch (boundaryFiber.tag) {
              case SuspenseComponent:
                retryCache = boundaryFiber.stateNode;
                var suspenseState = boundaryFiber.memoizedState;
                if (suspenseState !== null) {
                  retryLane = suspenseState.retryLane;
                }
                break;
              case SuspenseListComponent:
                retryCache = boundaryFiber.stateNode;
                break;
              default:
                throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
            }
            if (retryCache !== null) {
              retryCache.delete(wakeable);
            }
            retryTimedOutBoundary(boundaryFiber, retryLane);
          }
          function jnd(timeElapsed) {
            return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
          }
          function checkForNestedUpdates() {
            if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = null;
              throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
            }
            {
              if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = null;
                error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
              }
            }
          }
          function flushRenderPhaseStrictModeWarningsInDEV() {
            {
              ReactStrictModeWarnings.flushLegacyContextWarning();
              {
                ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
              }
            }
          }
          function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
            {
              setCurrentFiber(fiber);
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
              }
              invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
              if (hasPassiveEffects) {
                invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
              }
              resetCurrentFiber();
            }
          }
          function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
            {
              var current2 = firstChild;
              var subtreeRoot = null;
              while (current2 !== null) {
                var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
                if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                  current2 = current2.child;
                } else {
                  if ((current2.flags & fiberFlags) !== NoFlags) {
                    invokeEffectFn(current2);
                  }
                  if (current2.sibling !== null) {
                    current2 = current2.sibling;
                  } else {
                    current2 = subtreeRoot = current2.return;
                  }
                }
              }
            }
          }
          var didWarnStateUpdateForNotYetMountedComponent = null;
          function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
            {
              if ((executionContext & RenderContext) !== NoContext) {
                return;
              }
              if (!(fiber.mode & ConcurrentMode)) {
                return;
              }
              var tag = fiber.tag;
              if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
                return;
              }
              var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
              if (didWarnStateUpdateForNotYetMountedComponent !== null) {
                if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                  return;
                }
                didWarnStateUpdateForNotYetMountedComponent.add(componentName);
              } else {
                didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
              }
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
          var beginWork$1;
          {
            var dummyFiber = null;
            beginWork$1 = function(current2, unitOfWork, lanes) {
              var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
              try {
                return beginWork(current2, unitOfWork, lanes);
              } catch (originalError) {
                if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                  throw originalError;
                }
                resetContextDependencies();
                resetHooksAfterThrow();
                unwindInterruptedWork(current2, unitOfWork);
                assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
                if (unitOfWork.mode & ProfileMode) {
                  startProfilerTimer(unitOfWork);
                }
                invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
                if (hasCaughtError()) {
                  var replayError = clearCaughtError();
                  if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                    originalError._suppressLogging = true;
                  }
                }
                throw originalError;
              }
            };
          }
          var didWarnAboutUpdateInRender = false;
          var didWarnAboutUpdateInRenderForAnotherComponent;
          {
            didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
          }
          function warnAboutRenderPhaseUpdatesInDEV(fiber) {
            {
              if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
                switch (fiber.tag) {
                  case FunctionComponent:
                  case ForwardRef:
                  case SimpleMemoComponent: {
                    var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                    var dedupeKey = renderingComponentName;
                    if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                      didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                      var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                      error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                    }
                    break;
                  }
                  case ClassComponent: {
                    if (!didWarnAboutUpdateInRender) {
                      error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                      didWarnAboutUpdateInRender = true;
                    }
                    break;
                  }
                }
              }
            }
          }
          function restorePendingUpdaters(root2, lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                memoizedUpdaters.forEach(function(schedulingFiber) {
                  addFiberToLanesMap(root2, schedulingFiber, lanes);
                });
              }
            }
          }
          var fakeActCallbackNode = {};
          function scheduleCallback$1(priorityLevel, callback) {
            {
              var actQueue = ReactCurrentActQueue$1.current;
              if (actQueue !== null) {
                actQueue.push(callback);
                return fakeActCallbackNode;
              } else {
                return scheduleCallback(priorityLevel, callback);
              }
            }
          }
          function cancelCallback$1(callbackNode) {
            if (callbackNode === fakeActCallbackNode) {
              return;
            }
            return cancelCallback(callbackNode);
          }
          function shouldForceFlushFallbacksInDEV() {
            return ReactCurrentActQueue$1.current !== null;
          }
          function warnIfUpdatesNotWrappedWithActDEV(fiber) {
            {
              if (fiber.mode & ConcurrentMode) {
                if (!isConcurrentActEnvironment()) {
                  return;
                }
              } else {
                if (!isLegacyActEnvironment()) {
                  return;
                }
                if (executionContext !== NoContext) {
                  return;
                }
                if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                  return;
                }
              }
              if (ReactCurrentActQueue$1.current === null) {
                var previousFiber = current;
                try {
                  setCurrentFiber(fiber);
                  error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(fiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
          }
          function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
            {
              if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
                error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
              }
            }
          }
          function setIsRunningInsertionEffect(isRunning) {
            {
              isRunningInsertionEffect = isRunning;
            }
          }
          var resolveFamily = null;
          var failedBoundaries = null;
          var setRefreshHandler = function(handler) {
            {
              resolveFamily = handler;
            }
          };
          function resolveFunctionForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                return type;
              }
              return family.current;
            }
          }
          function resolveClassForHotReloading(type) {
            return resolveFunctionForHotReloading(type);
          }
          function resolveForwardRefForHotReloading(type) {
            {
              if (resolveFamily === null) {
                return type;
              }
              var family = resolveFamily(type);
              if (family === void 0) {
                if (type !== null && type !== void 0 && typeof type.render === "function") {
                  var currentRender = resolveFunctionForHotReloading(type.render);
                  if (type.render !== currentRender) {
                    var syntheticType = {
                      $$typeof: REACT_FORWARD_REF_TYPE,
                      render: currentRender
                    };
                    if (type.displayName !== void 0) {
                      syntheticType.displayName = type.displayName;
                    }
                    return syntheticType;
                  }
                }
                return type;
              }
              return family.current;
            }
          }
          function isCompatibleFamilyForHotReloading(fiber, element) {
            {
              if (resolveFamily === null) {
                return false;
              }
              var prevType = fiber.elementType;
              var nextType = element.type;
              var needsCompareFamilies = false;
              var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
              switch (fiber.tag) {
                case ClassComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case FunctionComponent: {
                  if (typeof nextType === "function") {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case ForwardRef: {
                  if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                case MemoComponent:
                case SimpleMemoComponent: {
                  if ($$typeofNextType === REACT_MEMO_TYPE) {
                    needsCompareFamilies = true;
                  } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                    needsCompareFamilies = true;
                  }
                  break;
                }
                default:
                  return false;
              }
              if (needsCompareFamilies) {
                var prevFamily = resolveFamily(prevType);
                if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                  return true;
                }
              }
              return false;
            }
          }
          function markFailedErrorBoundaryForHotReloading(fiber) {
            {
              if (resolveFamily === null) {
                return;
              }
              if (typeof WeakSet !== "function") {
                return;
              }
              if (failedBoundaries === null) {
                failedBoundaries = /* @__PURE__ */ new WeakSet();
              }
              failedBoundaries.add(fiber);
            }
          }
          var scheduleRefresh = function(root2, update2) {
            {
              if (resolveFamily === null) {
                return;
              }
              var staleFamilies = update2.staleFamilies, updatedFamilies = update2.updatedFamilies;
              flushPassiveEffects();
              flushSync4(function() {
                scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
              });
            }
          };
          var scheduleRoot = function(root2, element) {
            {
              if (root2.context !== emptyContextObject) {
                return;
              }
              flushPassiveEffects();
              flushSync4(function() {
                updateContainer(element, root2, null, null);
              });
            }
          };
          function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
            {
              var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              if (resolveFamily === null) {
                throw new Error("Expected resolveFamily to be set during hot reload.");
              }
              var needsRender = false;
              var needsRemount = false;
              if (candidateType !== null) {
                var family = resolveFamily(candidateType);
                if (family !== void 0) {
                  if (staleFamilies.has(family)) {
                    needsRemount = true;
                  } else if (updatedFamilies.has(family)) {
                    if (tag === ClassComponent) {
                      needsRemount = true;
                    } else {
                      needsRender = true;
                    }
                  }
                }
              }
              if (failedBoundaries !== null) {
                if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                  needsRemount = true;
                }
              }
              if (needsRemount) {
                fiber._debugNeedsRemount = true;
              }
              if (needsRemount || needsRender) {
                var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (_root !== null) {
                  scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
                }
              }
              if (child !== null && !needsRemount) {
                scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
              }
              if (sibling !== null) {
                scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
              }
            }
          }
          var findHostInstancesForRefresh = function(root2, families) {
            {
              var hostInstances = /* @__PURE__ */ new Set();
              var types = new Set(families.map(function(family) {
                return family.current;
              }));
              findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
              return hostInstances;
            }
          };
          function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
            {
              var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
              var candidateType = null;
              switch (tag) {
                case FunctionComponent:
                case SimpleMemoComponent:
                case ClassComponent:
                  candidateType = type;
                  break;
                case ForwardRef:
                  candidateType = type.render;
                  break;
              }
              var didMatch = false;
              if (candidateType !== null) {
                if (types.has(candidateType)) {
                  didMatch = true;
                }
              }
              if (didMatch) {
                findHostInstancesForFiberShallowly(fiber, hostInstances);
              } else {
                if (child !== null) {
                  findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
                }
              }
              if (sibling !== null) {
                findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
              }
            }
          }
          function findHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
              if (foundHostInstances) {
                return;
              }
              var node2 = fiber;
              while (true) {
                switch (node2.tag) {
                  case HostComponent:
                    hostInstances.add(node2.stateNode);
                    return;
                  case HostPortal:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                  case HostRoot:
                    hostInstances.add(node2.stateNode.containerInfo);
                    return;
                }
                if (node2.return === null) {
                  throw new Error("Expected to reach root first.");
                }
                node2 = node2.return;
              }
            }
          }
          function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
            {
              var node2 = fiber;
              var foundHostInstances = false;
              while (true) {
                if (node2.tag === HostComponent) {
                  foundHostInstances = true;
                  hostInstances.add(node2.stateNode);
                } else if (node2.child !== null) {
                  node2.child.return = node2;
                  node2 = node2.child;
                  continue;
                }
                if (node2 === fiber) {
                  return foundHostInstances;
                }
                while (node2.sibling === null) {
                  if (node2.return === null || node2.return === fiber) {
                    return foundHostInstances;
                  }
                  node2 = node2.return;
                }
                node2.sibling.return = node2.return;
                node2 = node2.sibling;
              }
            }
            return false;
          }
          var hasBadMapPolyfill;
          {
            hasBadMapPolyfill = false;
            try {
              var nonExtensibleObject = Object.preventExtensions({});
              /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
              /* @__PURE__ */ new Set([nonExtensibleObject]);
            } catch (e) {
              hasBadMapPolyfill = true;
            }
          }
          function FiberNode(tag, pendingProps, key, mode) {
            this.tag = tag;
            this.key = key;
            this.elementType = null;
            this.type = null;
            this.stateNode = null;
            this.return = null;
            this.child = null;
            this.sibling = null;
            this.index = 0;
            this.ref = null;
            this.pendingProps = pendingProps;
            this.memoizedProps = null;
            this.updateQueue = null;
            this.memoizedState = null;
            this.dependencies = null;
            this.mode = mode;
            this.flags = NoFlags;
            this.subtreeFlags = NoFlags;
            this.deletions = null;
            this.lanes = NoLanes;
            this.childLanes = NoLanes;
            this.alternate = null;
            {
              this.actualDuration = Number.NaN;
              this.actualStartTime = Number.NaN;
              this.selfBaseDuration = Number.NaN;
              this.treeBaseDuration = Number.NaN;
              this.actualDuration = 0;
              this.actualStartTime = -1;
              this.selfBaseDuration = 0;
              this.treeBaseDuration = 0;
            }
            {
              this._debugSource = null;
              this._debugOwner = null;
              this._debugNeedsRemount = false;
              this._debugHookTypes = null;
              if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
                Object.preventExtensions(this);
              }
            }
          }
          var createFiber = function(tag, pendingProps, key, mode) {
            return new FiberNode(tag, pendingProps, key, mode);
          };
          function shouldConstruct$1(Component) {
            var prototype3 = Component.prototype;
            return !!(prototype3 && prototype3.isReactComponent);
          }
          function isSimpleFunctionComponent(type) {
            return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
          }
          function resolveLazyComponentTag(Component) {
            if (typeof Component === "function") {
              return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
            } else if (Component !== void 0 && Component !== null) {
              var $$typeof = Component.$$typeof;
              if ($$typeof === REACT_FORWARD_REF_TYPE) {
                return ForwardRef;
              }
              if ($$typeof === REACT_MEMO_TYPE) {
                return MemoComponent;
              }
            }
            return IndeterminateComponent;
          }
          function createWorkInProgress(current2, pendingProps) {
            var workInProgress2 = current2.alternate;
            if (workInProgress2 === null) {
              workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
              workInProgress2.elementType = current2.elementType;
              workInProgress2.type = current2.type;
              workInProgress2.stateNode = current2.stateNode;
              {
                workInProgress2._debugSource = current2._debugSource;
                workInProgress2._debugOwner = current2._debugOwner;
                workInProgress2._debugHookTypes = current2._debugHookTypes;
              }
              workInProgress2.alternate = current2;
              current2.alternate = workInProgress2;
            } else {
              workInProgress2.pendingProps = pendingProps;
              workInProgress2.type = current2.type;
              workInProgress2.flags = NoFlags;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              {
                workInProgress2.actualDuration = 0;
                workInProgress2.actualStartTime = -1;
              }
            }
            workInProgress2.flags = current2.flags & StaticMask;
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            workInProgress2.sibling = current2.sibling;
            workInProgress2.index = current2.index;
            workInProgress2.ref = current2.ref;
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
            {
              workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
              switch (workInProgress2.tag) {
                case IndeterminateComponent:
                case FunctionComponent:
                case SimpleMemoComponent:
                  workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                  break;
                case ClassComponent:
                  workInProgress2.type = resolveClassForHotReloading(current2.type);
                  break;
                case ForwardRef:
                  workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                  break;
              }
            }
            return workInProgress2;
          }
          function resetWorkInProgress(workInProgress2, renderLanes2) {
            workInProgress2.flags &= StaticMask | Placement;
            var current2 = workInProgress2.alternate;
            if (current2 === null) {
              workInProgress2.childLanes = NoLanes;
              workInProgress2.lanes = renderLanes2;
              workInProgress2.child = null;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.memoizedProps = null;
              workInProgress2.memoizedState = null;
              workInProgress2.updateQueue = null;
              workInProgress2.dependencies = null;
              workInProgress2.stateNode = null;
              {
                workInProgress2.selfBaseDuration = 0;
                workInProgress2.treeBaseDuration = 0;
              }
            } else {
              workInProgress2.childLanes = current2.childLanes;
              workInProgress2.lanes = current2.lanes;
              workInProgress2.child = current2.child;
              workInProgress2.subtreeFlags = NoFlags;
              workInProgress2.deletions = null;
              workInProgress2.memoizedProps = current2.memoizedProps;
              workInProgress2.memoizedState = current2.memoizedState;
              workInProgress2.updateQueue = current2.updateQueue;
              workInProgress2.type = current2.type;
              var currentDependencies = current2.dependencies;
              workInProgress2.dependencies = currentDependencies === null ? null : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext
              };
              {
                workInProgress2.selfBaseDuration = current2.selfBaseDuration;
                workInProgress2.treeBaseDuration = current2.treeBaseDuration;
              }
            }
            return workInProgress2;
          }
          function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
            var mode;
            if (tag === ConcurrentRoot) {
              mode = ConcurrentMode;
              if (isStrictMode === true) {
                mode |= StrictLegacyMode;
                {
                  mode |= StrictEffectsMode;
                }
              }
            } else {
              mode = NoMode;
            }
            if (isDevToolsPresent) {
              mode |= ProfileMode;
            }
            return createFiber(HostRoot, null, null, mode);
          }
          function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
            var fiberTag = IndeterminateComponent;
            var resolvedType = type;
            if (typeof type === "function") {
              if (shouldConstruct$1(type)) {
                fiberTag = ClassComponent;
                {
                  resolvedType = resolveClassForHotReloading(resolvedType);
                }
              } else {
                {
                  resolvedType = resolveFunctionForHotReloading(resolvedType);
                }
              }
            } else if (typeof type === "string") {
              fiberTag = HostComponent;
            } else {
              getTag:
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                    return createFiberFromFragment(pendingProps.children, mode, lanes, key);
                  case REACT_STRICT_MODE_TYPE:
                    fiberTag = Mode;
                    mode |= StrictLegacyMode;
                    if ((mode & ConcurrentMode) !== NoMode) {
                      mode |= StrictEffectsMode;
                    }
                    break;
                  case REACT_PROFILER_TYPE:
                    return createFiberFromProfiler(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_TYPE:
                    return createFiberFromSuspense(pendingProps, mode, lanes, key);
                  case REACT_SUSPENSE_LIST_TYPE:
                    return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
                  case REACT_OFFSCREEN_TYPE:
                    return createFiberFromOffscreen(pendingProps, mode, lanes, key);
                  case REACT_LEGACY_HIDDEN_TYPE:
                  case REACT_SCOPE_TYPE:
                  case REACT_CACHE_TYPE:
                  case REACT_TRACING_MARKER_TYPE:
                  case REACT_DEBUG_TRACING_MODE_TYPE:
                  default: {
                    if (typeof type === "object" && type !== null) {
                      switch (type.$$typeof) {
                        case REACT_PROVIDER_TYPE:
                          fiberTag = ContextProvider;
                          break getTag;
                        case REACT_CONTEXT_TYPE:
                          fiberTag = ContextConsumer;
                          break getTag;
                        case REACT_FORWARD_REF_TYPE:
                          fiberTag = ForwardRef;
                          {
                            resolvedType = resolveForwardRefForHotReloading(resolvedType);
                          }
                          break getTag;
                        case REACT_MEMO_TYPE:
                          fiberTag = MemoComponent;
                          break getTag;
                        case REACT_LAZY_TYPE:
                          fiberTag = LazyComponent;
                          resolvedType = null;
                          break getTag;
                      }
                    }
                    var info = "";
                    {
                      if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                        info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                      }
                      var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                      if (ownerName) {
                        info += "\n\nCheck the render method of `" + ownerName + "`.";
                      }
                    }
                    throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
                  }
                }
            }
            var fiber = createFiber(fiberTag, pendingProps, key, mode);
            fiber.elementType = type;
            fiber.type = resolvedType;
            fiber.lanes = lanes;
            {
              fiber._debugOwner = owner;
            }
            return fiber;
          }
          function createFiberFromElement(element, mode, lanes) {
            var owner = null;
            {
              owner = element._owner;
            }
            var type = element.type;
            var key = element.key;
            var pendingProps = element.props;
            var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
            {
              fiber._debugSource = element._source;
              fiber._debugOwner = element._owner;
            }
            return fiber;
          }
          function createFiberFromFragment(elements, mode, lanes, key) {
            var fiber = createFiber(Fragment29, elements, key, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromProfiler(pendingProps, mode, lanes, key) {
            {
              if (typeof pendingProps.id !== "string") {
                error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
              }
            }
            var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
            fiber.elementType = REACT_PROFILER_TYPE;
            fiber.lanes = lanes;
            {
              fiber.stateNode = {
                effectDuration: 0,
                passiveEffectDuration: 0
              };
            }
            return fiber;
          }
          function createFiberFromSuspense(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
            var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
            fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
            var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
            fiber.elementType = REACT_OFFSCREEN_TYPE;
            fiber.lanes = lanes;
            var primaryChildInstance = {
              isHidden: false
            };
            fiber.stateNode = primaryChildInstance;
            return fiber;
          }
          function createFiberFromText(content, mode, lanes) {
            var fiber = createFiber(HostText, content, null, mode);
            fiber.lanes = lanes;
            return fiber;
          }
          function createFiberFromHostInstanceForDeletion() {
            var fiber = createFiber(HostComponent, null, null, NoMode);
            fiber.elementType = "DELETED";
            return fiber;
          }
          function createFiberFromDehydratedFragment(dehydratedNode) {
            var fiber = createFiber(DehydratedFragment, null, null, NoMode);
            fiber.stateNode = dehydratedNode;
            return fiber;
          }
          function createFiberFromPortal(portal, mode, lanes) {
            var pendingProps = portal.children !== null ? portal.children : [];
            var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
            fiber.lanes = lanes;
            fiber.stateNode = {
              containerInfo: portal.containerInfo,
              pendingChildren: null,
              // Used by persistent updates
              implementation: portal.implementation
            };
            return fiber;
          }
          function assignFiberPropertiesInDEV(target, source) {
            if (target === null) {
              target = createFiber(IndeterminateComponent, null, null, NoMode);
            }
            target.tag = source.tag;
            target.key = source.key;
            target.elementType = source.elementType;
            target.type = source.type;
            target.stateNode = source.stateNode;
            target.return = source.return;
            target.child = source.child;
            target.sibling = source.sibling;
            target.index = source.index;
            target.ref = source.ref;
            target.pendingProps = source.pendingProps;
            target.memoizedProps = source.memoizedProps;
            target.updateQueue = source.updateQueue;
            target.memoizedState = source.memoizedState;
            target.dependencies = source.dependencies;
            target.mode = source.mode;
            target.flags = source.flags;
            target.subtreeFlags = source.subtreeFlags;
            target.deletions = source.deletions;
            target.lanes = source.lanes;
            target.childLanes = source.childLanes;
            target.alternate = source.alternate;
            {
              target.actualDuration = source.actualDuration;
              target.actualStartTime = source.actualStartTime;
              target.selfBaseDuration = source.selfBaseDuration;
              target.treeBaseDuration = source.treeBaseDuration;
            }
            target._debugSource = source._debugSource;
            target._debugOwner = source._debugOwner;
            target._debugNeedsRemount = source._debugNeedsRemount;
            target._debugHookTypes = source._debugHookTypes;
            return target;
          }
          function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
            this.tag = tag;
            this.containerInfo = containerInfo;
            this.pendingChildren = null;
            this.current = null;
            this.pingCache = null;
            this.finishedWork = null;
            this.timeoutHandle = noTimeout;
            this.context = null;
            this.pendingContext = null;
            this.callbackNode = null;
            this.callbackPriority = NoLane;
            this.eventTimes = createLaneMap(NoLanes);
            this.expirationTimes = createLaneMap(NoTimestamp);
            this.pendingLanes = NoLanes;
            this.suspendedLanes = NoLanes;
            this.pingedLanes = NoLanes;
            this.expiredLanes = NoLanes;
            this.mutableReadLanes = NoLanes;
            this.finishedLanes = NoLanes;
            this.entangledLanes = NoLanes;
            this.entanglements = createLaneMap(NoLanes);
            this.identifierPrefix = identifierPrefix;
            this.onRecoverableError = onRecoverableError;
            {
              this.mutableSourceEagerHydrationData = null;
            }
            {
              this.effectDuration = 0;
              this.passiveEffectDuration = 0;
            }
            {
              this.memoizedUpdaters = /* @__PURE__ */ new Set();
              var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
              for (var _i = 0; _i < TotalLanes; _i++) {
                pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
              }
            }
            {
              switch (tag) {
                case ConcurrentRoot:
                  this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                  break;
                case LegacyRoot:
                  this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                  break;
              }
            }
          }
          function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
            var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
            root2.current = uninitializedFiber;
            uninitializedFiber.stateNode = root2;
            {
              var _initialState = {
                element: initialChildren,
                isDehydrated: hydrate2,
                cache: null,
                // not enabled yet
                transitions: null,
                pendingSuspenseBoundaries: null
              };
              uninitializedFiber.memoizedState = _initialState;
            }
            initializeUpdateQueue(uninitializedFiber);
            return root2;
          }
          var ReactVersion = "18.2.0";
          function createPortal2(children, containerInfo, implementation) {
            var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
            {
              checkKeyStringCoercion(key);
            }
            return {
              // This tag allow us to uniquely identify this as a React Portal
              $$typeof: REACT_PORTAL_TYPE,
              key: key == null ? null : "" + key,
              children,
              containerInfo,
              implementation
            };
          }
          var didWarnAboutNestedUpdates;
          var didWarnAboutFindNodeInStrictMode;
          {
            didWarnAboutNestedUpdates = false;
            didWarnAboutFindNodeInStrictMode = {};
          }
          function getContextForSubtree(parentComponent) {
            if (!parentComponent) {
              return emptyContextObject;
            }
            var fiber = get(parentComponent);
            var parentContext = findCurrentUnmaskedContext(fiber);
            if (fiber.tag === ClassComponent) {
              var Component = fiber.type;
              if (isContextProvider(Component)) {
                return processChildContext(fiber, Component, parentContext);
              }
            }
            return parentContext;
          }
          function findHostInstanceWithWarning(component, methodName) {
            {
              var fiber = get(component);
              if (fiber === void 0) {
                if (typeof component.render === "function") {
                  throw new Error("Unable to find node on an unmounted component.");
                } else {
                  var keys = Object.keys(component).join(",");
                  throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
                }
              }
              var hostFiber = findCurrentHostFiber(fiber);
              if (hostFiber === null) {
                return null;
              }
              if (hostFiber.mode & StrictLegacyMode) {
                var componentName = getComponentNameFromFiber(fiber) || "Component";
                if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                  didWarnAboutFindNodeInStrictMode[componentName] = true;
                  var previousFiber = current;
                  try {
                    setCurrentFiber(hostFiber);
                    if (fiber.mode & StrictLegacyMode) {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    } else {
                      error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                    }
                  } finally {
                    if (previousFiber) {
                      setCurrentFiber(previousFiber);
                    } else {
                      resetCurrentFiber();
                    }
                  }
                }
              }
              return hostFiber.stateNode;
            }
          }
          function createContainer2(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = false;
            var initialChildren = null;
            return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          }
          function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
            var hydrate2 = true;
            var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            root2.context = getContextForSubtree(null);
            var current2 = root2.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current2);
            var update2 = createUpdate(eventTime, lane);
            update2.callback = callback !== void 0 && callback !== null ? callback : null;
            enqueueUpdate(current2, update2, lane);
            scheduleInitialHydrationOnRoot(root2, lane, eventTime);
            return root2;
          }
          function updateContainer(element, container, parentComponent, callback) {
            {
              onScheduleRoot(container, element);
            }
            var current$1 = container.current;
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(current$1);
            {
              markRenderScheduled(lane);
            }
            var context = getContextForSubtree(parentComponent);
            if (container.context === null) {
              container.context = context;
            } else {
              container.pendingContext = context;
            }
            {
              if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
                didWarnAboutNestedUpdates = true;
                error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
              }
            }
            var update2 = createUpdate(eventTime, lane);
            update2.payload = {
              element
            };
            callback = callback === void 0 ? null : callback;
            if (callback !== null) {
              {
                if (typeof callback !== "function") {
                  error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
                }
              }
              update2.callback = callback;
            }
            var root2 = enqueueUpdate(current$1, update2, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
              entangleTransitions(root2, current$1, lane);
            }
            return lane;
          }
          function getPublicRootInstance(container) {
            var containerFiber = container.current;
            if (!containerFiber.child) {
              return null;
            }
            switch (containerFiber.child.tag) {
              case HostComponent:
                return getPublicInstance(containerFiber.child.stateNode);
              default:
                return containerFiber.child.stateNode;
            }
          }
          function attemptSynchronousHydration$1(fiber) {
            switch (fiber.tag) {
              case HostRoot: {
                var root2 = fiber.stateNode;
                if (isRootDehydrated(root2)) {
                  var lanes = getHighestPriorityPendingLanes(root2);
                  flushRoot(root2, lanes);
                }
                break;
              }
              case SuspenseComponent: {
                flushSync4(function() {
                  var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                  if (root3 !== null) {
                    var eventTime = requestEventTime();
                    scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
                  }
                });
                var retryLane = SyncLane;
                markRetryLaneIfNotHydrated(fiber, retryLane);
                break;
              }
            }
          }
          function markRetryLaneImpl(fiber, retryLane) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState !== null && suspenseState.dehydrated !== null) {
              suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
            }
          }
          function markRetryLaneIfNotHydrated(fiber, retryLane) {
            markRetryLaneImpl(fiber, retryLane);
            var alternate = fiber.alternate;
            if (alternate) {
              markRetryLaneImpl(alternate, retryLane);
            }
          }
          function attemptContinuousHydration$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = SelectiveHydrationLane;
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function attemptHydrationAtCurrentPriority$1(fiber) {
            if (fiber.tag !== SuspenseComponent) {
              return;
            }
            var lane = requestUpdateLane(fiber);
            var root2 = enqueueConcurrentRenderForLane(fiber, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
            }
            markRetryLaneIfNotHydrated(fiber, lane);
          }
          function findHostInstanceWithNoPortals(fiber) {
            var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          var shouldErrorImpl = function(fiber) {
            return null;
          };
          function shouldError(fiber) {
            return shouldErrorImpl(fiber);
          }
          var shouldSuspendImpl = function(fiber) {
            return false;
          };
          function shouldSuspend(fiber) {
            return shouldSuspendImpl(fiber);
          }
          var overrideHookState = null;
          var overrideHookStateDeletePath = null;
          var overrideHookStateRenamePath = null;
          var overrideProps = null;
          var overridePropsDeletePath = null;
          var overridePropsRenamePath = null;
          var scheduleUpdate = null;
          var setErrorHandler = null;
          var setSuspenseHandler = null;
          {
            var copyWithDeleteImpl = function(obj, path, index4) {
              var key = path[index4];
              var updated = isArray2(obj) ? obj.slice() : assign2({}, obj);
              if (index4 + 1 === path.length) {
                if (isArray2(updated)) {
                  updated.splice(key, 1);
                } else {
                  delete updated[key];
                }
                return updated;
              }
              updated[key] = copyWithDeleteImpl(obj[key], path, index4 + 1);
              return updated;
            };
            var copyWithDelete = function(obj, path) {
              return copyWithDeleteImpl(obj, path, 0);
            };
            var copyWithRenameImpl = function(obj, oldPath, newPath, index4) {
              var oldKey = oldPath[index4];
              var updated = isArray2(obj) ? obj.slice() : assign2({}, obj);
              if (index4 + 1 === oldPath.length) {
                var newKey = newPath[index4];
                updated[newKey] = updated[oldKey];
                if (isArray2(updated)) {
                  updated.splice(oldKey, 1);
                } else {
                  delete updated[oldKey];
                }
              } else {
                updated[oldKey] = copyWithRenameImpl(
                  // $FlowFixMe number or string is fine here
                  obj[oldKey],
                  oldPath,
                  newPath,
                  index4 + 1
                );
              }
              return updated;
            };
            var copyWithRename = function(obj, oldPath, newPath) {
              if (oldPath.length !== newPath.length) {
                warn("copyWithRename() expects paths of the same length");
                return;
              } else {
                for (var i = 0; i < newPath.length - 1; i++) {
                  if (oldPath[i] !== newPath[i]) {
                    warn("copyWithRename() expects paths to be the same except for the deepest key");
                    return;
                  }
                }
              }
              return copyWithRenameImpl(obj, oldPath, newPath, 0);
            };
            var copyWithSetImpl = function(obj, path, index4, value) {
              if (index4 >= path.length) {
                return value;
              }
              var key = path[index4];
              var updated = isArray2(obj) ? obj.slice() : assign2({}, obj);
              updated[key] = copyWithSetImpl(obj[key], path, index4 + 1, value);
              return updated;
            };
            var copyWithSet = function(obj, path, value) {
              return copyWithSetImpl(obj, path, 0, value);
            };
            var findHook = function(fiber, id) {
              var currentHook2 = fiber.memoizedState;
              while (currentHook2 !== null && id > 0) {
                currentHook2 = currentHook2.next;
                id--;
              }
              return currentHook2;
            };
            overrideHookState = function(fiber, id, path, value) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithSet(hook.memoizedState, path, value);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateDeletePath = function(fiber, id, path) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithDelete(hook.memoizedState, path);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
              var hook = findHook(fiber, id);
              if (hook !== null) {
                var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
                hook.memoizedState = newState;
                hook.baseState = newState;
                fiber.memoizedProps = assign2({}, fiber.memoizedProps);
                var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root2 !== null) {
                  scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
                }
              }
            };
            overrideProps = function(fiber, path, value) {
              fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsDeletePath = function(fiber, path) {
              fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            overridePropsRenamePath = function(fiber, oldPath, newPath) {
              fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
              if (fiber.alternate) {
                fiber.alternate.pendingProps = fiber.pendingProps;
              }
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            scheduleUpdate = function(fiber) {
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            };
            setErrorHandler = function(newShouldErrorImpl) {
              shouldErrorImpl = newShouldErrorImpl;
            };
            setSuspenseHandler = function(newShouldSuspendImpl) {
              shouldSuspendImpl = newShouldSuspendImpl;
            };
          }
          function findHostInstanceByFiber(fiber) {
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            return hostFiber.stateNode;
          }
          function emptyFindFiberByHostInstance(instance) {
            return null;
          }
          function getCurrentFiberForDevTools() {
            return current;
          }
          function injectIntoDevTools(devToolsConfig) {
            var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
            var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
            return injectInternals({
              bundleType: devToolsConfig.bundleType,
              version: devToolsConfig.version,
              rendererPackageName: devToolsConfig.rendererPackageName,
              rendererConfig: devToolsConfig.rendererConfig,
              overrideHookState,
              overrideHookStateDeletePath,
              overrideHookStateRenamePath,
              overrideProps,
              overridePropsDeletePath,
              overridePropsRenamePath,
              setErrorHandler,
              setSuspenseHandler,
              scheduleUpdate,
              currentDispatcherRef: ReactCurrentDispatcher2,
              findHostInstanceByFiber,
              findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
              // React Refresh
              findHostInstancesForRefresh,
              scheduleRefresh,
              scheduleRoot,
              setRefreshHandler,
              // Enables DevTools to append owner stacks to error messages in DEV mode.
              getCurrentFiber: getCurrentFiberForDevTools,
              // Enables DevTools to detect reconciler version rather than renderer version
              // which may not match for third party renderers.
              reconcilerVersion: ReactVersion
            });
          }
          var defaultOnRecoverableError = typeof reportError === "function" ? (
            // In modern browsers, reportError will dispatch an error event,
            // emulating an uncaught JavaScript error.
            reportError
          ) : function(error2) {
            console["error"](error2);
          };
          function ReactDOMRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
            var root2 = this._internalRoot;
            if (root2 === null) {
              throw new Error("Cannot update an unmounted root.");
            }
            {
              if (typeof arguments[1] === "function") {
                error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              } else if (isValidContainer(arguments[1])) {
                error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
              } else if (typeof arguments[1] !== "undefined") {
                error("You passed a second argument to root.render(...) but it only accepts one argument.");
              }
              var container = root2.containerInfo;
              if (container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(root2.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                  }
                }
              }
            }
            updateContainer(children, root2, null, null);
          };
          ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
            {
              if (typeof arguments[0] === "function") {
                error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
              }
            }
            var root2 = this._internalRoot;
            if (root2 !== null) {
              this._internalRoot = null;
              var container = root2.containerInfo;
              {
                if (isAlreadyRendering()) {
                  error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
                }
              }
              flushSync4(function() {
                updateContainer(null, root2, null, null);
              });
              unmarkContainerAsRoot(container);
            }
          };
          function createRoot(container, options2) {
            if (!isValidContainer(container)) {
              throw new Error("createRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            var transitionCallbacks = null;
            if (options2 !== null && options2 !== void 0) {
              {
                if (options2.hydrate) {
                  warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
                } else {
                  if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                    error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                  }
                }
              }
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
              if (options2.transitionCallbacks !== void 0) {
                transitionCallbacks = options2.transitionCallbacks;
              }
            }
            var root2 = createContainer2(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            return new ReactDOMRoot(root2);
          }
          function ReactDOMHydrationRoot(internalRoot) {
            this._internalRoot = internalRoot;
          }
          function scheduleHydration(target) {
            if (target) {
              queueExplicitHydrationTarget(target);
            }
          }
          ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
          function hydrateRoot(container, initialChildren, options2) {
            if (!isValidContainer(container)) {
              throw new Error("hydrateRoot(...): Target container is not a DOM element.");
            }
            warnIfReactDOMContainerInDEV(container);
            {
              if (initialChildren === void 0) {
                error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
              }
            }
            var hydrationCallbacks = options2 != null ? options2 : null;
            var mutableSources = options2 != null && options2.hydratedSources || null;
            var isStrictMode = false;
            var concurrentUpdatesByDefaultOverride = false;
            var identifierPrefix = "";
            var onRecoverableError = defaultOnRecoverableError;
            if (options2 !== null && options2 !== void 0) {
              if (options2.unstable_strictMode === true) {
                isStrictMode = true;
              }
              if (options2.identifierPrefix !== void 0) {
                identifierPrefix = options2.identifierPrefix;
              }
              if (options2.onRecoverableError !== void 0) {
                onRecoverableError = options2.onRecoverableError;
              }
            }
            var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
            markContainerAsRoot(root2.current, container);
            listenToAllSupportedEvents(container);
            if (mutableSources) {
              for (var i = 0; i < mutableSources.length; i++) {
                var mutableSource = mutableSources[i];
                registerMutableSourceForHydration(root2, mutableSource);
              }
            }
            return new ReactDOMHydrationRoot(root2);
          }
          function isValidContainer(node2) {
            return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
          }
          function isValidContainerLegacy(node2) {
            return !!(node2 && (node2.nodeType === ELEMENT_NODE || node2.nodeType === DOCUMENT_NODE || node2.nodeType === DOCUMENT_FRAGMENT_NODE || node2.nodeType === COMMENT_NODE && node2.nodeValue === " react-mount-point-unstable "));
          }
          function warnIfReactDOMContainerInDEV(container) {
            {
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
              }
              if (isContainerMarkedAsRoot(container)) {
                if (container._reactRootContainer) {
                  error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
                } else {
                  error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
                }
              }
            }
          }
          var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
          var topLevelUpdateWarnings;
          {
            topLevelUpdateWarnings = function(container) {
              if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
                var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
                if (hostInstance) {
                  if (hostInstance.parentNode !== container) {
                    error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                  }
                }
              }
              var isRootRenderedBySomeReact = !!container._reactRootContainer;
              var rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
              if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
                error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
              }
              if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
                error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
              }
            };
          }
          function getReactRootElementInContainer(container) {
            if (!container) {
              return null;
            }
            if (container.nodeType === DOCUMENT_NODE) {
              return container.documentElement;
            } else {
              return container.firstChild;
            }
          }
          function noopOnRecoverableError() {
          }
          function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
            if (isHydrationContainer) {
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              var root2 = createHydrationContainer(
                initialChildren,
                callback,
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = root2;
              markContainerAsRoot(root2.current, container);
              var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(rootContainerElement);
              flushSync4();
              return root2;
            } else {
              var rootSibling;
              while (rootSibling = container.lastChild) {
                container.removeChild(rootSibling);
              }
              if (typeof callback === "function") {
                var _originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(_root);
                  _originalCallback.call(instance);
                };
              }
              var _root = createContainer2(
                container,
                LegacyRoot,
                null,
                // hydrationCallbacks
                false,
                // isStrictMode
                false,
                // concurrentUpdatesByDefaultOverride,
                "",
                // identifierPrefix
                noopOnRecoverableError
              );
              container._reactRootContainer = _root;
              markContainerAsRoot(_root.current, container);
              var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
              listenToAllSupportedEvents(_rootContainerElement);
              flushSync4(function() {
                updateContainer(initialChildren, _root, parentComponent, callback);
              });
              return _root;
            }
          }
          function warnOnInvalidCallback$1(callback, callerName) {
            {
              if (callback !== null && typeof callback !== "function") {
                error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
              }
            }
          }
          function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
            {
              topLevelUpdateWarnings(container);
              warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
            }
            var maybeRoot = container._reactRootContainer;
            var root2;
            if (!maybeRoot) {
              root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
            } else {
              root2 = maybeRoot;
              if (typeof callback === "function") {
                var originalCallback = callback;
                callback = function() {
                  var instance = getPublicRootInstance(root2);
                  originalCallback.call(instance);
                };
              }
              updateContainer(children, root2, parentComponent, callback);
            }
            return getPublicRootInstance(root2);
          }
          function findDOMNode(componentOrElement) {
            {
              var owner = ReactCurrentOwner$3.current;
              if (owner !== null && owner.stateNode !== null) {
                var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
                if (!warnedAboutRefsInRender) {
                  error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
                }
                owner.stateNode._warnedAboutRefsInRender = true;
              }
            }
            if (componentOrElement == null) {
              return null;
            }
            if (componentOrElement.nodeType === ELEMENT_NODE) {
              return componentOrElement;
            }
            {
              return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
            }
          }
          function hydrate(element, container, callback) {
            {
              error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
          }
          function render(element, container, callback) {
            {
              error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
              }
            }
            return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
          }
          function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            {
              error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
            if (!isValidContainerLegacy(containerNode)) {
              throw new Error("Target container is not a DOM element.");
            }
            if (parentComponent == null || !has(parentComponent)) {
              throw new Error("parentComponent must be a valid React Component");
            }
            return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
          }
          function unmountComponentAtNode(container) {
            if (!isValidContainerLegacy(container)) {
              throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
            }
            {
              var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
              if (isModernRoot) {
                error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
              }
            }
            if (container._reactRootContainer) {
              {
                var rootEl = getReactRootElementInContainer(container);
                var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
                if (renderedByDifferentReact) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
                }
              }
              flushSync4(function() {
                legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                  container._reactRootContainer = null;
                  unmarkContainerAsRoot(container);
                });
              });
              return true;
            } else {
              {
                var _rootEl = getReactRootElementInContainer(container);
                var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
                var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
                if (hasNonRootReactChild) {
                  error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
                }
              }
              return false;
            }
          }
          setAttemptSynchronousHydration(attemptSynchronousHydration$1);
          setAttemptContinuousHydration(attemptContinuousHydration$1);
          setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
          setGetCurrentUpdatePriority(getCurrentUpdatePriority);
          setAttemptHydrationAtPriority(runWithPriority);
          {
            if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
            Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
            Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
              error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
            }
          }
          setRestoreImplementation(restoreControlledState$3);
          setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync4);
          function createPortal$1(children, container) {
            var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
            if (!isValidContainer(container)) {
              throw new Error("Target container is not a DOM element.");
            }
            return createPortal2(children, container, null, key);
          }
          function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
            return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
          }
          var Internals = {
            usingClientEntryPoint: false,
            // Keep in sync with ReactTestUtils.js.
            // This is an array for better minification.
            Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
          };
          function createRoot$1(container, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return createRoot(container, options2);
          }
          function hydrateRoot$1(container, initialChildren, options2) {
            {
              if (!Internals.usingClientEntryPoint && true) {
                error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
              }
            }
            return hydrateRoot(container, initialChildren, options2);
          }
          function flushSync$1(fn2) {
            {
              if (isAlreadyRendering()) {
                error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
              }
            }
            return flushSync4(fn2);
          }
          var foundDevTools = injectIntoDevTools({
            findFiberByHostInstance: getClosestInstanceFromNode,
            bundleType: 1,
            version: ReactVersion,
            rendererPackageName: "react-dom"
          });
          {
            if (!foundDevTools && canUseDOM && window.top === window.self) {
              if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
                var protocol = window.location.protocol;
                if (/^(https?|file):$/.test(protocol)) {
                  console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
                }
              }
            }
          }
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
          exports.createPortal = createPortal$1;
          exports.createRoot = createRoot$1;
          exports.findDOMNode = findDOMNode;
          exports.flushSync = flushSync$1;
          exports.hydrate = hydrate;
          exports.hydrateRoot = hydrateRoot$1;
          exports.render = render;
          exports.unmountComponentAtNode = unmountComponentAtNode;
          exports.unstable_batchedUpdates = batchedUpdates$1;
          exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      if (false) {
        checkDCE();
        module.exports = null;
      } else {
        module.exports = require_react_dom_development();
      }
    }
  });

  // node_modules/@mui/icons-material/utils/createSvgIcon.js
  var require_createSvgIcon2 = __commonJS({
    "node_modules/@mui/icons-material/utils/createSvgIcon.js"(exports) {
      "use strict";
      "use client";
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      Object.defineProperty(exports, "default", {
        enumerable: true,
        get: function() {
          return _utils.createSvgIcon;
        }
      });
      var _utils = require_utils2();
    }
  });

  // node_modules/@mui/icons-material/ArrowForwardIos.js
  var require_ArrowForwardIos = __commonJS({
    "node_modules/@mui/icons-material/ArrowForwardIos.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon2());
      var _jsxRuntime = require_jsx_runtime();
      var _default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
        d: "M6.23 20.23 8 22l10-10L8 2 6.23 3.77 14.46 12z"
      }), "ArrowForwardIos");
      exports.default = _default;
    }
  });

  // node_modules/@mui/icons-material/Info.js
  var require_Info = __commonJS({
    "node_modules/@mui/icons-material/Info.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon2());
      var _jsxRuntime = require_jsx_runtime();
      var _default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
        d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"
      }), "Info");
      exports.default = _default;
    }
  });

  // node_modules/@mui/icons-material/Help.js
  var require_Help = __commonJS({
    "node_modules/@mui/icons-material/Help.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon2());
      var _jsxRuntime = require_jsx_runtime();
      var _default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
        d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z"
      }), "Help");
      exports.default = _default;
    }
  });

  // node_modules/@mui/icons-material/Close.js
  var require_Close = __commonJS({
    "node_modules/@mui/icons-material/Close.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon2());
      var _jsxRuntime = require_jsx_runtime();
      var _default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
        d: "M19 6.41 17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
      }), "Close");
      exports.default = _default;
    }
  });

  // node_modules/@mui/icons-material/ThumbDownOffAlt.js
  var require_ThumbDownOffAlt = __commonJS({
    "node_modules/@mui/icons-material/ThumbDownOffAlt.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon2());
      var _jsxRuntime = require_jsx_runtime();
      var _default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
        d: "m10.89 18.28.57-2.89c.12-.59-.04-1.2-.42-1.66-.38-.46-.94-.73-1.54-.73H4v-1.08L6.57 6h8.09c.18 0 .34.16.34.34v7.84l-4.11 4.1M10 22l6.41-6.41c.38-.38.59-.89.59-1.42V6.34C17 5.05 15.95 4 14.66 4h-8.1c-.71 0-1.36.37-1.72.97l-2.67 6.15c-.11.25-.17.52-.17.8V13c0 1.1.9 2 2 2h5.5l-.92 4.65c-.05.22-.02.46.08.66.23.45.52.86.88 1.22L10 22zm10-7h2V4h-2c-.55 0-1 .45-1 1v9c0 .55.45 1 1 1z"
      }), "ThumbDownOffAlt");
      exports.default = _default;
    }
  });

  // node_modules/@mui/icons-material/ThumbUpOffAlt.js
  var require_ThumbUpOffAlt = __commonJS({
    "node_modules/@mui/icons-material/ThumbUpOffAlt.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon2());
      var _jsxRuntime = require_jsx_runtime();
      var _default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
        d: "m13.11 5.72-.57 2.89c-.12.59.04 1.2.42 1.66.38.46.94.73 1.54.73H20v1.08L17.43 18H9.34c-.18 0-.34-.16-.34-.34V9.82l4.11-4.1M14 2 7.59 8.41C7.21 8.79 7 9.3 7 9.83v7.83C7 18.95 8.05 20 9.34 20h8.1c.71 0 1.36-.37 1.72-.97l2.67-6.15c.11-.25.17-.52.17-.8V11c0-1.1-.9-2-2-2h-5.5l.92-4.65c.05-.22.02-.46-.08-.66-.23-.45-.52-.86-.88-1.22L14 2zM4 9H2v11h2c.55 0 1-.45 1-1v-9c0-.55-.45-1-1-1z"
      }), "ThumbUpOffAlt");
      exports.default = _default;
    }
  });

  // node_modules/lodash/lodash.js
  var require_lodash = __commonJS({
    "node_modules/lodash/lodash.js"(exports, module) {
      (function() {
        var undefined2;
        var VERSION3 = "4.17.21";
        var LARGE_ARRAY_SIZE = 200;
        var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
        var HASH_UNDEFINED = "__lodash_hash_undefined__";
        var MAX_MEMOIZE_SIZE = 500;
        var PLACEHOLDER = "__lodash_placeholder__";
        var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
        var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
        var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
        var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
        var HOT_COUNT = 800, HOT_SPAN = 16;
        var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
        var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
        var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
        var wrapFlags = [
          ["ary", WRAP_ARY_FLAG],
          ["bind", WRAP_BIND_FLAG],
          ["bindKey", WRAP_BIND_KEY_FLAG],
          ["curry", WRAP_CURRY_FLAG],
          ["curryRight", WRAP_CURRY_RIGHT_FLAG],
          ["flip", WRAP_FLIP_FLAG],
          ["partial", WRAP_PARTIAL_FLAG],
          ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
          ["rearg", WRAP_REARG_FLAG]
        ];
        var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
        var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
        var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
        var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
        var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
        var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
        var reTrimStart = /^\s+/;
        var reWhitespace = /\s/;
        var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
        var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
        var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
        var reEscapeChar = /\\(\\)?/g;
        var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
        var reFlags = /\w*$/;
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
        var reIsBinary = /^0b[01]+$/i;
        var reIsHostCtor = /^\[object .+?Constructor\]$/;
        var reIsOctal = /^0o[0-7]+$/i;
        var reIsUint = /^(?:0|[1-9]\d*)$/;
        var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
        var reNoMatch = /($^)/;
        var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
        var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
        var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
        var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
        var reApos = RegExp(rsApos, "g");
        var reComboMark = RegExp(rsCombo, "g");
        var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
        var reUnicodeWord = RegExp([
          rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
          rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
          rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
          rsUpper + "+" + rsOptContrUpper,
          rsOrdUpper,
          rsOrdLower,
          rsDigits,
          rsEmoji
        ].join("|"), "g");
        var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
        var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
        var contextProps = [
          "Array",
          "Buffer",
          "DataView",
          "Date",
          "Error",
          "Float32Array",
          "Float64Array",
          "Function",
          "Int8Array",
          "Int16Array",
          "Int32Array",
          "Map",
          "Math",
          "Object",
          "Promise",
          "RegExp",
          "Set",
          "String",
          "Symbol",
          "TypeError",
          "Uint8Array",
          "Uint8ClampedArray",
          "Uint16Array",
          "Uint32Array",
          "WeakMap",
          "_",
          "clearTimeout",
          "isFinite",
          "parseInt",
          "setTimeout"
        ];
        var templateCounter = -1;
        var typedArrayTags = {};
        typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
        typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
        var cloneableTags = {};
        cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
        cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
        var deburredLetters = {
          // Latin-1 Supplement block.
          "\xC0": "A",
          "\xC1": "A",
          "\xC2": "A",
          "\xC3": "A",
          "\xC4": "A",
          "\xC5": "A",
          "\xE0": "a",
          "\xE1": "a",
          "\xE2": "a",
          "\xE3": "a",
          "\xE4": "a",
          "\xE5": "a",
          "\xC7": "C",
          "\xE7": "c",
          "\xD0": "D",
          "\xF0": "d",
          "\xC8": "E",
          "\xC9": "E",
          "\xCA": "E",
          "\xCB": "E",
          "\xE8": "e",
          "\xE9": "e",
          "\xEA": "e",
          "\xEB": "e",
          "\xCC": "I",
          "\xCD": "I",
          "\xCE": "I",
          "\xCF": "I",
          "\xEC": "i",
          "\xED": "i",
          "\xEE": "i",
          "\xEF": "i",
          "\xD1": "N",
          "\xF1": "n",
          "\xD2": "O",
          "\xD3": "O",
          "\xD4": "O",
          "\xD5": "O",
          "\xD6": "O",
          "\xD8": "O",
          "\xF2": "o",
          "\xF3": "o",
          "\xF4": "o",
          "\xF5": "o",
          "\xF6": "o",
          "\xF8": "o",
          "\xD9": "U",
          "\xDA": "U",
          "\xDB": "U",
          "\xDC": "U",
          "\xF9": "u",
          "\xFA": "u",
          "\xFB": "u",
          "\xFC": "u",
          "\xDD": "Y",
          "\xFD": "y",
          "\xFF": "y",
          "\xC6": "Ae",
          "\xE6": "ae",
          "\xDE": "Th",
          "\xFE": "th",
          "\xDF": "ss",
          // Latin Extended-A block.
          "\u0100": "A",
          "\u0102": "A",
          "\u0104": "A",
          "\u0101": "a",
          "\u0103": "a",
          "\u0105": "a",
          "\u0106": "C",
          "\u0108": "C",
          "\u010A": "C",
          "\u010C": "C",
          "\u0107": "c",
          "\u0109": "c",
          "\u010B": "c",
          "\u010D": "c",
          "\u010E": "D",
          "\u0110": "D",
          "\u010F": "d",
          "\u0111": "d",
          "\u0112": "E",
          "\u0114": "E",
          "\u0116": "E",
          "\u0118": "E",
          "\u011A": "E",
          "\u0113": "e",
          "\u0115": "e",
          "\u0117": "e",
          "\u0119": "e",
          "\u011B": "e",
          "\u011C": "G",
          "\u011E": "G",
          "\u0120": "G",
          "\u0122": "G",
          "\u011D": "g",
          "\u011F": "g",
          "\u0121": "g",
          "\u0123": "g",
          "\u0124": "H",
          "\u0126": "H",
          "\u0125": "h",
          "\u0127": "h",
          "\u0128": "I",
          "\u012A": "I",
          "\u012C": "I",
          "\u012E": "I",
          "\u0130": "I",
          "\u0129": "i",
          "\u012B": "i",
          "\u012D": "i",
          "\u012F": "i",
          "\u0131": "i",
          "\u0134": "J",
          "\u0135": "j",
          "\u0136": "K",
          "\u0137": "k",
          "\u0138": "k",
          "\u0139": "L",
          "\u013B": "L",
          "\u013D": "L",
          "\u013F": "L",
          "\u0141": "L",
          "\u013A": "l",
          "\u013C": "l",
          "\u013E": "l",
          "\u0140": "l",
          "\u0142": "l",
          "\u0143": "N",
          "\u0145": "N",
          "\u0147": "N",
          "\u014A": "N",
          "\u0144": "n",
          "\u0146": "n",
          "\u0148": "n",
          "\u014B": "n",
          "\u014C": "O",
          "\u014E": "O",
          "\u0150": "O",
          "\u014D": "o",
          "\u014F": "o",
          "\u0151": "o",
          "\u0154": "R",
          "\u0156": "R",
          "\u0158": "R",
          "\u0155": "r",
          "\u0157": "r",
          "\u0159": "r",
          "\u015A": "S",
          "\u015C": "S",
          "\u015E": "S",
          "\u0160": "S",
          "\u015B": "s",
          "\u015D": "s",
          "\u015F": "s",
          "\u0161": "s",
          "\u0162": "T",
          "\u0164": "T",
          "\u0166": "T",
          "\u0163": "t",
          "\u0165": "t",
          "\u0167": "t",
          "\u0168": "U",
          "\u016A": "U",
          "\u016C": "U",
          "\u016E": "U",
          "\u0170": "U",
          "\u0172": "U",
          "\u0169": "u",
          "\u016B": "u",
          "\u016D": "u",
          "\u016F": "u",
          "\u0171": "u",
          "\u0173": "u",
          "\u0174": "W",
          "\u0175": "w",
          "\u0176": "Y",
          "\u0177": "y",
          "\u0178": "Y",
          "\u0179": "Z",
          "\u017B": "Z",
          "\u017D": "Z",
          "\u017A": "z",
          "\u017C": "z",
          "\u017E": "z",
          "\u0132": "IJ",
          "\u0133": "ij",
          "\u0152": "Oe",
          "\u0153": "oe",
          "\u0149": "'n",
          "\u017F": "s"
        };
        var htmlEscapes = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#39;"
        };
        var htmlUnescapes = {
          "&amp;": "&",
          "&lt;": "<",
          "&gt;": ">",
          "&quot;": '"',
          "&#39;": "'"
        };
        var stringEscapes = {
          "\\": "\\",
          "'": "'",
          "\n": "n",
          "\r": "r",
          "\u2028": "u2028",
          "\u2029": "u2029"
        };
        var freeParseFloat = parseFloat, freeParseInt = parseInt;
        var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
        var freeSelf = typeof self == "object" && self && self.Object === Object && self;
        var root = freeGlobal || freeSelf || Function("return this")();
        var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
        var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
        var moduleExports = freeModule && freeModule.exports === freeExports;
        var freeProcess = moduleExports && freeGlobal.process;
        var nodeUtil = function() {
          try {
            var types = freeModule && freeModule.require && freeModule.require("util").types;
            if (types) {
              return types;
            }
            return freeProcess && freeProcess.binding && freeProcess.binding("util");
          } catch (e) {
          }
        }();
        var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
        function apply(func, thisArg, args) {
          switch (args.length) {
            case 0:
              return func.call(thisArg);
            case 1:
              return func.call(thisArg, args[0]);
            case 2:
              return func.call(thisArg, args[0], args[1]);
            case 3:
              return func.call(thisArg, args[0], args[1], args[2]);
          }
          return func.apply(thisArg, args);
        }
        function arrayAggregator(array, setter, iteratee, accumulator) {
          var index3 = -1, length2 = array == null ? 0 : array.length;
          while (++index3 < length2) {
            var value = array[index3];
            setter(accumulator, value, iteratee(value), array);
          }
          return accumulator;
        }
        function arrayEach(array, iteratee) {
          var index3 = -1, length2 = array == null ? 0 : array.length;
          while (++index3 < length2) {
            if (iteratee(array[index3], index3, array) === false) {
              break;
            }
          }
          return array;
        }
        function arrayEachRight(array, iteratee) {
          var length2 = array == null ? 0 : array.length;
          while (length2--) {
            if (iteratee(array[length2], length2, array) === false) {
              break;
            }
          }
          return array;
        }
        function arrayEvery(array, predicate) {
          var index3 = -1, length2 = array == null ? 0 : array.length;
          while (++index3 < length2) {
            if (!predicate(array[index3], index3, array)) {
              return false;
            }
          }
          return true;
        }
        function arrayFilter(array, predicate) {
          var index3 = -1, length2 = array == null ? 0 : array.length, resIndex = 0, result = [];
          while (++index3 < length2) {
            var value = array[index3];
            if (predicate(value, index3, array)) {
              result[resIndex++] = value;
            }
          }
          return result;
        }
        function arrayIncludes(array, value) {
          var length2 = array == null ? 0 : array.length;
          return !!length2 && baseIndexOf(array, value, 0) > -1;
        }
        function arrayIncludesWith(array, value, comparator) {
          var index3 = -1, length2 = array == null ? 0 : array.length;
          while (++index3 < length2) {
            if (comparator(value, array[index3])) {
              return true;
            }
          }
          return false;
        }
        function arrayMap(array, iteratee) {
          var index3 = -1, length2 = array == null ? 0 : array.length, result = Array(length2);
          while (++index3 < length2) {
            result[index3] = iteratee(array[index3], index3, array);
          }
          return result;
        }
        function arrayPush(array, values2) {
          var index3 = -1, length2 = values2.length, offset3 = array.length;
          while (++index3 < length2) {
            array[offset3 + index3] = values2[index3];
          }
          return array;
        }
        function arrayReduce(array, iteratee, accumulator, initAccum) {
          var index3 = -1, length2 = array == null ? 0 : array.length;
          if (initAccum && length2) {
            accumulator = array[++index3];
          }
          while (++index3 < length2) {
            accumulator = iteratee(accumulator, array[index3], index3, array);
          }
          return accumulator;
        }
        function arrayReduceRight(array, iteratee, accumulator, initAccum) {
          var length2 = array == null ? 0 : array.length;
          if (initAccum && length2) {
            accumulator = array[--length2];
          }
          while (length2--) {
            accumulator = iteratee(accumulator, array[length2], length2, array);
          }
          return accumulator;
        }
        function arraySome(array, predicate) {
          var index3 = -1, length2 = array == null ? 0 : array.length;
          while (++index3 < length2) {
            if (predicate(array[index3], index3, array)) {
              return true;
            }
          }
          return false;
        }
        var asciiSize = baseProperty("length");
        function asciiToArray(string) {
          return string.split("");
        }
        function asciiWords(string) {
          return string.match(reAsciiWord) || [];
        }
        function baseFindKey(collection, predicate, eachFunc) {
          var result;
          eachFunc(collection, function(value, key, collection2) {
            if (predicate(value, key, collection2)) {
              result = key;
              return false;
            }
          });
          return result;
        }
        function baseFindIndex(array, predicate, fromIndex, fromRight) {
          var length2 = array.length, index3 = fromIndex + (fromRight ? 1 : -1);
          while (fromRight ? index3-- : ++index3 < length2) {
            if (predicate(array[index3], index3, array)) {
              return index3;
            }
          }
          return -1;
        }
        function baseIndexOf(array, value, fromIndex) {
          return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
        }
        function baseIndexOfWith(array, value, fromIndex, comparator) {
          var index3 = fromIndex - 1, length2 = array.length;
          while (++index3 < length2) {
            if (comparator(array[index3], value)) {
              return index3;
            }
          }
          return -1;
        }
        function baseIsNaN(value) {
          return value !== value;
        }
        function baseMean(array, iteratee) {
          var length2 = array == null ? 0 : array.length;
          return length2 ? baseSum(array, iteratee) / length2 : NAN;
        }
        function baseProperty(key) {
          return function(object) {
            return object == null ? undefined2 : object[key];
          };
        }
        function basePropertyOf(object) {
          return function(key) {
            return object == null ? undefined2 : object[key];
          };
        }
        function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
          eachFunc(collection, function(value, index3, collection2) {
            accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index3, collection2);
          });
          return accumulator;
        }
        function baseSortBy(array, comparer) {
          var length2 = array.length;
          array.sort(comparer);
          while (length2--) {
            array[length2] = array[length2].value;
          }
          return array;
        }
        function baseSum(array, iteratee) {
          var result, index3 = -1, length2 = array.length;
          while (++index3 < length2) {
            var current = iteratee(array[index3]);
            if (current !== undefined2) {
              result = result === undefined2 ? current : result + current;
            }
          }
          return result;
        }
        function baseTimes(n, iteratee) {
          var index3 = -1, result = Array(n);
          while (++index3 < n) {
            result[index3] = iteratee(index3);
          }
          return result;
        }
        function baseToPairs(object, props) {
          return arrayMap(props, function(key) {
            return [key, object[key]];
          });
        }
        function baseTrim(string) {
          return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
        }
        function baseUnary(func) {
          return function(value) {
            return func(value);
          };
        }
        function baseValues(object, props) {
          return arrayMap(props, function(key) {
            return object[key];
          });
        }
        function cacheHas(cache3, key) {
          return cache3.has(key);
        }
        function charsStartIndex(strSymbols, chrSymbols) {
          var index3 = -1, length2 = strSymbols.length;
          while (++index3 < length2 && baseIndexOf(chrSymbols, strSymbols[index3], 0) > -1) {
          }
          return index3;
        }
        function charsEndIndex(strSymbols, chrSymbols) {
          var index3 = strSymbols.length;
          while (index3-- && baseIndexOf(chrSymbols, strSymbols[index3], 0) > -1) {
          }
          return index3;
        }
        function countHolders(array, placeholder) {
          var length2 = array.length, result = 0;
          while (length2--) {
            if (array[length2] === placeholder) {
              ++result;
            }
          }
          return result;
        }
        var deburrLetter = basePropertyOf(deburredLetters);
        var escapeHtmlChar = basePropertyOf(htmlEscapes);
        function escapeStringChar(chr) {
          return "\\" + stringEscapes[chr];
        }
        function getValue(object, key) {
          return object == null ? undefined2 : object[key];
        }
        function hasUnicode(string) {
          return reHasUnicode.test(string);
        }
        function hasUnicodeWord(string) {
          return reHasUnicodeWord.test(string);
        }
        function iteratorToArray(iterator) {
          var data, result = [];
          while (!(data = iterator.next()).done) {
            result.push(data.value);
          }
          return result;
        }
        function mapToArray(map) {
          var index3 = -1, result = Array(map.size);
          map.forEach(function(value, key) {
            result[++index3] = [key, value];
          });
          return result;
        }
        function overArg(func, transform2) {
          return function(arg) {
            return func(transform2(arg));
          };
        }
        function replaceHolders(array, placeholder) {
          var index3 = -1, length2 = array.length, resIndex = 0, result = [];
          while (++index3 < length2) {
            var value = array[index3];
            if (value === placeholder || value === PLACEHOLDER) {
              array[index3] = PLACEHOLDER;
              result[resIndex++] = index3;
            }
          }
          return result;
        }
        function setToArray(set) {
          var index3 = -1, result = Array(set.size);
          set.forEach(function(value) {
            result[++index3] = value;
          });
          return result;
        }
        function setToPairs(set) {
          var index3 = -1, result = Array(set.size);
          set.forEach(function(value) {
            result[++index3] = [value, value];
          });
          return result;
        }
        function strictIndexOf(array, value, fromIndex) {
          var index3 = fromIndex - 1, length2 = array.length;
          while (++index3 < length2) {
            if (array[index3] === value) {
              return index3;
            }
          }
          return -1;
        }
        function strictLastIndexOf(array, value, fromIndex) {
          var index3 = fromIndex + 1;
          while (index3--) {
            if (array[index3] === value) {
              return index3;
            }
          }
          return index3;
        }
        function stringSize(string) {
          return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
        }
        function stringToArray(string) {
          return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
        }
        function trimmedEndIndex(string) {
          var index3 = string.length;
          while (index3-- && reWhitespace.test(string.charAt(index3))) {
          }
          return index3;
        }
        var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
        function unicodeSize(string) {
          var result = reUnicode.lastIndex = 0;
          while (reUnicode.test(string)) {
            ++result;
          }
          return result;
        }
        function unicodeToArray(string) {
          return string.match(reUnicode) || [];
        }
        function unicodeWords(string) {
          return string.match(reUnicodeWord) || [];
        }
        var runInContext = function runInContext2(context) {
          context = context == null ? root : _5.defaults(root.Object(), context, _5.pick(root, contextProps));
          var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
          var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
          var coreJsData = context["__core-js_shared__"];
          var funcToString = funcProto.toString;
          var hasOwnProperty3 = objectProto.hasOwnProperty;
          var idCounter = 0;
          var maskSrcKey = function() {
            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
            return uid ? "Symbol(src)_1." + uid : "";
          }();
          var nativeObjectToString = objectProto.toString;
          var objectCtorString = funcToString.call(Object2);
          var oldDash = root._;
          var reIsNative = RegExp2(
            "^" + funcToString.call(hasOwnProperty3).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
          );
          var Buffer2 = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
          var defineProperty = function() {
            try {
              var func = getNative(Object2, "defineProperty");
              func({}, "", {});
              return func;
            } catch (e) {
            }
          }();
          var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
          var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
          var DataView = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
          var metaMap = WeakMap2 && new WeakMap2();
          var realNames = {};
          var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
          var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
          function lodash(value) {
            if (isObjectLike(value) && !isArray2(value) && !(value instanceof LazyWrapper)) {
              if (value instanceof LodashWrapper) {
                return value;
              }
              if (hasOwnProperty3.call(value, "__wrapped__")) {
                return wrapperClone(value);
              }
            }
            return new LodashWrapper(value);
          }
          var baseCreate = function() {
            function object() {
            }
            return function(proto) {
              if (!isObject2(proto)) {
                return {};
              }
              if (objectCreate) {
                return objectCreate(proto);
              }
              object.prototype = proto;
              var result2 = new object();
              object.prototype = undefined2;
              return result2;
            };
          }();
          function baseLodash() {
          }
          function LodashWrapper(value, chainAll) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__chain__ = !!chainAll;
            this.__index__ = 0;
            this.__values__ = undefined2;
          }
          lodash.templateSettings = {
            /**
             * Used to detect `data` property values to be HTML-escaped.
             *
             * @memberOf _.templateSettings
             * @type {RegExp}
             */
            "escape": reEscape,
            /**
             * Used to detect code to be evaluated.
             *
             * @memberOf _.templateSettings
             * @type {RegExp}
             */
            "evaluate": reEvaluate,
            /**
             * Used to detect `data` property values to inject.
             *
             * @memberOf _.templateSettings
             * @type {RegExp}
             */
            "interpolate": reInterpolate,
            /**
             * Used to reference the data object in the template text.
             *
             * @memberOf _.templateSettings
             * @type {string}
             */
            "variable": "",
            /**
             * Used to import variables into the compiled template.
             *
             * @memberOf _.templateSettings
             * @type {Object}
             */
            "imports": {
              /**
               * A reference to the `lodash` function.
               *
               * @memberOf _.templateSettings.imports
               * @type {Function}
               */
              "_": lodash
            }
          };
          lodash.prototype = baseLodash.prototype;
          lodash.prototype.constructor = lodash;
          LodashWrapper.prototype = baseCreate(baseLodash.prototype);
          LodashWrapper.prototype.constructor = LodashWrapper;
          function LazyWrapper(value) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__dir__ = 1;
            this.__filtered__ = false;
            this.__iteratees__ = [];
            this.__takeCount__ = MAX_ARRAY_LENGTH;
            this.__views__ = [];
          }
          function lazyClone() {
            var result2 = new LazyWrapper(this.__wrapped__);
            result2.__actions__ = copyArray(this.__actions__);
            result2.__dir__ = this.__dir__;
            result2.__filtered__ = this.__filtered__;
            result2.__iteratees__ = copyArray(this.__iteratees__);
            result2.__takeCount__ = this.__takeCount__;
            result2.__views__ = copyArray(this.__views__);
            return result2;
          }
          function lazyReverse() {
            if (this.__filtered__) {
              var result2 = new LazyWrapper(this);
              result2.__dir__ = -1;
              result2.__filtered__ = true;
            } else {
              result2 = this.clone();
              result2.__dir__ *= -1;
            }
            return result2;
          }
          function lazyValue() {
            var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray2(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start2 = view.start, end2 = view.end, length2 = end2 - start2, index3 = isRight ? end2 : start2 - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length2, this.__takeCount__);
            if (!isArr || !isRight && arrLength == length2 && takeCount == length2) {
              return baseWrapperValue(array, this.__actions__);
            }
            var result2 = [];
            outer:
              while (length2-- && resIndex < takeCount) {
                index3 += dir;
                var iterIndex = -1, value = array[index3];
                while (++iterIndex < iterLength) {
                  var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
                  if (type == LAZY_MAP_FLAG) {
                    value = computed;
                  } else if (!computed) {
                    if (type == LAZY_FILTER_FLAG) {
                      continue outer;
                    } else {
                      break outer;
                    }
                  }
                }
                result2[resIndex++] = value;
              }
            return result2;
          }
          LazyWrapper.prototype = baseCreate(baseLodash.prototype);
          LazyWrapper.prototype.constructor = LazyWrapper;
          function Hash(entries) {
            var index3 = -1, length2 = entries == null ? 0 : entries.length;
            this.clear();
            while (++index3 < length2) {
              var entry = entries[index3];
              this.set(entry[0], entry[1]);
            }
          }
          function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {};
            this.size = 0;
          }
          function hashDelete(key) {
            var result2 = this.has(key) && delete this.__data__[key];
            this.size -= result2 ? 1 : 0;
            return result2;
          }
          function hashGet(key) {
            var data = this.__data__;
            if (nativeCreate) {
              var result2 = data[key];
              return result2 === HASH_UNDEFINED ? undefined2 : result2;
            }
            return hasOwnProperty3.call(data, key) ? data[key] : undefined2;
          }
          function hashHas(key) {
            var data = this.__data__;
            return nativeCreate ? data[key] !== undefined2 : hasOwnProperty3.call(data, key);
          }
          function hashSet(key, value) {
            var data = this.__data__;
            this.size += this.has(key) ? 0 : 1;
            data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
            return this;
          }
          Hash.prototype.clear = hashClear;
          Hash.prototype["delete"] = hashDelete;
          Hash.prototype.get = hashGet;
          Hash.prototype.has = hashHas;
          Hash.prototype.set = hashSet;
          function ListCache(entries) {
            var index3 = -1, length2 = entries == null ? 0 : entries.length;
            this.clear();
            while (++index3 < length2) {
              var entry = entries[index3];
              this.set(entry[0], entry[1]);
            }
          }
          function listCacheClear() {
            this.__data__ = [];
            this.size = 0;
          }
          function listCacheDelete(key) {
            var data = this.__data__, index3 = assocIndexOf(data, key);
            if (index3 < 0) {
              return false;
            }
            var lastIndex = data.length - 1;
            if (index3 == lastIndex) {
              data.pop();
            } else {
              splice.call(data, index3, 1);
            }
            --this.size;
            return true;
          }
          function listCacheGet(key) {
            var data = this.__data__, index3 = assocIndexOf(data, key);
            return index3 < 0 ? undefined2 : data[index3][1];
          }
          function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1;
          }
          function listCacheSet(key, value) {
            var data = this.__data__, index3 = assocIndexOf(data, key);
            if (index3 < 0) {
              ++this.size;
              data.push([key, value]);
            } else {
              data[index3][1] = value;
            }
            return this;
          }
          ListCache.prototype.clear = listCacheClear;
          ListCache.prototype["delete"] = listCacheDelete;
          ListCache.prototype.get = listCacheGet;
          ListCache.prototype.has = listCacheHas;
          ListCache.prototype.set = listCacheSet;
          function MapCache(entries) {
            var index3 = -1, length2 = entries == null ? 0 : entries.length;
            this.clear();
            while (++index3 < length2) {
              var entry = entries[index3];
              this.set(entry[0], entry[1]);
            }
          }
          function mapCacheClear() {
            this.size = 0;
            this.__data__ = {
              "hash": new Hash(),
              "map": new (Map2 || ListCache)(),
              "string": new Hash()
            };
          }
          function mapCacheDelete(key) {
            var result2 = getMapData(this, key)["delete"](key);
            this.size -= result2 ? 1 : 0;
            return result2;
          }
          function mapCacheGet(key) {
            return getMapData(this, key).get(key);
          }
          function mapCacheHas(key) {
            return getMapData(this, key).has(key);
          }
          function mapCacheSet(key, value) {
            var data = getMapData(this, key), size3 = data.size;
            data.set(key, value);
            this.size += data.size == size3 ? 0 : 1;
            return this;
          }
          MapCache.prototype.clear = mapCacheClear;
          MapCache.prototype["delete"] = mapCacheDelete;
          MapCache.prototype.get = mapCacheGet;
          MapCache.prototype.has = mapCacheHas;
          MapCache.prototype.set = mapCacheSet;
          function SetCache(values3) {
            var index3 = -1, length2 = values3 == null ? 0 : values3.length;
            this.__data__ = new MapCache();
            while (++index3 < length2) {
              this.add(values3[index3]);
            }
          }
          function setCacheAdd(value) {
            this.__data__.set(value, HASH_UNDEFINED);
            return this;
          }
          function setCacheHas(value) {
            return this.__data__.has(value);
          }
          SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
          SetCache.prototype.has = setCacheHas;
          function Stack2(entries) {
            var data = this.__data__ = new ListCache(entries);
            this.size = data.size;
          }
          function stackClear() {
            this.__data__ = new ListCache();
            this.size = 0;
          }
          function stackDelete(key) {
            var data = this.__data__, result2 = data["delete"](key);
            this.size = data.size;
            return result2;
          }
          function stackGet(key) {
            return this.__data__.get(key);
          }
          function stackHas(key) {
            return this.__data__.has(key);
          }
          function stackSet(key, value) {
            var data = this.__data__;
            if (data instanceof ListCache) {
              var pairs = data.__data__;
              if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
                pairs.push([key, value]);
                this.size = ++data.size;
                return this;
              }
              data = this.__data__ = new MapCache(pairs);
            }
            data.set(key, value);
            this.size = data.size;
            return this;
          }
          Stack2.prototype.clear = stackClear;
          Stack2.prototype["delete"] = stackDelete;
          Stack2.prototype.get = stackGet;
          Stack2.prototype.has = stackHas;
          Stack2.prototype.set = stackSet;
          function arrayLikeKeys(value, inherited) {
            var isArr = isArray2(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer2(value), isType = !isArr && !isArg && !isBuff && isTypedArray2(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length2 = result2.length;
            for (var key in value) {
              if ((inherited || hasOwnProperty3.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
              (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
              isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
              isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
              isIndex(key, length2)))) {
                result2.push(key);
              }
            }
            return result2;
          }
          function arraySample(array) {
            var length2 = array.length;
            return length2 ? array[baseRandom(0, length2 - 1)] : undefined2;
          }
          function arraySampleSize(array, n) {
            return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
          }
          function arrayShuffle(array) {
            return shuffleSelf(copyArray(array));
          }
          function assignMergeValue(object, key, value) {
            if (value !== undefined2 && !eq(object[key], value) || value === undefined2 && !(key in object)) {
              baseAssignValue(object, key, value);
            }
          }
          function assignValue(object, key, value) {
            var objValue = object[key];
            if (!(hasOwnProperty3.call(object, key) && eq(objValue, value)) || value === undefined2 && !(key in object)) {
              baseAssignValue(object, key, value);
            }
          }
          function assocIndexOf(array, key) {
            var length2 = array.length;
            while (length2--) {
              if (eq(array[length2][0], key)) {
                return length2;
              }
            }
            return -1;
          }
          function baseAggregator(collection, setter, iteratee2, accumulator) {
            baseEach(collection, function(value, key, collection2) {
              setter(accumulator, value, iteratee2(value), collection2);
            });
            return accumulator;
          }
          function baseAssign(object, source) {
            return object && copyObject(source, keys(source), object);
          }
          function baseAssignIn(object, source) {
            return object && copyObject(source, keysIn(source), object);
          }
          function baseAssignValue(object, key, value) {
            if (key == "__proto__" && defineProperty) {
              defineProperty(object, key, {
                "configurable": true,
                "enumerable": true,
                "value": value,
                "writable": true
              });
            } else {
              object[key] = value;
            }
          }
          function baseAt(object, paths) {
            var index3 = -1, length2 = paths.length, result2 = Array2(length2), skip = object == null;
            while (++index3 < length2) {
              result2[index3] = skip ? undefined2 : get(object, paths[index3]);
            }
            return result2;
          }
          function baseClamp(number, lower, upper) {
            if (number === number) {
              if (upper !== undefined2) {
                number = number <= upper ? number : upper;
              }
              if (lower !== undefined2) {
                number = number >= lower ? number : lower;
              }
            }
            return number;
          }
          function baseClone(value, bitmask, customizer, key, object, stack) {
            var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
            if (customizer) {
              result2 = object ? customizer(value, key, object, stack) : customizer(value);
            }
            if (result2 !== undefined2) {
              return result2;
            }
            if (!isObject2(value)) {
              return value;
            }
            var isArr = isArray2(value);
            if (isArr) {
              result2 = initCloneArray(value);
              if (!isDeep) {
                return copyArray(value, result2);
              }
            } else {
              var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
              if (isBuffer2(value)) {
                return cloneBuffer(value, isDeep);
              }
              if (tag == objectTag || tag == argsTag || isFunc && !object) {
                result2 = isFlat || isFunc ? {} : initCloneObject(value);
                if (!isDeep) {
                  return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
                }
              } else {
                if (!cloneableTags[tag]) {
                  return object ? value : {};
                }
                result2 = initCloneByTag(value, tag, isDeep);
              }
            }
            stack || (stack = new Stack2());
            var stacked = stack.get(value);
            if (stacked) {
              return stacked;
            }
            stack.set(value, result2);
            if (isSet(value)) {
              value.forEach(function(subValue) {
                result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
              });
            } else if (isMap(value)) {
              value.forEach(function(subValue, key2) {
                result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
              });
            }
            var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
            var props = isArr ? undefined2 : keysFunc(value);
            arrayEach(props || value, function(subValue, key2) {
              if (props) {
                key2 = subValue;
                subValue = value[key2];
              }
              assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
            return result2;
          }
          function baseConforms(source) {
            var props = keys(source);
            return function(object) {
              return baseConformsTo(object, source, props);
            };
          }
          function baseConformsTo(object, source, props) {
            var length2 = props.length;
            if (object == null) {
              return !length2;
            }
            object = Object2(object);
            while (length2--) {
              var key = props[length2], predicate = source[key], value = object[key];
              if (value === undefined2 && !(key in object) || !predicate(value)) {
                return false;
              }
            }
            return true;
          }
          function baseDelay(func, wait, args) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return setTimeout2(function() {
              func.apply(undefined2, args);
            }, wait);
          }
          function baseDifference(array, values3, iteratee2, comparator) {
            var index3 = -1, includes2 = arrayIncludes, isCommon = true, length2 = array.length, result2 = [], valuesLength = values3.length;
            if (!length2) {
              return result2;
            }
            if (iteratee2) {
              values3 = arrayMap(values3, baseUnary(iteratee2));
            }
            if (comparator) {
              includes2 = arrayIncludesWith;
              isCommon = false;
            } else if (values3.length >= LARGE_ARRAY_SIZE) {
              includes2 = cacheHas;
              isCommon = false;
              values3 = new SetCache(values3);
            }
            outer:
              while (++index3 < length2) {
                var value = array[index3], computed = iteratee2 == null ? value : iteratee2(value);
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var valuesIndex = valuesLength;
                  while (valuesIndex--) {
                    if (values3[valuesIndex] === computed) {
                      continue outer;
                    }
                  }
                  result2.push(value);
                } else if (!includes2(values3, computed, comparator)) {
                  result2.push(value);
                }
              }
            return result2;
          }
          var baseEach = createBaseEach(baseForOwn);
          var baseEachRight = createBaseEach(baseForOwnRight, true);
          function baseEvery(collection, predicate) {
            var result2 = true;
            baseEach(collection, function(value, index3, collection2) {
              result2 = !!predicate(value, index3, collection2);
              return result2;
            });
            return result2;
          }
          function baseExtremum(array, iteratee2, comparator) {
            var index3 = -1, length2 = array.length;
            while (++index3 < length2) {
              var value = array[index3], current = iteratee2(value);
              if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
                var computed = current, result2 = value;
              }
            }
            return result2;
          }
          function baseFill(array, value, start2, end2) {
            var length2 = array.length;
            start2 = toInteger(start2);
            if (start2 < 0) {
              start2 = -start2 > length2 ? 0 : length2 + start2;
            }
            end2 = end2 === undefined2 || end2 > length2 ? length2 : toInteger(end2);
            if (end2 < 0) {
              end2 += length2;
            }
            end2 = start2 > end2 ? 0 : toLength(end2);
            while (start2 < end2) {
              array[start2++] = value;
            }
            return array;
          }
          function baseFilter(collection, predicate) {
            var result2 = [];
            baseEach(collection, function(value, index3, collection2) {
              if (predicate(value, index3, collection2)) {
                result2.push(value);
              }
            });
            return result2;
          }
          function baseFlatten(array, depth, predicate, isStrict, result2) {
            var index3 = -1, length2 = array.length;
            predicate || (predicate = isFlattenable);
            result2 || (result2 = []);
            while (++index3 < length2) {
              var value = array[index3];
              if (depth > 0 && predicate(value)) {
                if (depth > 1) {
                  baseFlatten(value, depth - 1, predicate, isStrict, result2);
                } else {
                  arrayPush(result2, value);
                }
              } else if (!isStrict) {
                result2[result2.length] = value;
              }
            }
            return result2;
          }
          var baseFor = createBaseFor();
          var baseForRight = createBaseFor(true);
          function baseForOwn(object, iteratee2) {
            return object && baseFor(object, iteratee2, keys);
          }
          function baseForOwnRight(object, iteratee2) {
            return object && baseForRight(object, iteratee2, keys);
          }
          function baseFunctions(object, props) {
            return arrayFilter(props, function(key) {
              return isFunction2(object[key]);
            });
          }
          function baseGet(object, path) {
            path = castPath(path, object);
            var index3 = 0, length2 = path.length;
            while (object != null && index3 < length2) {
              object = object[toKey(path[index3++])];
            }
            return index3 && index3 == length2 ? object : undefined2;
          }
          function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result2 = keysFunc(object);
            return isArray2(object) ? result2 : arrayPush(result2, symbolsFunc(object));
          }
          function baseGetTag(value) {
            if (value == null) {
              return value === undefined2 ? undefinedTag : nullTag;
            }
            return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
          }
          function baseGt(value, other) {
            return value > other;
          }
          function baseHas(object, key) {
            return object != null && hasOwnProperty3.call(object, key);
          }
          function baseHasIn(object, key) {
            return object != null && key in Object2(object);
          }
          function baseInRange(number, start2, end2) {
            return number >= nativeMin(start2, end2) && number < nativeMax(start2, end2);
          }
          function baseIntersection(arrays, iteratee2, comparator) {
            var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length2 = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
            while (othIndex--) {
              var array = arrays[othIndex];
              if (othIndex && iteratee2) {
                array = arrayMap(array, baseUnary(iteratee2));
              }
              maxLength = nativeMin(array.length, maxLength);
              caches[othIndex] = !comparator && (iteratee2 || length2 >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
            }
            array = arrays[0];
            var index3 = -1, seen = caches[0];
            outer:
              while (++index3 < length2 && result2.length < maxLength) {
                var value = array[index3], computed = iteratee2 ? iteratee2(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                  othIndex = othLength;
                  while (--othIndex) {
                    var cache3 = caches[othIndex];
                    if (!(cache3 ? cacheHas(cache3, computed) : includes2(arrays[othIndex], computed, comparator))) {
                      continue outer;
                    }
                  }
                  if (seen) {
                    seen.push(computed);
                  }
                  result2.push(value);
                }
              }
            return result2;
          }
          function baseInverter(object, setter, iteratee2, accumulator) {
            baseForOwn(object, function(value, key, object2) {
              setter(accumulator, iteratee2(value), key, object2);
            });
            return accumulator;
          }
          function baseInvoke(object, path, args) {
            path = castPath(path, object);
            object = parent(object, path);
            var func = object == null ? object : object[toKey(last(path))];
            return func == null ? undefined2 : apply(func, object, args);
          }
          function baseIsArguments(value) {
            return isObjectLike(value) && baseGetTag(value) == argsTag;
          }
          function baseIsArrayBuffer(value) {
            return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
          }
          function baseIsDate(value) {
            return isObjectLike(value) && baseGetTag(value) == dateTag;
          }
          function baseIsEqual(value, other, bitmask, customizer, stack) {
            if (value === other) {
              return true;
            }
            if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
              return value !== value && other !== other;
            }
            return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
          }
          function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
            var objIsArr = isArray2(object), othIsArr = isArray2(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
            objTag = objTag == argsTag ? objectTag : objTag;
            othTag = othTag == argsTag ? objectTag : othTag;
            var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
            if (isSameTag && isBuffer2(object)) {
              if (!isBuffer2(other)) {
                return false;
              }
              objIsArr = true;
              objIsObj = false;
            }
            if (isSameTag && !objIsObj) {
              stack || (stack = new Stack2());
              return objIsArr || isTypedArray2(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
            }
            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
              var objIsWrapped = objIsObj && hasOwnProperty3.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty3.call(other, "__wrapped__");
              if (objIsWrapped || othIsWrapped) {
                var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                stack || (stack = new Stack2());
                return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
              }
            }
            if (!isSameTag) {
              return false;
            }
            stack || (stack = new Stack2());
            return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
          }
          function baseIsMap(value) {
            return isObjectLike(value) && getTag(value) == mapTag;
          }
          function baseIsMatch(object, source, matchData, customizer) {
            var index3 = matchData.length, length2 = index3, noCustomizer = !customizer;
            if (object == null) {
              return !length2;
            }
            object = Object2(object);
            while (index3--) {
              var data = matchData[index3];
              if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
                return false;
              }
            }
            while (++index3 < length2) {
              data = matchData[index3];
              var key = data[0], objValue = object[key], srcValue = data[1];
              if (noCustomizer && data[2]) {
                if (objValue === undefined2 && !(key in object)) {
                  return false;
                }
              } else {
                var stack = new Stack2();
                if (customizer) {
                  var result2 = customizer(objValue, srcValue, key, object, source, stack);
                }
                if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                  return false;
                }
              }
            }
            return true;
          }
          function baseIsNative(value) {
            if (!isObject2(value) || isMasked(value)) {
              return false;
            }
            var pattern = isFunction2(value) ? reIsNative : reIsHostCtor;
            return pattern.test(toSource(value));
          }
          function baseIsRegExp(value) {
            return isObjectLike(value) && baseGetTag(value) == regexpTag;
          }
          function baseIsSet(value) {
            return isObjectLike(value) && getTag(value) == setTag;
          }
          function baseIsTypedArray(value) {
            return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
          }
          function baseIteratee(value) {
            if (typeof value == "function") {
              return value;
            }
            if (value == null) {
              return identity;
            }
            if (typeof value == "object") {
              return isArray2(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
            }
            return property(value);
          }
          function baseKeys(object) {
            if (!isPrototype(object)) {
              return nativeKeys(object);
            }
            var result2 = [];
            for (var key in Object2(object)) {
              if (hasOwnProperty3.call(object, key) && key != "constructor") {
                result2.push(key);
              }
            }
            return result2;
          }
          function baseKeysIn(object) {
            if (!isObject2(object)) {
              return nativeKeysIn(object);
            }
            var isProto = isPrototype(object), result2 = [];
            for (var key in object) {
              if (!(key == "constructor" && (isProto || !hasOwnProperty3.call(object, key)))) {
                result2.push(key);
              }
            }
            return result2;
          }
          function baseLt(value, other) {
            return value < other;
          }
          function baseMap(collection, iteratee2) {
            var index3 = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
            baseEach(collection, function(value, key, collection2) {
              result2[++index3] = iteratee2(value, key, collection2);
            });
            return result2;
          }
          function baseMatches(source) {
            var matchData = getMatchData(source);
            if (matchData.length == 1 && matchData[0][2]) {
              return matchesStrictComparable(matchData[0][0], matchData[0][1]);
            }
            return function(object) {
              return object === source || baseIsMatch(object, source, matchData);
            };
          }
          function baseMatchesProperty(path, srcValue) {
            if (isKey(path) && isStrictComparable(srcValue)) {
              return matchesStrictComparable(toKey(path), srcValue);
            }
            return function(object) {
              var objValue = get(object, path);
              return objValue === undefined2 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
            };
          }
          function baseMerge(object, source, srcIndex, customizer, stack) {
            if (object === source) {
              return;
            }
            baseFor(source, function(srcValue, key) {
              stack || (stack = new Stack2());
              if (isObject2(srcValue)) {
                baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
              } else {
                var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
                if (newValue === undefined2) {
                  newValue = srcValue;
                }
                assignMergeValue(object, key, newValue);
              }
            }, keysIn);
          }
          function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
            var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
            if (stacked) {
              assignMergeValue(object, key, stacked);
              return;
            }
            var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
            var isCommon = newValue === undefined2;
            if (isCommon) {
              var isArr = isArray2(srcValue), isBuff = !isArr && isBuffer2(srcValue), isTyped = !isArr && !isBuff && isTypedArray2(srcValue);
              newValue = srcValue;
              if (isArr || isBuff || isTyped) {
                if (isArray2(objValue)) {
                  newValue = objValue;
                } else if (isArrayLikeObject(objValue)) {
                  newValue = copyArray(objValue);
                } else if (isBuff) {
                  isCommon = false;
                  newValue = cloneBuffer(srcValue, true);
                } else if (isTyped) {
                  isCommon = false;
                  newValue = cloneTypedArray(srcValue, true);
                } else {
                  newValue = [];
                }
              } else if (isPlainObject2(srcValue) || isArguments(srcValue)) {
                newValue = objValue;
                if (isArguments(objValue)) {
                  newValue = toPlainObject(objValue);
                } else if (!isObject2(objValue) || isFunction2(objValue)) {
                  newValue = initCloneObject(srcValue);
                }
              } else {
                isCommon = false;
              }
            }
            if (isCommon) {
              stack.set(srcValue, newValue);
              mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
              stack["delete"](srcValue);
            }
            assignMergeValue(object, key, newValue);
          }
          function baseNth(array, n) {
            var length2 = array.length;
            if (!length2) {
              return;
            }
            n += n < 0 ? length2 : 0;
            return isIndex(n, length2) ? array[n] : undefined2;
          }
          function baseOrderBy(collection, iteratees, orders) {
            if (iteratees.length) {
              iteratees = arrayMap(iteratees, function(iteratee2) {
                if (isArray2(iteratee2)) {
                  return function(value) {
                    return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                  };
                }
                return iteratee2;
              });
            } else {
              iteratees = [identity];
            }
            var index3 = -1;
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            var result2 = baseMap(collection, function(value, key, collection2) {
              var criteria = arrayMap(iteratees, function(iteratee2) {
                return iteratee2(value);
              });
              return { "criteria": criteria, "index": ++index3, "value": value };
            });
            return baseSortBy(result2, function(object, other) {
              return compareMultiple(object, other, orders);
            });
          }
          function basePick(object, paths) {
            return basePickBy(object, paths, function(value, path) {
              return hasIn(object, path);
            });
          }
          function basePickBy(object, paths, predicate) {
            var index3 = -1, length2 = paths.length, result2 = {};
            while (++index3 < length2) {
              var path = paths[index3], value = baseGet(object, path);
              if (predicate(value, path)) {
                baseSet(result2, castPath(path, object), value);
              }
            }
            return result2;
          }
          function basePropertyDeep(path) {
            return function(object) {
              return baseGet(object, path);
            };
          }
          function basePullAll(array, values3, iteratee2, comparator) {
            var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index3 = -1, length2 = values3.length, seen = array;
            if (array === values3) {
              values3 = copyArray(values3);
            }
            if (iteratee2) {
              seen = arrayMap(array, baseUnary(iteratee2));
            }
            while (++index3 < length2) {
              var fromIndex = 0, value = values3[index3], computed = iteratee2 ? iteratee2(value) : value;
              while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
                if (seen !== array) {
                  splice.call(seen, fromIndex, 1);
                }
                splice.call(array, fromIndex, 1);
              }
            }
            return array;
          }
          function basePullAt(array, indexes) {
            var length2 = array ? indexes.length : 0, lastIndex = length2 - 1;
            while (length2--) {
              var index3 = indexes[length2];
              if (length2 == lastIndex || index3 !== previous) {
                var previous = index3;
                if (isIndex(index3)) {
                  splice.call(array, index3, 1);
                } else {
                  baseUnset(array, index3);
                }
              }
            }
            return array;
          }
          function baseRandom(lower, upper) {
            return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
          }
          function baseRange(start2, end2, step, fromRight) {
            var index3 = -1, length2 = nativeMax(nativeCeil((end2 - start2) / (step || 1)), 0), result2 = Array2(length2);
            while (length2--) {
              result2[fromRight ? length2 : ++index3] = start2;
              start2 += step;
            }
            return result2;
          }
          function baseRepeat(string, n) {
            var result2 = "";
            if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
              return result2;
            }
            do {
              if (n % 2) {
                result2 += string;
              }
              n = nativeFloor(n / 2);
              if (n) {
                string += string;
              }
            } while (n);
            return result2;
          }
          function baseRest(func, start2) {
            return setToString(overRest(func, start2, identity), func + "");
          }
          function baseSample(collection) {
            return arraySample(values2(collection));
          }
          function baseSampleSize(collection, n) {
            var array = values2(collection);
            return shuffleSelf(array, baseClamp(n, 0, array.length));
          }
          function baseSet(object, path, value, customizer) {
            if (!isObject2(object)) {
              return object;
            }
            path = castPath(path, object);
            var index3 = -1, length2 = path.length, lastIndex = length2 - 1, nested2 = object;
            while (nested2 != null && ++index3 < length2) {
              var key = toKey(path[index3]), newValue = value;
              if (key === "__proto__" || key === "constructor" || key === "prototype") {
                return object;
              }
              if (index3 != lastIndex) {
                var objValue = nested2[key];
                newValue = customizer ? customizer(objValue, key, nested2) : undefined2;
                if (newValue === undefined2) {
                  newValue = isObject2(objValue) ? objValue : isIndex(path[index3 + 1]) ? [] : {};
                }
              }
              assignValue(nested2, key, newValue);
              nested2 = nested2[key];
            }
            return object;
          }
          var baseSetData = !metaMap ? identity : function(func, data) {
            metaMap.set(func, data);
            return func;
          };
          var baseSetToString = !defineProperty ? identity : function(func, string) {
            return defineProperty(func, "toString", {
              "configurable": true,
              "enumerable": false,
              "value": constant(string),
              "writable": true
            });
          };
          function baseShuffle(collection) {
            return shuffleSelf(values2(collection));
          }
          function baseSlice(array, start2, end2) {
            var index3 = -1, length2 = array.length;
            if (start2 < 0) {
              start2 = -start2 > length2 ? 0 : length2 + start2;
            }
            end2 = end2 > length2 ? length2 : end2;
            if (end2 < 0) {
              end2 += length2;
            }
            length2 = start2 > end2 ? 0 : end2 - start2 >>> 0;
            start2 >>>= 0;
            var result2 = Array2(length2);
            while (++index3 < length2) {
              result2[index3] = array[index3 + start2];
            }
            return result2;
          }
          function baseSome(collection, predicate) {
            var result2;
            baseEach(collection, function(value, index3, collection2) {
              result2 = predicate(value, index3, collection2);
              return !result2;
            });
            return !!result2;
          }
          function baseSortedIndex(array, value, retHighest) {
            var low = 0, high = array == null ? low : array.length;
            if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
              while (low < high) {
                var mid = low + high >>> 1, computed = array[mid];
                if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                  low = mid + 1;
                } else {
                  high = mid;
                }
              }
              return high;
            }
            return baseSortedIndexBy(array, value, identity, retHighest);
          }
          function baseSortedIndexBy(array, value, iteratee2, retHighest) {
            var low = 0, high = array == null ? 0 : array.length;
            if (high === 0) {
              return 0;
            }
            value = iteratee2(value);
            var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
            while (low < high) {
              var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
              if (valIsNaN) {
                var setLow = retHighest || othIsReflexive;
              } else if (valIsUndefined) {
                setLow = othIsReflexive && (retHighest || othIsDefined);
              } else if (valIsNull) {
                setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
              } else if (valIsSymbol) {
                setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
              } else if (othIsNull || othIsSymbol) {
                setLow = false;
              } else {
                setLow = retHighest ? computed <= value : computed < value;
              }
              if (setLow) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return nativeMin(high, MAX_ARRAY_INDEX);
          }
          function baseSortedUniq(array, iteratee2) {
            var index3 = -1, length2 = array.length, resIndex = 0, result2 = [];
            while (++index3 < length2) {
              var value = array[index3], computed = iteratee2 ? iteratee2(value) : value;
              if (!index3 || !eq(computed, seen)) {
                var seen = computed;
                result2[resIndex++] = value === 0 ? 0 : value;
              }
            }
            return result2;
          }
          function baseToNumber(value) {
            if (typeof value == "number") {
              return value;
            }
            if (isSymbol(value)) {
              return NAN;
            }
            return +value;
          }
          function baseToString(value) {
            if (typeof value == "string") {
              return value;
            }
            if (isArray2(value)) {
              return arrayMap(value, baseToString) + "";
            }
            if (isSymbol(value)) {
              return symbolToString ? symbolToString.call(value) : "";
            }
            var result2 = value + "";
            return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
          }
          function baseUniq(array, iteratee2, comparator) {
            var index3 = -1, includes2 = arrayIncludes, length2 = array.length, isCommon = true, result2 = [], seen = result2;
            if (comparator) {
              isCommon = false;
              includes2 = arrayIncludesWith;
            } else if (length2 >= LARGE_ARRAY_SIZE) {
              var set2 = iteratee2 ? null : createSet(array);
              if (set2) {
                return setToArray(set2);
              }
              isCommon = false;
              includes2 = cacheHas;
              seen = new SetCache();
            } else {
              seen = iteratee2 ? [] : result2;
            }
            outer:
              while (++index3 < length2) {
                var value = array[index3], computed = iteratee2 ? iteratee2(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var seenIndex = seen.length;
                  while (seenIndex--) {
                    if (seen[seenIndex] === computed) {
                      continue outer;
                    }
                  }
                  if (iteratee2) {
                    seen.push(computed);
                  }
                  result2.push(value);
                } else if (!includes2(seen, computed, comparator)) {
                  if (seen !== result2) {
                    seen.push(computed);
                  }
                  result2.push(value);
                }
              }
            return result2;
          }
          function baseUnset(object, path) {
            path = castPath(path, object);
            object = parent(object, path);
            return object == null || delete object[toKey(last(path))];
          }
          function baseUpdate(object, path, updater, customizer) {
            return baseSet(object, path, updater(baseGet(object, path)), customizer);
          }
          function baseWhile(array, predicate, isDrop, fromRight) {
            var length2 = array.length, index3 = fromRight ? length2 : -1;
            while ((fromRight ? index3-- : ++index3 < length2) && predicate(array[index3], index3, array)) {
            }
            return isDrop ? baseSlice(array, fromRight ? 0 : index3, fromRight ? index3 + 1 : length2) : baseSlice(array, fromRight ? index3 + 1 : 0, fromRight ? length2 : index3);
          }
          function baseWrapperValue(value, actions) {
            var result2 = value;
            if (result2 instanceof LazyWrapper) {
              result2 = result2.value();
            }
            return arrayReduce(actions, function(result3, action) {
              return action.func.apply(action.thisArg, arrayPush([result3], action.args));
            }, result2);
          }
          function baseXor(arrays, iteratee2, comparator) {
            var length2 = arrays.length;
            if (length2 < 2) {
              return length2 ? baseUniq(arrays[0]) : [];
            }
            var index3 = -1, result2 = Array2(length2);
            while (++index3 < length2) {
              var array = arrays[index3], othIndex = -1;
              while (++othIndex < length2) {
                if (othIndex != index3) {
                  result2[index3] = baseDifference(result2[index3] || array, arrays[othIndex], iteratee2, comparator);
                }
              }
            }
            return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
          }
          function baseZipObject(props, values3, assignFunc) {
            var index3 = -1, length2 = props.length, valsLength = values3.length, result2 = {};
            while (++index3 < length2) {
              var value = index3 < valsLength ? values3[index3] : undefined2;
              assignFunc(result2, props[index3], value);
            }
            return result2;
          }
          function castArrayLikeObject(value) {
            return isArrayLikeObject(value) ? value : [];
          }
          function castFunction(value) {
            return typeof value == "function" ? value : identity;
          }
          function castPath(value, object) {
            if (isArray2(value)) {
              return value;
            }
            return isKey(value, object) ? [value] : stringToPath(toString3(value));
          }
          var castRest = baseRest;
          function castSlice(array, start2, end2) {
            var length2 = array.length;
            end2 = end2 === undefined2 ? length2 : end2;
            return !start2 && end2 >= length2 ? array : baseSlice(array, start2, end2);
          }
          var clearTimeout2 = ctxClearTimeout || function(id) {
            return root.clearTimeout(id);
          };
          function cloneBuffer(buffer, isDeep) {
            if (isDeep) {
              return buffer.slice();
            }
            var length2 = buffer.length, result2 = allocUnsafe ? allocUnsafe(length2) : new buffer.constructor(length2);
            buffer.copy(result2);
            return result2;
          }
          function cloneArrayBuffer(arrayBuffer) {
            var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
            new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
            return result2;
          }
          function cloneDataView(dataView, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
            return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
          }
          function cloneRegExp(regexp) {
            var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
            result2.lastIndex = regexp.lastIndex;
            return result2;
          }
          function cloneSymbol(symbol) {
            return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
          }
          function cloneTypedArray(typedArray, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
          }
          function compareAscending(value, other) {
            if (value !== other) {
              var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
              var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
              if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
                return 1;
              }
              if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
                return -1;
              }
            }
            return 0;
          }
          function compareMultiple(object, other, orders) {
            var index3 = -1, objCriteria = object.criteria, othCriteria = other.criteria, length2 = objCriteria.length, ordersLength = orders.length;
            while (++index3 < length2) {
              var result2 = compareAscending(objCriteria[index3], othCriteria[index3]);
              if (result2) {
                if (index3 >= ordersLength) {
                  return result2;
                }
                var order2 = orders[index3];
                return result2 * (order2 == "desc" ? -1 : 1);
              }
            }
            return object.index - other.index;
          }
          function composeArgs(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
            while (++leftIndex < leftLength) {
              result2[leftIndex] = partials[leftIndex];
            }
            while (++argsIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result2[holders[argsIndex]] = args[argsIndex];
              }
            }
            while (rangeLength--) {
              result2[leftIndex++] = args[argsIndex++];
            }
            return result2;
          }
          function composeArgsRight(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
            while (++argsIndex < rangeLength) {
              result2[argsIndex] = args[argsIndex];
            }
            var offset3 = argsIndex;
            while (++rightIndex < rightLength) {
              result2[offset3 + rightIndex] = partials[rightIndex];
            }
            while (++holdersIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result2[offset3 + holders[holdersIndex]] = args[argsIndex++];
              }
            }
            return result2;
          }
          function copyArray(source, array) {
            var index3 = -1, length2 = source.length;
            array || (array = Array2(length2));
            while (++index3 < length2) {
              array[index3] = source[index3];
            }
            return array;
          }
          function copyObject(source, props, object, customizer) {
            var isNew = !object;
            object || (object = {});
            var index3 = -1, length2 = props.length;
            while (++index3 < length2) {
              var key = props[index3];
              var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
              if (newValue === undefined2) {
                newValue = source[key];
              }
              if (isNew) {
                baseAssignValue(object, key, newValue);
              } else {
                assignValue(object, key, newValue);
              }
            }
            return object;
          }
          function copySymbols(source, object) {
            return copyObject(source, getSymbols(source), object);
          }
          function copySymbolsIn(source, object) {
            return copyObject(source, getSymbolsIn(source), object);
          }
          function createAggregator(setter, initializer) {
            return function(collection, iteratee2) {
              var func = isArray2(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
              return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
            };
          }
          function createAssigner(assigner) {
            return baseRest(function(object, sources) {
              var index3 = -1, length2 = sources.length, customizer = length2 > 1 ? sources[length2 - 1] : undefined2, guard = length2 > 2 ? sources[2] : undefined2;
              customizer = assigner.length > 3 && typeof customizer == "function" ? (length2--, customizer) : undefined2;
              if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                customizer = length2 < 3 ? undefined2 : customizer;
                length2 = 1;
              }
              object = Object2(object);
              while (++index3 < length2) {
                var source = sources[index3];
                if (source) {
                  assigner(object, source, index3, customizer);
                }
              }
              return object;
            });
          }
          function createBaseEach(eachFunc, fromRight) {
            return function(collection, iteratee2) {
              if (collection == null) {
                return collection;
              }
              if (!isArrayLike(collection)) {
                return eachFunc(collection, iteratee2);
              }
              var length2 = collection.length, index3 = fromRight ? length2 : -1, iterable = Object2(collection);
              while (fromRight ? index3-- : ++index3 < length2) {
                if (iteratee2(iterable[index3], index3, iterable) === false) {
                  break;
                }
              }
              return collection;
            };
          }
          function createBaseFor(fromRight) {
            return function(object, iteratee2, keysFunc) {
              var index3 = -1, iterable = Object2(object), props = keysFunc(object), length2 = props.length;
              while (length2--) {
                var key = props[fromRight ? length2 : ++index3];
                if (iteratee2(iterable[key], key, iterable) === false) {
                  break;
                }
              }
              return object;
            };
          }
          function createBind(func, bitmask, thisArg) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
              var fn2 = this && this !== root && this instanceof wrapper ? Ctor : func;
              return fn2.apply(isBind ? thisArg : this, arguments);
            }
            return wrapper;
          }
          function createCaseFirst(methodName) {
            return function(string) {
              string = toString3(string);
              var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
              var chr = strSymbols ? strSymbols[0] : string.charAt(0);
              var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
              return chr[methodName]() + trailing;
            };
          }
          function createCompounder(callback) {
            return function(string) {
              return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
            };
          }
          function createCtor(Ctor) {
            return function() {
              var args = arguments;
              switch (args.length) {
                case 0:
                  return new Ctor();
                case 1:
                  return new Ctor(args[0]);
                case 2:
                  return new Ctor(args[0], args[1]);
                case 3:
                  return new Ctor(args[0], args[1], args[2]);
                case 4:
                  return new Ctor(args[0], args[1], args[2], args[3]);
                case 5:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                case 6:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                case 7:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
              }
              var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
              return isObject2(result2) ? result2 : thisBinding;
            };
          }
          function createCurry(func, bitmask, arity) {
            var Ctor = createCtor(func);
            function wrapper() {
              var length2 = arguments.length, args = Array2(length2), index3 = length2, placeholder = getHolder(wrapper);
              while (index3--) {
                args[index3] = arguments[index3];
              }
              var holders = length2 < 3 && args[0] !== placeholder && args[length2 - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
              length2 -= holders.length;
              if (length2 < arity) {
                return createRecurry(
                  func,
                  bitmask,
                  createHybrid,
                  wrapper.placeholder,
                  undefined2,
                  args,
                  holders,
                  undefined2,
                  undefined2,
                  arity - length2
                );
              }
              var fn2 = this && this !== root && this instanceof wrapper ? Ctor : func;
              return apply(fn2, this, args);
            }
            return wrapper;
          }
          function createFind(findIndexFunc) {
            return function(collection, predicate, fromIndex) {
              var iterable = Object2(collection);
              if (!isArrayLike(collection)) {
                var iteratee2 = getIteratee(predicate, 3);
                collection = keys(collection);
                predicate = function(key) {
                  return iteratee2(iterable[key], key, iterable);
                };
              }
              var index3 = findIndexFunc(collection, predicate, fromIndex);
              return index3 > -1 ? iterable[iteratee2 ? collection[index3] : index3] : undefined2;
            };
          }
          function createFlow(fromRight) {
            return flatRest(function(funcs) {
              var length2 = funcs.length, index3 = length2, prereq = LodashWrapper.prototype.thru;
              if (fromRight) {
                funcs.reverse();
              }
              while (index3--) {
                var func = funcs[index3];
                if (typeof func != "function") {
                  throw new TypeError2(FUNC_ERROR_TEXT);
                }
                if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                  var wrapper = new LodashWrapper([], true);
                }
              }
              index3 = wrapper ? index3 : length2;
              while (++index3 < length2) {
                func = funcs[index3];
                var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
                if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                  wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                } else {
                  wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
                }
              }
              return function() {
                var args = arguments, value = args[0];
                if (wrapper && args.length == 1 && isArray2(value)) {
                  return wrapper.plant(value).value();
                }
                var index4 = 0, result2 = length2 ? funcs[index4].apply(this, args) : value;
                while (++index4 < length2) {
                  result2 = funcs[index4].call(this, result2);
                }
                return result2;
              };
            });
          }
          function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
            var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
            function wrapper() {
              var length2 = arguments.length, args = Array2(length2), index3 = length2;
              while (index3--) {
                args[index3] = arguments[index3];
              }
              if (isCurried) {
                var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
              }
              if (partials) {
                args = composeArgs(args, partials, holders, isCurried);
              }
              if (partialsRight) {
                args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
              }
              length2 -= holdersCount;
              if (isCurried && length2 < arity) {
                var newHolders = replaceHolders(args, placeholder);
                return createRecurry(
                  func,
                  bitmask,
                  createHybrid,
                  wrapper.placeholder,
                  thisArg,
                  args,
                  newHolders,
                  argPos,
                  ary2,
                  arity - length2
                );
              }
              var thisBinding = isBind ? thisArg : this, fn2 = isBindKey ? thisBinding[func] : func;
              length2 = args.length;
              if (argPos) {
                args = reorder(args, argPos);
              } else if (isFlip && length2 > 1) {
                args.reverse();
              }
              if (isAry && ary2 < length2) {
                args.length = ary2;
              }
              if (this && this !== root && this instanceof wrapper) {
                fn2 = Ctor || createCtor(fn2);
              }
              return fn2.apply(thisBinding, args);
            }
            return wrapper;
          }
          function createInverter(setter, toIteratee) {
            return function(object, iteratee2) {
              return baseInverter(object, setter, toIteratee(iteratee2), {});
            };
          }
          function createMathOperation(operator, defaultValue) {
            return function(value, other) {
              var result2;
              if (value === undefined2 && other === undefined2) {
                return defaultValue;
              }
              if (value !== undefined2) {
                result2 = value;
              }
              if (other !== undefined2) {
                if (result2 === undefined2) {
                  return other;
                }
                if (typeof value == "string" || typeof other == "string") {
                  value = baseToString(value);
                  other = baseToString(other);
                } else {
                  value = baseToNumber(value);
                  other = baseToNumber(other);
                }
                result2 = operator(value, other);
              }
              return result2;
            };
          }
          function createOver(arrayFunc) {
            return flatRest(function(iteratees) {
              iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
              return baseRest(function(args) {
                var thisArg = this;
                return arrayFunc(iteratees, function(iteratee2) {
                  return apply(iteratee2, thisArg, args);
                });
              });
            });
          }
          function createPadding(length2, chars) {
            chars = chars === undefined2 ? " " : baseToString(chars);
            var charsLength = chars.length;
            if (charsLength < 2) {
              return charsLength ? baseRepeat(chars, length2) : chars;
            }
            var result2 = baseRepeat(chars, nativeCeil(length2 / stringSize(chars)));
            return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length2).join("") : result2.slice(0, length2);
          }
          function createPartial(func, bitmask, thisArg, partials) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
              var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn2 = this && this !== root && this instanceof wrapper ? Ctor : func;
              while (++leftIndex < leftLength) {
                args[leftIndex] = partials[leftIndex];
              }
              while (argsLength--) {
                args[leftIndex++] = arguments[++argsIndex];
              }
              return apply(fn2, isBind ? thisArg : this, args);
            }
            return wrapper;
          }
          function createRange(fromRight) {
            return function(start2, end2, step) {
              if (step && typeof step != "number" && isIterateeCall(start2, end2, step)) {
                end2 = step = undefined2;
              }
              start2 = toFinite(start2);
              if (end2 === undefined2) {
                end2 = start2;
                start2 = 0;
              } else {
                end2 = toFinite(end2);
              }
              step = step === undefined2 ? start2 < end2 ? 1 : -1 : toFinite(step);
              return baseRange(start2, end2, step, fromRight);
            };
          }
          function createRelationalOperation(operator) {
            return function(value, other) {
              if (!(typeof value == "string" && typeof other == "string")) {
                value = toNumber(value);
                other = toNumber(other);
              }
              return operator(value, other);
            };
          }
          function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
            var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
            bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
            bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
            if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
              bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
            }
            var newData = [
              func,
              bitmask,
              thisArg,
              newPartials,
              newHolders,
              newPartialsRight,
              newHoldersRight,
              argPos,
              ary2,
              arity
            ];
            var result2 = wrapFunc.apply(undefined2, newData);
            if (isLaziable(func)) {
              setData(result2, newData);
            }
            result2.placeholder = placeholder;
            return setWrapToString(result2, func, bitmask);
          }
          function createRound(methodName) {
            var func = Math2[methodName];
            return function(number, precision) {
              number = toNumber(number);
              precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
              if (precision && nativeIsFinite(number)) {
                var pair = (toString3(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
                pair = (toString3(value) + "e").split("e");
                return +(pair[0] + "e" + (+pair[1] - precision));
              }
              return func(number);
            };
          }
          var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop4 : function(values3) {
            return new Set2(values3);
          };
          function createToPairs(keysFunc) {
            return function(object) {
              var tag = getTag(object);
              if (tag == mapTag) {
                return mapToArray(object);
              }
              if (tag == setTag) {
                return setToPairs(object);
              }
              return baseToPairs(object, keysFunc(object));
            };
          }
          function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
            var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
            if (!isBindKey && typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            var length2 = partials ? partials.length : 0;
            if (!length2) {
              bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
              partials = holders = undefined2;
            }
            ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
            arity = arity === undefined2 ? arity : toInteger(arity);
            length2 -= holders ? holders.length : 0;
            if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
              var partialsRight = partials, holdersRight = holders;
              partials = holders = undefined2;
            }
            var data = isBindKey ? undefined2 : getData(func);
            var newData = [
              func,
              bitmask,
              thisArg,
              partials,
              holders,
              partialsRight,
              holdersRight,
              argPos,
              ary2,
              arity
            ];
            if (data) {
              mergeData(newData, data);
            }
            func = newData[0];
            bitmask = newData[1];
            thisArg = newData[2];
            partials = newData[3];
            holders = newData[4];
            arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length2, 0);
            if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
              bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
            }
            if (!bitmask || bitmask == WRAP_BIND_FLAG) {
              var result2 = createBind(func, bitmask, thisArg);
            } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
              result2 = createCurry(func, bitmask, arity);
            } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
              result2 = createPartial(func, bitmask, thisArg, partials);
            } else {
              result2 = createHybrid.apply(undefined2, newData);
            }
            var setter = data ? baseSetData : setData;
            return setWrapToString(setter(result2, newData), func, bitmask);
          }
          function customDefaultsAssignIn(objValue, srcValue, key, object) {
            if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty3.call(object, key)) {
              return srcValue;
            }
            return objValue;
          }
          function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
            if (isObject2(objValue) && isObject2(srcValue)) {
              stack.set(srcValue, objValue);
              baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
              stack["delete"](srcValue);
            }
            return objValue;
          }
          function customOmitClone(value) {
            return isPlainObject2(value) ? undefined2 : value;
          }
          function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
            if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
              return false;
            }
            var arrStacked = stack.get(array);
            var othStacked = stack.get(other);
            if (arrStacked && othStacked) {
              return arrStacked == other && othStacked == array;
            }
            var index3 = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
            stack.set(array, other);
            stack.set(other, array);
            while (++index3 < arrLength) {
              var arrValue = array[index3], othValue = other[index3];
              if (customizer) {
                var compared = isPartial ? customizer(othValue, arrValue, index3, other, array, stack) : customizer(arrValue, othValue, index3, array, other, stack);
              }
              if (compared !== undefined2) {
                if (compared) {
                  continue;
                }
                result2 = false;
                break;
              }
              if (seen) {
                if (!arraySome(other, function(othValue2, othIndex) {
                  if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                    return seen.push(othIndex);
                  }
                })) {
                  result2 = false;
                  break;
                }
              } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                result2 = false;
                break;
              }
            }
            stack["delete"](array);
            stack["delete"](other);
            return result2;
          }
          function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
            switch (tag) {
              case dataViewTag:
                if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                  return false;
                }
                object = object.buffer;
                other = other.buffer;
              case arrayBufferTag:
                if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                  return false;
                }
                return true;
              case boolTag:
              case dateTag:
              case numberTag:
                return eq(+object, +other);
              case errorTag:
                return object.name == other.name && object.message == other.message;
              case regexpTag:
              case stringTag:
                return object == other + "";
              case mapTag:
                var convert = mapToArray;
              case setTag:
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                convert || (convert = setToArray);
                if (object.size != other.size && !isPartial) {
                  return false;
                }
                var stacked = stack.get(object);
                if (stacked) {
                  return stacked == other;
                }
                bitmask |= COMPARE_UNORDERED_FLAG;
                stack.set(object, other);
                var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                stack["delete"](object);
                return result2;
              case symbolTag:
                if (symbolValueOf) {
                  return symbolValueOf.call(object) == symbolValueOf.call(other);
                }
            }
            return false;
          }
          function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
            if (objLength != othLength && !isPartial) {
              return false;
            }
            var index3 = objLength;
            while (index3--) {
              var key = objProps[index3];
              if (!(isPartial ? key in other : hasOwnProperty3.call(other, key))) {
                return false;
              }
            }
            var objStacked = stack.get(object);
            var othStacked = stack.get(other);
            if (objStacked && othStacked) {
              return objStacked == other && othStacked == object;
            }
            var result2 = true;
            stack.set(object, other);
            stack.set(other, object);
            var skipCtor = isPartial;
            while (++index3 < objLength) {
              key = objProps[index3];
              var objValue = object[key], othValue = other[key];
              if (customizer) {
                var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
              }
              if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                result2 = false;
                break;
              }
              skipCtor || (skipCtor = key == "constructor");
            }
            if (result2 && !skipCtor) {
              var objCtor = object.constructor, othCtor = other.constructor;
              if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
                result2 = false;
              }
            }
            stack["delete"](object);
            stack["delete"](other);
            return result2;
          }
          function flatRest(func) {
            return setToString(overRest(func, undefined2, flatten), func + "");
          }
          function getAllKeys(object) {
            return baseGetAllKeys(object, keys, getSymbols);
          }
          function getAllKeysIn(object) {
            return baseGetAllKeys(object, keysIn, getSymbolsIn);
          }
          var getData = !metaMap ? noop4 : function(func) {
            return metaMap.get(func);
          };
          function getFuncName(func) {
            var result2 = func.name + "", array = realNames[result2], length2 = hasOwnProperty3.call(realNames, result2) ? array.length : 0;
            while (length2--) {
              var data = array[length2], otherFunc = data.func;
              if (otherFunc == null || otherFunc == func) {
                return data.name;
              }
            }
            return result2;
          }
          function getHolder(func) {
            var object = hasOwnProperty3.call(lodash, "placeholder") ? lodash : func;
            return object.placeholder;
          }
          function getIteratee() {
            var result2 = lodash.iteratee || iteratee;
            result2 = result2 === iteratee ? baseIteratee : result2;
            return arguments.length ? result2(arguments[0], arguments[1]) : result2;
          }
          function getMapData(map2, key) {
            var data = map2.__data__;
            return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
          }
          function getMatchData(object) {
            var result2 = keys(object), length2 = result2.length;
            while (length2--) {
              var key = result2[length2], value = object[key];
              result2[length2] = [key, value, isStrictComparable(value)];
            }
            return result2;
          }
          function getNative(object, key) {
            var value = getValue(object, key);
            return baseIsNative(value) ? value : undefined2;
          }
          function getRawTag(value) {
            var isOwn = hasOwnProperty3.call(value, symToStringTag), tag = value[symToStringTag];
            try {
              value[symToStringTag] = undefined2;
              var unmasked = true;
            } catch (e) {
            }
            var result2 = nativeObjectToString.call(value);
            if (unmasked) {
              if (isOwn) {
                value[symToStringTag] = tag;
              } else {
                delete value[symToStringTag];
              }
            }
            return result2;
          }
          var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
            if (object == null) {
              return [];
            }
            object = Object2(object);
            return arrayFilter(nativeGetSymbols(object), function(symbol) {
              return propertyIsEnumerable.call(object, symbol);
            });
          };
          var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
            var result2 = [];
            while (object) {
              arrayPush(result2, getSymbols(object));
              object = getPrototype(object);
            }
            return result2;
          };
          var getTag = baseGetTag;
          if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
            getTag = function(value) {
              var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
              if (ctorString) {
                switch (ctorString) {
                  case dataViewCtorString:
                    return dataViewTag;
                  case mapCtorString:
                    return mapTag;
                  case promiseCtorString:
                    return promiseTag;
                  case setCtorString:
                    return setTag;
                  case weakMapCtorString:
                    return weakMapTag;
                }
              }
              return result2;
            };
          }
          function getView(start2, end2, transforms) {
            var index3 = -1, length2 = transforms.length;
            while (++index3 < length2) {
              var data = transforms[index3], size3 = data.size;
              switch (data.type) {
                case "drop":
                  start2 += size3;
                  break;
                case "dropRight":
                  end2 -= size3;
                  break;
                case "take":
                  end2 = nativeMin(end2, start2 + size3);
                  break;
                case "takeRight":
                  start2 = nativeMax(start2, end2 - size3);
                  break;
              }
            }
            return { "start": start2, "end": end2 };
          }
          function getWrapDetails(source) {
            var match2 = source.match(reWrapDetails);
            return match2 ? match2[1].split(reSplitDetails) : [];
          }
          function hasPath(object, path, hasFunc) {
            path = castPath(path, object);
            var index3 = -1, length2 = path.length, result2 = false;
            while (++index3 < length2) {
              var key = toKey(path[index3]);
              if (!(result2 = object != null && hasFunc(object, key))) {
                break;
              }
              object = object[key];
            }
            if (result2 || ++index3 != length2) {
              return result2;
            }
            length2 = object == null ? 0 : object.length;
            return !!length2 && isLength(length2) && isIndex(key, length2) && (isArray2(object) || isArguments(object));
          }
          function initCloneArray(array) {
            var length2 = array.length, result2 = new array.constructor(length2);
            if (length2 && typeof array[0] == "string" && hasOwnProperty3.call(array, "index")) {
              result2.index = array.index;
              result2.input = array.input;
            }
            return result2;
          }
          function initCloneObject(object) {
            return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
          }
          function initCloneByTag(object, tag, isDeep) {
            var Ctor = object.constructor;
            switch (tag) {
              case arrayBufferTag:
                return cloneArrayBuffer(object);
              case boolTag:
              case dateTag:
                return new Ctor(+object);
              case dataViewTag:
                return cloneDataView(object, isDeep);
              case float32Tag:
              case float64Tag:
              case int8Tag:
              case int16Tag:
              case int32Tag:
              case uint8Tag:
              case uint8ClampedTag:
              case uint16Tag:
              case uint32Tag:
                return cloneTypedArray(object, isDeep);
              case mapTag:
                return new Ctor();
              case numberTag:
              case stringTag:
                return new Ctor(object);
              case regexpTag:
                return cloneRegExp(object);
              case setTag:
                return new Ctor();
              case symbolTag:
                return cloneSymbol(object);
            }
          }
          function insertWrapDetails(source, details) {
            var length2 = details.length;
            if (!length2) {
              return source;
            }
            var lastIndex = length2 - 1;
            details[lastIndex] = (length2 > 1 ? "& " : "") + details[lastIndex];
            details = details.join(length2 > 2 ? ", " : " ");
            return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
          }
          function isFlattenable(value) {
            return isArray2(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
          }
          function isIndex(value, length2) {
            var type = typeof value;
            length2 = length2 == null ? MAX_SAFE_INTEGER : length2;
            return !!length2 && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length2);
          }
          function isIterateeCall(value, index3, object) {
            if (!isObject2(object)) {
              return false;
            }
            var type = typeof index3;
            if (type == "number" ? isArrayLike(object) && isIndex(index3, object.length) : type == "string" && index3 in object) {
              return eq(object[index3], value);
            }
            return false;
          }
          function isKey(value, object) {
            if (isArray2(value)) {
              return false;
            }
            var type = typeof value;
            if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
              return true;
            }
            return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
          }
          function isKeyable(value) {
            var type = typeof value;
            return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
          }
          function isLaziable(func) {
            var funcName = getFuncName(func), other = lodash[funcName];
            if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
              return false;
            }
            if (func === other) {
              return true;
            }
            var data = getData(other);
            return !!data && func === data[0];
          }
          function isMasked(func) {
            return !!maskSrcKey && maskSrcKey in func;
          }
          var isMaskable = coreJsData ? isFunction2 : stubFalse;
          function isPrototype(value) {
            var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
            return value === proto;
          }
          function isStrictComparable(value) {
            return value === value && !isObject2(value);
          }
          function matchesStrictComparable(key, srcValue) {
            return function(object) {
              if (object == null) {
                return false;
              }
              return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
            };
          }
          function memoizeCapped(func) {
            var result2 = memoize4(func, function(key) {
              if (cache3.size === MAX_MEMOIZE_SIZE) {
                cache3.clear();
              }
              return key;
            });
            var cache3 = result2.cache;
            return result2;
          }
          function mergeData(data, source) {
            var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
            var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
            if (!(isCommon || isCombo)) {
              return data;
            }
            if (srcBitmask & WRAP_BIND_FLAG) {
              data[2] = source[2];
              newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
            }
            var value = source[3];
            if (value) {
              var partials = data[3];
              data[3] = partials ? composeArgs(partials, value, source[4]) : value;
              data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
            }
            value = source[5];
            if (value) {
              partials = data[5];
              data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
              data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
            }
            value = source[7];
            if (value) {
              data[7] = value;
            }
            if (srcBitmask & WRAP_ARY_FLAG) {
              data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
            }
            if (data[9] == null) {
              data[9] = source[9];
            }
            data[0] = source[0];
            data[1] = newBitmask;
            return data;
          }
          function nativeKeysIn(object) {
            var result2 = [];
            if (object != null) {
              for (var key in Object2(object)) {
                result2.push(key);
              }
            }
            return result2;
          }
          function objectToString(value) {
            return nativeObjectToString.call(value);
          }
          function overRest(func, start2, transform3) {
            start2 = nativeMax(start2 === undefined2 ? func.length - 1 : start2, 0);
            return function() {
              var args = arguments, index3 = -1, length2 = nativeMax(args.length - start2, 0), array = Array2(length2);
              while (++index3 < length2) {
                array[index3] = args[start2 + index3];
              }
              index3 = -1;
              var otherArgs = Array2(start2 + 1);
              while (++index3 < start2) {
                otherArgs[index3] = args[index3];
              }
              otherArgs[start2] = transform3(array);
              return apply(func, this, otherArgs);
            };
          }
          function parent(object, path) {
            return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
          }
          function reorder(array, indexes) {
            var arrLength = array.length, length2 = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
            while (length2--) {
              var index3 = indexes[length2];
              array[length2] = isIndex(index3, arrLength) ? oldArray[index3] : undefined2;
            }
            return array;
          }
          function safeGet(object, key) {
            if (key === "constructor" && typeof object[key] === "function") {
              return;
            }
            if (key == "__proto__") {
              return;
            }
            return object[key];
          }
          var setData = shortOut(baseSetData);
          var setTimeout2 = ctxSetTimeout || function(func, wait) {
            return root.setTimeout(func, wait);
          };
          var setToString = shortOut(baseSetToString);
          function setWrapToString(wrapper, reference2, bitmask) {
            var source = reference2 + "";
            return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
          }
          function shortOut(func) {
            var count = 0, lastCalled = 0;
            return function() {
              var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
              lastCalled = stamp;
              if (remaining > 0) {
                if (++count >= HOT_COUNT) {
                  return arguments[0];
                }
              } else {
                count = 0;
              }
              return func.apply(undefined2, arguments);
            };
          }
          function shuffleSelf(array, size3) {
            var index3 = -1, length2 = array.length, lastIndex = length2 - 1;
            size3 = size3 === undefined2 ? length2 : size3;
            while (++index3 < size3) {
              var rand = baseRandom(index3, lastIndex), value = array[rand];
              array[rand] = array[index3];
              array[index3] = value;
            }
            array.length = size3;
            return array;
          }
          var stringToPath = memoizeCapped(function(string) {
            var result2 = [];
            if (string.charCodeAt(0) === 46) {
              result2.push("");
            }
            string.replace(rePropName, function(match2, number, quote, subString) {
              result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match2);
            });
            return result2;
          });
          function toKey(value) {
            if (typeof value == "string" || isSymbol(value)) {
              return value;
            }
            var result2 = value + "";
            return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
          }
          function toSource(func) {
            if (func != null) {
              try {
                return funcToString.call(func);
              } catch (e) {
              }
              try {
                return func + "";
              } catch (e) {
              }
            }
            return "";
          }
          function updateWrapDetails(details, bitmask) {
            arrayEach(wrapFlags, function(pair) {
              var value = "_." + pair[0];
              if (bitmask & pair[1] && !arrayIncludes(details, value)) {
                details.push(value);
              }
            });
            return details.sort();
          }
          function wrapperClone(wrapper) {
            if (wrapper instanceof LazyWrapper) {
              return wrapper.clone();
            }
            var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
            result2.__actions__ = copyArray(wrapper.__actions__);
            result2.__index__ = wrapper.__index__;
            result2.__values__ = wrapper.__values__;
            return result2;
          }
          function chunk(array, size3, guard) {
            if (guard ? isIterateeCall(array, size3, guard) : size3 === undefined2) {
              size3 = 1;
            } else {
              size3 = nativeMax(toInteger(size3), 0);
            }
            var length2 = array == null ? 0 : array.length;
            if (!length2 || size3 < 1) {
              return [];
            }
            var index3 = 0, resIndex = 0, result2 = Array2(nativeCeil(length2 / size3));
            while (index3 < length2) {
              result2[resIndex++] = baseSlice(array, index3, index3 += size3);
            }
            return result2;
          }
          function compact(array) {
            var index3 = -1, length2 = array == null ? 0 : array.length, resIndex = 0, result2 = [];
            while (++index3 < length2) {
              var value = array[index3];
              if (value) {
                result2[resIndex++] = value;
              }
            }
            return result2;
          }
          function concat() {
            var length2 = arguments.length;
            if (!length2) {
              return [];
            }
            var args = Array2(length2 - 1), array = arguments[0], index3 = length2;
            while (index3--) {
              args[index3 - 1] = arguments[index3];
            }
            return arrayPush(isArray2(array) ? copyArray(array) : [array], baseFlatten(args, 1));
          }
          var difference = baseRest(function(array, values3) {
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values3, 1, isArrayLikeObject, true)) : [];
          });
          var differenceBy = baseRest(function(array, values3) {
            var iteratee2 = last(values3);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values3, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
          });
          var differenceWith = baseRest(function(array, values3) {
            var comparator = last(values3);
            if (isArrayLikeObject(comparator)) {
              comparator = undefined2;
            }
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values3, 1, isArrayLikeObject, true), undefined2, comparator) : [];
          });
          function drop(array, n, guard) {
            var length2 = array == null ? 0 : array.length;
            if (!length2) {
              return [];
            }
            n = guard || n === undefined2 ? 1 : toInteger(n);
            return baseSlice(array, n < 0 ? 0 : n, length2);
          }
          function dropRight(array, n, guard) {
            var length2 = array == null ? 0 : array.length;
            if (!length2) {
              return [];
            }
            n = guard || n === undefined2 ? 1 : toInteger(n);
            n = length2 - n;
            return baseSlice(array, 0, n < 0 ? 0 : n);
          }
          function dropRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
          }
          function dropWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
          }
          function fill(array, value, start2, end2) {
            var length2 = array == null ? 0 : array.length;
            if (!length2) {
              return [];
            }
            if (start2 && typeof start2 != "number" && isIterateeCall(array, value, start2)) {
              start2 = 0;
              end2 = length2;
            }
            return baseFill(array, value, start2, end2);
          }
          function findIndex2(array, predicate, fromIndex) {
            var length2 = array == null ? 0 : array.length;
            if (!length2) {
              return -1;
            }
            var index3 = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index3 < 0) {
              index3 = nativeMax(length2 + index3, 0);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index3);
          }
          function findLastIndex(array, predicate, fromIndex) {
            var length2 = array == null ? 0 : array.length;
            if (!length2) {
              return -1;
            }
            var index3 = length2 - 1;
            if (fromIndex !== undefined2) {
              index3 = toInteger(fromIndex);
              index3 = fromIndex < 0 ? nativeMax(length2 + index3, 0) : nativeMin(index3, length2 - 1);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index3, true);
          }
          function flatten(array) {
            var length2 = array == null ? 0 : array.length;
            return length2 ? baseFlatten(array, 1) : [];
          }
          function flattenDeep(array) {
            var length2 = array == null ? 0 : array.length;
            return length2 ? baseFlatten(array, INFINITY) : [];
          }
          function flattenDepth(array, depth) {
            var length2 = array == null ? 0 : array.length;
            if (!length2) {
              return [];
            }
            depth = depth === undefined2 ? 1 : toInteger(depth);
            return baseFlatten(array, depth);
          }
          function fromPairs(pairs) {
            var index3 = -1, length2 = pairs == null ? 0 : pairs.length, result2 = {};
            while (++index3 < length2) {
              var pair = pairs[index3];
              result2[pair[0]] = pair[1];
            }
            return result2;
          }
          function head(array) {
            return array && array.length ? array[0] : undefined2;
          }
          function indexOf(array, value, fromIndex) {
            var length2 = array == null ? 0 : array.length;
            if (!length2) {
              return -1;
            }
            var index3 = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index3 < 0) {
              index3 = nativeMax(length2 + index3, 0);
            }
            return baseIndexOf(array, value, index3);
          }
          function initial(array) {
            var length2 = array == null ? 0 : array.length;
            return length2 ? baseSlice(array, 0, -1) : [];
          }
          var intersection = baseRest(function(arrays) {
            var mapped = arrayMap(arrays, castArrayLikeObject);
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
          });
          var intersectionBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            if (iteratee2 === last(mapped)) {
              iteratee2 = undefined2;
            } else {
              mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
          });
          var intersectionWith = baseRest(function(arrays) {
            var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            if (comparator) {
              mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
          });
          function join3(array, separator) {
            return array == null ? "" : nativeJoin.call(array, separator);
          }
          function last(array) {
            var length2 = array == null ? 0 : array.length;
            return length2 ? array[length2 - 1] : undefined2;
          }
          function lastIndexOf(array, value, fromIndex) {
            var length2 = array == null ? 0 : array.length;
            if (!length2) {
              return -1;
            }
            var index3 = length2;
            if (fromIndex !== undefined2) {
              index3 = toInteger(fromIndex);
              index3 = index3 < 0 ? nativeMax(length2 + index3, 0) : nativeMin(index3, length2 - 1);
            }
            return value === value ? strictLastIndexOf(array, value, index3) : baseFindIndex(array, baseIsNaN, index3, true);
          }
          function nth(array, n) {
            return array && array.length ? baseNth(array, toInteger(n)) : undefined2;
          }
          var pull = baseRest(pullAll);
          function pullAll(array, values3) {
            return array && array.length && values3 && values3.length ? basePullAll(array, values3) : array;
          }
          function pullAllBy(array, values3, iteratee2) {
            return array && array.length && values3 && values3.length ? basePullAll(array, values3, getIteratee(iteratee2, 2)) : array;
          }
          function pullAllWith(array, values3, comparator) {
            return array && array.length && values3 && values3.length ? basePullAll(array, values3, undefined2, comparator) : array;
          }
          var pullAt = flatRest(function(array, indexes) {
            var length2 = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
            basePullAt(array, arrayMap(indexes, function(index3) {
              return isIndex(index3, length2) ? +index3 : index3;
            }).sort(compareAscending));
            return result2;
          });
          function remove(array, predicate) {
            var result2 = [];
            if (!(array && array.length)) {
              return result2;
            }
            var index3 = -1, indexes = [], length2 = array.length;
            predicate = getIteratee(predicate, 3);
            while (++index3 < length2) {
              var value = array[index3];
              if (predicate(value, index3, array)) {
                result2.push(value);
                indexes.push(index3);
              }
            }
            basePullAt(array, indexes);
            return result2;
          }
          function reverse(array) {
            return array == null ? array : nativeReverse.call(array);
          }
          function slice2(array, start2, end2) {
            var length2 = array == null ? 0 : array.length;
            if (!length2) {
              return [];
            }
            if (end2 && typeof end2 != "number" && isIterateeCall(array, start2, end2)) {
              start2 = 0;
              end2 = length2;
            } else {
              start2 = start2 == null ? 0 : toInteger(start2);
              end2 = end2 === undefined2 ? length2 : toInteger(end2);
            }
            return baseSlice(array, start2, end2);
          }
          function sortedIndex(array, value) {
            return baseSortedIndex(array, value);
          }
          function sortedIndexBy(array, value, iteratee2) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
          }
          function sortedIndexOf(array, value) {
            var length2 = array == null ? 0 : array.length;
            if (length2) {
              var index3 = baseSortedIndex(array, value);
              if (index3 < length2 && eq(array[index3], value)) {
                return index3;
              }
            }
            return -1;
          }
          function sortedLastIndex(array, value) {
            return baseSortedIndex(array, value, true);
          }
          function sortedLastIndexBy(array, value, iteratee2) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
          }
          function sortedLastIndexOf(array, value) {
            var length2 = array == null ? 0 : array.length;
            if (length2) {
              var index3 = baseSortedIndex(array, value, true) - 1;
              if (eq(array[index3], value)) {
                return index3;
              }
            }
            return -1;
          }
          function sortedUniq(array) {
            return array && array.length ? baseSortedUniq(array) : [];
          }
          function sortedUniqBy(array, iteratee2) {
            return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
          }
          function tail(array) {
            var length2 = array == null ? 0 : array.length;
            return length2 ? baseSlice(array, 1, length2) : [];
          }
          function take(array, n, guard) {
            if (!(array && array.length)) {
              return [];
            }
            n = guard || n === undefined2 ? 1 : toInteger(n);
            return baseSlice(array, 0, n < 0 ? 0 : n);
          }
          function takeRight(array, n, guard) {
            var length2 = array == null ? 0 : array.length;
            if (!length2) {
              return [];
            }
            n = guard || n === undefined2 ? 1 : toInteger(n);
            n = length2 - n;
            return baseSlice(array, n < 0 ? 0 : n, length2);
          }
          function takeRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
          }
          function takeWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
          }
          var union = baseRest(function(arrays) {
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
          });
          var unionBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
          });
          var unionWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
          });
          function uniq(array) {
            return array && array.length ? baseUniq(array) : [];
          }
          function uniqBy(array, iteratee2) {
            return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
          }
          function uniqWith(array, comparator) {
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return array && array.length ? baseUniq(array, undefined2, comparator) : [];
          }
          function unzip(array) {
            if (!(array && array.length)) {
              return [];
            }
            var length2 = 0;
            array = arrayFilter(array, function(group) {
              if (isArrayLikeObject(group)) {
                length2 = nativeMax(group.length, length2);
                return true;
              }
            });
            return baseTimes(length2, function(index3) {
              return arrayMap(array, baseProperty(index3));
            });
          }
          function unzipWith(array, iteratee2) {
            if (!(array && array.length)) {
              return [];
            }
            var result2 = unzip(array);
            if (iteratee2 == null) {
              return result2;
            }
            return arrayMap(result2, function(group) {
              return apply(iteratee2, undefined2, group);
            });
          }
          var without = baseRest(function(array, values3) {
            return isArrayLikeObject(array) ? baseDifference(array, values3) : [];
          });
          var xor = baseRest(function(arrays) {
            return baseXor(arrayFilter(arrays, isArrayLikeObject));
          });
          var xorBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
          });
          var xorWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
          });
          var zip = baseRest(unzip);
          function zipObject(props, values3) {
            return baseZipObject(props || [], values3 || [], assignValue);
          }
          function zipObjectDeep(props, values3) {
            return baseZipObject(props || [], values3 || [], baseSet);
          }
          var zipWith = baseRest(function(arrays) {
            var length2 = arrays.length, iteratee2 = length2 > 1 ? arrays[length2 - 1] : undefined2;
            iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
            return unzipWith(arrays, iteratee2);
          });
          function chain(value) {
            var result2 = lodash(value);
            result2.__chain__ = true;
            return result2;
          }
          function tap(value, interceptor) {
            interceptor(value);
            return value;
          }
          function thru(value, interceptor) {
            return interceptor(value);
          }
          var wrapperAt = flatRest(function(paths) {
            var length2 = paths.length, start2 = length2 ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
              return baseAt(object, paths);
            };
            if (length2 > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start2)) {
              return this.thru(interceptor);
            }
            value = value.slice(start2, +start2 + (length2 ? 1 : 0));
            value.__actions__.push({
              "func": thru,
              "args": [interceptor],
              "thisArg": undefined2
            });
            return new LodashWrapper(value, this.__chain__).thru(function(array) {
              if (length2 && !array.length) {
                array.push(undefined2);
              }
              return array;
            });
          });
          function wrapperChain() {
            return chain(this);
          }
          function wrapperCommit() {
            return new LodashWrapper(this.value(), this.__chain__);
          }
          function wrapperNext() {
            if (this.__values__ === undefined2) {
              this.__values__ = toArray2(this.value());
            }
            var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
            return { "done": done, "value": value };
          }
          function wrapperToIterator() {
            return this;
          }
          function wrapperPlant(value) {
            var result2, parent2 = this;
            while (parent2 instanceof baseLodash) {
              var clone2 = wrapperClone(parent2);
              clone2.__index__ = 0;
              clone2.__values__ = undefined2;
              if (result2) {
                previous.__wrapped__ = clone2;
              } else {
                result2 = clone2;
              }
              var previous = clone2;
              parent2 = parent2.__wrapped__;
            }
            previous.__wrapped__ = value;
            return result2;
          }
          function wrapperReverse() {
            var value = this.__wrapped__;
            if (value instanceof LazyWrapper) {
              var wrapped = value;
              if (this.__actions__.length) {
                wrapped = new LazyWrapper(this);
              }
              wrapped = wrapped.reverse();
              wrapped.__actions__.push({
                "func": thru,
                "args": [reverse],
                "thisArg": undefined2
              });
              return new LodashWrapper(wrapped, this.__chain__);
            }
            return this.thru(reverse);
          }
          function wrapperValue() {
            return baseWrapperValue(this.__wrapped__, this.__actions__);
          }
          var countBy = createAggregator(function(result2, value, key) {
            if (hasOwnProperty3.call(result2, key)) {
              ++result2[key];
            } else {
              baseAssignValue(result2, key, 1);
            }
          });
          function every(collection, predicate, guard) {
            var func = isArray2(collection) ? arrayEvery : baseEvery;
            if (guard && isIterateeCall(collection, predicate, guard)) {
              predicate = undefined2;
            }
            return func(collection, getIteratee(predicate, 3));
          }
          function filter2(collection, predicate) {
            var func = isArray2(collection) ? arrayFilter : baseFilter;
            return func(collection, getIteratee(predicate, 3));
          }
          var find = createFind(findIndex2);
          var findLast = createFind(findLastIndex);
          function flatMap(collection, iteratee2) {
            return baseFlatten(map(collection, iteratee2), 1);
          }
          function flatMapDeep(collection, iteratee2) {
            return baseFlatten(map(collection, iteratee2), INFINITY);
          }
          function flatMapDepth(collection, iteratee2, depth) {
            depth = depth === undefined2 ? 1 : toInteger(depth);
            return baseFlatten(map(collection, iteratee2), depth);
          }
          function forEach2(collection, iteratee2) {
            var func = isArray2(collection) ? arrayEach : baseEach;
            return func(collection, getIteratee(iteratee2, 3));
          }
          function forEachRight(collection, iteratee2) {
            var func = isArray2(collection) ? arrayEachRight : baseEachRight;
            return func(collection, getIteratee(iteratee2, 3));
          }
          var groupBy = createAggregator(function(result2, value, key) {
            if (hasOwnProperty3.call(result2, key)) {
              result2[key].push(value);
            } else {
              baseAssignValue(result2, key, [value]);
            }
          });
          function includes(collection, value, fromIndex, guard) {
            collection = isArrayLike(collection) ? collection : values2(collection);
            fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
            var length2 = collection.length;
            if (fromIndex < 0) {
              fromIndex = nativeMax(length2 + fromIndex, 0);
            }
            return isString2(collection) ? fromIndex <= length2 && collection.indexOf(value, fromIndex) > -1 : !!length2 && baseIndexOf(collection, value, fromIndex) > -1;
          }
          var invokeMap = baseRest(function(collection, path, args) {
            var index3 = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
            baseEach(collection, function(value) {
              result2[++index3] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
            });
            return result2;
          });
          var keyBy = createAggregator(function(result2, value, key) {
            baseAssignValue(result2, key, value);
          });
          function map(collection, iteratee2) {
            var func = isArray2(collection) ? arrayMap : baseMap;
            return func(collection, getIteratee(iteratee2, 3));
          }
          function orderBy(collection, iteratees, orders, guard) {
            if (collection == null) {
              return [];
            }
            if (!isArray2(iteratees)) {
              iteratees = iteratees == null ? [] : [iteratees];
            }
            orders = guard ? undefined2 : orders;
            if (!isArray2(orders)) {
              orders = orders == null ? [] : [orders];
            }
            return baseOrderBy(collection, iteratees, orders);
          }
          var partition = createAggregator(function(result2, value, key) {
            result2[key ? 0 : 1].push(value);
          }, function() {
            return [[], []];
          });
          function reduce(collection, iteratee2, accumulator) {
            var func = isArray2(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
          }
          function reduceRight(collection, iteratee2, accumulator) {
            var func = isArray2(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
          }
          function reject(collection, predicate) {
            var func = isArray2(collection) ? arrayFilter : baseFilter;
            return func(collection, negate(getIteratee(predicate, 3)));
          }
          function sample(collection) {
            var func = isArray2(collection) ? arraySample : baseSample;
            return func(collection);
          }
          function sampleSize(collection, n, guard) {
            if (guard ? isIterateeCall(collection, n, guard) : n === undefined2) {
              n = 1;
            } else {
              n = toInteger(n);
            }
            var func = isArray2(collection) ? arraySampleSize : baseSampleSize;
            return func(collection, n);
          }
          function shuffle(collection) {
            var func = isArray2(collection) ? arrayShuffle : baseShuffle;
            return func(collection);
          }
          function size2(collection) {
            if (collection == null) {
              return 0;
            }
            if (isArrayLike(collection)) {
              return isString2(collection) ? stringSize(collection) : collection.length;
            }
            var tag = getTag(collection);
            if (tag == mapTag || tag == setTag) {
              return collection.size;
            }
            return baseKeys(collection).length;
          }
          function some(collection, predicate, guard) {
            var func = isArray2(collection) ? arraySome : baseSome;
            if (guard && isIterateeCall(collection, predicate, guard)) {
              predicate = undefined2;
            }
            return func(collection, getIteratee(predicate, 3));
          }
          var sortBy = baseRest(function(collection, iteratees) {
            if (collection == null) {
              return [];
            }
            var length2 = iteratees.length;
            if (length2 > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
              iteratees = [];
            } else if (length2 > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
              iteratees = [iteratees[0]];
            }
            return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
          });
          var now2 = ctxNow || function() {
            return root.Date.now();
          };
          function after(n, func) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            n = toInteger(n);
            return function() {
              if (--n < 1) {
                return func.apply(this, arguments);
              }
            };
          }
          function ary(func, n, guard) {
            n = guard ? undefined2 : n;
            n = func && n == null ? func.length : n;
            return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n);
          }
          function before(n, func) {
            var result2;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            n = toInteger(n);
            return function() {
              if (--n > 0) {
                result2 = func.apply(this, arguments);
              }
              if (n <= 1) {
                func = undefined2;
              }
              return result2;
            };
          }
          var bind2 = baseRest(function(func, thisArg, partials) {
            var bitmask = WRAP_BIND_FLAG;
            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bind2));
              bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(func, bitmask, thisArg, partials, holders);
          });
          var bindKey = baseRest(function(object, key, partials) {
            var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bindKey));
              bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(key, bitmask, object, partials, holders);
          });
          function curry(func, arity, guard) {
            arity = guard ? undefined2 : arity;
            var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
            result2.placeholder = curry.placeholder;
            return result2;
          }
          function curryRight(func, arity, guard) {
            arity = guard ? undefined2 : arity;
            var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
            result2.placeholder = curryRight.placeholder;
            return result2;
          }
          function debounce4(func, wait, options) {
            var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            wait = toNumber(wait) || 0;
            if (isObject2(options)) {
              leading = !!options.leading;
              maxing = "maxWait" in options;
              maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
              trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            function invokeFunc(time) {
              var args = lastArgs, thisArg = lastThis;
              lastArgs = lastThis = undefined2;
              lastInvokeTime = time;
              result2 = func.apply(thisArg, args);
              return result2;
            }
            function leadingEdge(time) {
              lastInvokeTime = time;
              timerId = setTimeout2(timerExpired, wait);
              return leading ? invokeFunc(time) : result2;
            }
            function remainingWait(time) {
              var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
              return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
            }
            function shouldInvoke(time) {
              var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
              return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
            }
            function timerExpired() {
              var time = now2();
              if (shouldInvoke(time)) {
                return trailingEdge(time);
              }
              timerId = setTimeout2(timerExpired, remainingWait(time));
            }
            function trailingEdge(time) {
              timerId = undefined2;
              if (trailing && lastArgs) {
                return invokeFunc(time);
              }
              lastArgs = lastThis = undefined2;
              return result2;
            }
            function cancel() {
              if (timerId !== undefined2) {
                clearTimeout2(timerId);
              }
              lastInvokeTime = 0;
              lastArgs = lastCallTime = lastThis = timerId = undefined2;
            }
            function flush() {
              return timerId === undefined2 ? result2 : trailingEdge(now2());
            }
            function debounced() {
              var time = now2(), isInvoking = shouldInvoke(time);
              lastArgs = arguments;
              lastThis = this;
              lastCallTime = time;
              if (isInvoking) {
                if (timerId === undefined2) {
                  return leadingEdge(lastCallTime);
                }
                if (maxing) {
                  clearTimeout2(timerId);
                  timerId = setTimeout2(timerExpired, wait);
                  return invokeFunc(lastCallTime);
                }
              }
              if (timerId === undefined2) {
                timerId = setTimeout2(timerExpired, wait);
              }
              return result2;
            }
            debounced.cancel = cancel;
            debounced.flush = flush;
            return debounced;
          }
          var defer = baseRest(function(func, args) {
            return baseDelay(func, 1, args);
          });
          var delay = baseRest(function(func, wait, args) {
            return baseDelay(func, toNumber(wait) || 0, args);
          });
          function flip3(func) {
            return createWrap(func, WRAP_FLIP_FLAG);
          }
          function memoize4(func, resolver) {
            if (typeof func != "function" || resolver != null && typeof resolver != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            var memoized = function() {
              var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache3 = memoized.cache;
              if (cache3.has(key)) {
                return cache3.get(key);
              }
              var result2 = func.apply(this, args);
              memoized.cache = cache3.set(key, result2) || cache3;
              return result2;
            };
            memoized.cache = new (memoize4.Cache || MapCache)();
            return memoized;
          }
          memoize4.Cache = MapCache;
          function negate(predicate) {
            if (typeof predicate != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return function() {
              var args = arguments;
              switch (args.length) {
                case 0:
                  return !predicate.call(this);
                case 1:
                  return !predicate.call(this, args[0]);
                case 2:
                  return !predicate.call(this, args[0], args[1]);
                case 3:
                  return !predicate.call(this, args[0], args[1], args[2]);
              }
              return !predicate.apply(this, args);
            };
          }
          function once(func) {
            return before(2, func);
          }
          var overArgs = castRest(function(func, transforms) {
            transforms = transforms.length == 1 && isArray2(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
            var funcsLength = transforms.length;
            return baseRest(function(args) {
              var index3 = -1, length2 = nativeMin(args.length, funcsLength);
              while (++index3 < length2) {
                args[index3] = transforms[index3].call(this, args[index3]);
              }
              return apply(func, this, args);
            });
          });
          var partial = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partial));
            return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
          });
          var partialRight = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partialRight));
            return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
          });
          var rearg = flatRest(function(func, indexes) {
            return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
          });
          function rest(func, start2) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            start2 = start2 === undefined2 ? start2 : toInteger(start2);
            return baseRest(func, start2);
          }
          function spread3(func, start2) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            start2 = start2 == null ? 0 : nativeMax(toInteger(start2), 0);
            return baseRest(function(args) {
              var array = args[start2], otherArgs = castSlice(args, 0, start2);
              if (array) {
                arrayPush(otherArgs, array);
              }
              return apply(func, this, otherArgs);
            });
          }
          function throttle(func, wait, options) {
            var leading = true, trailing = true;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            if (isObject2(options)) {
              leading = "leading" in options ? !!options.leading : leading;
              trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            return debounce4(func, wait, {
              "leading": leading,
              "maxWait": wait,
              "trailing": trailing
            });
          }
          function unary(func) {
            return ary(func, 1);
          }
          function wrap(value, wrapper) {
            return partial(castFunction(wrapper), value);
          }
          function castArray() {
            if (!arguments.length) {
              return [];
            }
            var value = arguments[0];
            return isArray2(value) ? value : [value];
          }
          function clone(value) {
            return baseClone(value, CLONE_SYMBOLS_FLAG);
          }
          function cloneWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
          }
          function cloneDeep(value) {
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
          }
          function cloneDeepWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
          }
          function conformsTo(object, source) {
            return source == null || baseConformsTo(object, source, keys(source));
          }
          function eq(value, other) {
            return value === other || value !== value && other !== other;
          }
          var gt = createRelationalOperation(baseGt);
          var gte = createRelationalOperation(function(value, other) {
            return value >= other;
          });
          var isArguments = baseIsArguments(function() {
            return arguments;
          }()) ? baseIsArguments : function(value) {
            return isObjectLike(value) && hasOwnProperty3.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
          };
          var isArray2 = Array2.isArray;
          var isArrayBuffer2 = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
          function isArrayLike(value) {
            return value != null && isLength(value.length) && !isFunction2(value);
          }
          function isArrayLikeObject(value) {
            return isObjectLike(value) && isArrayLike(value);
          }
          function isBoolean2(value) {
            return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
          }
          var isBuffer2 = nativeIsBuffer || stubFalse;
          var isDate2 = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
          function isElement3(value) {
            return isObjectLike(value) && value.nodeType === 1 && !isPlainObject2(value);
          }
          function isEmpty5(value) {
            if (value == null) {
              return true;
            }
            if (isArrayLike(value) && (isArray2(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer2(value) || isTypedArray2(value) || isArguments(value))) {
              return !value.length;
            }
            var tag = getTag(value);
            if (tag == mapTag || tag == setTag) {
              return !value.size;
            }
            if (isPrototype(value)) {
              return !baseKeys(value).length;
            }
            for (var key in value) {
              if (hasOwnProperty3.call(value, key)) {
                return false;
              }
            }
            return true;
          }
          function isEqual(value, other) {
            return baseIsEqual(value, other);
          }
          function isEqualWith(value, other, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            var result2 = customizer ? customizer(value, other) : undefined2;
            return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
          }
          function isError(value) {
            if (!isObjectLike(value)) {
              return false;
            }
            var tag = baseGetTag(value);
            return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject2(value);
          }
          function isFinite2(value) {
            return typeof value == "number" && nativeIsFinite(value);
          }
          function isFunction2(value) {
            if (!isObject2(value)) {
              return false;
            }
            var tag = baseGetTag(value);
            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
          }
          function isInteger(value) {
            return typeof value == "number" && value == toInteger(value);
          }
          function isLength(value) {
            return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
          }
          function isObject2(value) {
            var type = typeof value;
            return value != null && (type == "object" || type == "function");
          }
          function isObjectLike(value) {
            return value != null && typeof value == "object";
          }
          var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
          function isMatch(object, source) {
            return object === source || baseIsMatch(object, source, getMatchData(source));
          }
          function isMatchWith(object, source, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseIsMatch(object, source, getMatchData(source), customizer);
          }
          function isNaN2(value) {
            return isNumber3(value) && value != +value;
          }
          function isNative(value) {
            if (isMaskable(value)) {
              throw new Error2(CORE_ERROR_TEXT);
            }
            return baseIsNative(value);
          }
          function isNull(value) {
            return value === null;
          }
          function isNil(value) {
            return value == null;
          }
          function isNumber3(value) {
            return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
          }
          function isPlainObject2(value) {
            if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
              return false;
            }
            var proto = getPrototype(value);
            if (proto === null) {
              return true;
            }
            var Ctor = hasOwnProperty3.call(proto, "constructor") && proto.constructor;
            return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
          }
          var isRegExp2 = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
          function isSafeInteger(value) {
            return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
          }
          var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
          function isString2(value) {
            return typeof value == "string" || !isArray2(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
          }
          function isSymbol(value) {
            return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
          }
          var isTypedArray2 = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
          function isUndefined2(value) {
            return value === undefined2;
          }
          function isWeakMap(value) {
            return isObjectLike(value) && getTag(value) == weakMapTag;
          }
          function isWeakSet(value) {
            return isObjectLike(value) && baseGetTag(value) == weakSetTag;
          }
          var lt = createRelationalOperation(baseLt);
          var lte = createRelationalOperation(function(value, other) {
            return value <= other;
          });
          function toArray2(value) {
            if (!value) {
              return [];
            }
            if (isArrayLike(value)) {
              return isString2(value) ? stringToArray(value) : copyArray(value);
            }
            if (symIterator && value[symIterator]) {
              return iteratorToArray(value[symIterator]());
            }
            var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values2;
            return func(value);
          }
          function toFinite(value) {
            if (!value) {
              return value === 0 ? value : 0;
            }
            value = toNumber(value);
            if (value === INFINITY || value === -INFINITY) {
              var sign = value < 0 ? -1 : 1;
              return sign * MAX_INTEGER;
            }
            return value === value ? value : 0;
          }
          function toInteger(value) {
            var result2 = toFinite(value), remainder = result2 % 1;
            return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
          }
          function toLength(value) {
            return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
          }
          function toNumber(value) {
            if (typeof value == "number") {
              return value;
            }
            if (isSymbol(value)) {
              return NAN;
            }
            if (isObject2(value)) {
              var other = typeof value.valueOf == "function" ? value.valueOf() : value;
              value = isObject2(other) ? other + "" : other;
            }
            if (typeof value != "string") {
              return value === 0 ? value : +value;
            }
            value = baseTrim(value);
            var isBinary = reIsBinary.test(value);
            return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
          }
          function toPlainObject(value) {
            return copyObject(value, keysIn(value));
          }
          function toSafeInteger(value) {
            return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
          }
          function toString3(value) {
            return value == null ? "" : baseToString(value);
          }
          var assign2 = createAssigner(function(object, source) {
            if (isPrototype(source) || isArrayLike(source)) {
              copyObject(source, keys(source), object);
              return;
            }
            for (var key in source) {
              if (hasOwnProperty3.call(source, key)) {
                assignValue(object, key, source[key]);
              }
            }
          });
          var assignIn = createAssigner(function(object, source) {
            copyObject(source, keysIn(source), object);
          });
          var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keysIn(source), object, customizer);
          });
          var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keys(source), object, customizer);
          });
          var at2 = flatRest(baseAt);
          function create(prototype3, properties) {
            var result2 = baseCreate(prototype3);
            return properties == null ? result2 : baseAssign(result2, properties);
          }
          var defaults2 = baseRest(function(object, sources) {
            object = Object2(object);
            var index3 = -1;
            var length2 = sources.length;
            var guard = length2 > 2 ? sources[2] : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              length2 = 1;
            }
            while (++index3 < length2) {
              var source = sources[index3];
              var props = keysIn(source);
              var propsIndex = -1;
              var propsLength = props.length;
              while (++propsIndex < propsLength) {
                var key = props[propsIndex];
                var value = object[key];
                if (value === undefined2 || eq(value, objectProto[key]) && !hasOwnProperty3.call(object, key)) {
                  object[key] = source[key];
                }
              }
            }
            return object;
          });
          var defaultsDeep = baseRest(function(args) {
            args.push(undefined2, customDefaultsMerge);
            return apply(mergeWith, undefined2, args);
          });
          function findKey2(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
          }
          function findLastKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
          }
          function forIn(object, iteratee2) {
            return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
          }
          function forInRight(object, iteratee2) {
            return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
          }
          function forOwn(object, iteratee2) {
            return object && baseForOwn(object, getIteratee(iteratee2, 3));
          }
          function forOwnRight(object, iteratee2) {
            return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
          }
          function functions(object) {
            return object == null ? [] : baseFunctions(object, keys(object));
          }
          function functionsIn(object) {
            return object == null ? [] : baseFunctions(object, keysIn(object));
          }
          function get(object, path, defaultValue) {
            var result2 = object == null ? undefined2 : baseGet(object, path);
            return result2 === undefined2 ? defaultValue : result2;
          }
          function has(object, path) {
            return object != null && hasPath(object, path, baseHas);
          }
          function hasIn(object, path) {
            return object != null && hasPath(object, path, baseHasIn);
          }
          var invert = createInverter(function(result2, value, key) {
            if (value != null && typeof value.toString != "function") {
              value = nativeObjectToString.call(value);
            }
            result2[value] = key;
          }, constant(identity));
          var invertBy = createInverter(function(result2, value, key) {
            if (value != null && typeof value.toString != "function") {
              value = nativeObjectToString.call(value);
            }
            if (hasOwnProperty3.call(result2, value)) {
              result2[value].push(key);
            } else {
              result2[value] = [key];
            }
          }, getIteratee);
          var invoke = baseRest(baseInvoke);
          function keys(object) {
            return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
          }
          function keysIn(object) {
            return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
          }
          function mapKeys(object, iteratee2) {
            var result2 = {};
            iteratee2 = getIteratee(iteratee2, 3);
            baseForOwn(object, function(value, key, object2) {
              baseAssignValue(result2, iteratee2(value, key, object2), value);
            });
            return result2;
          }
          function mapValues(object, iteratee2) {
            var result2 = {};
            iteratee2 = getIteratee(iteratee2, 3);
            baseForOwn(object, function(value, key, object2) {
              baseAssignValue(result2, key, iteratee2(value, key, object2));
            });
            return result2;
          }
          var merge3 = createAssigner(function(object, source, srcIndex) {
            baseMerge(object, source, srcIndex);
          });
          var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
            baseMerge(object, source, srcIndex, customizer);
          });
          var omit = flatRest(function(object, paths) {
            var result2 = {};
            if (object == null) {
              return result2;
            }
            var isDeep = false;
            paths = arrayMap(paths, function(path) {
              path = castPath(path, object);
              isDeep || (isDeep = path.length > 1);
              return path;
            });
            copyObject(object, getAllKeysIn(object), result2);
            if (isDeep) {
              result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
            }
            var length2 = paths.length;
            while (length2--) {
              baseUnset(result2, paths[length2]);
            }
            return result2;
          });
          function omitBy(object, predicate) {
            return pickBy(object, negate(getIteratee(predicate)));
          }
          var pick = flatRest(function(object, paths) {
            return object == null ? {} : basePick(object, paths);
          });
          function pickBy(object, predicate) {
            if (object == null) {
              return {};
            }
            var props = arrayMap(getAllKeysIn(object), function(prop) {
              return [prop];
            });
            predicate = getIteratee(predicate);
            return basePickBy(object, props, function(value, path) {
              return predicate(value, path[0]);
            });
          }
          function result(object, path, defaultValue) {
            path = castPath(path, object);
            var index3 = -1, length2 = path.length;
            if (!length2) {
              length2 = 1;
              object = undefined2;
            }
            while (++index3 < length2) {
              var value = object == null ? undefined2 : object[toKey(path[index3])];
              if (value === undefined2) {
                index3 = length2;
                value = defaultValue;
              }
              object = isFunction2(value) ? value.call(object) : value;
            }
            return object;
          }
          function set(object, path, value) {
            return object == null ? object : baseSet(object, path, value);
          }
          function setWith(object, path, value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return object == null ? object : baseSet(object, path, value, customizer);
          }
          var toPairs = createToPairs(keys);
          var toPairsIn = createToPairs(keysIn);
          function transform2(object, iteratee2, accumulator) {
            var isArr = isArray2(object), isArrLike = isArr || isBuffer2(object) || isTypedArray2(object);
            iteratee2 = getIteratee(iteratee2, 4);
            if (accumulator == null) {
              var Ctor = object && object.constructor;
              if (isArrLike) {
                accumulator = isArr ? new Ctor() : [];
              } else if (isObject2(object)) {
                accumulator = isFunction2(Ctor) ? baseCreate(getPrototype(object)) : {};
              } else {
                accumulator = {};
              }
            }
            (isArrLike ? arrayEach : baseForOwn)(object, function(value, index3, object2) {
              return iteratee2(accumulator, value, index3, object2);
            });
            return accumulator;
          }
          function unset(object, path) {
            return object == null ? true : baseUnset(object, path);
          }
          function update2(object, path, updater) {
            return object == null ? object : baseUpdate(object, path, castFunction(updater));
          }
          function updateWith(object, path, updater, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
          }
          function values2(object) {
            return object == null ? [] : baseValues(object, keys(object));
          }
          function valuesIn(object) {
            return object == null ? [] : baseValues(object, keysIn(object));
          }
          function clamp6(number, lower, upper) {
            if (upper === undefined2) {
              upper = lower;
              lower = undefined2;
            }
            if (upper !== undefined2) {
              upper = toNumber(upper);
              upper = upper === upper ? upper : 0;
            }
            if (lower !== undefined2) {
              lower = toNumber(lower);
              lower = lower === lower ? lower : 0;
            }
            return baseClamp(toNumber(number), lower, upper);
          }
          function inRange(number, start2, end2) {
            start2 = toFinite(start2);
            if (end2 === undefined2) {
              end2 = start2;
              start2 = 0;
            } else {
              end2 = toFinite(end2);
            }
            number = toNumber(number);
            return baseInRange(number, start2, end2);
          }
          function random(lower, upper, floating) {
            if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
              upper = floating = undefined2;
            }
            if (floating === undefined2) {
              if (typeof upper == "boolean") {
                floating = upper;
                upper = undefined2;
              } else if (typeof lower == "boolean") {
                floating = lower;
                lower = undefined2;
              }
            }
            if (lower === undefined2 && upper === undefined2) {
              lower = 0;
              upper = 1;
            } else {
              lower = toFinite(lower);
              if (upper === undefined2) {
                upper = lower;
                lower = 0;
              } else {
                upper = toFinite(upper);
              }
            }
            if (lower > upper) {
              var temp = lower;
              lower = upper;
              upper = temp;
            }
            if (floating || lower % 1 || upper % 1) {
              var rand = nativeRandom();
              return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
            }
            return baseRandom(lower, upper);
          }
          var camelCase2 = createCompounder(function(result2, word, index3) {
            word = word.toLowerCase();
            return result2 + (index3 ? capitalize4(word) : word);
          });
          function capitalize4(string) {
            return upperFirst(toString3(string).toLowerCase());
          }
          function deburr(string) {
            string = toString3(string);
            return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
          }
          function endsWith2(string, target, position2) {
            string = toString3(string);
            target = baseToString(target);
            var length2 = string.length;
            position2 = position2 === undefined2 ? length2 : baseClamp(toInteger(position2), 0, length2);
            var end2 = position2;
            position2 -= target.length;
            return position2 >= 0 && string.slice(position2, end2) == target;
          }
          function escape2(string) {
            string = toString3(string);
            return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
          }
          function escapeRegExp(string) {
            string = toString3(string);
            return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
          }
          var kebabCase = createCompounder(function(result2, word, index3) {
            return result2 + (index3 ? "-" : "") + word.toLowerCase();
          });
          var lowerCase = createCompounder(function(result2, word, index3) {
            return result2 + (index3 ? " " : "") + word.toLowerCase();
          });
          var lowerFirst = createCaseFirst("toLowerCase");
          function pad(string, length2, chars) {
            string = toString3(string);
            length2 = toInteger(length2);
            var strLength = length2 ? stringSize(string) : 0;
            if (!length2 || strLength >= length2) {
              return string;
            }
            var mid = (length2 - strLength) / 2;
            return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
          }
          function padEnd(string, length2, chars) {
            string = toString3(string);
            length2 = toInteger(length2);
            var strLength = length2 ? stringSize(string) : 0;
            return length2 && strLength < length2 ? string + createPadding(length2 - strLength, chars) : string;
          }
          function padStart(string, length2, chars) {
            string = toString3(string);
            length2 = toInteger(length2);
            var strLength = length2 ? stringSize(string) : 0;
            return length2 && strLength < length2 ? createPadding(length2 - strLength, chars) + string : string;
          }
          function parseInt2(string, radix, guard) {
            if (guard || radix == null) {
              radix = 0;
            } else if (radix) {
              radix = +radix;
            }
            return nativeParseInt(toString3(string).replace(reTrimStart, ""), radix || 0);
          }
          function repeat(string, n, guard) {
            if (guard ? isIterateeCall(string, n, guard) : n === undefined2) {
              n = 1;
            } else {
              n = toInteger(n);
            }
            return baseRepeat(toString3(string), n);
          }
          function replace2() {
            var args = arguments, string = toString3(args[0]);
            return args.length < 3 ? string : string.replace(args[1], args[2]);
          }
          var snakeCase = createCompounder(function(result2, word, index3) {
            return result2 + (index3 ? "_" : "") + word.toLowerCase();
          });
          function split(string, separator, limit) {
            if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
              separator = limit = undefined2;
            }
            limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
            if (!limit) {
              return [];
            }
            string = toString3(string);
            if (string && (typeof separator == "string" || separator != null && !isRegExp2(separator))) {
              separator = baseToString(separator);
              if (!separator && hasUnicode(string)) {
                return castSlice(stringToArray(string), 0, limit);
              }
            }
            return string.split(separator, limit);
          }
          var startCase = createCompounder(function(result2, word, index3) {
            return result2 + (index3 ? " " : "") + upperFirst(word);
          });
          function startsWith(string, target, position2) {
            string = toString3(string);
            position2 = position2 == null ? 0 : baseClamp(toInteger(position2), 0, string.length);
            target = baseToString(target);
            return string.slice(position2, position2 + target.length) == target;
          }
          function template(string, options, guard) {
            var settings = lodash.templateSettings;
            if (guard && isIterateeCall(string, options, guard)) {
              options = undefined2;
            }
            string = toString3(string);
            options = assignInWith({}, options, settings, customDefaultsAssignIn);
            var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
            var isEscaping, isEvaluating, index3 = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
            var reDelimiters = RegExp2(
              (options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
              "g"
            );
            var sourceURL = "//# sourceURL=" + (hasOwnProperty3.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
            string.replace(reDelimiters, function(match2, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset3) {
              interpolateValue || (interpolateValue = esTemplateValue);
              source += string.slice(index3, offset3).replace(reUnescapedString, escapeStringChar);
              if (escapeValue) {
                isEscaping = true;
                source += "' +\n__e(" + escapeValue + ") +\n'";
              }
              if (evaluateValue) {
                isEvaluating = true;
                source += "';\n" + evaluateValue + ";\n__p += '";
              }
              if (interpolateValue) {
                source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
              }
              index3 = offset3 + match2.length;
              return match2;
            });
            source += "';\n";
            var variable = hasOwnProperty3.call(options, "variable") && options.variable;
            if (!variable) {
              source = "with (obj) {\n" + source + "\n}\n";
            } else if (reForbiddenIdentifierChars.test(variable)) {
              throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
            }
            source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
            source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
            var result2 = attempt(function() {
              return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
            });
            result2.source = source;
            if (isError(result2)) {
              throw result2;
            }
            return result2;
          }
          function toLower(value) {
            return toString3(value).toLowerCase();
          }
          function toUpper2(value) {
            return toString3(value).toUpperCase();
          }
          function trim3(string, chars, guard) {
            string = toString3(string);
            if (string && (guard || chars === undefined2)) {
              return baseTrim(string);
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start2 = charsStartIndex(strSymbols, chrSymbols), end2 = charsEndIndex(strSymbols, chrSymbols) + 1;
            return castSlice(strSymbols, start2, end2).join("");
          }
          function trimEnd(string, chars, guard) {
            string = toString3(string);
            if (string && (guard || chars === undefined2)) {
              return string.slice(0, trimmedEndIndex(string) + 1);
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), end2 = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
            return castSlice(strSymbols, 0, end2).join("");
          }
          function trimStart(string, chars, guard) {
            string = toString3(string);
            if (string && (guard || chars === undefined2)) {
              return string.replace(reTrimStart, "");
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), start2 = charsStartIndex(strSymbols, stringToArray(chars));
            return castSlice(strSymbols, start2).join("");
          }
          function truncate(string, options) {
            var length2 = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
            if (isObject2(options)) {
              var separator = "separator" in options ? options.separator : separator;
              length2 = "length" in options ? toInteger(options.length) : length2;
              omission = "omission" in options ? baseToString(options.omission) : omission;
            }
            string = toString3(string);
            var strLength = string.length;
            if (hasUnicode(string)) {
              var strSymbols = stringToArray(string);
              strLength = strSymbols.length;
            }
            if (length2 >= strLength) {
              return string;
            }
            var end2 = length2 - stringSize(omission);
            if (end2 < 1) {
              return omission;
            }
            var result2 = strSymbols ? castSlice(strSymbols, 0, end2).join("") : string.slice(0, end2);
            if (separator === undefined2) {
              return result2 + omission;
            }
            if (strSymbols) {
              end2 += result2.length - end2;
            }
            if (isRegExp2(separator)) {
              if (string.slice(end2).search(separator)) {
                var match2, substring = result2;
                if (!separator.global) {
                  separator = RegExp2(separator.source, toString3(reFlags.exec(separator)) + "g");
                }
                separator.lastIndex = 0;
                while (match2 = separator.exec(substring)) {
                  var newEnd = match2.index;
                }
                result2 = result2.slice(0, newEnd === undefined2 ? end2 : newEnd);
              }
            } else if (string.indexOf(baseToString(separator), end2) != end2) {
              var index3 = result2.lastIndexOf(separator);
              if (index3 > -1) {
                result2 = result2.slice(0, index3);
              }
            }
            return result2 + omission;
          }
          function unescape2(string) {
            string = toString3(string);
            return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
          }
          var upperCase = createCompounder(function(result2, word, index3) {
            return result2 + (index3 ? " " : "") + word.toUpperCase();
          });
          var upperFirst = createCaseFirst("toUpperCase");
          function words(string, pattern, guard) {
            string = toString3(string);
            pattern = guard ? undefined2 : pattern;
            if (pattern === undefined2) {
              return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
            }
            return string.match(pattern) || [];
          }
          var attempt = baseRest(function(func, args) {
            try {
              return apply(func, undefined2, args);
            } catch (e) {
              return isError(e) ? e : new Error2(e);
            }
          });
          var bindAll = flatRest(function(object, methodNames) {
            arrayEach(methodNames, function(key) {
              key = toKey(key);
              baseAssignValue(object, key, bind2(object[key], object));
            });
            return object;
          });
          function cond(pairs) {
            var length2 = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
            pairs = !length2 ? [] : arrayMap(pairs, function(pair) {
              if (typeof pair[1] != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              return [toIteratee(pair[0]), pair[1]];
            });
            return baseRest(function(args) {
              var index3 = -1;
              while (++index3 < length2) {
                var pair = pairs[index3];
                if (apply(pair[0], this, args)) {
                  return apply(pair[1], this, args);
                }
              }
            });
          }
          function conforms(source) {
            return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
          }
          function constant(value) {
            return function() {
              return value;
            };
          }
          function defaultTo(value, defaultValue) {
            return value == null || value !== value ? defaultValue : value;
          }
          var flow = createFlow();
          var flowRight = createFlow(true);
          function identity(value) {
            return value;
          }
          function iteratee(func) {
            return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
          }
          function matches(source) {
            return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
          }
          function matchesProperty(path, srcValue) {
            return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
          }
          var method = baseRest(function(path, args) {
            return function(object) {
              return baseInvoke(object, path, args);
            };
          });
          var methodOf = baseRest(function(object, args) {
            return function(path) {
              return baseInvoke(object, path, args);
            };
          });
          function mixin(object, source, options) {
            var props = keys(source), methodNames = baseFunctions(source, props);
            if (options == null && !(isObject2(source) && (methodNames.length || !props.length))) {
              options = source;
              source = object;
              object = this;
              methodNames = baseFunctions(source, keys(source));
            }
            var chain2 = !(isObject2(options) && "chain" in options) || !!options.chain, isFunc = isFunction2(object);
            arrayEach(methodNames, function(methodName) {
              var func = source[methodName];
              object[methodName] = func;
              if (isFunc) {
                object.prototype[methodName] = function() {
                  var chainAll = this.__chain__;
                  if (chain2 || chainAll) {
                    var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                    actions.push({ "func": func, "args": arguments, "thisArg": object });
                    result2.__chain__ = chainAll;
                    return result2;
                  }
                  return func.apply(object, arrayPush([this.value()], arguments));
                };
              }
            });
            return object;
          }
          function noConflict() {
            if (root._ === this) {
              root._ = oldDash;
            }
            return this;
          }
          function noop4() {
          }
          function nthArg(n) {
            n = toInteger(n);
            return baseRest(function(args) {
              return baseNth(args, n);
            });
          }
          var over = createOver(arrayMap);
          var overEvery = createOver(arrayEvery);
          var overSome = createOver(arraySome);
          function property(path) {
            return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
          }
          function propertyOf(object) {
            return function(path) {
              return object == null ? undefined2 : baseGet(object, path);
            };
          }
          var range = createRange();
          var rangeRight = createRange(true);
          function stubArray() {
            return [];
          }
          function stubFalse() {
            return false;
          }
          function stubObject() {
            return {};
          }
          function stubString() {
            return "";
          }
          function stubTrue() {
            return true;
          }
          function times(n, iteratee2) {
            n = toInteger(n);
            if (n < 1 || n > MAX_SAFE_INTEGER) {
              return [];
            }
            var index3 = MAX_ARRAY_LENGTH, length2 = nativeMin(n, MAX_ARRAY_LENGTH);
            iteratee2 = getIteratee(iteratee2);
            n -= MAX_ARRAY_LENGTH;
            var result2 = baseTimes(length2, iteratee2);
            while (++index3 < n) {
              iteratee2(index3);
            }
            return result2;
          }
          function toPath(value) {
            if (isArray2(value)) {
              return arrayMap(value, toKey);
            }
            return isSymbol(value) ? [value] : copyArray(stringToPath(toString3(value)));
          }
          function uniqueId(prefix3) {
            var id = ++idCounter;
            return toString3(prefix3) + id;
          }
          var add = createMathOperation(function(augend, addend) {
            return augend + addend;
          }, 0);
          var ceil = createRound("ceil");
          var divide = createMathOperation(function(dividend, divisor) {
            return dividend / divisor;
          }, 1);
          var floor2 = createRound("floor");
          function max3(array) {
            return array && array.length ? baseExtremum(array, identity, baseGt) : undefined2;
          }
          function maxBy(array, iteratee2) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
          }
          function mean(array) {
            return baseMean(array, identity);
          }
          function meanBy(array, iteratee2) {
            return baseMean(array, getIteratee(iteratee2, 2));
          }
          function min3(array) {
            return array && array.length ? baseExtremum(array, identity, baseLt) : undefined2;
          }
          function minBy(array, iteratee2) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
          }
          var multiply = createMathOperation(function(multiplier, multiplicand) {
            return multiplier * multiplicand;
          }, 1);
          var round5 = createRound("round");
          var subtract = createMathOperation(function(minuend, subtrahend) {
            return minuend - subtrahend;
          }, 0);
          function sum(array) {
            return array && array.length ? baseSum(array, identity) : 0;
          }
          function sumBy(array, iteratee2) {
            return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
          }
          lodash.after = after;
          lodash.ary = ary;
          lodash.assign = assign2;
          lodash.assignIn = assignIn;
          lodash.assignInWith = assignInWith;
          lodash.assignWith = assignWith;
          lodash.at = at2;
          lodash.before = before;
          lodash.bind = bind2;
          lodash.bindAll = bindAll;
          lodash.bindKey = bindKey;
          lodash.castArray = castArray;
          lodash.chain = chain;
          lodash.chunk = chunk;
          lodash.compact = compact;
          lodash.concat = concat;
          lodash.cond = cond;
          lodash.conforms = conforms;
          lodash.constant = constant;
          lodash.countBy = countBy;
          lodash.create = create;
          lodash.curry = curry;
          lodash.curryRight = curryRight;
          lodash.debounce = debounce4;
          lodash.defaults = defaults2;
          lodash.defaultsDeep = defaultsDeep;
          lodash.defer = defer;
          lodash.delay = delay;
          lodash.difference = difference;
          lodash.differenceBy = differenceBy;
          lodash.differenceWith = differenceWith;
          lodash.drop = drop;
          lodash.dropRight = dropRight;
          lodash.dropRightWhile = dropRightWhile;
          lodash.dropWhile = dropWhile;
          lodash.fill = fill;
          lodash.filter = filter2;
          lodash.flatMap = flatMap;
          lodash.flatMapDeep = flatMapDeep;
          lodash.flatMapDepth = flatMapDepth;
          lodash.flatten = flatten;
          lodash.flattenDeep = flattenDeep;
          lodash.flattenDepth = flattenDepth;
          lodash.flip = flip3;
          lodash.flow = flow;
          lodash.flowRight = flowRight;
          lodash.fromPairs = fromPairs;
          lodash.functions = functions;
          lodash.functionsIn = functionsIn;
          lodash.groupBy = groupBy;
          lodash.initial = initial;
          lodash.intersection = intersection;
          lodash.intersectionBy = intersectionBy;
          lodash.intersectionWith = intersectionWith;
          lodash.invert = invert;
          lodash.invertBy = invertBy;
          lodash.invokeMap = invokeMap;
          lodash.iteratee = iteratee;
          lodash.keyBy = keyBy;
          lodash.keys = keys;
          lodash.keysIn = keysIn;
          lodash.map = map;
          lodash.mapKeys = mapKeys;
          lodash.mapValues = mapValues;
          lodash.matches = matches;
          lodash.matchesProperty = matchesProperty;
          lodash.memoize = memoize4;
          lodash.merge = merge3;
          lodash.mergeWith = mergeWith;
          lodash.method = method;
          lodash.methodOf = methodOf;
          lodash.mixin = mixin;
          lodash.negate = negate;
          lodash.nthArg = nthArg;
          lodash.omit = omit;
          lodash.omitBy = omitBy;
          lodash.once = once;
          lodash.orderBy = orderBy;
          lodash.over = over;
          lodash.overArgs = overArgs;
          lodash.overEvery = overEvery;
          lodash.overSome = overSome;
          lodash.partial = partial;
          lodash.partialRight = partialRight;
          lodash.partition = partition;
          lodash.pick = pick;
          lodash.pickBy = pickBy;
          lodash.property = property;
          lodash.propertyOf = propertyOf;
          lodash.pull = pull;
          lodash.pullAll = pullAll;
          lodash.pullAllBy = pullAllBy;
          lodash.pullAllWith = pullAllWith;
          lodash.pullAt = pullAt;
          lodash.range = range;
          lodash.rangeRight = rangeRight;
          lodash.rearg = rearg;
          lodash.reject = reject;
          lodash.remove = remove;
          lodash.rest = rest;
          lodash.reverse = reverse;
          lodash.sampleSize = sampleSize;
          lodash.set = set;
          lodash.setWith = setWith;
          lodash.shuffle = shuffle;
          lodash.slice = slice2;
          lodash.sortBy = sortBy;
          lodash.sortedUniq = sortedUniq;
          lodash.sortedUniqBy = sortedUniqBy;
          lodash.split = split;
          lodash.spread = spread3;
          lodash.tail = tail;
          lodash.take = take;
          lodash.takeRight = takeRight;
          lodash.takeRightWhile = takeRightWhile;
          lodash.takeWhile = takeWhile;
          lodash.tap = tap;
          lodash.throttle = throttle;
          lodash.thru = thru;
          lodash.toArray = toArray2;
          lodash.toPairs = toPairs;
          lodash.toPairsIn = toPairsIn;
          lodash.toPath = toPath;
          lodash.toPlainObject = toPlainObject;
          lodash.transform = transform2;
          lodash.unary = unary;
          lodash.union = union;
          lodash.unionBy = unionBy;
          lodash.unionWith = unionWith;
          lodash.uniq = uniq;
          lodash.uniqBy = uniqBy;
          lodash.uniqWith = uniqWith;
          lodash.unset = unset;
          lodash.unzip = unzip;
          lodash.unzipWith = unzipWith;
          lodash.update = update2;
          lodash.updateWith = updateWith;
          lodash.values = values2;
          lodash.valuesIn = valuesIn;
          lodash.without = without;
          lodash.words = words;
          lodash.wrap = wrap;
          lodash.xor = xor;
          lodash.xorBy = xorBy;
          lodash.xorWith = xorWith;
          lodash.zip = zip;
          lodash.zipObject = zipObject;
          lodash.zipObjectDeep = zipObjectDeep;
          lodash.zipWith = zipWith;
          lodash.entries = toPairs;
          lodash.entriesIn = toPairsIn;
          lodash.extend = assignIn;
          lodash.extendWith = assignInWith;
          mixin(lodash, lodash);
          lodash.add = add;
          lodash.attempt = attempt;
          lodash.camelCase = camelCase2;
          lodash.capitalize = capitalize4;
          lodash.ceil = ceil;
          lodash.clamp = clamp6;
          lodash.clone = clone;
          lodash.cloneDeep = cloneDeep;
          lodash.cloneDeepWith = cloneDeepWith;
          lodash.cloneWith = cloneWith;
          lodash.conformsTo = conformsTo;
          lodash.deburr = deburr;
          lodash.defaultTo = defaultTo;
          lodash.divide = divide;
          lodash.endsWith = endsWith2;
          lodash.eq = eq;
          lodash.escape = escape2;
          lodash.escapeRegExp = escapeRegExp;
          lodash.every = every;
          lodash.find = find;
          lodash.findIndex = findIndex2;
          lodash.findKey = findKey2;
          lodash.findLast = findLast;
          lodash.findLastIndex = findLastIndex;
          lodash.findLastKey = findLastKey;
          lodash.floor = floor2;
          lodash.forEach = forEach2;
          lodash.forEachRight = forEachRight;
          lodash.forIn = forIn;
          lodash.forInRight = forInRight;
          lodash.forOwn = forOwn;
          lodash.forOwnRight = forOwnRight;
          lodash.get = get;
          lodash.gt = gt;
          lodash.gte = gte;
          lodash.has = has;
          lodash.hasIn = hasIn;
          lodash.head = head;
          lodash.identity = identity;
          lodash.includes = includes;
          lodash.indexOf = indexOf;
          lodash.inRange = inRange;
          lodash.invoke = invoke;
          lodash.isArguments = isArguments;
          lodash.isArray = isArray2;
          lodash.isArrayBuffer = isArrayBuffer2;
          lodash.isArrayLike = isArrayLike;
          lodash.isArrayLikeObject = isArrayLikeObject;
          lodash.isBoolean = isBoolean2;
          lodash.isBuffer = isBuffer2;
          lodash.isDate = isDate2;
          lodash.isElement = isElement3;
          lodash.isEmpty = isEmpty5;
          lodash.isEqual = isEqual;
          lodash.isEqualWith = isEqualWith;
          lodash.isError = isError;
          lodash.isFinite = isFinite2;
          lodash.isFunction = isFunction2;
          lodash.isInteger = isInteger;
          lodash.isLength = isLength;
          lodash.isMap = isMap;
          lodash.isMatch = isMatch;
          lodash.isMatchWith = isMatchWith;
          lodash.isNaN = isNaN2;
          lodash.isNative = isNative;
          lodash.isNil = isNil;
          lodash.isNull = isNull;
          lodash.isNumber = isNumber3;
          lodash.isObject = isObject2;
          lodash.isObjectLike = isObjectLike;
          lodash.isPlainObject = isPlainObject2;
          lodash.isRegExp = isRegExp2;
          lodash.isSafeInteger = isSafeInteger;
          lodash.isSet = isSet;
          lodash.isString = isString2;
          lodash.isSymbol = isSymbol;
          lodash.isTypedArray = isTypedArray2;
          lodash.isUndefined = isUndefined2;
          lodash.isWeakMap = isWeakMap;
          lodash.isWeakSet = isWeakSet;
          lodash.join = join3;
          lodash.kebabCase = kebabCase;
          lodash.last = last;
          lodash.lastIndexOf = lastIndexOf;
          lodash.lowerCase = lowerCase;
          lodash.lowerFirst = lowerFirst;
          lodash.lt = lt;
          lodash.lte = lte;
          lodash.max = max3;
          lodash.maxBy = maxBy;
          lodash.mean = mean;
          lodash.meanBy = meanBy;
          lodash.min = min3;
          lodash.minBy = minBy;
          lodash.stubArray = stubArray;
          lodash.stubFalse = stubFalse;
          lodash.stubObject = stubObject;
          lodash.stubString = stubString;
          lodash.stubTrue = stubTrue;
          lodash.multiply = multiply;
          lodash.nth = nth;
          lodash.noConflict = noConflict;
          lodash.noop = noop4;
          lodash.now = now2;
          lodash.pad = pad;
          lodash.padEnd = padEnd;
          lodash.padStart = padStart;
          lodash.parseInt = parseInt2;
          lodash.random = random;
          lodash.reduce = reduce;
          lodash.reduceRight = reduceRight;
          lodash.repeat = repeat;
          lodash.replace = replace2;
          lodash.result = result;
          lodash.round = round5;
          lodash.runInContext = runInContext2;
          lodash.sample = sample;
          lodash.size = size2;
          lodash.snakeCase = snakeCase;
          lodash.some = some;
          lodash.sortedIndex = sortedIndex;
          lodash.sortedIndexBy = sortedIndexBy;
          lodash.sortedIndexOf = sortedIndexOf;
          lodash.sortedLastIndex = sortedLastIndex;
          lodash.sortedLastIndexBy = sortedLastIndexBy;
          lodash.sortedLastIndexOf = sortedLastIndexOf;
          lodash.startCase = startCase;
          lodash.startsWith = startsWith;
          lodash.subtract = subtract;
          lodash.sum = sum;
          lodash.sumBy = sumBy;
          lodash.template = template;
          lodash.times = times;
          lodash.toFinite = toFinite;
          lodash.toInteger = toInteger;
          lodash.toLength = toLength;
          lodash.toLower = toLower;
          lodash.toNumber = toNumber;
          lodash.toSafeInteger = toSafeInteger;
          lodash.toString = toString3;
          lodash.toUpper = toUpper2;
          lodash.trim = trim3;
          lodash.trimEnd = trimEnd;
          lodash.trimStart = trimStart;
          lodash.truncate = truncate;
          lodash.unescape = unescape2;
          lodash.uniqueId = uniqueId;
          lodash.upperCase = upperCase;
          lodash.upperFirst = upperFirst;
          lodash.each = forEach2;
          lodash.eachRight = forEachRight;
          lodash.first = head;
          mixin(lodash, function() {
            var source = {};
            baseForOwn(lodash, function(func, methodName) {
              if (!hasOwnProperty3.call(lodash.prototype, methodName)) {
                source[methodName] = func;
              }
            });
            return source;
          }(), { "chain": false });
          lodash.VERSION = VERSION3;
          arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
            lodash[methodName].placeholder = lodash;
          });
          arrayEach(["drop", "take"], function(methodName, index3) {
            LazyWrapper.prototype[methodName] = function(n) {
              n = n === undefined2 ? 1 : nativeMax(toInteger(n), 0);
              var result2 = this.__filtered__ && !index3 ? new LazyWrapper(this) : this.clone();
              if (result2.__filtered__) {
                result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
              } else {
                result2.__views__.push({
                  "size": nativeMin(n, MAX_ARRAY_LENGTH),
                  "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
                });
              }
              return result2;
            };
            LazyWrapper.prototype[methodName + "Right"] = function(n) {
              return this.reverse()[methodName](n).reverse();
            };
          });
          arrayEach(["filter", "map", "takeWhile"], function(methodName, index3) {
            var type = index3 + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
            LazyWrapper.prototype[methodName] = function(iteratee2) {
              var result2 = this.clone();
              result2.__iteratees__.push({
                "iteratee": getIteratee(iteratee2, 3),
                "type": type
              });
              result2.__filtered__ = result2.__filtered__ || isFilter;
              return result2;
            };
          });
          arrayEach(["head", "last"], function(methodName, index3) {
            var takeName = "take" + (index3 ? "Right" : "");
            LazyWrapper.prototype[methodName] = function() {
              return this[takeName](1).value()[0];
            };
          });
          arrayEach(["initial", "tail"], function(methodName, index3) {
            var dropName = "drop" + (index3 ? "" : "Right");
            LazyWrapper.prototype[methodName] = function() {
              return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
            };
          });
          LazyWrapper.prototype.compact = function() {
            return this.filter(identity);
          };
          LazyWrapper.prototype.find = function(predicate) {
            return this.filter(predicate).head();
          };
          LazyWrapper.prototype.findLast = function(predicate) {
            return this.reverse().find(predicate);
          };
          LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
            if (typeof path == "function") {
              return new LazyWrapper(this);
            }
            return this.map(function(value) {
              return baseInvoke(value, path, args);
            });
          });
          LazyWrapper.prototype.reject = function(predicate) {
            return this.filter(negate(getIteratee(predicate)));
          };
          LazyWrapper.prototype.slice = function(start2, end2) {
            start2 = toInteger(start2);
            var result2 = this;
            if (result2.__filtered__ && (start2 > 0 || end2 < 0)) {
              return new LazyWrapper(result2);
            }
            if (start2 < 0) {
              result2 = result2.takeRight(-start2);
            } else if (start2) {
              result2 = result2.drop(start2);
            }
            if (end2 !== undefined2) {
              end2 = toInteger(end2);
              result2 = end2 < 0 ? result2.dropRight(-end2) : result2.take(end2 - start2);
            }
            return result2;
          };
          LazyWrapper.prototype.takeRightWhile = function(predicate) {
            return this.reverse().takeWhile(predicate).reverse();
          };
          LazyWrapper.prototype.toArray = function() {
            return this.take(MAX_ARRAY_LENGTH);
          };
          baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
            if (!lodashFunc) {
              return;
            }
            lodash.prototype[methodName] = function() {
              var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray2(value);
              var interceptor = function(value2) {
                var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
                return isTaker && chainAll ? result3[0] : result3;
              };
              if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
                isLazy = useLazy = false;
              }
              var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
              if (!retUnwrapped && useLazy) {
                value = onlyLazy ? value : new LazyWrapper(this);
                var result2 = func.apply(value, args);
                result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
                return new LodashWrapper(result2, chainAll);
              }
              if (isUnwrapped && onlyLazy) {
                return func.apply(this, args);
              }
              result2 = this.thru(interceptor);
              return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
            };
          });
          arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
            var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
            lodash.prototype[methodName] = function() {
              var args = arguments;
              if (retUnwrapped && !this.__chain__) {
                var value = this.value();
                return func.apply(isArray2(value) ? value : [], args);
              }
              return this[chainName](function(value2) {
                return func.apply(isArray2(value2) ? value2 : [], args);
              });
            };
          });
          baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var lodashFunc = lodash[methodName];
            if (lodashFunc) {
              var key = lodashFunc.name + "";
              if (!hasOwnProperty3.call(realNames, key)) {
                realNames[key] = [];
              }
              realNames[key].push({ "name": methodName, "func": lodashFunc });
            }
          });
          realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
            "name": "wrapper",
            "func": undefined2
          }];
          LazyWrapper.prototype.clone = lazyClone;
          LazyWrapper.prototype.reverse = lazyReverse;
          LazyWrapper.prototype.value = lazyValue;
          lodash.prototype.at = wrapperAt;
          lodash.prototype.chain = wrapperChain;
          lodash.prototype.commit = wrapperCommit;
          lodash.prototype.next = wrapperNext;
          lodash.prototype.plant = wrapperPlant;
          lodash.prototype.reverse = wrapperReverse;
          lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
          lodash.prototype.first = lodash.prototype.head;
          if (symIterator) {
            lodash.prototype[symIterator] = wrapperToIterator;
          }
          return lodash;
        };
        var _5 = runInContext();
        if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
          root._ = _5;
          define(function() {
            return _5;
          });
        } else if (freeModule) {
          (freeModule.exports = _5)._ = _5;
          freeExports._ = _5;
        } else {
          root._ = _5;
        }
      }).call(exports);
    }
  });

  // node_modules/@mui/icons-material/Send.js
  var require_Send = __commonJS({
    "node_modules/@mui/icons-material/Send.js"(exports) {
      "use strict";
      "use client";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports, "__esModule", {
        value: true
      });
      exports.default = void 0;
      var _createSvgIcon = _interopRequireDefault(require_createSvgIcon2());
      var _jsxRuntime = require_jsx_runtime();
      var _default = (0, _createSvgIcon.default)(/* @__PURE__ */ (0, _jsxRuntime.jsx)("path", {
        d: "M2.01 21 23 12 2.01 3 2 10l15 2-15 2z"
      }), "Send");
      exports.default = _default;
    }
  });

  // node_modules/@mui/styles/index.js
  var import_utils5 = __toESM(require_utils());

  // node_modules/@mui/styles/createGenerateClassName/createGenerateClassName.js
  var import_ThemeProvider = __toESM(require_ThemeProvider2());
  var stateClasses = ["checked", "disabled", "error", "focused", "focusVisible", "required", "expanded", "selected"];
  function createGenerateClassName(options = {}) {
    const {
      disableGlobal = false,
      productionPrefix = "jss",
      seed = ""
    } = options;
    const seedPrefix = seed === "" ? "" : `${seed}-`;
    let ruleCounter = 0;
    const getNextCounterId = () => {
      ruleCounter += 1;
      if (true) {
        if (ruleCounter >= 1e10) {
          console.warn(["MUI: You might have a memory leak.", "The ruleCounter is not supposed to grow that much."].join(""));
        }
      }
      return ruleCounter;
    };
    return (rule, styleSheet) => {
      const name = styleSheet.options.name;
      if (name && name.indexOf("Mui") === 0 && !styleSheet.options.link && !disableGlobal) {
        if (stateClasses.indexOf(rule.key) !== -1) {
          return `Mui-${rule.key}`;
        }
        const prefix3 = `${seedPrefix}${name}-${rule.key}`;
        if (!styleSheet.options.theme[import_ThemeProvider.unstable_nested] || seed !== "") {
          return prefix3;
        }
        return `${prefix3}-${getNextCounterId()}`;
      }
      if (false) {
        return `${seedPrefix}${productionPrefix}${getNextCounterId()}`;
      }
      const suffix = `${rule.key}-${getNextCounterId()}`;
      if (styleSheet.options.classNamePrefix) {
        return `${seedPrefix}${styleSheet.options.classNamePrefix}-${suffix}`;
      }
      return `${seedPrefix}${suffix}`;
    };
  }

  // node_modules/tiny-warning/dist/tiny-warning.esm.js
  var isProduction = false;
  function warning(condition, message) {
    if (!isProduction) {
      if (condition) {
        return;
      }
      var text = "Warning: " + message;
      if (typeof console !== "undefined") {
        console.warn(text);
      }
      try {
        throw Error(text);
      } catch (x) {
      }
    }
  }
  var tiny_warning_esm_default = warning;

  // node_modules/jss/dist/jss.esm.js
  init_extends();

  // node_modules/is-in-browser/dist/module.js
  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
  } : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };
  var isBrowser = (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" && (typeof document === "undefined" ? "undefined" : _typeof(document)) === "object" && document.nodeType === 9;
  var module_default = isBrowser;

  // node_modules/@babel/runtime/helpers/esm/typeof.js
  function _typeof2(o) {
    "@babel/helpers - typeof";
    return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
      return typeof o2;
    } : function(o2) {
      return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
    }, _typeof2(o);
  }

  // node_modules/@babel/runtime/helpers/esm/toPrimitive.js
  function _toPrimitive(input, hint) {
    if (_typeof2(input) !== "object" || input === null)
      return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== void 0) {
      var res = prim.call(input, hint || "default");
      if (_typeof2(res) !== "object")
        return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }

  // node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return _typeof2(key) === "symbol" ? key : String(key);
  }

  // node_modules/@babel/runtime/helpers/esm/createClass.js
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor)
        descriptor.writable = true;
      Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps)
      _defineProperties(Constructor.prototype, protoProps);
    if (staticProps)
      _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
      writable: false
    });
    return Constructor;
  }

  // node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
      o2.__proto__ = p2;
      return o2;
    };
    return _setPrototypeOf(o, p);
  }

  // node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
  }

  // node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
  function _assertThisInitialized(self2) {
    if (self2 === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self2;
  }

  // node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null)
      return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0)
        continue;
      target[key] = source[key];
    }
    return target;
  }

  // node_modules/jss/dist/jss.esm.js
  var plainObjectConstrurctor = {}.constructor;
  function cloneStyle(style) {
    if (style == null || typeof style !== "object")
      return style;
    if (Array.isArray(style))
      return style.map(cloneStyle);
    if (style.constructor !== plainObjectConstrurctor)
      return style;
    var newStyle = {};
    for (var name in style) {
      newStyle[name] = cloneStyle(style[name]);
    }
    return newStyle;
  }
  function createRule(name, decl, options) {
    if (name === void 0) {
      name = "unnamed";
    }
    var jss = options.jss;
    var declCopy = cloneStyle(decl);
    var rule = jss.plugins.onCreateRule(name, declCopy, options);
    if (rule)
      return rule;
    if (name[0] === "@") {
      true ? tiny_warning_esm_default(false, "[JSS] Unknown rule " + name) : void 0;
    }
    return null;
  }
  var join = function join2(value, by) {
    var result = "";
    for (var i = 0; i < value.length; i++) {
      if (value[i] === "!important")
        break;
      if (result)
        result += by;
      result += value[i];
    }
    return result;
  };
  var toCssValue = function toCssValue2(value) {
    if (!Array.isArray(value))
      return value;
    var cssValue = "";
    if (Array.isArray(value[0])) {
      for (var i = 0; i < value.length; i++) {
        if (value[i] === "!important")
          break;
        if (cssValue)
          cssValue += ", ";
        cssValue += join(value[i], " ");
      }
    } else
      cssValue = join(value, ", ");
    if (value[value.length - 1] === "!important") {
      cssValue += " !important";
    }
    return cssValue;
  };
  function getWhitespaceSymbols(options) {
    if (options && options.format === false) {
      return {
        linebreak: "",
        space: ""
      };
    }
    return {
      linebreak: "\n",
      space: " "
    };
  }
  function indentStr(str, indent) {
    var result = "";
    for (var index3 = 0; index3 < indent; index3++) {
      result += "  ";
    }
    return result + str;
  }
  function toCss(selector, style, options) {
    if (options === void 0) {
      options = {};
    }
    var result = "";
    if (!style)
      return result;
    var _options = options, _options$indent = _options.indent, indent = _options$indent === void 0 ? 0 : _options$indent;
    var fallbacks = style.fallbacks;
    if (options.format === false) {
      indent = -Infinity;
    }
    var _getWhitespaceSymbols = getWhitespaceSymbols(options), linebreak = _getWhitespaceSymbols.linebreak, space = _getWhitespaceSymbols.space;
    if (selector)
      indent++;
    if (fallbacks) {
      if (Array.isArray(fallbacks)) {
        for (var index3 = 0; index3 < fallbacks.length; index3++) {
          var fallback = fallbacks[index3];
          for (var prop in fallback) {
            var value = fallback[prop];
            if (value != null) {
              if (result)
                result += linebreak;
              result += indentStr(prop + ":" + space + toCssValue(value) + ";", indent);
            }
          }
        }
      } else {
        for (var _prop in fallbacks) {
          var _value = fallbacks[_prop];
          if (_value != null) {
            if (result)
              result += linebreak;
            result += indentStr(_prop + ":" + space + toCssValue(_value) + ";", indent);
          }
        }
      }
    }
    for (var _prop2 in style) {
      var _value2 = style[_prop2];
      if (_value2 != null && _prop2 !== "fallbacks") {
        if (result)
          result += linebreak;
        result += indentStr(_prop2 + ":" + space + toCssValue(_value2) + ";", indent);
      }
    }
    if (!result && !options.allowEmpty)
      return result;
    if (!selector)
      return result;
    indent--;
    if (result)
      result = "" + linebreak + result + linebreak;
    return indentStr("" + selector + space + "{" + result, indent) + indentStr("}", indent);
  }
  var escapeRegex = /([[\].#*$><+~=|^:(),"'`\s])/g;
  var nativeEscape = typeof CSS !== "undefined" && CSS.escape;
  var escape = function(str) {
    return nativeEscape ? nativeEscape(str) : str.replace(escapeRegex, "\\$1");
  };
  var BaseStyleRule = /* @__PURE__ */ function() {
    function BaseStyleRule2(key, style, options) {
      this.type = "style";
      this.isProcessed = false;
      var sheet = options.sheet, Renderer = options.Renderer;
      this.key = key;
      this.options = options;
      this.style = style;
      if (sheet)
        this.renderer = sheet.renderer;
      else if (Renderer)
        this.renderer = new Renderer();
    }
    var _proto = BaseStyleRule2.prototype;
    _proto.prop = function prop(name, value, options) {
      if (value === void 0)
        return this.style[name];
      var force = options ? options.force : false;
      if (!force && this.style[name] === value)
        return this;
      var newValue = value;
      if (!options || options.process !== false) {
        newValue = this.options.jss.plugins.onChangeValue(value, name, this);
      }
      var isEmpty5 = newValue == null || newValue === false;
      var isDefined = name in this.style;
      if (isEmpty5 && !isDefined && !force)
        return this;
      var remove = isEmpty5 && isDefined;
      if (remove)
        delete this.style[name];
      else
        this.style[name] = newValue;
      if (this.renderable && this.renderer) {
        if (remove)
          this.renderer.removeProperty(this.renderable, name);
        else
          this.renderer.setProperty(this.renderable, name, newValue);
        return this;
      }
      var sheet = this.options.sheet;
      if (sheet && sheet.attached) {
        true ? tiny_warning_esm_default(false, '[JSS] Rule is not linked. Missing sheet option "link: true".') : void 0;
      }
      return this;
    };
    return BaseStyleRule2;
  }();
  var StyleRule = /* @__PURE__ */ function(_BaseStyleRule) {
    _inheritsLoose(StyleRule2, _BaseStyleRule);
    function StyleRule2(key, style, options) {
      var _this;
      _this = _BaseStyleRule.call(this, key, style, options) || this;
      var selector = options.selector, scoped = options.scoped, sheet = options.sheet, generateId = options.generateId;
      if (selector) {
        _this.selectorText = selector;
      } else if (scoped !== false) {
        _this.id = generateId(_assertThisInitialized(_assertThisInitialized(_this)), sheet);
        _this.selectorText = "." + escape(_this.id);
      }
      return _this;
    }
    var _proto2 = StyleRule2.prototype;
    _proto2.applyTo = function applyTo(renderable) {
      var renderer = this.renderer;
      if (renderer) {
        var json = this.toJSON();
        for (var prop in json) {
          renderer.setProperty(renderable, prop, json[prop]);
        }
      }
      return this;
    };
    _proto2.toJSON = function toJSON2() {
      var json = {};
      for (var prop in this.style) {
        var value = this.style[prop];
        if (typeof value !== "object")
          json[prop] = value;
        else if (Array.isArray(value))
          json[prop] = toCssValue(value);
      }
      return json;
    };
    _proto2.toString = function toString3(options) {
      var sheet = this.options.sheet;
      var link = sheet ? sheet.options.link : false;
      var opts = link ? _extends({}, options, {
        allowEmpty: true
      }) : options;
      return toCss(this.selectorText, this.style, opts);
    };
    _createClass(StyleRule2, [{
      key: "selector",
      set: function set(selector) {
        if (selector === this.selectorText)
          return;
        this.selectorText = selector;
        var renderer = this.renderer, renderable = this.renderable;
        if (!renderable || !renderer)
          return;
        var hasChanged = renderer.setSelector(renderable, selector);
        if (!hasChanged) {
          renderer.replaceRule(renderable, this);
        }
      },
      get: function get() {
        return this.selectorText;
      }
    }]);
    return StyleRule2;
  }(BaseStyleRule);
  var pluginStyleRule = {
    onCreateRule: function onCreateRule(key, style, options) {
      if (key[0] === "@" || options.parent && options.parent.type === "keyframes") {
        return null;
      }
      return new StyleRule(key, style, options);
    }
  };
  var defaultToStringOptions = {
    indent: 1,
    children: true
  };
  var atRegExp = /@([\w-]+)/;
  var ConditionalRule = /* @__PURE__ */ function() {
    function ConditionalRule2(key, styles7, options) {
      this.type = "conditional";
      this.isProcessed = false;
      this.key = key;
      var atMatch = key.match(atRegExp);
      this.at = atMatch ? atMatch[1] : "unknown";
      this.query = options.name || "@" + this.at;
      this.options = options;
      this.rules = new RuleList(_extends({}, options, {
        parent: this
      }));
      for (var name in styles7) {
        this.rules.add(name, styles7[name]);
      }
      this.rules.process();
    }
    var _proto = ConditionalRule2.prototype;
    _proto.getRule = function getRule(name) {
      return this.rules.get(name);
    };
    _proto.indexOf = function indexOf(rule) {
      return this.rules.indexOf(rule);
    };
    _proto.addRule = function addRule(name, style, options) {
      var rule = this.rules.add(name, style, options);
      if (!rule)
        return null;
      this.options.jss.plugins.onProcessRule(rule);
      return rule;
    };
    _proto.replaceRule = function replaceRule(name, style, options) {
      var newRule = this.rules.replace(name, style, options);
      if (newRule)
        this.options.jss.plugins.onProcessRule(newRule);
      return newRule;
    };
    _proto.toString = function toString3(options) {
      if (options === void 0) {
        options = defaultToStringOptions;
      }
      var _getWhitespaceSymbols = getWhitespaceSymbols(options), linebreak = _getWhitespaceSymbols.linebreak;
      if (options.indent == null)
        options.indent = defaultToStringOptions.indent;
      if (options.children == null)
        options.children = defaultToStringOptions.children;
      if (options.children === false) {
        return this.query + " {}";
      }
      var children = this.rules.toString(options);
      return children ? this.query + " {" + linebreak + children + linebreak + "}" : "";
    };
    return ConditionalRule2;
  }();
  var keyRegExp = /@container|@media|@supports\s+/;
  var pluginConditionalRule = {
    onCreateRule: function onCreateRule2(key, styles7, options) {
      return keyRegExp.test(key) ? new ConditionalRule(key, styles7, options) : null;
    }
  };
  var defaultToStringOptions$1 = {
    indent: 1,
    children: true
  };
  var nameRegExp = /@keyframes\s+([\w-]+)/;
  var KeyframesRule = /* @__PURE__ */ function() {
    function KeyframesRule2(key, frames, options) {
      this.type = "keyframes";
      this.at = "@keyframes";
      this.isProcessed = false;
      var nameMatch = key.match(nameRegExp);
      if (nameMatch && nameMatch[1]) {
        this.name = nameMatch[1];
      } else {
        this.name = "noname";
        true ? tiny_warning_esm_default(false, "[JSS] Bad keyframes name " + key) : void 0;
      }
      this.key = this.type + "-" + this.name;
      this.options = options;
      var scoped = options.scoped, sheet = options.sheet, generateId = options.generateId;
      this.id = scoped === false ? this.name : escape(generateId(this, sheet));
      this.rules = new RuleList(_extends({}, options, {
        parent: this
      }));
      for (var name in frames) {
        this.rules.add(name, frames[name], _extends({}, options, {
          parent: this
        }));
      }
      this.rules.process();
    }
    var _proto = KeyframesRule2.prototype;
    _proto.toString = function toString3(options) {
      if (options === void 0) {
        options = defaultToStringOptions$1;
      }
      var _getWhitespaceSymbols = getWhitespaceSymbols(options), linebreak = _getWhitespaceSymbols.linebreak;
      if (options.indent == null)
        options.indent = defaultToStringOptions$1.indent;
      if (options.children == null)
        options.children = defaultToStringOptions$1.children;
      if (options.children === false) {
        return this.at + " " + this.id + " {}";
      }
      var children = this.rules.toString(options);
      if (children)
        children = "" + linebreak + children + linebreak;
      return this.at + " " + this.id + " {" + children + "}";
    };
    return KeyframesRule2;
  }();
  var keyRegExp$1 = /@keyframes\s+/;
  var refRegExp = /\$([\w-]+)/g;
  var findReferencedKeyframe = function findReferencedKeyframe2(val, keyframes8) {
    if (typeof val === "string") {
      return val.replace(refRegExp, function(match2, name) {
        if (name in keyframes8) {
          return keyframes8[name];
        }
        true ? tiny_warning_esm_default(false, '[JSS] Referenced keyframes rule "' + name + '" is not defined.') : void 0;
        return match2;
      });
    }
    return val;
  };
  var replaceRef = function replaceRef2(style, prop, keyframes8) {
    var value = style[prop];
    var refKeyframe = findReferencedKeyframe(value, keyframes8);
    if (refKeyframe !== value) {
      style[prop] = refKeyframe;
    }
  };
  var pluginKeyframesRule = {
    onCreateRule: function onCreateRule3(key, frames, options) {
      return typeof key === "string" && keyRegExp$1.test(key) ? new KeyframesRule(key, frames, options) : null;
    },
    // Animation name ref replacer.
    onProcessStyle: function onProcessStyle(style, rule, sheet) {
      if (rule.type !== "style" || !sheet)
        return style;
      if ("animation-name" in style)
        replaceRef(style, "animation-name", sheet.keyframes);
      if ("animation" in style)
        replaceRef(style, "animation", sheet.keyframes);
      return style;
    },
    onChangeValue: function onChangeValue(val, prop, rule) {
      var sheet = rule.options.sheet;
      if (!sheet) {
        return val;
      }
      switch (prop) {
        case "animation":
          return findReferencedKeyframe(val, sheet.keyframes);
        case "animation-name":
          return findReferencedKeyframe(val, sheet.keyframes);
        default:
          return val;
      }
    }
  };
  var KeyframeRule = /* @__PURE__ */ function(_BaseStyleRule) {
    _inheritsLoose(KeyframeRule2, _BaseStyleRule);
    function KeyframeRule2() {
      return _BaseStyleRule.apply(this, arguments) || this;
    }
    var _proto = KeyframeRule2.prototype;
    _proto.toString = function toString3(options) {
      var sheet = this.options.sheet;
      var link = sheet ? sheet.options.link : false;
      var opts = link ? _extends({}, options, {
        allowEmpty: true
      }) : options;
      return toCss(this.key, this.style, opts);
    };
    return KeyframeRule2;
  }(BaseStyleRule);
  var pluginKeyframeRule = {
    onCreateRule: function onCreateRule4(key, style, options) {
      if (options.parent && options.parent.type === "keyframes") {
        return new KeyframeRule(key, style, options);
      }
      return null;
    }
  };
  var FontFaceRule = /* @__PURE__ */ function() {
    function FontFaceRule2(key, style, options) {
      this.type = "font-face";
      this.at = "@font-face";
      this.isProcessed = false;
      this.key = key;
      this.style = style;
      this.options = options;
    }
    var _proto = FontFaceRule2.prototype;
    _proto.toString = function toString3(options) {
      var _getWhitespaceSymbols = getWhitespaceSymbols(options), linebreak = _getWhitespaceSymbols.linebreak;
      if (Array.isArray(this.style)) {
        var str = "";
        for (var index3 = 0; index3 < this.style.length; index3++) {
          str += toCss(this.at, this.style[index3]);
          if (this.style[index3 + 1])
            str += linebreak;
        }
        return str;
      }
      return toCss(this.at, this.style, options);
    };
    return FontFaceRule2;
  }();
  var keyRegExp$2 = /@font-face/;
  var pluginFontFaceRule = {
    onCreateRule: function onCreateRule5(key, style, options) {
      return keyRegExp$2.test(key) ? new FontFaceRule(key, style, options) : null;
    }
  };
  var ViewportRule = /* @__PURE__ */ function() {
    function ViewportRule2(key, style, options) {
      this.type = "viewport";
      this.at = "@viewport";
      this.isProcessed = false;
      this.key = key;
      this.style = style;
      this.options = options;
    }
    var _proto = ViewportRule2.prototype;
    _proto.toString = function toString3(options) {
      return toCss(this.key, this.style, options);
    };
    return ViewportRule2;
  }();
  var pluginViewportRule = {
    onCreateRule: function onCreateRule6(key, style, options) {
      return key === "@viewport" || key === "@-ms-viewport" ? new ViewportRule(key, style, options) : null;
    }
  };
  var SimpleRule = /* @__PURE__ */ function() {
    function SimpleRule2(key, value, options) {
      this.type = "simple";
      this.isProcessed = false;
      this.key = key;
      this.value = value;
      this.options = options;
    }
    var _proto = SimpleRule2.prototype;
    _proto.toString = function toString3(options) {
      if (Array.isArray(this.value)) {
        var str = "";
        for (var index3 = 0; index3 < this.value.length; index3++) {
          str += this.key + " " + this.value[index3] + ";";
          if (this.value[index3 + 1])
            str += "\n";
        }
        return str;
      }
      return this.key + " " + this.value + ";";
    };
    return SimpleRule2;
  }();
  var keysMap = {
    "@charset": true,
    "@import": true,
    "@namespace": true
  };
  var pluginSimpleRule = {
    onCreateRule: function onCreateRule7(key, value, options) {
      return key in keysMap ? new SimpleRule(key, value, options) : null;
    }
  };
  var plugins = [pluginStyleRule, pluginConditionalRule, pluginKeyframesRule, pluginKeyframeRule, pluginFontFaceRule, pluginViewportRule, pluginSimpleRule];
  var defaultUpdateOptions = {
    process: true
  };
  var forceUpdateOptions = {
    force: true,
    process: true
    /**
     * Contains rules objects and allows adding/removing etc.
     * Is used for e.g. by `StyleSheet` or `ConditionalRule`.
     */
  };
  var RuleList = /* @__PURE__ */ function() {
    function RuleList2(options) {
      this.map = {};
      this.raw = {};
      this.index = [];
      this.counter = 0;
      this.options = options;
      this.classes = options.classes;
      this.keyframes = options.keyframes;
    }
    var _proto = RuleList2.prototype;
    _proto.add = function add(name, decl, ruleOptions) {
      var _this$options = this.options, parent = _this$options.parent, sheet = _this$options.sheet, jss = _this$options.jss, Renderer = _this$options.Renderer, generateId = _this$options.generateId, scoped = _this$options.scoped;
      var options = _extends({
        classes: this.classes,
        parent,
        sheet,
        jss,
        Renderer,
        generateId,
        scoped,
        name,
        keyframes: this.keyframes,
        selector: void 0
      }, ruleOptions);
      var key = name;
      if (name in this.raw) {
        key = name + "-d" + this.counter++;
      }
      this.raw[key] = decl;
      if (key in this.classes) {
        options.selector = "." + escape(this.classes[key]);
      }
      var rule = createRule(key, decl, options);
      if (!rule)
        return null;
      this.register(rule);
      var index3 = options.index === void 0 ? this.index.length : options.index;
      this.index.splice(index3, 0, rule);
      return rule;
    };
    _proto.replace = function replace2(name, decl, ruleOptions) {
      var oldRule = this.get(name);
      var oldIndex = this.index.indexOf(oldRule);
      if (oldRule) {
        this.remove(oldRule);
      }
      var options = ruleOptions;
      if (oldIndex !== -1)
        options = _extends({}, ruleOptions, {
          index: oldIndex
        });
      return this.add(name, decl, options);
    };
    _proto.get = function get(nameOrSelector) {
      return this.map[nameOrSelector];
    };
    _proto.remove = function remove(rule) {
      this.unregister(rule);
      delete this.raw[rule.key];
      this.index.splice(this.index.indexOf(rule), 1);
    };
    _proto.indexOf = function indexOf(rule) {
      return this.index.indexOf(rule);
    };
    _proto.process = function process2() {
      var plugins3 = this.options.jss.plugins;
      this.index.slice(0).forEach(plugins3.onProcessRule, plugins3);
    };
    _proto.register = function register(rule) {
      this.map[rule.key] = rule;
      if (rule instanceof StyleRule) {
        this.map[rule.selector] = rule;
        if (rule.id)
          this.classes[rule.key] = rule.id;
      } else if (rule instanceof KeyframesRule && this.keyframes) {
        this.keyframes[rule.name] = rule.id;
      }
    };
    _proto.unregister = function unregister(rule) {
      delete this.map[rule.key];
      if (rule instanceof StyleRule) {
        delete this.map[rule.selector];
        delete this.classes[rule.key];
      } else if (rule instanceof KeyframesRule) {
        delete this.keyframes[rule.name];
      }
    };
    _proto.update = function update2() {
      var name;
      var data;
      var options;
      if (typeof (arguments.length <= 0 ? void 0 : arguments[0]) === "string") {
        name = arguments.length <= 0 ? void 0 : arguments[0];
        data = arguments.length <= 1 ? void 0 : arguments[1];
        options = arguments.length <= 2 ? void 0 : arguments[2];
      } else {
        data = arguments.length <= 0 ? void 0 : arguments[0];
        options = arguments.length <= 1 ? void 0 : arguments[1];
        name = null;
      }
      if (name) {
        this.updateOne(this.get(name), data, options);
      } else {
        for (var index3 = 0; index3 < this.index.length; index3++) {
          this.updateOne(this.index[index3], data, options);
        }
      }
    };
    _proto.updateOne = function updateOne(rule, data, options) {
      if (options === void 0) {
        options = defaultUpdateOptions;
      }
      var _this$options2 = this.options, plugins3 = _this$options2.jss.plugins, sheet = _this$options2.sheet;
      if (rule.rules instanceof RuleList2) {
        rule.rules.update(data, options);
        return;
      }
      var style = rule.style;
      plugins3.onUpdate(data, rule, sheet, options);
      if (options.process && style && style !== rule.style) {
        plugins3.onProcessStyle(rule.style, rule, sheet);
        for (var prop in rule.style) {
          var nextValue = rule.style[prop];
          var prevValue = style[prop];
          if (nextValue !== prevValue) {
            rule.prop(prop, nextValue, forceUpdateOptions);
          }
        }
        for (var _prop in style) {
          var _nextValue = rule.style[_prop];
          var _prevValue = style[_prop];
          if (_nextValue == null && _nextValue !== _prevValue) {
            rule.prop(_prop, null, forceUpdateOptions);
          }
        }
      }
    };
    _proto.toString = function toString3(options) {
      var str = "";
      var sheet = this.options.sheet;
      var link = sheet ? sheet.options.link : false;
      var _getWhitespaceSymbols = getWhitespaceSymbols(options), linebreak = _getWhitespaceSymbols.linebreak;
      for (var index3 = 0; index3 < this.index.length; index3++) {
        var rule = this.index[index3];
        var css7 = rule.toString(options);
        if (!css7 && !link)
          continue;
        if (str)
          str += linebreak;
        str += css7;
      }
      return str;
    };
    return RuleList2;
  }();
  var StyleSheet = /* @__PURE__ */ function() {
    function StyleSheet3(styles7, options) {
      this.attached = false;
      this.deployed = false;
      this.classes = {};
      this.keyframes = {};
      this.options = _extends({}, options, {
        sheet: this,
        parent: this,
        classes: this.classes,
        keyframes: this.keyframes
      });
      if (options.Renderer) {
        this.renderer = new options.Renderer(this);
      }
      this.rules = new RuleList(this.options);
      for (var name in styles7) {
        this.rules.add(name, styles7[name]);
      }
      this.rules.process();
    }
    var _proto = StyleSheet3.prototype;
    _proto.attach = function attach2() {
      if (this.attached)
        return this;
      if (this.renderer)
        this.renderer.attach();
      this.attached = true;
      if (!this.deployed)
        this.deploy();
      return this;
    };
    _proto.detach = function detach2() {
      if (!this.attached)
        return this;
      if (this.renderer)
        this.renderer.detach();
      this.attached = false;
      return this;
    };
    _proto.addRule = function addRule(name, decl, options) {
      var queue = this.queue;
      if (this.attached && !queue)
        this.queue = [];
      var rule = this.rules.add(name, decl, options);
      if (!rule)
        return null;
      this.options.jss.plugins.onProcessRule(rule);
      if (this.attached) {
        if (!this.deployed)
          return rule;
        if (queue)
          queue.push(rule);
        else {
          this.insertRule(rule);
          if (this.queue) {
            this.queue.forEach(this.insertRule, this);
            this.queue = void 0;
          }
        }
        return rule;
      }
      this.deployed = false;
      return rule;
    };
    _proto.replaceRule = function replaceRule(nameOrSelector, decl, options) {
      var oldRule = this.rules.get(nameOrSelector);
      if (!oldRule)
        return this.addRule(nameOrSelector, decl, options);
      var newRule = this.rules.replace(nameOrSelector, decl, options);
      if (newRule) {
        this.options.jss.plugins.onProcessRule(newRule);
      }
      if (this.attached) {
        if (!this.deployed)
          return newRule;
        if (this.renderer) {
          if (!newRule) {
            this.renderer.deleteRule(oldRule);
          } else if (oldRule.renderable) {
            this.renderer.replaceRule(oldRule.renderable, newRule);
          }
        }
        return newRule;
      }
      this.deployed = false;
      return newRule;
    };
    _proto.insertRule = function insertRule2(rule) {
      if (this.renderer) {
        this.renderer.insertRule(rule);
      }
    };
    _proto.addRules = function addRules(styles7, options) {
      var added = [];
      for (var name in styles7) {
        var rule = this.addRule(name, styles7[name], options);
        if (rule)
          added.push(rule);
      }
      return added;
    };
    _proto.getRule = function getRule(nameOrSelector) {
      return this.rules.get(nameOrSelector);
    };
    _proto.deleteRule = function deleteRule(name) {
      var rule = typeof name === "object" ? name : this.rules.get(name);
      if (!rule || // Style sheet was created without link: true and attached, in this case we
      // won't be able to remove the CSS rule from the DOM.
      this.attached && !rule.renderable) {
        return false;
      }
      this.rules.remove(rule);
      if (this.attached && rule.renderable && this.renderer) {
        return this.renderer.deleteRule(rule.renderable);
      }
      return true;
    };
    _proto.indexOf = function indexOf(rule) {
      return this.rules.indexOf(rule);
    };
    _proto.deploy = function deploy() {
      if (this.renderer)
        this.renderer.deploy();
      this.deployed = true;
      return this;
    };
    _proto.update = function update2() {
      var _this$rules;
      (_this$rules = this.rules).update.apply(_this$rules, arguments);
      return this;
    };
    _proto.updateOne = function updateOne(rule, data, options) {
      this.rules.updateOne(rule, data, options);
      return this;
    };
    _proto.toString = function toString3(options) {
      return this.rules.toString(options);
    };
    return StyleSheet3;
  }();
  var PluginsRegistry = /* @__PURE__ */ function() {
    function PluginsRegistry2() {
      this.plugins = {
        internal: [],
        external: []
      };
      this.registry = {};
    }
    var _proto = PluginsRegistry2.prototype;
    _proto.onCreateRule = function onCreateRule8(name, decl, options) {
      for (var i = 0; i < this.registry.onCreateRule.length; i++) {
        var rule = this.registry.onCreateRule[i](name, decl, options);
        if (rule)
          return rule;
      }
      return null;
    };
    _proto.onProcessRule = function onProcessRule(rule) {
      if (rule.isProcessed)
        return;
      var sheet = rule.options.sheet;
      for (var i = 0; i < this.registry.onProcessRule.length; i++) {
        this.registry.onProcessRule[i](rule, sheet);
      }
      if (rule.style)
        this.onProcessStyle(rule.style, rule, sheet);
      rule.isProcessed = true;
    };
    _proto.onProcessStyle = function onProcessStyle2(style, rule, sheet) {
      for (var i = 0; i < this.registry.onProcessStyle.length; i++) {
        rule.style = this.registry.onProcessStyle[i](rule.style, rule, sheet);
      }
    };
    _proto.onProcessSheet = function onProcessSheet(sheet) {
      for (var i = 0; i < this.registry.onProcessSheet.length; i++) {
        this.registry.onProcessSheet[i](sheet);
      }
    };
    _proto.onUpdate = function onUpdate(data, rule, sheet, options) {
      for (var i = 0; i < this.registry.onUpdate.length; i++) {
        this.registry.onUpdate[i](data, rule, sheet, options);
      }
    };
    _proto.onChangeValue = function onChangeValue2(value, prop, rule) {
      var processedValue = value;
      for (var i = 0; i < this.registry.onChangeValue.length; i++) {
        processedValue = this.registry.onChangeValue[i](processedValue, prop, rule);
      }
      return processedValue;
    };
    _proto.use = function use(newPlugin, options) {
      if (options === void 0) {
        options = {
          queue: "external"
        };
      }
      var plugins3 = this.plugins[options.queue];
      if (plugins3.indexOf(newPlugin) !== -1) {
        return;
      }
      plugins3.push(newPlugin);
      this.registry = [].concat(this.plugins.external, this.plugins.internal).reduce(function(registry, plugin) {
        for (var name in plugin) {
          if (name in registry) {
            registry[name].push(plugin[name]);
          } else {
            true ? tiny_warning_esm_default(false, '[JSS] Unknown hook "' + name + '".') : void 0;
          }
        }
        return registry;
      }, {
        onCreateRule: [],
        onProcessRule: [],
        onProcessStyle: [],
        onProcessSheet: [],
        onChangeValue: [],
        onUpdate: []
      });
    };
    return PluginsRegistry2;
  }();
  var SheetsRegistry = /* @__PURE__ */ function() {
    function SheetsRegistry2() {
      this.registry = [];
    }
    var _proto = SheetsRegistry2.prototype;
    _proto.add = function add(sheet) {
      var registry = this.registry;
      var index3 = sheet.options.index;
      if (registry.indexOf(sheet) !== -1)
        return;
      if (registry.length === 0 || index3 >= this.index) {
        registry.push(sheet);
        return;
      }
      for (var i = 0; i < registry.length; i++) {
        if (registry[i].options.index > index3) {
          registry.splice(i, 0, sheet);
          return;
        }
      }
    };
    _proto.reset = function reset() {
      this.registry = [];
    };
    _proto.remove = function remove(sheet) {
      var index3 = this.registry.indexOf(sheet);
      this.registry.splice(index3, 1);
    };
    _proto.toString = function toString3(_temp) {
      var _ref = _temp === void 0 ? {} : _temp, attached = _ref.attached, options = _objectWithoutPropertiesLoose(_ref, ["attached"]);
      var _getWhitespaceSymbols = getWhitespaceSymbols(options), linebreak = _getWhitespaceSymbols.linebreak;
      var css7 = "";
      for (var i = 0; i < this.registry.length; i++) {
        var sheet = this.registry[i];
        if (attached != null && sheet.attached !== attached) {
          continue;
        }
        if (css7)
          css7 += linebreak;
        css7 += sheet.toString(options);
      }
      return css7;
    };
    _createClass(SheetsRegistry2, [{
      key: "index",
      /**
       * Current highest index number.
       */
      get: function get() {
        return this.registry.length === 0 ? 0 : this.registry[this.registry.length - 1].options.index;
      }
    }]);
    return SheetsRegistry2;
  }();
  var sheets = new SheetsRegistry();
  var globalThis$1 = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" && window.Math === Math ? window : typeof self !== "undefined" && self.Math === Math ? self : Function("return this")();
  var ns = "2f1acc6c3a606b082e5eef5e54414ffb";
  if (globalThis$1[ns] == null)
    globalThis$1[ns] = 0;
  var moduleId = globalThis$1[ns]++;
  var maxRules = 1e10;
  var createGenerateId = function createGenerateId2(options) {
    if (options === void 0) {
      options = {};
    }
    var ruleCounter = 0;
    var generateId = function generateId2(rule, sheet) {
      ruleCounter += 1;
      if (ruleCounter > maxRules) {
        true ? tiny_warning_esm_default(false, "[JSS] You might have a memory leak. Rule counter is at " + ruleCounter + ".") : void 0;
      }
      var jssId = "";
      var prefix3 = "";
      if (sheet) {
        if (sheet.options.classNamePrefix) {
          prefix3 = sheet.options.classNamePrefix;
        }
        if (sheet.options.jss.id != null) {
          jssId = String(sheet.options.jss.id);
        }
      }
      if (options.minify) {
        return "" + (prefix3 || "c") + moduleId + jssId + ruleCounter;
      }
      return prefix3 + rule.key + "-" + moduleId + (jssId ? "-" + jssId : "") + "-" + ruleCounter;
    };
    return generateId;
  };
  var memoize = function memoize2(fn2) {
    var value;
    return function() {
      if (!value)
        value = fn2();
      return value;
    };
  };
  var getPropertyValue = function getPropertyValue2(cssRule, prop) {
    try {
      if (cssRule.attributeStyleMap) {
        return cssRule.attributeStyleMap.get(prop);
      }
      return cssRule.style.getPropertyValue(prop);
    } catch (err) {
      return "";
    }
  };
  var setProperty = function setProperty2(cssRule, prop, value) {
    try {
      var cssValue = value;
      if (Array.isArray(value)) {
        cssValue = toCssValue(value);
      }
      if (cssRule.attributeStyleMap) {
        cssRule.attributeStyleMap.set(prop, cssValue);
      } else {
        var indexOfImportantFlag = cssValue ? cssValue.indexOf("!important") : -1;
        var cssValueWithoutImportantFlag = indexOfImportantFlag > -1 ? cssValue.substr(0, indexOfImportantFlag - 1) : cssValue;
        cssRule.style.setProperty(prop, cssValueWithoutImportantFlag, indexOfImportantFlag > -1 ? "important" : "");
      }
    } catch (err) {
      return false;
    }
    return true;
  };
  var removeProperty = function removeProperty2(cssRule, prop) {
    try {
      if (cssRule.attributeStyleMap) {
        cssRule.attributeStyleMap.delete(prop);
      } else {
        cssRule.style.removeProperty(prop);
      }
    } catch (err) {
      true ? tiny_warning_esm_default(false, '[JSS] DOMException "' + err.message + '" was thrown. Tried to remove property "' + prop + '".') : void 0;
    }
  };
  var setSelector = function setSelector2(cssRule, selectorText) {
    cssRule.selectorText = selectorText;
    return cssRule.selectorText === selectorText;
  };
  var getHead = memoize(function() {
    return document.querySelector("head");
  });
  function findHigherSheet(registry, options) {
    for (var i = 0; i < registry.length; i++) {
      var sheet = registry[i];
      if (sheet.attached && sheet.options.index > options.index && sheet.options.insertionPoint === options.insertionPoint) {
        return sheet;
      }
    }
    return null;
  }
  function findHighestSheet(registry, options) {
    for (var i = registry.length - 1; i >= 0; i--) {
      var sheet = registry[i];
      if (sheet.attached && sheet.options.insertionPoint === options.insertionPoint) {
        return sheet;
      }
    }
    return null;
  }
  function findCommentNode(text) {
    var head = getHead();
    for (var i = 0; i < head.childNodes.length; i++) {
      var node2 = head.childNodes[i];
      if (node2.nodeType === 8 && node2.nodeValue.trim() === text) {
        return node2;
      }
    }
    return null;
  }
  function findPrevNode(options) {
    var registry = sheets.registry;
    if (registry.length > 0) {
      var sheet = findHigherSheet(registry, options);
      if (sheet && sheet.renderer) {
        return {
          parent: sheet.renderer.element.parentNode,
          node: sheet.renderer.element
        };
      }
      sheet = findHighestSheet(registry, options);
      if (sheet && sheet.renderer) {
        return {
          parent: sheet.renderer.element.parentNode,
          node: sheet.renderer.element.nextSibling
        };
      }
    }
    var insertionPoint = options.insertionPoint;
    if (insertionPoint && typeof insertionPoint === "string") {
      var comment2 = findCommentNode(insertionPoint);
      if (comment2) {
        return {
          parent: comment2.parentNode,
          node: comment2.nextSibling
        };
      }
      true ? tiny_warning_esm_default(false, '[JSS] Insertion point "' + insertionPoint + '" not found.') : void 0;
    }
    return false;
  }
  function insertStyle(style, options) {
    var insertionPoint = options.insertionPoint;
    var nextNode = findPrevNode(options);
    if (nextNode !== false && nextNode.parent) {
      nextNode.parent.insertBefore(style, nextNode.node);
      return;
    }
    if (insertionPoint && typeof insertionPoint.nodeType === "number") {
      var insertionPointElement = insertionPoint;
      var parentNode = insertionPointElement.parentNode;
      if (parentNode)
        parentNode.insertBefore(style, insertionPointElement.nextSibling);
      else
        true ? tiny_warning_esm_default(false, "[JSS] Insertion point is not in the DOM.") : void 0;
      return;
    }
    getHead().appendChild(style);
  }
  var getNonce = memoize(function() {
    var node2 = document.querySelector('meta[property="csp-nonce"]');
    return node2 ? node2.getAttribute("content") : null;
  });
  var _insertRule = function insertRule(container, rule, index3) {
    try {
      if ("insertRule" in container) {
        container.insertRule(rule, index3);
      } else if ("appendRule" in container) {
        container.appendRule(rule);
      }
    } catch (err) {
      true ? tiny_warning_esm_default(false, "[JSS] " + err.message) : void 0;
      return false;
    }
    return container.cssRules[index3];
  };
  var getValidRuleInsertionIndex = function getValidRuleInsertionIndex2(container, index3) {
    var maxIndex = container.cssRules.length;
    if (index3 === void 0 || index3 > maxIndex) {
      return maxIndex;
    }
    return index3;
  };
  var createStyle = function createStyle2() {
    var el2 = document.createElement("style");
    el2.textContent = "\n";
    return el2;
  };
  var DomRenderer = /* @__PURE__ */ function() {
    function DomRenderer2(sheet) {
      this.getPropertyValue = getPropertyValue;
      this.setProperty = setProperty;
      this.removeProperty = removeProperty;
      this.setSelector = setSelector;
      this.hasInsertedRules = false;
      this.cssRules = [];
      if (sheet)
        sheets.add(sheet);
      this.sheet = sheet;
      var _ref = this.sheet ? this.sheet.options : {}, media = _ref.media, meta = _ref.meta, element = _ref.element;
      this.element = element || createStyle();
      this.element.setAttribute("data-jss", "");
      if (media)
        this.element.setAttribute("media", media);
      if (meta)
        this.element.setAttribute("data-meta", meta);
      var nonce = getNonce();
      if (nonce)
        this.element.setAttribute("nonce", nonce);
    }
    var _proto = DomRenderer2.prototype;
    _proto.attach = function attach2() {
      if (this.element.parentNode || !this.sheet)
        return;
      insertStyle(this.element, this.sheet.options);
      var deployed = Boolean(this.sheet && this.sheet.deployed);
      if (this.hasInsertedRules && deployed) {
        this.hasInsertedRules = false;
        this.deploy();
      }
    };
    _proto.detach = function detach2() {
      if (!this.sheet)
        return;
      var parentNode = this.element.parentNode;
      if (parentNode)
        parentNode.removeChild(this.element);
      if (this.sheet.options.link) {
        this.cssRules = [];
        this.element.textContent = "\n";
      }
    };
    _proto.deploy = function deploy() {
      var sheet = this.sheet;
      if (!sheet)
        return;
      if (sheet.options.link) {
        this.insertRules(sheet.rules);
        return;
      }
      this.element.textContent = "\n" + sheet.toString() + "\n";
    };
    _proto.insertRules = function insertRules(rules, nativeParent) {
      for (var i = 0; i < rules.index.length; i++) {
        this.insertRule(rules.index[i], i, nativeParent);
      }
    };
    _proto.insertRule = function insertRule2(rule, index3, nativeParent) {
      if (nativeParent === void 0) {
        nativeParent = this.element.sheet;
      }
      if (rule.rules) {
        var parent = rule;
        var latestNativeParent = nativeParent;
        if (rule.type === "conditional" || rule.type === "keyframes") {
          var _insertionIndex = getValidRuleInsertionIndex(nativeParent, index3);
          latestNativeParent = _insertRule(nativeParent, parent.toString({
            children: false
          }), _insertionIndex);
          if (latestNativeParent === false) {
            return false;
          }
          this.refCssRule(rule, _insertionIndex, latestNativeParent);
        }
        this.insertRules(parent.rules, latestNativeParent);
        return latestNativeParent;
      }
      var ruleStr = rule.toString();
      if (!ruleStr)
        return false;
      var insertionIndex = getValidRuleInsertionIndex(nativeParent, index3);
      var nativeRule = _insertRule(nativeParent, ruleStr, insertionIndex);
      if (nativeRule === false) {
        return false;
      }
      this.hasInsertedRules = true;
      this.refCssRule(rule, insertionIndex, nativeRule);
      return nativeRule;
    };
    _proto.refCssRule = function refCssRule(rule, index3, cssRule) {
      rule.renderable = cssRule;
      if (rule.options.parent instanceof StyleSheet) {
        this.cssRules.splice(index3, 0, cssRule);
      }
    };
    _proto.deleteRule = function deleteRule(cssRule) {
      var sheet = this.element.sheet;
      var index3 = this.indexOf(cssRule);
      if (index3 === -1)
        return false;
      sheet.deleteRule(index3);
      this.cssRules.splice(index3, 1);
      return true;
    };
    _proto.indexOf = function indexOf(cssRule) {
      return this.cssRules.indexOf(cssRule);
    };
    _proto.replaceRule = function replaceRule(cssRule, rule) {
      var index3 = this.indexOf(cssRule);
      if (index3 === -1)
        return false;
      this.element.sheet.deleteRule(index3);
      this.cssRules.splice(index3, 1);
      return this.insertRule(rule, index3);
    };
    _proto.getRules = function getRules3() {
      return this.element.sheet.cssRules;
    };
    return DomRenderer2;
  }();
  var instanceCounter = 0;
  var Jss = /* @__PURE__ */ function() {
    function Jss2(options) {
      this.id = instanceCounter++;
      this.version = "10.10.0";
      this.plugins = new PluginsRegistry();
      this.options = {
        id: {
          minify: false
        },
        createGenerateId,
        Renderer: module_default ? DomRenderer : null,
        plugins: []
      };
      this.generateId = createGenerateId({
        minify: false
      });
      for (var i = 0; i < plugins.length; i++) {
        this.plugins.use(plugins[i], {
          queue: "internal"
        });
      }
      this.setup(options);
    }
    var _proto = Jss2.prototype;
    _proto.setup = function setup(options) {
      if (options === void 0) {
        options = {};
      }
      if (options.createGenerateId) {
        this.options.createGenerateId = options.createGenerateId;
      }
      if (options.id) {
        this.options.id = _extends({}, this.options.id, options.id);
      }
      if (options.createGenerateId || options.id) {
        this.generateId = this.options.createGenerateId(this.options.id);
      }
      if (options.insertionPoint != null)
        this.options.insertionPoint = options.insertionPoint;
      if ("Renderer" in options) {
        this.options.Renderer = options.Renderer;
      }
      if (options.plugins)
        this.use.apply(this, options.plugins);
      return this;
    };
    _proto.createStyleSheet = function createStyleSheet(styles7, options) {
      if (options === void 0) {
        options = {};
      }
      var _options = options, index3 = _options.index;
      if (typeof index3 !== "number") {
        index3 = sheets.index === 0 ? 0 : sheets.index + 1;
      }
      var sheet = new StyleSheet(styles7, _extends({}, options, {
        jss: this,
        generateId: options.generateId || this.generateId,
        insertionPoint: this.options.insertionPoint,
        Renderer: this.options.Renderer,
        index: index3
      }));
      this.plugins.onProcessSheet(sheet);
      return sheet;
    };
    _proto.removeStyleSheet = function removeStyleSheet(sheet) {
      sheet.detach();
      sheets.remove(sheet);
      return this;
    };
    _proto.createRule = function createRule$1(name, style, options) {
      if (style === void 0) {
        style = {};
      }
      if (options === void 0) {
        options = {};
      }
      if (typeof name === "object") {
        return this.createRule(void 0, name, style);
      }
      var ruleOptions = _extends({}, options, {
        name,
        jss: this,
        Renderer: this.options.Renderer
      });
      if (!ruleOptions.generateId)
        ruleOptions.generateId = this.generateId;
      if (!ruleOptions.classes)
        ruleOptions.classes = {};
      if (!ruleOptions.keyframes)
        ruleOptions.keyframes = {};
      var rule = createRule(name, style, ruleOptions);
      if (rule)
        this.plugins.onProcessRule(rule);
      return rule;
    };
    _proto.use = function use() {
      var _this = this;
      for (var _len = arguments.length, plugins3 = new Array(_len), _key = 0; _key < _len; _key++) {
        plugins3[_key] = arguments[_key];
      }
      plugins3.forEach(function(plugin) {
        _this.plugins.use(plugin);
      });
      return this;
    };
    return Jss2;
  }();
  var createJss = function createJss2(options) {
    return new Jss(options);
  };
  var hasCSSTOMSupport = typeof CSS === "object" && CSS != null && "number" in CSS;
  function getDynamicStyles(styles7) {
    var to = null;
    for (var key in styles7) {
      var value = styles7[key];
      var type = typeof value;
      if (type === "function") {
        if (!to)
          to = {};
        to[key] = value;
      } else if (type === "object" && value !== null && !Array.isArray(value)) {
        var extracted = getDynamicStyles(value);
        if (extracted) {
          if (!to)
            to = {};
          to[key] = extracted;
        }
      }
    }
    return to;
  }
  var index = createJss();

  // node_modules/jss-plugin-rule-value-function/dist/jss-plugin-rule-value-function.esm.js
  var now = Date.now();
  var fnValuesNs = "fnValues" + now;
  var fnRuleNs = "fnStyle" + ++now;
  var functionPlugin = function functionPlugin2() {
    return {
      onCreateRule: function onCreateRule8(name, decl, options) {
        if (typeof decl !== "function")
          return null;
        var rule = createRule(name, {}, options);
        rule[fnRuleNs] = decl;
        return rule;
      },
      onProcessStyle: function onProcessStyle2(style, rule) {
        if (fnValuesNs in rule || fnRuleNs in rule)
          return style;
        var fnValues = {};
        for (var prop in style) {
          var value = style[prop];
          if (typeof value !== "function")
            continue;
          delete style[prop];
          fnValues[prop] = value;
        }
        rule[fnValuesNs] = fnValues;
        return style;
      },
      onUpdate: function onUpdate(data, rule, sheet, options) {
        var styleRule = rule;
        var fnRule = styleRule[fnRuleNs];
        if (fnRule) {
          styleRule.style = fnRule(data) || {};
          if (true) {
            for (var prop in styleRule.style) {
              if (typeof styleRule.style[prop] === "function") {
                true ? tiny_warning_esm_default(false, "[JSS] Function values inside function rules are not supported.") : void 0;
                break;
              }
            }
          }
        }
        var fnValues = styleRule[fnValuesNs];
        if (fnValues) {
          for (var _prop in fnValues) {
            styleRule.prop(_prop, fnValues[_prop](data), options);
          }
        }
      }
    };
  };
  var jss_plugin_rule_value_function_esm_default = functionPlugin;

  // node_modules/jss-plugin-global/dist/jss-plugin-global.esm.js
  init_extends();
  var at = "@global";
  var atPrefix = "@global ";
  var GlobalContainerRule = /* @__PURE__ */ function() {
    function GlobalContainerRule2(key, styles7, options) {
      this.type = "global";
      this.at = at;
      this.isProcessed = false;
      this.key = key;
      this.options = options;
      this.rules = new RuleList(_extends({}, options, {
        parent: this
      }));
      for (var selector in styles7) {
        this.rules.add(selector, styles7[selector]);
      }
      this.rules.process();
    }
    var _proto = GlobalContainerRule2.prototype;
    _proto.getRule = function getRule(name) {
      return this.rules.get(name);
    };
    _proto.addRule = function addRule(name, style, options) {
      var rule = this.rules.add(name, style, options);
      if (rule)
        this.options.jss.plugins.onProcessRule(rule);
      return rule;
    };
    _proto.replaceRule = function replaceRule(name, style, options) {
      var newRule = this.rules.replace(name, style, options);
      if (newRule)
        this.options.jss.plugins.onProcessRule(newRule);
      return newRule;
    };
    _proto.indexOf = function indexOf(rule) {
      return this.rules.indexOf(rule);
    };
    _proto.toString = function toString3(options) {
      return this.rules.toString(options);
    };
    return GlobalContainerRule2;
  }();
  var GlobalPrefixedRule = /* @__PURE__ */ function() {
    function GlobalPrefixedRule2(key, style, options) {
      this.type = "global";
      this.at = at;
      this.isProcessed = false;
      this.key = key;
      this.options = options;
      var selector = key.substr(atPrefix.length);
      this.rule = options.jss.createRule(selector, style, _extends({}, options, {
        parent: this
      }));
    }
    var _proto2 = GlobalPrefixedRule2.prototype;
    _proto2.toString = function toString3(options) {
      return this.rule ? this.rule.toString(options) : "";
    };
    return GlobalPrefixedRule2;
  }();
  var separatorRegExp = /\s*,\s*/g;
  function addScope(selector, scope) {
    var parts = selector.split(separatorRegExp);
    var scoped = "";
    for (var i = 0; i < parts.length; i++) {
      scoped += scope + " " + parts[i].trim();
      if (parts[i + 1])
        scoped += ", ";
    }
    return scoped;
  }
  function handleNestedGlobalContainerRule(rule, sheet) {
    var options = rule.options, style = rule.style;
    var rules = style ? style[at] : null;
    if (!rules)
      return;
    for (var name in rules) {
      sheet.addRule(name, rules[name], _extends({}, options, {
        selector: addScope(name, rule.selector)
      }));
    }
    delete style[at];
  }
  function handlePrefixedGlobalRule(rule, sheet) {
    var options = rule.options, style = rule.style;
    for (var prop in style) {
      if (prop[0] !== "@" || prop.substr(0, at.length) !== at)
        continue;
      var selector = addScope(prop.substr(at.length), rule.selector);
      sheet.addRule(selector, style[prop], _extends({}, options, {
        selector
      }));
      delete style[prop];
    }
  }
  function jssGlobal() {
    function onCreateRule8(name, styles7, options) {
      if (!name)
        return null;
      if (name === at) {
        return new GlobalContainerRule(name, styles7, options);
      }
      if (name[0] === "@" && name.substr(0, atPrefix.length) === atPrefix) {
        return new GlobalPrefixedRule(name, styles7, options);
      }
      var parent = options.parent;
      if (parent) {
        if (parent.type === "global" || parent.options.parent && parent.options.parent.type === "global") {
          options.scoped = false;
        }
      }
      if (!options.selector && options.scoped === false) {
        options.selector = name;
      }
      return null;
    }
    function onProcessRule(rule, sheet) {
      if (rule.type !== "style" || !sheet)
        return;
      handleNestedGlobalContainerRule(rule, sheet);
      handlePrefixedGlobalRule(rule, sheet);
    }
    return {
      onCreateRule: onCreateRule8,
      onProcessRule
    };
  }
  var jss_plugin_global_esm_default = jssGlobal;

  // node_modules/jss-plugin-nested/dist/jss-plugin-nested.esm.js
  init_extends();
  var separatorRegExp2 = /\s*,\s*/g;
  var parentRegExp = /&/g;
  var refRegExp2 = /\$([\w-]+)/g;
  function jssNested() {
    function getReplaceRef(container, sheet) {
      return function(match2, key) {
        var rule = container.getRule(key) || sheet && sheet.getRule(key);
        if (rule) {
          return rule.selector;
        }
        true ? tiny_warning_esm_default(false, '[JSS] Could not find the referenced rule "' + key + '" in "' + (container.options.meta || container.toString()) + '".') : void 0;
        return key;
      };
    }
    function replaceParentRefs(nestedProp, parentProp) {
      var parentSelectors = parentProp.split(separatorRegExp2);
      var nestedSelectors = nestedProp.split(separatorRegExp2);
      var result = "";
      for (var i = 0; i < parentSelectors.length; i++) {
        var parent = parentSelectors[i];
        for (var j = 0; j < nestedSelectors.length; j++) {
          var nested2 = nestedSelectors[j];
          if (result)
            result += ", ";
          result += nested2.indexOf("&") !== -1 ? nested2.replace(parentRegExp, parent) : parent + " " + nested2;
        }
      }
      return result;
    }
    function getOptions(rule, container, prevOptions) {
      if (prevOptions)
        return _extends({}, prevOptions, {
          index: prevOptions.index + 1
        });
      var nestingLevel = rule.options.nestingLevel;
      nestingLevel = nestingLevel === void 0 ? 1 : nestingLevel + 1;
      var options = _extends({}, rule.options, {
        nestingLevel,
        index: container.indexOf(rule) + 1
        // We don't need the parent name to be set options for chlid.
      });
      delete options.name;
      return options;
    }
    function onProcessStyle2(style, rule, sheet) {
      if (rule.type !== "style")
        return style;
      var styleRule = rule;
      var container = styleRule.options.parent;
      var options;
      var replaceRef3;
      for (var prop in style) {
        var isNested = prop.indexOf("&") !== -1;
        var isNestedConditional = prop[0] === "@";
        if (!isNested && !isNestedConditional)
          continue;
        options = getOptions(styleRule, container, options);
        if (isNested) {
          var selector = replaceParentRefs(prop, styleRule.selector);
          if (!replaceRef3)
            replaceRef3 = getReplaceRef(container, sheet);
          selector = selector.replace(refRegExp2, replaceRef3);
          var name = styleRule.key + "-" + prop;
          if ("replaceRule" in container) {
            container.replaceRule(name, style[prop], _extends({}, options, {
              selector
            }));
          } else {
            container.addRule(name, style[prop], _extends({}, options, {
              selector
            }));
          }
        } else if (isNestedConditional) {
          container.addRule(prop, {}, options).addRule(styleRule.key, style[prop], {
            selector: styleRule.selector
          });
        }
        delete style[prop];
      }
      return style;
    }
    return {
      onProcessStyle: onProcessStyle2
    };
  }
  var jss_plugin_nested_esm_default = jssNested;

  // node_modules/hyphenate-style-name/index.js
  var uppercasePattern = /[A-Z]/g;
  var msPattern = /^ms-/;
  var cache = {};
  function toHyphenLower(match2) {
    return "-" + match2.toLowerCase();
  }
  function hyphenateStyleName(name) {
    if (cache.hasOwnProperty(name)) {
      return cache[name];
    }
    var hName = name.replace(uppercasePattern, toHyphenLower);
    return cache[name] = msPattern.test(hName) ? "-" + hName : hName;
  }
  var hyphenate_style_name_default = hyphenateStyleName;

  // node_modules/jss-plugin-camel-case/dist/jss-plugin-camel-case.esm.js
  function convertCase(style) {
    var converted = {};
    for (var prop in style) {
      var key = prop.indexOf("--") === 0 ? prop : hyphenate_style_name_default(prop);
      converted[key] = style[prop];
    }
    if (style.fallbacks) {
      if (Array.isArray(style.fallbacks))
        converted.fallbacks = style.fallbacks.map(convertCase);
      else
        converted.fallbacks = convertCase(style.fallbacks);
    }
    return converted;
  }
  function camelCase() {
    function onProcessStyle2(style) {
      if (Array.isArray(style)) {
        for (var index3 = 0; index3 < style.length; index3++) {
          style[index3] = convertCase(style[index3]);
        }
        return style;
      }
      return convertCase(style);
    }
    function onChangeValue2(value, prop, rule) {
      if (prop.indexOf("--") === 0) {
        return value;
      }
      var hyphenatedProp = hyphenate_style_name_default(prop);
      if (prop === hyphenatedProp)
        return value;
      rule.prop(hyphenatedProp, value);
      return null;
    }
    return {
      onProcessStyle: onProcessStyle2,
      onChangeValue: onChangeValue2
    };
  }
  var jss_plugin_camel_case_esm_default = camelCase;

  // node_modules/jss-plugin-default-unit/dist/jss-plugin-default-unit.esm.js
  var px = hasCSSTOMSupport && CSS ? CSS.px : "px";
  var ms = hasCSSTOMSupport && CSS ? CSS.ms : "ms";
  var percent = hasCSSTOMSupport && CSS ? CSS.percent : "%";
  var defaultUnits = {
    // Animation properties
    "animation-delay": ms,
    "animation-duration": ms,
    // Background properties
    "background-position": px,
    "background-position-x": px,
    "background-position-y": px,
    "background-size": px,
    // Border Properties
    border: px,
    "border-bottom": px,
    "border-bottom-left-radius": px,
    "border-bottom-right-radius": px,
    "border-bottom-width": px,
    "border-left": px,
    "border-left-width": px,
    "border-radius": px,
    "border-right": px,
    "border-right-width": px,
    "border-top": px,
    "border-top-left-radius": px,
    "border-top-right-radius": px,
    "border-top-width": px,
    "border-width": px,
    "border-block": px,
    "border-block-end": px,
    "border-block-end-width": px,
    "border-block-start": px,
    "border-block-start-width": px,
    "border-block-width": px,
    "border-inline": px,
    "border-inline-end": px,
    "border-inline-end-width": px,
    "border-inline-start": px,
    "border-inline-start-width": px,
    "border-inline-width": px,
    "border-start-start-radius": px,
    "border-start-end-radius": px,
    "border-end-start-radius": px,
    "border-end-end-radius": px,
    // Margin properties
    margin: px,
    "margin-bottom": px,
    "margin-left": px,
    "margin-right": px,
    "margin-top": px,
    "margin-block": px,
    "margin-block-end": px,
    "margin-block-start": px,
    "margin-inline": px,
    "margin-inline-end": px,
    "margin-inline-start": px,
    // Padding properties
    padding: px,
    "padding-bottom": px,
    "padding-left": px,
    "padding-right": px,
    "padding-top": px,
    "padding-block": px,
    "padding-block-end": px,
    "padding-block-start": px,
    "padding-inline": px,
    "padding-inline-end": px,
    "padding-inline-start": px,
    // Mask properties
    "mask-position-x": px,
    "mask-position-y": px,
    "mask-size": px,
    // Width and height properties
    height: px,
    width: px,
    "min-height": px,
    "max-height": px,
    "min-width": px,
    "max-width": px,
    // Position properties
    bottom: px,
    left: px,
    top: px,
    right: px,
    inset: px,
    "inset-block": px,
    "inset-block-end": px,
    "inset-block-start": px,
    "inset-inline": px,
    "inset-inline-end": px,
    "inset-inline-start": px,
    // Shadow properties
    "box-shadow": px,
    "text-shadow": px,
    // Column properties
    "column-gap": px,
    "column-rule": px,
    "column-rule-width": px,
    "column-width": px,
    // Font and text properties
    "font-size": px,
    "font-size-delta": px,
    "letter-spacing": px,
    "text-decoration-thickness": px,
    "text-indent": px,
    "text-stroke": px,
    "text-stroke-width": px,
    "word-spacing": px,
    // Motion properties
    motion: px,
    "motion-offset": px,
    // Outline properties
    outline: px,
    "outline-offset": px,
    "outline-width": px,
    // Perspective properties
    perspective: px,
    "perspective-origin-x": percent,
    "perspective-origin-y": percent,
    // Transform properties
    "transform-origin": percent,
    "transform-origin-x": percent,
    "transform-origin-y": percent,
    "transform-origin-z": percent,
    // Transition properties
    "transition-delay": ms,
    "transition-duration": ms,
    // Alignment properties
    "vertical-align": px,
    "flex-basis": px,
    // Some random properties
    "shape-margin": px,
    size: px,
    gap: px,
    // Grid properties
    grid: px,
    "grid-gap": px,
    "row-gap": px,
    "grid-row-gap": px,
    "grid-column-gap": px,
    "grid-template-rows": px,
    "grid-template-columns": px,
    "grid-auto-rows": px,
    "grid-auto-columns": px,
    // Not existing properties.
    // Used to avoid issues with jss-plugin-expand integration.
    "box-shadow-x": px,
    "box-shadow-y": px,
    "box-shadow-blur": px,
    "box-shadow-spread": px,
    "font-line-height": px,
    "text-shadow-x": px,
    "text-shadow-y": px,
    "text-shadow-blur": px
  };
  function addCamelCasedVersion(obj) {
    var regExp2 = /(-[a-z])/g;
    var replace2 = function replace3(str) {
      return str[1].toUpperCase();
    };
    var newObj = {};
    for (var key in obj) {
      newObj[key] = obj[key];
      newObj[key.replace(regExp2, replace2)] = obj[key];
    }
    return newObj;
  }
  var units = addCamelCasedVersion(defaultUnits);
  function iterate(prop, value, options) {
    if (value == null)
      return value;
    if (Array.isArray(value)) {
      for (var i = 0; i < value.length; i++) {
        value[i] = iterate(prop, value[i], options);
      }
    } else if (typeof value === "object") {
      if (prop === "fallbacks") {
        for (var innerProp in value) {
          value[innerProp] = iterate(innerProp, value[innerProp], options);
        }
      } else {
        for (var _innerProp in value) {
          value[_innerProp] = iterate(prop + "-" + _innerProp, value[_innerProp], options);
        }
      }
    } else if (typeof value === "number" && isNaN(value) === false) {
      var unit = options[prop] || units[prop];
      if (unit && !(value === 0 && unit === px)) {
        return typeof unit === "function" ? unit(value).toString() : "" + value + unit;
      }
      return value.toString();
    }
    return value;
  }
  function defaultUnit(options) {
    if (options === void 0) {
      options = {};
    }
    var camelCasedOptions = addCamelCasedVersion(options);
    function onProcessStyle2(style, rule) {
      if (rule.type !== "style")
        return style;
      for (var prop in style) {
        style[prop] = iterate(prop, style[prop], camelCasedOptions);
      }
      return style;
    }
    function onChangeValue2(value, prop) {
      return iterate(prop, value, camelCasedOptions);
    }
    return {
      onProcessStyle: onProcessStyle2,
      onChangeValue: onChangeValue2
    };
  }
  var jss_plugin_default_unit_esm_default = defaultUnit;

  // node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length)
      len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++)
      arr2[i] = arr[i];
    return arr2;
  }

  // node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js
  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr))
      return _arrayLikeToArray(arr);
  }

  // node_modules/@babel/runtime/helpers/esm/iterableToArray.js
  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
      return Array.from(iter);
  }

  // node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
  function _unsupportedIterableToArray(o, minLen) {
    if (!o)
      return;
    if (typeof o === "string")
      return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor)
      n = o.constructor.name;
    if (n === "Map" || n === "Set")
      return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o, minLen);
  }

  // node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js
  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  // node_modules/@babel/runtime/helpers/esm/toConsumableArray.js
  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  // node_modules/css-vendor/dist/css-vendor.esm.js
  var js = "";
  var css = "";
  var vendor = "";
  var browser = "";
  var isTouch = module_default && "ontouchstart" in document.documentElement;
  if (module_default) {
    jsCssMap = {
      Moz: "-moz-",
      ms: "-ms-",
      O: "-o-",
      Webkit: "-webkit-"
    };
    _document$createEleme = document.createElement("p"), style = _document$createEleme.style;
    testProp = "Transform";
    for (key in jsCssMap) {
      if (key + testProp in style) {
        js = key;
        css = jsCssMap[key];
        break;
      }
    }
    if (js === "Webkit" && "msHyphens" in style) {
      js = "ms";
      css = jsCssMap.ms;
      browser = "edge";
    }
    if (js === "Webkit" && "-apple-trailing-word" in style) {
      vendor = "apple";
    }
  }
  var jsCssMap;
  var _document$createEleme;
  var style;
  var testProp;
  var key;
  var prefix = {
    js,
    css,
    vendor,
    browser,
    isTouch
  };
  function supportedKeyframes(key) {
    if (key[1] === "-")
      return key;
    if (prefix.js === "ms")
      return key;
    return "@" + prefix.css + "keyframes" + key.substr(10);
  }
  var appearence = {
    noPrefill: ["appearance"],
    supportedProperty: function supportedProperty(prop) {
      if (prop !== "appearance")
        return false;
      if (prefix.js === "ms")
        return "-webkit-" + prop;
      return prefix.css + prop;
    }
  };
  var colorAdjust = {
    noPrefill: ["color-adjust"],
    supportedProperty: function supportedProperty2(prop) {
      if (prop !== "color-adjust")
        return false;
      if (prefix.js === "Webkit")
        return prefix.css + "print-" + prop;
      return prop;
    }
  };
  var regExp = /[-\s]+(.)?/g;
  function toUpper(match2, c) {
    return c ? c.toUpperCase() : "";
  }
  function camelize(str) {
    return str.replace(regExp, toUpper);
  }
  function pascalize(str) {
    return camelize("-" + str);
  }
  var mask = {
    noPrefill: ["mask"],
    supportedProperty: function supportedProperty3(prop, style) {
      if (!/^mask/.test(prop))
        return false;
      if (prefix.js === "Webkit") {
        var longhand = "mask-image";
        if (camelize(longhand) in style) {
          return prop;
        }
        if (prefix.js + pascalize(longhand) in style) {
          return prefix.css + prop;
        }
      }
      return prop;
    }
  };
  var textOrientation = {
    noPrefill: ["text-orientation"],
    supportedProperty: function supportedProperty4(prop) {
      if (prop !== "text-orientation")
        return false;
      if (prefix.vendor === "apple" && !prefix.isTouch) {
        return prefix.css + prop;
      }
      return prop;
    }
  };
  var transform = {
    noPrefill: ["transform"],
    supportedProperty: function supportedProperty5(prop, style, options) {
      if (prop !== "transform")
        return false;
      if (options.transform) {
        return prop;
      }
      return prefix.css + prop;
    }
  };
  var transition = {
    noPrefill: ["transition"],
    supportedProperty: function supportedProperty6(prop, style, options) {
      if (prop !== "transition")
        return false;
      if (options.transition) {
        return prop;
      }
      return prefix.css + prop;
    }
  };
  var writingMode = {
    noPrefill: ["writing-mode"],
    supportedProperty: function supportedProperty7(prop) {
      if (prop !== "writing-mode")
        return false;
      if (prefix.js === "Webkit" || prefix.js === "ms" && prefix.browser !== "edge") {
        return prefix.css + prop;
      }
      return prop;
    }
  };
  var userSelect = {
    noPrefill: ["user-select"],
    supportedProperty: function supportedProperty8(prop) {
      if (prop !== "user-select")
        return false;
      if (prefix.js === "Moz" || prefix.js === "ms" || prefix.vendor === "apple") {
        return prefix.css + prop;
      }
      return prop;
    }
  };
  var breakPropsOld = {
    supportedProperty: function supportedProperty9(prop, style) {
      if (!/^break-/.test(prop))
        return false;
      if (prefix.js === "Webkit") {
        var jsProp = "WebkitColumn" + pascalize(prop);
        return jsProp in style ? prefix.css + "column-" + prop : false;
      }
      if (prefix.js === "Moz") {
        var _jsProp = "page" + pascalize(prop);
        return _jsProp in style ? "page-" + prop : false;
      }
      return false;
    }
  };
  var inlineLogicalOld = {
    supportedProperty: function supportedProperty10(prop, style) {
      if (!/^(border|margin|padding)-inline/.test(prop))
        return false;
      if (prefix.js === "Moz")
        return prop;
      var newProp = prop.replace("-inline", "");
      return prefix.js + pascalize(newProp) in style ? prefix.css + newProp : false;
    }
  };
  var unprefixed = {
    supportedProperty: function supportedProperty11(prop, style) {
      return camelize(prop) in style ? prop : false;
    }
  };
  var prefixed = {
    supportedProperty: function supportedProperty12(prop, style) {
      var pascalized = pascalize(prop);
      if (prop[0] === "-")
        return prop;
      if (prop[0] === "-" && prop[1] === "-")
        return prop;
      if (prefix.js + pascalized in style)
        return prefix.css + prop;
      if (prefix.js !== "Webkit" && "Webkit" + pascalized in style)
        return "-webkit-" + prop;
      return false;
    }
  };
  var scrollSnap = {
    supportedProperty: function supportedProperty13(prop) {
      if (prop.substring(0, 11) !== "scroll-snap")
        return false;
      if (prefix.js === "ms") {
        return "" + prefix.css + prop;
      }
      return prop;
    }
  };
  var overscrollBehavior = {
    supportedProperty: function supportedProperty14(prop) {
      if (prop !== "overscroll-behavior")
        return false;
      if (prefix.js === "ms") {
        return prefix.css + "scroll-chaining";
      }
      return prop;
    }
  };
  var propMap = {
    "flex-grow": "flex-positive",
    "flex-shrink": "flex-negative",
    "flex-basis": "flex-preferred-size",
    "justify-content": "flex-pack",
    order: "flex-order",
    "align-items": "flex-align",
    "align-content": "flex-line-pack"
    // 'align-self' is handled by 'align-self' plugin.
  };
  var flex2012 = {
    supportedProperty: function supportedProperty15(prop, style) {
      var newProp = propMap[prop];
      if (!newProp)
        return false;
      return prefix.js + pascalize(newProp) in style ? prefix.css + newProp : false;
    }
  };
  var propMap$1 = {
    flex: "box-flex",
    "flex-grow": "box-flex",
    "flex-direction": ["box-orient", "box-direction"],
    order: "box-ordinal-group",
    "align-items": "box-align",
    "flex-flow": ["box-orient", "box-direction"],
    "justify-content": "box-pack"
  };
  var propKeys = Object.keys(propMap$1);
  var prefixCss = function prefixCss2(p) {
    return prefix.css + p;
  };
  var flex2009 = {
    supportedProperty: function supportedProperty16(prop, style, _ref) {
      var multiple = _ref.multiple;
      if (propKeys.indexOf(prop) > -1) {
        var newProp = propMap$1[prop];
        if (!Array.isArray(newProp)) {
          return prefix.js + pascalize(newProp) in style ? prefix.css + newProp : false;
        }
        if (!multiple)
          return false;
        for (var i = 0; i < newProp.length; i++) {
          if (!(prefix.js + pascalize(newProp[0]) in style)) {
            return false;
          }
        }
        return newProp.map(prefixCss);
      }
      return false;
    }
  };
  var plugins2 = [appearence, colorAdjust, mask, textOrientation, transform, transition, writingMode, userSelect, breakPropsOld, inlineLogicalOld, unprefixed, prefixed, scrollSnap, overscrollBehavior, flex2012, flex2009];
  var propertyDetectors = plugins2.filter(function(p) {
    return p.supportedProperty;
  }).map(function(p) {
    return p.supportedProperty;
  });
  var noPrefill = plugins2.filter(function(p) {
    return p.noPrefill;
  }).reduce(function(a, p) {
    a.push.apply(a, _toConsumableArray(p.noPrefill));
    return a;
  }, []);
  var el;
  var cache2 = {};
  if (module_default) {
    el = document.createElement("p");
    computed = window.getComputedStyle(document.documentElement, "");
    for (key$1 in computed) {
      if (!isNaN(key$1))
        cache2[computed[key$1]] = computed[key$1];
    }
    noPrefill.forEach(function(x) {
      return delete cache2[x];
    });
  }
  var computed;
  var key$1;
  function supportedProperty17(prop, options) {
    if (options === void 0) {
      options = {};
    }
    if (!el)
      return prop;
    if (cache2[prop] != null) {
      return cache2[prop];
    }
    if (prop === "transition" || prop === "transform") {
      options[prop] = prop in el.style;
    }
    for (var i = 0; i < propertyDetectors.length; i++) {
      cache2[prop] = propertyDetectors[i](prop, el.style, options);
      if (cache2[prop])
        break;
    }
    try {
      el.style[prop] = "";
    } catch (err) {
      return false;
    }
    return cache2[prop];
  }
  var cache$1 = {};
  var transitionProperties = {
    transition: 1,
    "transition-property": 1,
    "-webkit-transition": 1,
    "-webkit-transition-property": 1
  };
  var transPropsRegExp = /(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;
  var el$1;
  function prefixTransitionCallback(match2, p1, p2) {
    if (p1 === "var")
      return "var";
    if (p1 === "all")
      return "all";
    if (p2 === "all")
      return ", all";
    var prefixedValue = p1 ? supportedProperty17(p1) : ", " + supportedProperty17(p2);
    if (!prefixedValue)
      return p1 || p2;
    return prefixedValue;
  }
  if (module_default)
    el$1 = document.createElement("p");
  function supportedValue(property, value) {
    var prefixedValue = value;
    if (!el$1 || property === "content")
      return value;
    if (typeof prefixedValue !== "string" || !isNaN(parseInt(prefixedValue, 10))) {
      return prefixedValue;
    }
    var cacheKey = property + prefixedValue;
    if (cache$1[cacheKey] != null) {
      return cache$1[cacheKey];
    }
    try {
      el$1.style[property] = prefixedValue;
    } catch (err) {
      cache$1[cacheKey] = false;
      return false;
    }
    if (transitionProperties[property]) {
      prefixedValue = prefixedValue.replace(transPropsRegExp, prefixTransitionCallback);
    } else if (el$1.style[property] === "") {
      prefixedValue = prefix.css + prefixedValue;
      if (prefixedValue === "-ms-flex")
        el$1.style[property] = "-ms-flexbox";
      el$1.style[property] = prefixedValue;
      if (el$1.style[property] === "") {
        cache$1[cacheKey] = false;
        return false;
      }
    }
    el$1.style[property] = "";
    cache$1[cacheKey] = prefixedValue;
    return cache$1[cacheKey];
  }

  // node_modules/jss-plugin-vendor-prefixer/dist/jss-plugin-vendor-prefixer.esm.js
  function jssVendorPrefixer() {
    function onProcessRule(rule) {
      if (rule.type === "keyframes") {
        var atRule = rule;
        atRule.at = supportedKeyframes(atRule.at);
      }
    }
    function prefixStyle(style) {
      for (var prop in style) {
        var value = style[prop];
        if (prop === "fallbacks" && Array.isArray(value)) {
          style[prop] = value.map(prefixStyle);
          continue;
        }
        var changeProp = false;
        var supportedProp = supportedProperty17(prop);
        if (supportedProp && supportedProp !== prop)
          changeProp = true;
        var changeValue = false;
        var supportedValue$1 = supportedValue(supportedProp, toCssValue(value));
        if (supportedValue$1 && supportedValue$1 !== value)
          changeValue = true;
        if (changeProp || changeValue) {
          if (changeProp)
            delete style[prop];
          style[supportedProp || prop] = supportedValue$1 || value;
        }
      }
      return style;
    }
    function onProcessStyle2(style, rule) {
      if (rule.type !== "style")
        return style;
      return prefixStyle(style);
    }
    function onChangeValue2(value, prop) {
      return supportedValue(prop, toCssValue(value)) || value;
    }
    return {
      onProcessRule,
      onProcessStyle: onProcessStyle2,
      onChangeValue: onChangeValue2
    };
  }
  var jss_plugin_vendor_prefixer_esm_default = jssVendorPrefixer;

  // node_modules/jss-plugin-props-sort/dist/jss-plugin-props-sort.esm.js
  function jssPropsSort() {
    var sort = function sort2(prop0, prop1) {
      if (prop0.length === prop1.length) {
        return prop0 > prop1 ? 1 : -1;
      }
      return prop0.length - prop1.length;
    };
    return {
      onProcessStyle: function onProcessStyle2(style, rule) {
        if (rule.type !== "style")
          return style;
        var newStyle = {};
        var props = Object.keys(style).sort(sort);
        for (var i = 0; i < props.length; i++) {
          newStyle[props[i]] = style[props[i]];
        }
        return newStyle;
      }
    };
  }
  var jss_plugin_props_sort_esm_default = jssPropsSort;

  // node_modules/@mui/styles/jssPreset/jssPreset.js
  function jssPreset() {
    return {
      plugins: [
        jss_plugin_rule_value_function_esm_default(),
        jss_plugin_global_esm_default(),
        jss_plugin_nested_esm_default(),
        jss_plugin_camel_case_esm_default(),
        jss_plugin_default_unit_esm_default(),
        // Disable the vendor prefixer server-side, it does nothing.
        // This way, we can get a performance boost.
        // In the documentation, we are using `autoprefixer` to solve this problem.
        typeof window === "undefined" ? null : jss_plugin_vendor_prefixer_esm_default(),
        jss_plugin_props_sort_esm_default()
      ]
    };
  }

  // node_modules/@mui/styles/makeStyles/makeStyles.js
  init_extends();
  var React3 = __toESM(require_react());

  // node_modules/@mui/styles/mergeClasses/mergeClasses.js
  init_extends();
  var import_utils = __toESM(require_utils());
  function mergeClasses(options = {}) {
    const {
      baseClasses,
      newClasses,
      Component
    } = options;
    if (!newClasses) {
      return baseClasses;
    }
    const nextClasses = _extends({}, baseClasses);
    if (true) {
      if (typeof newClasses === "string") {
        console.error([`MUI: The value \`${newClasses}\` provided to the classes prop of ${(0, import_utils.getDisplayName)(Component)} is incorrect.`, "You might want to use the className prop instead."].join("\n"));
        return baseClasses;
      }
    }
    Object.keys(newClasses).forEach((key) => {
      if (true) {
        if (!baseClasses[key] && newClasses[key]) {
          console.error([`MUI: The key \`${key}\` provided to the classes prop is not implemented in ${(0, import_utils.getDisplayName)(Component)}.`, `You can only override one of the following: ${Object.keys(baseClasses).join(",")}.`].join("\n"));
        }
        if (newClasses[key] && typeof newClasses[key] !== "string") {
          console.error([`MUI: The key \`${key}\` provided to the classes prop is not valid for ${(0, import_utils.getDisplayName)(Component)}.`, `You need to provide a non empty string instead of: ${newClasses[key]}.`].join("\n"));
        }
      }
      if (newClasses[key]) {
        nextClasses[key] = `${baseClasses[key]} ${newClasses[key]}`;
      }
    });
    return nextClasses;
  }

  // node_modules/@mui/styles/makeStyles/multiKeyStore.js
  var multiKeyStore = {
    set: (cache3, key1, key2, value) => {
      let subCache = cache3.get(key1);
      if (!subCache) {
        subCache = /* @__PURE__ */ new Map();
        cache3.set(key1, subCache);
      }
      subCache.set(key2, value);
    },
    get: (cache3, key1, key2) => {
      const subCache = cache3.get(key1);
      return subCache ? subCache.get(key2) : void 0;
    },
    delete: (cache3, key1, key2) => {
      const subCache = cache3.get(key1);
      subCache.delete(key2);
    }
  };
  var multiKeyStore_default = multiKeyStore;

  // node_modules/@mui/styles/useTheme/index.js
  var import_useTheme = __toESM(require_useTheme2());
  function useTheme() {
    var _privateTheme$$$mater;
    const privateTheme = (0, import_useTheme.default)();
    return (_privateTheme$$$mater = privateTheme == null ? void 0 : privateTheme.$$material) != null ? _privateTheme$$$mater : privateTheme;
  }

  // node_modules/@mui/styles/StylesProvider/StylesProvider.js
  init_extends();
  var React2 = __toESM(require_react());
  var import_prop_types = __toESM(require_prop_types());
  var import_utils2 = __toESM(require_utils());
  var import_jsx_runtime = __toESM(require_jsx_runtime());
  var _excluded = ["children", "injectFirst", "disableGeneration"];
  var defaultJSS = createJss(jssPreset());
  var defaultGenerateClassName = createGenerateClassName();
  var defaultSheetsManager = /* @__PURE__ */ new Map();
  var defaultOptions = {
    disableGeneration: false,
    generateClassName: defaultGenerateClassName,
    jss: defaultJSS,
    sheetsCache: null,
    sheetsManager: defaultSheetsManager,
    sheetsRegistry: null
  };
  var StylesContext = /* @__PURE__ */ React2.createContext(defaultOptions);
  if (true) {
    StylesContext.displayName = "StylesContext";
  }
  var injectFirstNode;
  function StylesProvider(props) {
    const {
      children,
      injectFirst = false,
      disableGeneration = false
    } = props, localOptions = _objectWithoutPropertiesLoose(props, _excluded);
    const outerOptions = React2.useContext(StylesContext);
    const {
      generateClassName,
      jss,
      serverGenerateClassName,
      sheetsCache,
      sheetsManager,
      sheetsRegistry
    } = _extends({}, outerOptions, localOptions);
    if (true) {
      if (injectFirst && localOptions.jss) {
        console.error("MUI: You cannot use the jss and injectFirst props at the same time.");
      }
    }
    const value = React2.useMemo(() => {
      const context = {
        disableGeneration,
        generateClassName,
        jss,
        serverGenerateClassName,
        sheetsCache,
        sheetsManager,
        sheetsRegistry
      };
      if (true) {
        if (typeof window === "undefined" && !context.sheetsManager) {
          console.error("MUI: You need to use the ServerStyleSheets API when rendering on the server.");
        }
      }
      if (true) {
        if (context.jss.options.insertionPoint && injectFirst) {
          console.error("MUI: You cannot use a custom insertionPoint and <StylesContext injectFirst> at the same time.");
        }
      }
      if (!context.jss.options.insertionPoint && injectFirst && typeof window !== "undefined") {
        if (!injectFirstNode) {
          const head = document.head;
          injectFirstNode = document.createComment("mui-inject-first");
          head.insertBefore(injectFirstNode, head.firstChild);
        }
        context.jss = createJss({
          plugins: jssPreset().plugins,
          insertionPoint: injectFirstNode
        });
      }
      return context;
    }, [injectFirst, disableGeneration, generateClassName, jss, serverGenerateClassName, sheetsCache, sheetsManager, sheetsRegistry]);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(StylesContext.Provider, {
      value,
      children
    });
  }
  true ? StylesProvider.propTypes = {
    /**
     * Your component tree.
     */
    children: import_prop_types.default.node,
    /**
     * You can disable the generation of the styles with this option.
     * It can be useful when traversing the React tree outside of the HTML
     * rendering step on the server.
     * Let's say you are using react-apollo to extract all
     * the queries made by the interface server-side - you can significantly speed up the traversal with this prop.
     */
    disableGeneration: import_prop_types.default.bool,
    /**
     * JSS's class name generator.
     */
    generateClassName: import_prop_types.default.func,
    /**
     * By default, the styles are injected last in the <head> element of the page.
     * As a result, they gain more specificity than any other style sheet.
     * If you want to override MUI's styles, set this prop.
     */
    injectFirst: import_prop_types.default.bool,
    /**
     * JSS's instance.
     */
    jss: import_prop_types.default.object,
    /**
     * @ignore
     */
    serverGenerateClassName: import_prop_types.default.func,
    /**
     * @ignore
     *
     * Beta feature.
     *
     * Cache for the sheets.
     */
    sheetsCache: import_prop_types.default.object,
    /**
     * @ignore
     *
     * The sheetsManager is used to deduplicate style sheet injection in the page.
     * It's deduplicating using the (theme, styles) couple.
     * On the server, you should provide a new instance for each request.
     */
    sheetsManager: import_prop_types.default.object,
    /**
     * @ignore
     *
     * Collect the sheets.
     */
    sheetsRegistry: import_prop_types.default.object
  } : void 0;
  if (true) {
    true ? StylesProvider.propTypes = (0, import_utils2.exactProp)(StylesProvider.propTypes) : void 0;
  }

  // node_modules/@mui/styles/makeStyles/indexCounter.js
  var indexCounter = -1e9;
  function increment() {
    indexCounter += 1;
    if (true) {
      if (indexCounter >= 0) {
        console.warn(["MUI: You might have a memory leak.", "The indexCounter is not supposed to grow that much."].join("\n"));
      }
    }
    return indexCounter;
  }

  // node_modules/@mui/styles/getStylesCreator/getStylesCreator.js
  init_extends();
  var import_utils4 = __toESM(require_utils());

  // node_modules/@mui/styles/propsToClassKey/propsToClassKey.js
  var import_utils3 = __toESM(require_utils());
  var _excluded2 = ["variant"];
  function isEmpty(string) {
    return string.length === 0;
  }
  function propsToClassKey(props) {
    const {
      variant
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded2);
    let classKey = variant || "";
    Object.keys(other).sort().forEach((key) => {
      if (key === "color") {
        classKey += isEmpty(classKey) ? props[key] : (0, import_utils3.unstable_capitalize)(props[key]);
      } else {
        classKey += `${isEmpty(classKey) ? key : (0, import_utils3.unstable_capitalize)(key)}${(0, import_utils3.unstable_capitalize)(props[key].toString())}`;
      }
    });
    return classKey;
  }

  // node_modules/@mui/styles/getStylesCreator/noopTheme.js
  var noopTheme = {};
  var noopTheme_default = noopTheme;

  // node_modules/@mui/styles/getStylesCreator/getStylesCreator.js
  function getStylesCreator(stylesOrCreator) {
    const themingEnabled = typeof stylesOrCreator === "function";
    if (true) {
      if (typeof stylesOrCreator !== "object" && !themingEnabled) {
        console.error(["MUI: The `styles` argument provided is invalid.", "You need to provide a function generating the styles or a styles object."].join("\n"));
      }
    }
    return {
      create: (theme, name) => {
        let styles7;
        try {
          styles7 = themingEnabled ? stylesOrCreator(theme) : stylesOrCreator;
        } catch (err) {
          if (true) {
            if (themingEnabled === true && theme === noopTheme_default) {
              console.error(["MUI: The `styles` argument provided is invalid.", "You are providing a function without a theme in the context.", "One of the parent elements needs to use a ThemeProvider."].join("\n"));
            }
          }
          throw err;
        }
        if (!name || !theme.components || !theme.components[name] || !theme.components[name].styleOverrides && !theme.components[name].variants) {
          return styles7;
        }
        const overrides = theme.components[name].styleOverrides || {};
        const variants = theme.components[name].variants || [];
        const stylesWithOverrides = _extends({}, styles7);
        Object.keys(overrides).forEach((key) => {
          if (true) {
            if (!stylesWithOverrides[key]) {
              console.warn(["MUI: You are trying to override a style that does not exist.", `Fix the \`${key}\` key of \`theme.components.${name}.styleOverrides\`.`, "", `If you intentionally wanted to add a new key, please use the theme.components[${name}].variants option.`].join("\n"));
            }
          }
          stylesWithOverrides[key] = (0, import_utils4.deepmerge)(stylesWithOverrides[key] || {}, overrides[key]);
        });
        variants.forEach((definition) => {
          const classKey = propsToClassKey(definition.props);
          stylesWithOverrides[classKey] = (0, import_utils4.deepmerge)(stylesWithOverrides[classKey] || {}, definition.style);
        });
        return stylesWithOverrides;
      },
      options: {}
    };
  }

  // node_modules/@mui/styles/makeStyles/makeStyles.js
  var _excluded3 = ["name", "classNamePrefix", "Component", "defaultTheme"];
  function getClasses({
    state,
    stylesOptions
  }, classes, Component) {
    if (stylesOptions.disableGeneration) {
      return classes || {};
    }
    if (!state.cacheClasses) {
      state.cacheClasses = {
        // Cache for the finalized classes value.
        value: null,
        // Cache for the last used classes prop pointer.
        lastProp: null,
        // Cache for the last used rendered classes pointer.
        lastJSS: {}
      };
    }
    let generate = false;
    if (state.classes !== state.cacheClasses.lastJSS) {
      state.cacheClasses.lastJSS = state.classes;
      generate = true;
    }
    if (classes !== state.cacheClasses.lastProp) {
      state.cacheClasses.lastProp = classes;
      generate = true;
    }
    if (generate) {
      state.cacheClasses.value = mergeClasses({
        baseClasses: state.cacheClasses.lastJSS,
        newClasses: classes,
        Component
      });
    }
    return state.cacheClasses.value;
  }
  function attach({
    state,
    theme,
    stylesOptions,
    stylesCreator,
    name
  }, props) {
    if (stylesOptions.disableGeneration) {
      return;
    }
    let sheetManager = multiKeyStore_default.get(stylesOptions.sheetsManager, stylesCreator, theme);
    if (!sheetManager) {
      sheetManager = {
        refs: 0,
        staticSheet: null,
        dynamicStyles: null
      };
      multiKeyStore_default.set(stylesOptions.sheetsManager, stylesCreator, theme, sheetManager);
    }
    const options = _extends({}, stylesCreator.options, stylesOptions, {
      theme,
      flip: typeof stylesOptions.flip === "boolean" ? stylesOptions.flip : theme.direction === "rtl"
    });
    options.generateId = options.serverGenerateClassName || options.generateClassName;
    const sheetsRegistry = stylesOptions.sheetsRegistry;
    if (sheetManager.refs === 0) {
      let staticSheet;
      if (stylesOptions.sheetsCache) {
        staticSheet = multiKeyStore_default.get(stylesOptions.sheetsCache, stylesCreator, theme);
      }
      const styles7 = stylesCreator.create(theme, name);
      if (!staticSheet) {
        staticSheet = stylesOptions.jss.createStyleSheet(styles7, _extends({
          link: false
        }, options));
        staticSheet.attach();
        if (stylesOptions.sheetsCache) {
          multiKeyStore_default.set(stylesOptions.sheetsCache, stylesCreator, theme, staticSheet);
        }
      }
      if (sheetsRegistry) {
        sheetsRegistry.add(staticSheet);
      }
      sheetManager.staticSheet = staticSheet;
      sheetManager.dynamicStyles = getDynamicStyles(styles7);
    }
    if (sheetManager.dynamicStyles) {
      const dynamicSheet = stylesOptions.jss.createStyleSheet(sheetManager.dynamicStyles, _extends({
        link: true
      }, options));
      dynamicSheet.update(props);
      dynamicSheet.attach();
      state.dynamicSheet = dynamicSheet;
      state.classes = mergeClasses({
        baseClasses: sheetManager.staticSheet.classes,
        newClasses: dynamicSheet.classes
      });
      if (sheetsRegistry) {
        sheetsRegistry.add(dynamicSheet);
      }
    } else {
      state.classes = sheetManager.staticSheet.classes;
    }
    sheetManager.refs += 1;
  }
  function update({
    state
  }, props) {
    if (state.dynamicSheet) {
      state.dynamicSheet.update(props);
    }
  }
  function detach({
    state,
    theme,
    stylesOptions,
    stylesCreator
  }) {
    if (stylesOptions.disableGeneration) {
      return;
    }
    const sheetManager = multiKeyStore_default.get(stylesOptions.sheetsManager, stylesCreator, theme);
    sheetManager.refs -= 1;
    const sheetsRegistry = stylesOptions.sheetsRegistry;
    if (sheetManager.refs === 0) {
      multiKeyStore_default.delete(stylesOptions.sheetsManager, stylesCreator, theme);
      stylesOptions.jss.removeStyleSheet(sheetManager.staticSheet);
      if (sheetsRegistry) {
        sheetsRegistry.remove(sheetManager.staticSheet);
      }
    }
    if (state.dynamicSheet) {
      stylesOptions.jss.removeStyleSheet(state.dynamicSheet);
      if (sheetsRegistry) {
        sheetsRegistry.remove(state.dynamicSheet);
      }
    }
  }
  function useSynchronousEffect(func, values2) {
    const key = React3.useRef([]);
    let output;
    const currentKey = React3.useMemo(() => ({}), values2);
    if (key.current !== currentKey) {
      key.current = currentKey;
      output = func();
    }
    React3.useEffect(
      () => () => {
        if (output) {
          output();
        }
      },
      [currentKey]
      // eslint-disable-line react-hooks/exhaustive-deps
    );
  }
  function makeStyles(stylesOrCreator, options = {}) {
    const {
      // alias for classNamePrefix, if provided will listen to theme (required for theme.components[name].styleOverrides)
      name,
      // Help with debuggability.
      classNamePrefix: classNamePrefixOption,
      Component,
      defaultTheme: defaultTheme4 = noopTheme_default
    } = options, stylesOptions2 = _objectWithoutPropertiesLoose(options, _excluded3);
    const stylesCreator = getStylesCreator(stylesOrCreator);
    const classNamePrefix = name || classNamePrefixOption || "makeStyles";
    stylesCreator.options = {
      index: increment(),
      name,
      meta: classNamePrefix,
      classNamePrefix
    };
    const useStyles2 = (props = {}) => {
      const theme = useTheme() || defaultTheme4;
      const stylesOptions = _extends({}, React3.useContext(StylesContext), stylesOptions2);
      const instance = React3.useRef();
      const shouldUpdate = React3.useRef();
      useSynchronousEffect(() => {
        const current = {
          name,
          state: {},
          stylesCreator,
          stylesOptions,
          theme
        };
        attach(current, props);
        shouldUpdate.current = false;
        instance.current = current;
        return () => {
          detach(current);
        };
      }, [theme, stylesCreator]);
      React3.useEffect(() => {
        if (shouldUpdate.current) {
          update(instance.current, props);
        }
        shouldUpdate.current = true;
      });
      const classes = getClasses(instance.current, props.classes, Component);
      if (true) {
        React3.useDebugValue(classes);
      }
      if (true) {
        const supportedComponents = ["MuiAvatar", "MuiBadge", "MuiButton", "MuiButtonGroup", "MuiChip", "MuiDivider", "MuiFab", "MuiPaper", "MuiToolbar", "MuiTypography", "MuiAlert", "MuiPagination", "MuiPaginationItem", "MuiSkeleton", "MuiTimelineDot"];
        if (name && supportedComponents.indexOf(name) >= 0 && props.variant && !classes[props.variant]) {
          console.error([`MUI: You are using a variant value \`${props.variant}\` for which you didn't define styles.`, `Please create a new variant matcher in your theme for this variant. To learn more about matchers visit https://mui.com/r/custom-component-variants.`].join("\n"));
        }
      }
      return classes;
    };
    return useStyles2;
  }

  // node_modules/clsx/dist/clsx.mjs
  function r(e) {
    var t, f, n = "";
    if ("string" == typeof e || "number" == typeof e)
      n += e;
    else if ("object" == typeof e)
      if (Array.isArray(e))
        for (t = 0; t < e.length; t++)
          e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
      else
        for (t in e)
          e[t] && (n && (n += " "), n += t);
    return n;
  }
  function clsx() {
    for (var e, t, f = 0, n = ""; f < arguments.length; )
      (e = arguments[f++]) && (t = r(e)) && (n && (n += " "), n += t);
    return n;
  }
  var clsx_default = clsx;

  // node_modules/@mui/styles/index.js
  if (typeof window !== "undefined") {
    import_utils5.ponyfillGlobal["__@mui/styles-init__"] = import_utils5.ponyfillGlobal["__@mui/styles-init__"] || 0;
    if (import_utils5.ponyfillGlobal["__@mui/styles-init__"] === 1) {
      console.warn(["It looks like there are several instances of `@mui/styles` initialized in this application.", "This may cause theme propagation issues, broken class names, specificity issues, and makes your application bigger without a good reason.", "", "See https://mui.com/r/styles-instance-warning for more info."].join("\n"));
    }
    import_utils5.ponyfillGlobal["__@mui/styles-init__"] += 1;
  }

  // src/app/components/styles.tsx
  var useStyles = makeStyles({
    chatWidget: {
      position: "fixed",
      top: "0 !important",
      background: "#F6F7FC !important",
      width: "100% !important",
      zIndex: "999 !important"
    },
    floatingChatButton: {
      position: "fixed",
      bottom: "20px",
      right: "20px",
      border: "none",
      background: "none",
      "z-index": 9999,
      "font-size": "20px",
      cursor: "pointer"
    },
    "@global": {
      body: {
        background: "#F6F7FC"
      }
    },
    "@font-face": {
      fontFamily: "Poppins",
      src: "url('https://fonts.gstatic.com/s/poppins/v20/pxiEyp8kv8JHgFVrJJfecnFHGPc.woff2')"
    },
    header: {
      width: "100%",
      "background-color": "#FFFFFF",
      height: "112px",
      display: "flex",
      "align-items": "center",
      "border-bottom-style": "groove",
      "border-color": "#F6F7FC",
      "border-width": "thin",
      padding: "0px 39px"
    },
    toolTip: {
      width: "360px !important",
      position: "fixed",
      bottom: "50px",
      right: "-4px",
      transition: "all 250ms ease-out",
      "box-shadow": "0 2px 5px rgba(0, 0, 0, 0.3)",
      transform: "translate(-31px, -4.3em)",
      borderRadius: "24px 24px 0 24px",
      backgroundColor: "#FFFFFF",
      zIndex: 1e3
    },
    buttonCollapse: {
      background: "#F6F7FC !important",
      marginLeft: "110em !important",
      borderRadius: "12px !important",
      padding: "8px 22px 8px 22px !important"
    },
    ChatWidgetBody: {
      margin: "2em 3em !important"
    },
    chatWidgetMessageList: {
      width: "100%",
      height: "48em",
      overflow: "auto",
      "&::-webkit-scrollbar": {
        width: 0
      }
    },
    timeLineSideNav: {
      backgroundColor: "#FFFFFF",
      paddingTop: "unset !important",
      color: "#000000",
      borderRadius: "24px 0 24px 24px",
      fontFamily: "poppins !important",
      fontWeight: "400 !important"
    },
    timeLineSideNavState: {
      fontSize: "12px !important",
      fontFamily: "poppins !important",
      fontWeight: "400 !important",
      paddingLeft: "unset !important"
    },
    timeLineStepsContent: {
      fontSize: "12px !important"
    },
    timeLineStepText: {
      fontFamily: "poppins !important",
      fontWeight: "400 !important",
      fontSize: "12px !important",
      marginTop: "10px",
      marginBottom: "12px",
      margin: "revert !important"
    },
    listItemIcon: {
      minWidth: "30px !important"
    },
    listItemContent: {
      background: "#FFFFFF",
      marginBottom: "20px",
      borderRadius: "12px",
      margin: "15px"
    },
    listItemHead: {
      fontFamily: "poppins !important",
      fontSize: "14px !important",
      fontWeight: "500 !important",
      margin: "0px 0px 0px 6px !important",
      color: "#000000"
    },
    listItemText: {
      fontFamily: "poppins !important",
      fontSize: "14px !important",
      fontWeight: "400 !important"
    },
    listItemReplyText: {
      fontFamily: "poppins !important",
      fontSize: "14px !important",
      fontWeight: "400 !important"
    },
    listItemHeadIcon: {
      height: "auto",
      maxWidth: "40em"
    },
    chatContent: {
      paddingTop: "0px !important",
      marginLeft: "5em !important"
    },
    logo: {
      paddingTop: "20px"
    },
    toolTipWhite: {
      textAlign: "center",
      height: "15em",
      color: "#FFFFFF",
      borderRadius: "24px 24px 0 0"
    },
    toolTipBlack: {
      backgroundColor: "#010101",
      height: "15em",
      color: "#FFFFFF",
      borderRadius: "24px 24px 0 0"
    },
    toolTipText: {
      fontFamily: "poppins !important",
      padding: "0px 22px",
      fontSize: "2em !important",
      fontWeight: "400 !important"
    },
    stepCount: {
      color: "#D02DF5"
    },
    termsConditions: {
      fontFamily: "poppins !important",
      fontSize: "12px !important",
      fontWeight: "500 !important",
      textAlign: "center",
      paddingBottom: "10px"
    },
    termsConditionsLink: {
      textDecoration: "none"
    },
    feedbackContainer: {
      display: "flex",
      backgroundColor: "white",
      margin: "0%",
      padding: "2px 15px 2px 10px",
      border: "1px solid white",
      borderRadius: "16px"
    },
    thumbUp: {
      padding: "4px 12px 4px 8px",
      cursor: "pointer"
    },
    thumbDown: {
      padding: "4px 12px 4px 12px",
      cursor: "pointer"
    },
    modelStyle: {
      position: "absolute",
      top: "50%",
      left: "50%",
      transform: "translate(-50%, -50%)",
      width: "35%",
      backgroundColor: "white",
      padding: "20px",
      border: "1px solid white",
      borderRadius: "16px"
    },
    headertitle: {
      margin: 0,
      "font-size": "16px",
      "margin-left": "10px"
    },
    buttonGridContainer: {
      justifyContent: "center"
    },
    headerIcon: {
      position: "relative"
    },
    findCrmButton: {
      margin: 0,
      "font-size": "16px",
      "margin-left": "10px",
      "top": "7em",
      height: "48px",
      fontFamily: "poppins !important",
      fontWeight: "500 !important",
      borderRadius: "0 !important",
      boxShadow: "none !important"
    },
    footer: {
      display: "flex"
    },
    submitButton: {
      fontFamily: "poppins !important",
      fontWeight: 400,
      "margin-left": "10px",
      border: "none",
      padding: "5px 10px",
      cursor: "pointer"
    },
    footerTextBox: {
      "flex-grow": 1,
      padding: "5px",
      border: "solid",
      borderRadius: "12px",
      borderColor: "#F2F2F2",
      paddingLeft: "16px !important",
      fontFamily: "poppins !important",
      fontSize: "16px"
    },
    messagesList: {
      padding: "10px",
      height: "400px",
      "overflow-y": "auto"
    },
    chatMessageUl: {
      padding: "10px",
      margin: 0,
      "list-style": "none",
      "overflow-y": "scroll",
      "overflow-x": "hidden",
      "flex-grow": 1,
      "border-radius": "4px"
    },
    chatMessage: {
      background: "transparent",
      "& > li": {
        position: "relative",
        clear: "both",
        display: "inline-block",
        padding: "14px",
        margin: "0 0 10px 0",
        font: "12px/16px 'Noto Sans', sans-serif",
        "border-radius": "10px",
        "word-wrap": "break-word",
        "max-width": "81%",
        "&:before": {
          position: "absolute",
          top: 0,
          width: "25px",
          height: "25px",
          "border-radius": "25px",
          content: "",
          "background-size": "cover"
        },
        "&:after": {
          position: "absolute",
          top: "10px",
          content: "",
          width: 0,
          height: 0,
          "border-top": "10px solid rgba(25, 147, 147, 0.2)"
        },
        "&.other": {
          animation: "$showChatOdd 0.15s 1 ease-in",
          "-moz-animation": "$showChatOdd 0.15s 1 ease-in",
          "-webkit-animation": "$showChatOdd 0.15s 1 ease-in",
          float: "right",
          // 'margin-right': '45px',
          color: "#000000",
          "background-color": "#e3d2d2",
          "&:before": {
            right: "-45px",
            "background-image": "url(https://github.com/Thatkookooguy.png)"
          },
          "&:after": {
            "border-right": "10px solid transparent",
            right: "-10px"
          }
        },
        "&.self": {
          animation: "$showChatEven 0.15s 1 ease-in",
          "-moz-animation": "$showChatEven 0.15s 1 ease-in",
          "-webkit-animation": "$showChatEven 0.15s 1 ease-in",
          float: "left",
          // 'margin-left': '45px',
          color: "#000000",
          "background-color": "#cdddf7",
          "&:before": {
            left: "-45px",
            "background-image": "url(https://github.com/ortichon.png);"
          },
          "&:after": {
            "border-left": "10px solid transparent",
            left: "-10px"
          }
        }
      }
    },
    chatMessageMessage: {
      margin: "5px 0"
    },
    messageOther: {
      "font-weight": "bold"
    },
    messageSelf: {
      "font-weight": "bold"
    },
    closeButton: {
      left: "11.5em",
      position: "relative",
      top: "5px"
    },
    element: {
      "flex-direction": "row",
      "justify-content": "center"
    }
  });
  var styles_default = useStyles;

  // src/app/page.tsx
  var import_react16 = __toESM(require_react());

  // node_modules/@mui/material/index.js
  var material_exports = {};
  __export(material_exports, {
    Accordion: () => Accordion_default,
    AccordionActions: () => AccordionActions_default,
    AccordionDetails: () => AccordionDetails_default,
    AccordionSummary: () => AccordionSummary_default,
    Alert: () => Alert_default,
    AlertTitle: () => AlertTitle_default,
    AppBar: () => AppBar_default,
    Autocomplete: () => Autocomplete_default,
    Avatar: () => Avatar_default,
    AvatarGroup: () => AvatarGroup_default,
    Backdrop: () => Backdrop_default,
    Badge: () => Badge_default,
    BottomNavigation: () => BottomNavigation_default,
    BottomNavigationAction: () => BottomNavigationAction_default,
    Box: () => Box_default,
    Breadcrumbs: () => Breadcrumbs_default,
    Button: () => Button_default,
    ButtonBase: () => ButtonBase_default,
    ButtonGroup: () => ButtonGroup_default,
    Card: () => Card_default,
    CardActionArea: () => CardActionArea_default,
    CardActions: () => CardActions_default,
    CardContent: () => CardContent_default,
    CardHeader: () => CardHeader_default,
    CardMedia: () => CardMedia_default,
    Checkbox: () => Checkbox_default,
    Chip: () => Chip_default,
    CircularProgress: () => CircularProgress_default,
    ClickAwayListener: () => ClickAwayListener,
    Collapse: () => Collapse_default,
    Container: () => Container_default,
    CssBaseline: () => CssBaseline_default,
    Dialog: () => Dialog_default,
    DialogActions: () => DialogActions_default,
    DialogContent: () => DialogContent_default,
    DialogContentText: () => DialogContentText_default,
    DialogTitle: () => DialogTitle_default,
    Divider: () => Divider_default,
    Drawer: () => Drawer_default,
    Experimental_CssVarsProvider: () => CssVarsProvider,
    Fab: () => Fab_default,
    Fade: () => Fade_default,
    FilledInput: () => FilledInput_default,
    FormControl: () => FormControl_default,
    FormControlLabel: () => FormControlLabel_default,
    FormGroup: () => FormGroup_default,
    FormHelperText: () => FormHelperText_default,
    FormLabel: () => FormLabel_default,
    FormLabelRoot: () => FormLabelRoot,
    GlobalStyles: () => GlobalStyles_default,
    Grid: () => Grid_default,
    Grow: () => Grow_default,
    Hidden: () => Hidden_default,
    Icon: () => Icon_default,
    IconButton: () => IconButton_default,
    ImageList: () => ImageList_default,
    ImageListItem: () => ImageListItem_default,
    ImageListItemBar: () => ImageListItemBar_default,
    Input: () => Input_default,
    InputAdornment: () => InputAdornment_default,
    InputBase: () => InputBase_default,
    InputLabel: () => InputLabel_default,
    LinearProgress: () => LinearProgress_default,
    Link: () => Link_default,
    List: () => List_default,
    ListItem: () => ListItem_default,
    ListItemAvatar: () => ListItemAvatar_default,
    ListItemButton: () => ListItemButton_default,
    ListItemIcon: () => ListItemIcon_default,
    ListItemSecondaryAction: () => ListItemSecondaryAction_default,
    ListItemText: () => ListItemText_default,
    ListSubheader: () => ListSubheader_default,
    Menu: () => Menu_default,
    MenuItem: () => MenuItem_default,
    MenuList: () => MenuList_default,
    MobileStepper: () => MobileStepper_default,
    Modal: () => Modal_default,
    ModalManager: () => ModalManager,
    NativeSelect: () => NativeSelect_default,
    NoSsr: () => NoSsr,
    OutlinedInput: () => OutlinedInput_default,
    Pagination: () => Pagination_default,
    PaginationItem: () => PaginationItem_default,
    Paper: () => Paper_default,
    Popover: () => Popover_default,
    PopoverPaper: () => PopoverPaper,
    PopoverRoot: () => PopoverRoot,
    Popper: () => Popper_default,
    Portal: () => Portal,
    Radio: () => Radio_default,
    RadioGroup: () => RadioGroup_default,
    Rating: () => Rating_default,
    ScopedCssBaseline: () => ScopedCssBaseline_default,
    Select: () => Select_default,
    Skeleton: () => Skeleton_default,
    Slide: () => Slide_default,
    Slider: () => Slider_default,
    SliderMark: () => SliderMark,
    SliderMarkLabel: () => SliderMarkLabel,
    SliderRail: () => SliderRail,
    SliderRoot: () => SliderRoot,
    SliderThumb: () => SliderThumb,
    SliderTrack: () => SliderTrack,
    SliderValueLabel: () => SliderValueLabel2,
    Snackbar: () => Snackbar_default,
    SnackbarContent: () => SnackbarContent_default,
    SpeedDial: () => SpeedDial_default,
    SpeedDialAction: () => SpeedDialAction_default,
    SpeedDialIcon: () => SpeedDialIcon_default,
    Stack: () => Stack_default,
    Step: () => Step_default,
    StepButton: () => StepButton_default,
    StepConnector: () => StepConnector_default,
    StepContent: () => StepContent_default,
    StepContext: () => StepContext_default,
    StepIcon: () => StepIcon_default,
    StepLabel: () => StepLabel_default,
    Stepper: () => Stepper_default,
    StepperContext: () => StepperContext_default,
    StyledEngineProvider: () => import_system11.StyledEngineProvider,
    SvgIcon: () => import_SvgIcon3.default,
    SwipeableDrawer: () => SwipeableDrawer_default,
    Switch: () => Switch_default,
    THEME_ID: () => identifier_default,
    Tab: () => Tab_default,
    TabScrollButton: () => TabScrollButton_default,
    Table: () => Table_default,
    TableBody: () => TableBody_default,
    TableCell: () => TableCell_default,
    TableContainer: () => TableContainer_default,
    TableFooter: () => TableFooter_default,
    TableHead: () => TableHead_default,
    TablePagination: () => TablePagination_default,
    TableRow: () => TableRow_default,
    TableSortLabel: () => TableSortLabel_default,
    Tabs: () => Tabs_default,
    TextField: () => TextField_default,
    TextareaAutosize: () => TextareaAutosize,
    ThemeProvider: () => ThemeProvider3,
    ToggleButton: () => ToggleButton_default,
    ToggleButtonGroup: () => ToggleButtonGroup_default,
    Toolbar: () => Toolbar_default,
    Tooltip: () => Tooltip_default,
    Typography: () => Typography_default,
    Unstable_Grid2: () => Grid2_default,
    Unstable_TrapFocus: () => FocusTrap,
    Zoom: () => Zoom_default,
    accordionActionsClasses: () => accordionActionsClasses_default,
    accordionClasses: () => accordionClasses_default,
    accordionDetailsClasses: () => accordionDetailsClasses_default,
    accordionSummaryClasses: () => accordionSummaryClasses_default,
    adaptV4Theme: () => adaptV4Theme,
    alertClasses: () => alertClasses_default,
    alertTitleClasses: () => alertTitleClasses_default,
    alpha: () => import_system10.alpha,
    appBarClasses: () => appBarClasses_default,
    autocompleteClasses: () => autocompleteClasses_default,
    avatarClasses: () => avatarClasses_default,
    avatarGroupClasses: () => avatarGroupClasses_default,
    backdropClasses: () => backdropClasses_default,
    badgeClasses: () => badgeClasses_default,
    bottomNavigationActionClasses: () => bottomNavigationActionClasses_default,
    bottomNavigationClasses: () => bottomNavigationClasses_default,
    breadcrumbsClasses: () => breadcrumbsClasses_default,
    buttonBaseClasses: () => buttonBaseClasses_default,
    buttonClasses: () => buttonClasses_default,
    buttonGroupClasses: () => buttonGroupClasses_default,
    cardActionAreaClasses: () => cardActionAreaClasses_default,
    cardActionsClasses: () => cardActionsClasses_default,
    cardClasses: () => cardClasses_default,
    cardContentClasses: () => cardContentClasses_default,
    cardHeaderClasses: () => cardHeaderClasses_default,
    cardMediaClasses: () => cardMediaClasses_default,
    checkboxClasses: () => checkboxClasses_default,
    chipClasses: () => chipClasses_default,
    circularProgressClasses: () => circularProgressClasses_default,
    collapseClasses: () => collapseClasses_default,
    colors: () => colors_exports,
    containerClasses: () => containerClasses_default,
    createFilterOptions: () => createFilterOptions,
    createMuiTheme: () => createMuiTheme,
    createStyles: () => createStyles,
    createTheme: () => createTheme_default,
    css: () => import_system10.css,
    darkScrollbar: () => darkScrollbar,
    darken: () => import_system10.darken,
    decomposeColor: () => import_system10.decomposeColor,
    dialogActionsClasses: () => dialogActionsClasses_default,
    dialogClasses: () => dialogClasses_default,
    dialogContentClasses: () => dialogContentClasses_default,
    dialogContentTextClasses: () => dialogContentTextClasses_default,
    dialogTitleClasses: () => dialogTitleClasses_default,
    dividerClasses: () => dividerClasses_default,
    drawerClasses: () => drawerClasses_default,
    duration: () => duration,
    easing: () => easing,
    emphasize: () => import_system10.emphasize,
    experimentalStyled: () => styled_default,
    experimental_extendTheme: () => extendTheme,
    experimental_sx: () => experimental_sx,
    fabClasses: () => fabClasses_default,
    filledInputClasses: () => filledInputClasses_default,
    formControlClasses: () => formControlClasses_default,
    formControlLabelClasses: () => formControlLabelClasses_default,
    formGroupClasses: () => formGroupClasses_default,
    formHelperTextClasses: () => formHelperTextClasses_default,
    formLabelClasses: () => formLabelClasses_default,
    generateUtilityClass: () => import_generateUtilityClass138.default,
    generateUtilityClasses: () => import_utils280.unstable_generateUtilityClasses,
    getAccordionActionsUtilityClass: () => getAccordionActionsUtilityClass,
    getAccordionDetailsUtilityClass: () => getAccordionDetailsUtilityClass,
    getAccordionSummaryUtilityClass: () => getAccordionSummaryUtilityClass,
    getAccordionUtilityClass: () => getAccordionUtilityClass,
    getAlertTitleUtilityClass: () => getAlertTitleUtilityClass,
    getAlertUtilityClass: () => getAlertUtilityClass,
    getAppBarUtilityClass: () => getAppBarUtilityClass,
    getAutocompleteUtilityClass: () => getAutocompleteUtilityClass,
    getAvatarGroupUtilityClass: () => getAvatarGroupUtilityClass,
    getAvatarUtilityClass: () => getAvatarUtilityClass,
    getBackdropUtilityClass: () => getBackdropUtilityClass,
    getBadgeUtilityClass: () => getBadgeUtilityClass2,
    getBottomNavigationActionUtilityClass: () => getBottomNavigationActionUtilityClass,
    getBottomNavigationUtilityClass: () => getBottomNavigationUtilityClass,
    getBreadcrumbsUtilityClass: () => getBreadcrumbsUtilityClass,
    getButtonBaseUtilityClass: () => getButtonBaseUtilityClass,
    getButtonGroupUtilityClass: () => getButtonGroupUtilityClass,
    getButtonUtilityClass: () => getButtonUtilityClass2,
    getCardActionAreaUtilityClass: () => getCardActionAreaUtilityClass,
    getCardActionsUtilityClass: () => getCardActionsUtilityClass,
    getCardContentUtilityClass: () => getCardContentUtilityClass,
    getCardHeaderUtilityClass: () => getCardHeaderUtilityClass,
    getCardMediaUtilityClass: () => getCardMediaUtilityClass,
    getCardUtilityClass: () => getCardUtilityClass,
    getCheckboxUtilityClass: () => getCheckboxUtilityClass,
    getChipUtilityClass: () => getChipUtilityClass,
    getCircularProgressUtilityClass: () => getCircularProgressUtilityClass,
    getCollapseUtilityClass: () => getCollapseUtilityClass,
    getContainerUtilityClass: () => getContainerUtilityClass,
    getContrastRatio: () => import_system10.getContrastRatio,
    getDialogActionsUtilityClass: () => getDialogActionsUtilityClass,
    getDialogContentTextUtilityClass: () => getDialogContentTextUtilityClass,
    getDialogContentUtilityClass: () => getDialogContentUtilityClass,
    getDialogTitleUtilityClass: () => getDialogTitleUtilityClass,
    getDialogUtilityClass: () => getDialogUtilityClass,
    getDividerUtilityClass: () => getDividerUtilityClass,
    getDrawerUtilityClass: () => getDrawerUtilityClass,
    getFabUtilityClass: () => getFabUtilityClass,
    getFilledInputUtilityClass: () => getFilledInputUtilityClass,
    getFormControlLabelUtilityClasses: () => getFormControlLabelUtilityClasses,
    getFormControlUtilityClasses: () => getFormControlUtilityClasses,
    getFormGroupUtilityClass: () => getFormGroupUtilityClass,
    getFormHelperTextUtilityClasses: () => getFormHelperTextUtilityClasses,
    getFormLabelUtilityClasses: () => getFormLabelUtilityClasses,
    getGrid2UtilityClass: () => getGrid2UtilityClass,
    getGridUtilityClass: () => getGridUtilityClass,
    getIconButtonUtilityClass: () => getIconButtonUtilityClass,
    getIconUtilityClass: () => getIconUtilityClass,
    getImageListItemBarUtilityClass: () => getImageListItemBarUtilityClass,
    getImageListItemUtilityClass: () => getImageListItemUtilityClass,
    getImageListUtilityClass: () => getImageListUtilityClass,
    getInitColorSchemeScript: () => getInitColorSchemeScript,
    getInputAdornmentUtilityClass: () => getInputAdornmentUtilityClass,
    getInputBaseUtilityClass: () => getInputBaseUtilityClass,
    getInputLabelUtilityClasses: () => getInputLabelUtilityClasses,
    getInputUtilityClass: () => getInputUtilityClass2,
    getLinearProgressUtilityClass: () => getLinearProgressUtilityClass,
    getLinkUtilityClass: () => getLinkUtilityClass,
    getListItemAvatarUtilityClass: () => getListItemAvatarUtilityClass,
    getListItemButtonUtilityClass: () => getListItemButtonUtilityClass,
    getListItemIconUtilityClass: () => getListItemIconUtilityClass,
    getListItemSecondaryActionClassesUtilityClass: () => getListItemSecondaryActionClassesUtilityClass,
    getListItemTextUtilityClass: () => getListItemTextUtilityClass,
    getListItemUtilityClass: () => getListItemUtilityClass,
    getListSubheaderUtilityClass: () => getListSubheaderUtilityClass,
    getListUtilityClass: () => getListUtilityClass,
    getLuminance: () => import_system10.getLuminance,
    getMenuItemUtilityClass: () => getMenuItemUtilityClass2,
    getMenuUtilityClass: () => getMenuUtilityClass2,
    getMobileStepperUtilityClass: () => getMobileStepperUtilityClass,
    getModalUtilityClass: () => getModalUtilityClass2,
    getNativeSelectUtilityClasses: () => getNativeSelectUtilityClasses,
    getOffsetLeft: () => getOffsetLeft,
    getOffsetTop: () => getOffsetTop,
    getOutlinedInputUtilityClass: () => getOutlinedInputUtilityClass,
    getOverlayAlpha: () => getOverlayAlpha_default,
    getPaginationItemUtilityClass: () => getPaginationItemUtilityClass,
    getPaginationUtilityClass: () => getPaginationUtilityClass,
    getPaperUtilityClass: () => getPaperUtilityClass,
    getPopoverUtilityClass: () => getPopoverUtilityClass,
    getRadioUtilityClass: () => getRadioUtilityClass,
    getRatingUtilityClass: () => getRatingUtilityClass,
    getScopedCssBaselineUtilityClass: () => getScopedCssBaselineUtilityClass,
    getSelectUtilityClasses: () => getSelectUtilityClasses,
    getSkeletonUtilityClass: () => getSkeletonUtilityClass,
    getSliderUtilityClass: () => getSliderUtilityClass2,
    getSnackbarContentUtilityClass: () => getSnackbarContentUtilityClass,
    getSnackbarUtilityClass: () => getSnackbarUtilityClass2,
    getSpeedDialActionUtilityClass: () => getSpeedDialActionUtilityClass,
    getSpeedDialIconUtilityClass: () => getSpeedDialIconUtilityClass,
    getSpeedDialUtilityClass: () => getSpeedDialUtilityClass,
    getStepButtonUtilityClass: () => getStepButtonUtilityClass,
    getStepConnectorUtilityClass: () => getStepConnectorUtilityClass,
    getStepContentUtilityClass: () => getStepContentUtilityClass,
    getStepIconUtilityClass: () => getStepIconUtilityClass,
    getStepLabelUtilityClass: () => getStepLabelUtilityClass,
    getStepUtilityClass: () => getStepUtilityClass,
    getStepperUtilityClass: () => getStepperUtilityClass,
    getSwitchUtilityClass: () => getSwitchUtilityClass2,
    getTabScrollButtonUtilityClass: () => getTabScrollButtonUtilityClass,
    getTabUtilityClass: () => getTabUtilityClass2,
    getTableBodyUtilityClass: () => getTableBodyUtilityClass,
    getTableCellUtilityClass: () => getTableCellUtilityClass,
    getTableContainerUtilityClass: () => getTableContainerUtilityClass,
    getTableFooterUtilityClass: () => getTableFooterUtilityClass,
    getTableHeadUtilityClass: () => getTableHeadUtilityClass,
    getTablePaginationUtilityClass: () => getTablePaginationUtilityClass2,
    getTableRowUtilityClass: () => getTableRowUtilityClass,
    getTableSortLabelUtilityClass: () => getTableSortLabelUtilityClass,
    getTableUtilityClass: () => getTableUtilityClass,
    getTabsUtilityClass: () => getTabsUtilityClass2,
    getTextFieldUtilityClass: () => getTextFieldUtilityClass,
    getToggleButtonGroupUtilityClass: () => getToggleButtonGroupUtilityClass,
    getToggleButtonUtilityClass: () => getToggleButtonUtilityClass,
    getToolbarUtilityClass: () => getToolbarUtilityClass,
    getTooltipUtilityClass: () => getTooltipUtilityClass,
    getTouchRippleUtilityClass: () => getTouchRippleUtilityClass,
    getTypographyUtilityClass: () => getTypographyUtilityClass,
    grid2Classes: () => grid2Classes_default,
    gridClasses: () => gridClasses_default,
    hexToRgb: () => import_system10.hexToRgb,
    hslToRgb: () => import_system10.hslToRgb,
    iconButtonClasses: () => iconButtonClasses_default,
    iconClasses: () => iconClasses_default,
    imageListClasses: () => imageListClasses_default,
    imageListItemBarClasses: () => imageListItemBarClasses_default,
    imageListItemClasses: () => imageListItemClasses_default,
    inputAdornmentClasses: () => inputAdornmentClasses_default,
    inputBaseClasses: () => inputBaseClasses_default,
    inputClasses: () => inputClasses_default,
    inputLabelClasses: () => inputLabelClasses_default,
    keyframes: () => import_system10.keyframes,
    lighten: () => import_system10.lighten,
    linearProgressClasses: () => linearProgressClasses_default,
    linkClasses: () => linkClasses_default,
    listClasses: () => listClasses_default,
    listItemAvatarClasses: () => listItemAvatarClasses_default,
    listItemButtonClasses: () => listItemButtonClasses_default,
    listItemClasses: () => listItemClasses_default,
    listItemIconClasses: () => listItemIconClasses_default,
    listItemSecondaryActionClasses: () => listItemSecondaryActionClasses_default,
    listItemTextClasses: () => listItemTextClasses_default,
    listSubheaderClasses: () => listSubheaderClasses_default,
    makeStyles: () => makeStyles2,
    menuClasses: () => menuClasses_default,
    menuItemClasses: () => menuItemClasses_default,
    mobileStepperClasses: () => mobileStepperClasses_default,
    modalClasses: () => modalClasses_default,
    nativeSelectClasses: () => nativeSelectClasses_default,
    outlinedInputClasses: () => outlinedInputClasses_default,
    paginationClasses: () => paginationClasses_default,
    paginationItemClasses: () => paginationItemClasses_default,
    paperClasses: () => paperClasses_default,
    popoverClasses: () => popoverClasses_default,
    private_createTypography: () => createTypography,
    private_excludeVariablesFromRoot: () => excludeVariablesFromRoot_default,
    radioClasses: () => radioClasses_default,
    ratingClasses: () => ratingClasses_default,
    recomposeColor: () => import_system10.recomposeColor,
    responsiveFontSizes: () => responsiveFontSizes,
    rgbToHex: () => import_system10.rgbToHex,
    scopedCssBaselineClasses: () => scopedCssBaselineClasses_default,
    selectClasses: () => selectClasses_default,
    shouldSkipGeneratingVar: () => shouldSkipGeneratingVar,
    skeletonClasses: () => skeletonClasses_default,
    sliderClasses: () => sliderClasses_default,
    snackbarClasses: () => snackbarClasses_default,
    snackbarContentClasses: () => snackbarContentClasses_default,
    speedDialActionClasses: () => speedDialActionClasses_default,
    speedDialClasses: () => speedDialClasses_default,
    speedDialIconClasses: () => speedDialIconClasses_default,
    stackClasses: () => stackClasses_default,
    stepButtonClasses: () => stepButtonClasses_default,
    stepClasses: () => stepClasses_default,
    stepConnectorClasses: () => stepConnectorClasses_default,
    stepContentClasses: () => stepContentClasses_default,
    stepIconClasses: () => stepIconClasses_default,
    stepLabelClasses: () => stepLabelClasses_default,
    stepperClasses: () => stepperClasses_default,
    styled: () => styled_default,
    switchClasses: () => switchClasses_default,
    tabClasses: () => tabClasses_default,
    tabScrollButtonClasses: () => tabScrollButtonClasses_default,
    tableBodyClasses: () => tableBodyClasses_default,
    tableCellClasses: () => tableCellClasses_default,
    tableClasses: () => tableClasses_default,
    tableContainerClasses: () => tableContainerClasses_default,
    tableFooterClasses: () => tableFooterClasses_default,
    tableHeadClasses: () => tableHeadClasses_default,
    tablePaginationClasses: () => tablePaginationClasses_default,
    tableRowClasses: () => tableRowClasses_default,
    tableSortLabelClasses: () => tableSortLabelClasses_default,
    tabsClasses: () => tabsClasses_default,
    textFieldClasses: () => textFieldClasses_default,
    toggleButtonClasses: () => toggleButtonClasses_default,
    toggleButtonGroupClasses: () => toggleButtonGroupClasses_default,
    toolbarClasses: () => toolbarClasses_default,
    tooltipClasses: () => tooltipClasses_default,
    touchRippleClasses: () => touchRippleClasses_default,
    typographyClasses: () => typographyClasses_default,
    unstable_composeClasses: () => import_composeClasses124.unstable_composeClasses,
    unstable_createMuiStrictModeTheme: () => createMuiStrictModeTheme,
    unstable_getUnit: () => getUnit,
    unstable_toUnitless: () => toUnitless,
    useAutocomplete: () => useAutocomplete,
    useColorScheme: () => useColorScheme,
    useFormControl: () => useFormControl,
    useMediaQuery: () => useMediaQuery,
    usePagination: () => usePagination,
    useRadioGroup: () => useRadioGroup,
    useScrollTrigger: () => useScrollTrigger,
    useStepContext: () => useStepContext,
    useStepperContext: () => useStepperContext,
    useTheme: () => useTheme4,
    useThemeProps: () => useThemeProps,
    withStyles: () => withStyles,
    withTheme: () => withTheme2
  });

  // node_modules/@mui/material/colors/index.js
  var colors_exports = {};
  __export(colors_exports, {
    amber: () => amber_default,
    blue: () => blue_default,
    blueGrey: () => blueGrey_default,
    brown: () => brown_default,
    common: () => common_default,
    cyan: () => cyan_default,
    deepOrange: () => deepOrange_default,
    deepPurple: () => deepPurple_default,
    green: () => green_default,
    grey: () => grey_default,
    indigo: () => indigo_default,
    lightBlue: () => lightBlue_default,
    lightGreen: () => lightGreen_default,
    lime: () => lime_default,
    orange: () => orange_default,
    pink: () => pink_default,
    purple: () => purple_default,
    red: () => red_default,
    teal: () => teal_default,
    yellow: () => yellow_default
  });

  // node_modules/@mui/material/colors/common.js
  var common = {
    black: "#000",
    white: "#fff"
  };
  var common_default = common;

  // node_modules/@mui/material/colors/red.js
  var red = {
    50: "#ffebee",
    100: "#ffcdd2",
    200: "#ef9a9a",
    300: "#e57373",
    400: "#ef5350",
    500: "#f44336",
    600: "#e53935",
    700: "#d32f2f",
    800: "#c62828",
    900: "#b71c1c",
    A100: "#ff8a80",
    A200: "#ff5252",
    A400: "#ff1744",
    A700: "#d50000"
  };
  var red_default = red;

  // node_modules/@mui/material/colors/pink.js
  var pink = {
    50: "#fce4ec",
    100: "#f8bbd0",
    200: "#f48fb1",
    300: "#f06292",
    400: "#ec407a",
    500: "#e91e63",
    600: "#d81b60",
    700: "#c2185b",
    800: "#ad1457",
    900: "#880e4f",
    A100: "#ff80ab",
    A200: "#ff4081",
    A400: "#f50057",
    A700: "#c51162"
  };
  var pink_default = pink;

  // node_modules/@mui/material/colors/purple.js
  var purple = {
    50: "#f3e5f5",
    100: "#e1bee7",
    200: "#ce93d8",
    300: "#ba68c8",
    400: "#ab47bc",
    500: "#9c27b0",
    600: "#8e24aa",
    700: "#7b1fa2",
    800: "#6a1b9a",
    900: "#4a148c",
    A100: "#ea80fc",
    A200: "#e040fb",
    A400: "#d500f9",
    A700: "#aa00ff"
  };
  var purple_default = purple;

  // node_modules/@mui/material/colors/deepPurple.js
  var deepPurple = {
    50: "#ede7f6",
    100: "#d1c4e9",
    200: "#b39ddb",
    300: "#9575cd",
    400: "#7e57c2",
    500: "#673ab7",
    600: "#5e35b1",
    700: "#512da8",
    800: "#4527a0",
    900: "#311b92",
    A100: "#b388ff",
    A200: "#7c4dff",
    A400: "#651fff",
    A700: "#6200ea"
  };
  var deepPurple_default = deepPurple;

  // node_modules/@mui/material/colors/indigo.js
  var indigo = {
    50: "#e8eaf6",
    100: "#c5cae9",
    200: "#9fa8da",
    300: "#7986cb",
    400: "#5c6bc0",
    500: "#3f51b5",
    600: "#3949ab",
    700: "#303f9f",
    800: "#283593",
    900: "#1a237e",
    A100: "#8c9eff",
    A200: "#536dfe",
    A400: "#3d5afe",
    A700: "#304ffe"
  };
  var indigo_default = indigo;

  // node_modules/@mui/material/colors/blue.js
  var blue = {
    50: "#e3f2fd",
    100: "#bbdefb",
    200: "#90caf9",
    300: "#64b5f6",
    400: "#42a5f5",
    500: "#2196f3",
    600: "#1e88e5",
    700: "#1976d2",
    800: "#1565c0",
    900: "#0d47a1",
    A100: "#82b1ff",
    A200: "#448aff",
    A400: "#2979ff",
    A700: "#2962ff"
  };
  var blue_default = blue;

  // node_modules/@mui/material/colors/lightBlue.js
  var lightBlue = {
    50: "#e1f5fe",
    100: "#b3e5fc",
    200: "#81d4fa",
    300: "#4fc3f7",
    400: "#29b6f6",
    500: "#03a9f4",
    600: "#039be5",
    700: "#0288d1",
    800: "#0277bd",
    900: "#01579b",
    A100: "#80d8ff",
    A200: "#40c4ff",
    A400: "#00b0ff",
    A700: "#0091ea"
  };
  var lightBlue_default = lightBlue;

  // node_modules/@mui/material/colors/cyan.js
  var cyan = {
    50: "#e0f7fa",
    100: "#b2ebf2",
    200: "#80deea",
    300: "#4dd0e1",
    400: "#26c6da",
    500: "#00bcd4",
    600: "#00acc1",
    700: "#0097a7",
    800: "#00838f",
    900: "#006064",
    A100: "#84ffff",
    A200: "#18ffff",
    A400: "#00e5ff",
    A700: "#00b8d4"
  };
  var cyan_default = cyan;

  // node_modules/@mui/material/colors/teal.js
  var teal = {
    50: "#e0f2f1",
    100: "#b2dfdb",
    200: "#80cbc4",
    300: "#4db6ac",
    400: "#26a69a",
    500: "#009688",
    600: "#00897b",
    700: "#00796b",
    800: "#00695c",
    900: "#004d40",
    A100: "#a7ffeb",
    A200: "#64ffda",
    A400: "#1de9b6",
    A700: "#00bfa5"
  };
  var teal_default = teal;

  // node_modules/@mui/material/colors/green.js
  var green = {
    50: "#e8f5e9",
    100: "#c8e6c9",
    200: "#a5d6a7",
    300: "#81c784",
    400: "#66bb6a",
    500: "#4caf50",
    600: "#43a047",
    700: "#388e3c",
    800: "#2e7d32",
    900: "#1b5e20",
    A100: "#b9f6ca",
    A200: "#69f0ae",
    A400: "#00e676",
    A700: "#00c853"
  };
  var green_default = green;

  // node_modules/@mui/material/colors/lightGreen.js
  var lightGreen = {
    50: "#f1f8e9",
    100: "#dcedc8",
    200: "#c5e1a5",
    300: "#aed581",
    400: "#9ccc65",
    500: "#8bc34a",
    600: "#7cb342",
    700: "#689f38",
    800: "#558b2f",
    900: "#33691e",
    A100: "#ccff90",
    A200: "#b2ff59",
    A400: "#76ff03",
    A700: "#64dd17"
  };
  var lightGreen_default = lightGreen;

  // node_modules/@mui/material/colors/lime.js
  var lime = {
    50: "#f9fbe7",
    100: "#f0f4c3",
    200: "#e6ee9c",
    300: "#dce775",
    400: "#d4e157",
    500: "#cddc39",
    600: "#c0ca33",
    700: "#afb42b",
    800: "#9e9d24",
    900: "#827717",
    A100: "#f4ff81",
    A200: "#eeff41",
    A400: "#c6ff00",
    A700: "#aeea00"
  };
  var lime_default = lime;

  // node_modules/@mui/material/colors/yellow.js
  var yellow = {
    50: "#fffde7",
    100: "#fff9c4",
    200: "#fff59d",
    300: "#fff176",
    400: "#ffee58",
    500: "#ffeb3b",
    600: "#fdd835",
    700: "#fbc02d",
    800: "#f9a825",
    900: "#f57f17",
    A100: "#ffff8d",
    A200: "#ffff00",
    A400: "#ffea00",
    A700: "#ffd600"
  };
  var yellow_default = yellow;

  // node_modules/@mui/material/colors/amber.js
  var amber = {
    50: "#fff8e1",
    100: "#ffecb3",
    200: "#ffe082",
    300: "#ffd54f",
    400: "#ffca28",
    500: "#ffc107",
    600: "#ffb300",
    700: "#ffa000",
    800: "#ff8f00",
    900: "#ff6f00",
    A100: "#ffe57f",
    A200: "#ffd740",
    A400: "#ffc400",
    A700: "#ffab00"
  };
  var amber_default = amber;

  // node_modules/@mui/material/colors/orange.js
  var orange = {
    50: "#fff3e0",
    100: "#ffe0b2",
    200: "#ffcc80",
    300: "#ffb74d",
    400: "#ffa726",
    500: "#ff9800",
    600: "#fb8c00",
    700: "#f57c00",
    800: "#ef6c00",
    900: "#e65100",
    A100: "#ffd180",
    A200: "#ffab40",
    A400: "#ff9100",
    A700: "#ff6d00"
  };
  var orange_default = orange;

  // node_modules/@mui/material/colors/deepOrange.js
  var deepOrange = {
    50: "#fbe9e7",
    100: "#ffccbc",
    200: "#ffab91",
    300: "#ff8a65",
    400: "#ff7043",
    500: "#ff5722",
    600: "#f4511e",
    700: "#e64a19",
    800: "#d84315",
    900: "#bf360c",
    A100: "#ff9e80",
    A200: "#ff6e40",
    A400: "#ff3d00",
    A700: "#dd2c00"
  };
  var deepOrange_default = deepOrange;

  // node_modules/@mui/material/colors/brown.js
  var brown = {
    50: "#efebe9",
    100: "#d7ccc8",
    200: "#bcaaa4",
    300: "#a1887f",
    400: "#8d6e63",
    500: "#795548",
    600: "#6d4c41",
    700: "#5d4037",
    800: "#4e342e",
    900: "#3e2723",
    A100: "#d7ccc8",
    A200: "#bcaaa4",
    A400: "#8d6e63",
    A700: "#5d4037"
  };
  var brown_default = brown;

  // node_modules/@mui/material/colors/grey.js
  var grey = {
    50: "#fafafa",
    100: "#f5f5f5",
    200: "#eeeeee",
    300: "#e0e0e0",
    400: "#bdbdbd",
    500: "#9e9e9e",
    600: "#757575",
    700: "#616161",
    800: "#424242",
    900: "#212121",
    A100: "#f5f5f5",
    A200: "#eeeeee",
    A400: "#bdbdbd",
    A700: "#616161"
  };
  var grey_default = grey;

  // node_modules/@mui/material/colors/blueGrey.js
  var blueGrey = {
    50: "#eceff1",
    100: "#cfd8dc",
    200: "#b0bec5",
    300: "#90a4ae",
    400: "#78909c",
    500: "#607d8b",
    600: "#546e7a",
    700: "#455a64",
    800: "#37474f",
    900: "#263238",
    A100: "#cfd8dc",
    A200: "#b0bec5",
    A400: "#78909c",
    A700: "#455a64"
  };
  var blueGrey_default = blueGrey;

  // node_modules/@mui/material/styles/identifier.js
  var identifier_default = "$$material";

  // node_modules/@mui/material/styles/adaptV4Theme.js
  init_extends();
  var import_system = __toESM(require_system());
  var _excluded4 = ["defaultProps", "mixins", "overrides", "palette", "props", "styleOverrides"];
  var _excluded22 = ["type", "mode"];
  function adaptV4Theme(inputTheme) {
    if (true) {
      console.warn(["MUI: adaptV4Theme() is deprecated.", "Follow the upgrade guide on https://mui.com/r/migration-v4#theme."].join("\n"));
    }
    const {
      defaultProps: defaultProps2 = {},
      mixins = {},
      overrides = {},
      palette = {},
      props = {},
      styleOverrides = {}
    } = inputTheme, other = _objectWithoutPropertiesLoose(inputTheme, _excluded4);
    const theme = _extends({}, other, {
      components: {}
    });
    Object.keys(defaultProps2).forEach((component) => {
      const componentValue = theme.components[component] || {};
      componentValue.defaultProps = defaultProps2[component];
      theme.components[component] = componentValue;
    });
    Object.keys(props).forEach((component) => {
      const componentValue = theme.components[component] || {};
      componentValue.defaultProps = props[component];
      theme.components[component] = componentValue;
    });
    Object.keys(styleOverrides).forEach((component) => {
      const componentValue = theme.components[component] || {};
      componentValue.styleOverrides = styleOverrides[component];
      theme.components[component] = componentValue;
    });
    Object.keys(overrides).forEach((component) => {
      const componentValue = theme.components[component] || {};
      componentValue.styleOverrides = overrides[component];
      theme.components[component] = componentValue;
    });
    theme.spacing = (0, import_system.createSpacing)(inputTheme.spacing);
    const breakpoints = (0, import_system.createBreakpoints)(inputTheme.breakpoints || {});
    const spacing = theme.spacing;
    theme.mixins = _extends({
      gutters: (styles7 = {}) => {
        return _extends({
          paddingLeft: spacing(2),
          paddingRight: spacing(2)
        }, styles7, {
          [breakpoints.up("sm")]: _extends({
            paddingLeft: spacing(3),
            paddingRight: spacing(3)
          }, styles7[breakpoints.up("sm")])
        });
      }
    }, mixins);
    const {
      type: typeInput,
      mode: modeInput
    } = palette, paletteRest = _objectWithoutPropertiesLoose(palette, _excluded22);
    const finalMode = modeInput || typeInput || "light";
    theme.palette = _extends({
      // theme.palette.text.hint
      text: {
        hint: finalMode === "dark" ? "rgba(255, 255, 255, 0.5)" : "rgba(0, 0, 0, 0.38)"
      },
      mode: finalMode,
      type: finalMode
    }, paletteRest);
    return theme;
  }

  // node_modules/@mui/material/styles/index.js
  var import_system10 = __toESM(require_system());

  // node_modules/@mui/material/styles/createTheme.js
  init_extends();
  var import_utils12 = __toESM(require_utils());
  var import_system3 = __toESM(require_system());
  var import_generateUtilityClass = __toESM(require_generateUtilityClass3());

  // node_modules/@mui/material/styles/createMixins.js
  init_extends();
  function createMixins(breakpoints, mixins) {
    return _extends({
      toolbar: {
        minHeight: 56,
        [breakpoints.up("xs")]: {
          "@media (orientation: landscape)": {
            minHeight: 48
          }
        },
        [breakpoints.up("sm")]: {
          minHeight: 64
        }
      }
    }, mixins);
  }

  // node_modules/@mui/material/styles/createPalette.js
  init_extends();
  var import_utils10 = __toESM(require_utils());
  var import_system2 = __toESM(require_system());
  var _excluded5 = ["mode", "contrastThreshold", "tonalOffset"];
  var light = {
    // The colors used to style the text.
    text: {
      // The most important text.
      primary: "rgba(0, 0, 0, 0.87)",
      // Secondary text.
      secondary: "rgba(0, 0, 0, 0.6)",
      // Disabled text have even lower visual prominence.
      disabled: "rgba(0, 0, 0, 0.38)"
    },
    // The color used to divide different elements.
    divider: "rgba(0, 0, 0, 0.12)",
    // The background colors used to style the surfaces.
    // Consistency between these values is important.
    background: {
      paper: common_default.white,
      default: common_default.white
    },
    // The colors used to style the action elements.
    action: {
      // The color of an active action like an icon button.
      active: "rgba(0, 0, 0, 0.54)",
      // The color of an hovered action.
      hover: "rgba(0, 0, 0, 0.04)",
      hoverOpacity: 0.04,
      // The color of a selected action.
      selected: "rgba(0, 0, 0, 0.08)",
      selectedOpacity: 0.08,
      // The color of a disabled action.
      disabled: "rgba(0, 0, 0, 0.26)",
      // The background color of a disabled action.
      disabledBackground: "rgba(0, 0, 0, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(0, 0, 0, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.12
    }
  };
  var dark = {
    text: {
      primary: common_default.white,
      secondary: "rgba(255, 255, 255, 0.7)",
      disabled: "rgba(255, 255, 255, 0.5)",
      icon: "rgba(255, 255, 255, 0.5)"
    },
    divider: "rgba(255, 255, 255, 0.12)",
    background: {
      paper: "#121212",
      default: "#121212"
    },
    action: {
      active: common_default.white,
      hover: "rgba(255, 255, 255, 0.08)",
      hoverOpacity: 0.08,
      selected: "rgba(255, 255, 255, 0.16)",
      selectedOpacity: 0.16,
      disabled: "rgba(255, 255, 255, 0.3)",
      disabledBackground: "rgba(255, 255, 255, 0.12)",
      disabledOpacity: 0.38,
      focus: "rgba(255, 255, 255, 0.12)",
      focusOpacity: 0.12,
      activatedOpacity: 0.24
    }
  };
  function addLightOrDark(intent, direction, shade, tonalOffset) {
    const tonalOffsetLight = tonalOffset.light || tonalOffset;
    const tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;
    if (!intent[direction]) {
      if (intent.hasOwnProperty(shade)) {
        intent[direction] = intent[shade];
      } else if (direction === "light") {
        intent.light = (0, import_system2.lighten)(intent.main, tonalOffsetLight);
      } else if (direction === "dark") {
        intent.dark = (0, import_system2.darken)(intent.main, tonalOffsetDark);
      }
    }
  }
  function getDefaultPrimary(mode = "light") {
    if (mode === "dark") {
      return {
        main: blue_default[200],
        light: blue_default[50],
        dark: blue_default[400]
      };
    }
    return {
      main: blue_default[700],
      light: blue_default[400],
      dark: blue_default[800]
    };
  }
  function getDefaultSecondary(mode = "light") {
    if (mode === "dark") {
      return {
        main: purple_default[200],
        light: purple_default[50],
        dark: purple_default[400]
      };
    }
    return {
      main: purple_default[500],
      light: purple_default[300],
      dark: purple_default[700]
    };
  }
  function getDefaultError(mode = "light") {
    if (mode === "dark") {
      return {
        main: red_default[500],
        light: red_default[300],
        dark: red_default[700]
      };
    }
    return {
      main: red_default[700],
      light: red_default[400],
      dark: red_default[800]
    };
  }
  function getDefaultInfo(mode = "light") {
    if (mode === "dark") {
      return {
        main: lightBlue_default[400],
        light: lightBlue_default[300],
        dark: lightBlue_default[700]
      };
    }
    return {
      main: lightBlue_default[700],
      light: lightBlue_default[500],
      dark: lightBlue_default[900]
    };
  }
  function getDefaultSuccess(mode = "light") {
    if (mode === "dark") {
      return {
        main: green_default[400],
        light: green_default[300],
        dark: green_default[700]
      };
    }
    return {
      main: green_default[800],
      light: green_default[500],
      dark: green_default[900]
    };
  }
  function getDefaultWarning(mode = "light") {
    if (mode === "dark") {
      return {
        main: orange_default[400],
        light: orange_default[300],
        dark: orange_default[700]
      };
    }
    return {
      main: "#ed6c02",
      // closest to orange[800] that pass 3:1.
      light: orange_default[500],
      dark: orange_default[900]
    };
  }
  function createPalette(palette) {
    const {
      mode = "light",
      contrastThreshold = 3,
      tonalOffset = 0.2
    } = palette, other = _objectWithoutPropertiesLoose(palette, _excluded5);
    const primary = palette.primary || getDefaultPrimary(mode);
    const secondary = palette.secondary || getDefaultSecondary(mode);
    const error = palette.error || getDefaultError(mode);
    const info = palette.info || getDefaultInfo(mode);
    const success = palette.success || getDefaultSuccess(mode);
    const warning2 = palette.warning || getDefaultWarning(mode);
    function getContrastText(background) {
      const contrastText = (0, import_system2.getContrastRatio)(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;
      if (true) {
        const contrast = (0, import_system2.getContrastRatio)(background, contrastText);
        if (contrast < 3) {
          console.error([`MUI: The contrast ratio of ${contrast}:1 for ${contrastText} on ${background}`, "falls below the WCAG recommended absolute minimum contrast ratio of 3:1.", "https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast"].join("\n"));
        }
      }
      return contrastText;
    }
    const augmentColor = ({
      color,
      name,
      mainShade = 500,
      lightShade = 300,
      darkShade = 700
    }) => {
      color = _extends({}, color);
      if (!color.main && color[mainShade]) {
        color.main = color[mainShade];
      }
      if (!color.hasOwnProperty("main")) {
        throw new Error(true ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
The color object needs to have a \`main\` property or a \`${mainShade}\` property.` : (0, import_utils.formatMuiErrorMessage)(11, name ? ` (${name})` : "", mainShade));
      }
      if (typeof color.main !== "string") {
        throw new Error(true ? `MUI: The color${name ? ` (${name})` : ""} provided to augmentColor(color) is invalid.
\`color.main\` should be a string, but \`${JSON.stringify(color.main)}\` was provided instead.

Did you intend to use one of the following approaches?

import { green } from "@mui/material/colors";

const theme1 = createTheme({ palette: {
  primary: green,
} });

const theme2 = createTheme({ palette: {
  primary: { main: green[500] },
} });` : (0, import_utils.formatMuiErrorMessage)(12, name ? ` (${name})` : "", JSON.stringify(color.main)));
      }
      addLightOrDark(color, "light", lightShade, tonalOffset);
      addLightOrDark(color, "dark", darkShade, tonalOffset);
      if (!color.contrastText) {
        color.contrastText = getContrastText(color.main);
      }
      return color;
    };
    const modes = {
      dark,
      light
    };
    if (true) {
      if (!modes[mode]) {
        console.error(`MUI: The palette mode \`${mode}\` is not supported.`);
      }
    }
    const paletteOutput = (0, import_utils10.deepmerge)(_extends({
      // A collection of common colors.
      common: _extends({}, common_default),
      // prevent mutable object.
      // The palette mode, can be light or dark.
      mode,
      // The colors used to represent primary interface elements for a user.
      primary: augmentColor({
        color: primary,
        name: "primary"
      }),
      // The colors used to represent secondary interface elements for a user.
      secondary: augmentColor({
        color: secondary,
        name: "secondary",
        mainShade: "A400",
        lightShade: "A200",
        darkShade: "A700"
      }),
      // The colors used to represent interface elements that the user should be made aware of.
      error: augmentColor({
        color: error,
        name: "error"
      }),
      // The colors used to represent potentially dangerous actions or important messages.
      warning: augmentColor({
        color: warning2,
        name: "warning"
      }),
      // The colors used to present information to the user that is neutral and not necessarily important.
      info: augmentColor({
        color: info,
        name: "info"
      }),
      // The colors used to indicate the successful completion of an action that user triggered.
      success: augmentColor({
        color: success,
        name: "success"
      }),
      // The grey colors.
      grey: grey_default,
      // Used by `getContrastText()` to maximize the contrast between
      // the background and the text.
      contrastThreshold,
      // Takes a background color and returns the text color that maximizes the contrast.
      getContrastText,
      // Generate a rich color object.
      augmentColor,
      // Used by the functions below to shift a color's luminance by approximately
      // two indexes within its tonal palette.
      // E.g., shift from Red 500 to Red 300 or Red 700.
      tonalOffset
    }, modes[mode]), other);
    return paletteOutput;
  }

  // node_modules/@mui/material/styles/createTypography.js
  init_extends();
  var import_utils11 = __toESM(require_utils());
  var _excluded6 = ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"];
  function round(value) {
    return Math.round(value * 1e5) / 1e5;
  }
  var caseAllCaps = {
    textTransform: "uppercase"
  };
  var defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
  function createTypography(palette, typography) {
    const _ref = typeof typography === "function" ? typography(palette) : typography, {
      fontFamily = defaultFontFamily,
      // The default font size of the Material Specification.
      fontSize = 14,
      // px
      fontWeightLight = 300,
      fontWeightRegular = 400,
      fontWeightMedium = 500,
      fontWeightBold = 700,
      // Tell MUI what's the font-size on the html element.
      // 16px is the default font-size used by browsers.
      htmlFontSize = 16,
      // Apply the CSS properties to all the variants.
      allVariants,
      pxToRem: pxToRem2
    } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded6);
    if (true) {
      if (typeof fontSize !== "number") {
        console.error("MUI: `fontSize` is required to be a number.");
      }
      if (typeof htmlFontSize !== "number") {
        console.error("MUI: `htmlFontSize` is required to be a number.");
      }
    }
    const coef = fontSize / 14;
    const pxToRem = pxToRem2 || ((size2) => `${size2 / htmlFontSize * coef}rem`);
    const buildVariant = (fontWeight, size2, lineHeight, letterSpacing, casing) => _extends({
      fontFamily,
      fontWeight,
      fontSize: pxToRem(size2),
      // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
      lineHeight
    }, fontFamily === defaultFontFamily ? {
      letterSpacing: `${round(letterSpacing / size2)}em`
    } : {}, casing, allVariants);
    const variants = {
      h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
      h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
      h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
      h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
      h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
      h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
      subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
      subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
      body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
      body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
      button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
      caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
      overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps),
      // TODO v6: Remove handling of 'inherit' variant from the theme as it is already handled in Material UI's Typography component. Also, remember to remove the associated types.
      inherit: {
        fontFamily: "inherit",
        fontWeight: "inherit",
        fontSize: "inherit",
        lineHeight: "inherit",
        letterSpacing: "inherit"
      }
    };
    return (0, import_utils11.deepmerge)(_extends({
      htmlFontSize,
      pxToRem,
      fontFamily,
      fontSize,
      fontWeightLight,
      fontWeightRegular,
      fontWeightMedium,
      fontWeightBold
    }, variants), other, {
      clone: false
      // No need to clone deep
    });
  }

  // node_modules/@mui/material/styles/shadows.js
  var shadowKeyUmbraOpacity = 0.2;
  var shadowKeyPenumbraOpacity = 0.14;
  var shadowAmbientShadowOpacity = 0.12;
  function createShadow(...px2) {
    return [`${px2[0]}px ${px2[1]}px ${px2[2]}px ${px2[3]}px rgba(0,0,0,${shadowKeyUmbraOpacity})`, `${px2[4]}px ${px2[5]}px ${px2[6]}px ${px2[7]}px rgba(0,0,0,${shadowKeyPenumbraOpacity})`, `${px2[8]}px ${px2[9]}px ${px2[10]}px ${px2[11]}px rgba(0,0,0,${shadowAmbientShadowOpacity})`].join(",");
  }
  var shadows = ["none", createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
  var shadows_default = shadows;

  // node_modules/@mui/material/styles/createTransitions.js
  init_extends();
  var _excluded7 = ["duration", "easing", "delay"];
  var easing = {
    // This is the most common easing curve.
    easeInOut: "cubic-bezier(0.4, 0, 0.2, 1)",
    // Objects enter the screen at full velocity from off-screen and
    // slowly decelerate to a resting point.
    easeOut: "cubic-bezier(0.0, 0, 0.2, 1)",
    // Objects leave the screen at full velocity. They do not decelerate when off-screen.
    easeIn: "cubic-bezier(0.4, 0, 1, 1)",
    // The sharp curve is used by objects that may return to the screen at any time.
    sharp: "cubic-bezier(0.4, 0, 0.6, 1)"
  };
  var duration = {
    shortest: 150,
    shorter: 200,
    short: 250,
    // most basic recommended timing
    standard: 300,
    // this is to be used in complex animations
    complex: 375,
    // recommended when something is entering screen
    enteringScreen: 225,
    // recommended when something is leaving screen
    leavingScreen: 195
  };
  function formatMs(milliseconds) {
    return `${Math.round(milliseconds)}ms`;
  }
  function getAutoHeightDuration(height) {
    if (!height) {
      return 0;
    }
    const constant = height / 36;
    return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);
  }
  function createTransitions(inputTransitions) {
    const mergedEasing = _extends({}, easing, inputTransitions.easing);
    const mergedDuration = _extends({}, duration, inputTransitions.duration);
    const create = (props = ["all"], options = {}) => {
      const {
        duration: durationOption = mergedDuration.standard,
        easing: easingOption = mergedEasing.easeInOut,
        delay = 0
      } = options, other = _objectWithoutPropertiesLoose(options, _excluded7);
      if (true) {
        const isString2 = (value) => typeof value === "string";
        const isNumber3 = (value) => !isNaN(parseFloat(value));
        if (!isString2(props) && !Array.isArray(props)) {
          console.error('MUI: Argument "props" must be a string or Array.');
        }
        if (!isNumber3(durationOption) && !isString2(durationOption)) {
          console.error(`MUI: Argument "duration" must be a number or a string but found ${durationOption}.`);
        }
        if (!isString2(easingOption)) {
          console.error('MUI: Argument "easing" must be a string.');
        }
        if (!isNumber3(delay) && !isString2(delay)) {
          console.error('MUI: Argument "delay" must be a number or a string.');
        }
        if (typeof options !== "object") {
          console.error(["MUI: Secong argument of transition.create must be an object.", "Arguments should be either `create('prop1', options)` or `create(['prop1', 'prop2'], options)`"].join("\n"));
        }
        if (Object.keys(other).length !== 0) {
          console.error(`MUI: Unrecognized argument(s) [${Object.keys(other).join(",")}].`);
        }
      }
      return (Array.isArray(props) ? props : [props]).map((animatedProp) => `${animatedProp} ${typeof durationOption === "string" ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === "string" ? delay : formatMs(delay)}`).join(",");
    };
    return _extends({
      getAutoHeightDuration,
      create
    }, inputTransitions, {
      easing: mergedEasing,
      duration: mergedDuration
    });
  }

  // node_modules/@mui/material/styles/zIndex.js
  var zIndex = {
    mobileStepper: 1e3,
    fab: 1050,
    speedDial: 1050,
    appBar: 1100,
    drawer: 1200,
    modal: 1300,
    snackbar: 1400,
    tooltip: 1500
  };
  var zIndex_default = zIndex;

  // node_modules/@mui/material/styles/createTheme.js
  var _excluded8 = ["breakpoints", "mixins", "spacing", "palette", "transitions", "typography", "shape"];
  function createTheme(options = {}, ...args) {
    const {
      mixins: mixinsInput = {},
      palette: paletteInput = {},
      transitions: transitionsInput = {},
      typography: typographyInput = {}
    } = options, other = _objectWithoutPropertiesLoose(options, _excluded8);
    if (options.vars) {
      throw new Error(true ? `MUI: \`vars\` is a private field used for CSS variables support.
Please use another name.` : (0, import_utils.formatMuiErrorMessage)(18));
    }
    const palette = createPalette(paletteInput);
    const systemTheme = (0, import_system3.createTheme)(options);
    let muiTheme = (0, import_utils12.deepmerge)(systemTheme, {
      mixins: createMixins(systemTheme.breakpoints, mixinsInput),
      palette,
      // Don't use [...shadows] until you've verified its transpiled code is not invoking the iterator protocol.
      shadows: shadows_default.slice(),
      typography: createTypography(palette, typographyInput),
      transitions: createTransitions(transitionsInput),
      zIndex: _extends({}, zIndex_default)
    });
    muiTheme = (0, import_utils12.deepmerge)(muiTheme, other);
    muiTheme = args.reduce((acc, argument) => (0, import_utils12.deepmerge)(acc, argument), muiTheme);
    if (true) {
      const stateClasses2 = ["active", "checked", "completed", "disabled", "error", "expanded", "focused", "focusVisible", "required", "selected"];
      const traverse = (node2, component) => {
        let key;
        for (key in node2) {
          const child = node2[key];
          if (stateClasses2.indexOf(key) !== -1 && Object.keys(child).length > 0) {
            if (true) {
              const stateClass = (0, import_generateUtilityClass.default)("", key);
              console.error([`MUI: The \`${component}\` component increases the CSS specificity of the \`${key}\` internal state.`, "You can not override it like this: ", JSON.stringify(node2, null, 2), "", `Instead, you need to use the '&.${stateClass}' syntax:`, JSON.stringify({
                root: {
                  [`&.${stateClass}`]: child
                }
              }, null, 2), "", "https://mui.com/r/state-classes-guide"].join("\n"));
            }
            node2[key] = {};
          }
        }
      };
      Object.keys(muiTheme.components).forEach((component) => {
        const styleOverrides = muiTheme.components[component].styleOverrides;
        if (styleOverrides && component.indexOf("Mui") === 0) {
          traverse(styleOverrides, component);
        }
      });
    }
    muiTheme.unstable_sxConfig = _extends({}, import_system3.unstable_defaultSxConfig, other == null ? void 0 : other.unstable_sxConfig);
    muiTheme.unstable_sx = function sx(props) {
      return (0, import_system3.unstable_styleFunctionSx)({
        sx: props,
        theme: this
      });
    };
    return muiTheme;
  }
  var warnedOnce = false;
  function createMuiTheme(...args) {
    if (true) {
      if (!warnedOnce) {
        warnedOnce = true;
        console.error(["MUI: the createMuiTheme function was renamed to createTheme.", "", "You should use `import { createTheme } from '@mui/material/styles'`"].join("\n"));
      }
    }
    return createTheme(...args);
  }
  var createTheme_default = createTheme;

  // node_modules/@mui/material/styles/createMuiStrictModeTheme.js
  var import_utils13 = __toESM(require_utils());
  function createMuiStrictModeTheme(options, ...args) {
    return createTheme_default((0, import_utils13.deepmerge)({
      unstable_strictMode: true
    }, options), ...args);
  }

  // node_modules/@mui/material/styles/createStyles.js
  var warnedOnce2 = false;
  function createStyles(styles7) {
    if (!warnedOnce2) {
      console.warn(["MUI: createStyles from @mui/material/styles is deprecated.", "Please use @mui/styles/createStyles"].join("\n"));
      warnedOnce2 = true;
    }
    return styles7;
  }

  // node_modules/@mui/material/styles/cssUtils.js
  function isUnitless(value) {
    return String(parseFloat(value)).length === String(value).length;
  }
  function getUnit(input) {
    return String(input).match(/[\d.\-+]*\s*(.*)/)[1] || "";
  }
  function toUnitless(length2) {
    return parseFloat(length2);
  }
  function convertLength(baseFontSize) {
    return (length2, toUnit) => {
      const fromUnit = getUnit(length2);
      if (fromUnit === toUnit) {
        return length2;
      }
      let pxLength = toUnitless(length2);
      if (fromUnit !== "px") {
        if (fromUnit === "em") {
          pxLength = toUnitless(length2) * toUnitless(baseFontSize);
        } else if (fromUnit === "rem") {
          pxLength = toUnitless(length2) * toUnitless(baseFontSize);
        }
      }
      let outputLength = pxLength;
      if (toUnit !== "px") {
        if (toUnit === "em") {
          outputLength = pxLength / toUnitless(baseFontSize);
        } else if (toUnit === "rem") {
          outputLength = pxLength / toUnitless(baseFontSize);
        } else {
          return length2;
        }
      }
      return parseFloat(outputLength.toFixed(5)) + toUnit;
    };
  }
  function alignProperty({
    size: size2,
    grid
  }) {
    const sizeBelow = size2 - size2 % grid;
    const sizeAbove = sizeBelow + grid;
    return size2 - sizeBelow < sizeAbove - size2 ? sizeBelow : sizeAbove;
  }
  function fontGrid({
    lineHeight,
    pixels,
    htmlFontSize
  }) {
    return pixels / (lineHeight * htmlFontSize);
  }
  function responsiveProperty({
    cssProperty,
    min: min3,
    max: max3,
    unit = "rem",
    breakpoints = [600, 900, 1200],
    transform: transform2 = null
  }) {
    const output = {
      [cssProperty]: `${min3}${unit}`
    };
    const factor = (max3 - min3) / breakpoints[breakpoints.length - 1];
    breakpoints.forEach((breakpoint) => {
      let value = min3 + factor * breakpoint;
      if (transform2 !== null) {
        value = transform2(value);
      }
      output[`@media (min-width:${breakpoint}px)`] = {
        [cssProperty]: `${Math.round(value * 1e4) / 1e4}${unit}`
      };
    });
    return output;
  }

  // node_modules/@mui/material/styles/responsiveFontSizes.js
  init_extends();
  function responsiveFontSizes(themeInput, options = {}) {
    const {
      breakpoints = ["sm", "md", "lg"],
      disableAlign = false,
      factor = 2,
      variants = ["h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "caption", "button", "overline"]
    } = options;
    const theme = _extends({}, themeInput);
    theme.typography = _extends({}, theme.typography);
    const typography = theme.typography;
    const convert = convertLength(typography.htmlFontSize);
    const breakpointValues = breakpoints.map((x) => theme.breakpoints.values[x]);
    variants.forEach((variant) => {
      const style = typography[variant];
      const remFontSize = parseFloat(convert(style.fontSize, "rem"));
      if (remFontSize <= 1) {
        return;
      }
      const maxFontSize = remFontSize;
      const minFontSize = 1 + (maxFontSize - 1) / factor;
      let {
        lineHeight
      } = style;
      if (!isUnitless(lineHeight) && !disableAlign) {
        throw new Error(true ? `MUI: Unsupported non-unitless line height with grid alignment.
Use unitless line heights instead.` : (0, import_utils.formatMuiErrorMessage)(6));
      }
      if (!isUnitless(lineHeight)) {
        lineHeight = parseFloat(convert(lineHeight, "rem")) / parseFloat(remFontSize);
      }
      let transform2 = null;
      if (!disableAlign) {
        transform2 = (value) => alignProperty({
          size: value,
          grid: fontGrid({
            pixels: 4,
            lineHeight,
            htmlFontSize: typography.htmlFontSize
          })
        });
      }
      typography[variant] = _extends({}, style, responsiveProperty({
        cssProperty: "fontSize",
        min: minFontSize,
        max: maxFontSize,
        unit: "rem",
        breakpoints: breakpointValues,
        transform: transform2
      }));
    });
    return theme;
  }

  // node_modules/@mui/material/styles/useTheme.js
  var React8 = __toESM(require_react());
  var import_system4 = __toESM(require_system());

  // node_modules/@mui/material/styles/defaultTheme.js
  var defaultTheme = createTheme_default();
  var defaultTheme_default = defaultTheme;

  // node_modules/@mui/material/styles/useTheme.js
  function useTheme4() {
    const theme = (0, import_system4.useTheme)(defaultTheme_default);
    if (true) {
      React8.useDebugValue(theme);
    }
    return theme[identifier_default] || theme;
  }

  // node_modules/@mui/material/styles/useThemeProps.js
  var import_system5 = __toESM(require_system());
  function useThemeProps({
    props,
    name
  }) {
    return (0, import_system5.useThemeProps)({
      props,
      name,
      defaultTheme: defaultTheme_default,
      themeId: identifier_default
    });
  }

  // node_modules/@mui/material/styles/styled.js
  var import_system6 = __toESM(require_system());
  var rootShouldForwardProp = (prop) => (0, import_system6.shouldForwardProp)(prop) && prop !== "classes";
  var slotShouldForwardProp = import_system6.shouldForwardProp;
  var styled = (0, import_system6.createStyled)({
    themeId: identifier_default,
    defaultTheme: defaultTheme_default,
    rootShouldForwardProp
  });
  var styled_default = styled;

  // node_modules/@mui/material/styles/ThemeProvider.js
  init_extends();
  var React9 = __toESM(require_react());
  var import_prop_types2 = __toESM(require_prop_types());
  var import_system7 = __toESM(require_system());
  var import_jsx_runtime2 = __toESM(require_jsx_runtime());
  var _excluded9 = ["theme"];
  function ThemeProvider3(_ref) {
    let {
      theme: themeInput
    } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded9);
    const scopedTheme = themeInput[identifier_default];
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_system7.ThemeProvider, _extends({}, props, {
      themeId: scopedTheme ? identifier_default : void 0,
      theme: scopedTheme || themeInput
    }));
  }
  true ? ThemeProvider3.propTypes = {
    /**
     * Your component tree.
     */
    children: import_prop_types2.default.node,
    /**
     * A theme object. You can provide a function to extend the outer theme.
     */
    theme: import_prop_types2.default.oneOfType([import_prop_types2.default.object, import_prop_types2.default.func]).isRequired
  } : void 0;

  // node_modules/@mui/material/styles/index.js
  var import_system11 = __toESM(require_system());

  // node_modules/@mui/material/styles/makeStyles.js
  function makeStyles2() {
    throw new Error(true ? `MUI: makeStyles is no longer exported from @mui/material/styles.
You have to import it from @mui/styles.
See https://mui.com/r/migration-v4/#mui-material-styles for more details.` : (0, import_utils.formatMuiErrorMessage)(14));
  }

  // node_modules/@mui/material/styles/withStyles.js
  function withStyles() {
    throw new Error(true ? `MUI: withStyles is no longer exported from @mui/material/styles.
You have to import it from @mui/styles.
See https://mui.com/r/migration-v4/#mui-material-styles for more details.` : (0, import_utils.formatMuiErrorMessage)(15));
  }

  // node_modules/@mui/material/styles/withTheme.js
  function withTheme2() {
    throw new Error(true ? `MUI: withTheme is no longer exported from @mui/material/styles.
You have to import it from @mui/styles.
See https://mui.com/r/migration-v4/#mui-material-styles for more details.` : (0, import_utils.formatMuiErrorMessage)(16));
  }

  // node_modules/@mui/material/styles/CssVarsProvider.js
  init_extends();
  var import_system9 = __toESM(require_system());

  // node_modules/@mui/material/styles/experimental_extendTheme.js
  init_extends();
  var import_utils14 = __toESM(require_utils());
  var import_system8 = __toESM(require_system());

  // node_modules/@mui/material/styles/shouldSkipGeneratingVar.js
  function shouldSkipGeneratingVar(keys) {
    var _keys$;
    return !!keys[0].match(/(cssVarPrefix|typography|mixins|breakpoints|direction|transitions)/) || !!keys[0].match(/sxConfig$/) || // ends with sxConfig
    keys[0] === "palette" && !!((_keys$ = keys[1]) != null && _keys$.match(/(mode|contrastThreshold|tonalOffset)/));
  }

  // node_modules/@mui/material/styles/getOverlayAlpha.js
  var getOverlayAlpha = (elevation) => {
    let alphaValue;
    if (elevation < 1) {
      alphaValue = 5.11916 * elevation ** 2;
    } else {
      alphaValue = 4.5 * Math.log(elevation + 1) + 2;
    }
    return (alphaValue / 100).toFixed(2);
  };
  var getOverlayAlpha_default = getOverlayAlpha;

  // node_modules/@mui/material/styles/experimental_extendTheme.js
  var _excluded10 = ["colorSchemes", "cssVarPrefix", "shouldSkipGeneratingVar"];
  var _excluded23 = ["palette"];
  var defaultDarkOverlays = [...Array(25)].map((_5, index3) => {
    if (index3 === 0) {
      return void 0;
    }
    const overlay = getOverlayAlpha_default(index3);
    return `linear-gradient(rgba(255 255 255 / ${overlay}), rgba(255 255 255 / ${overlay}))`;
  });
  function assignNode(obj, keys) {
    keys.forEach((k) => {
      if (!obj[k]) {
        obj[k] = {};
      }
    });
  }
  function setColor(obj, key, defaultValue) {
    if (!obj[key] && defaultValue) {
      obj[key] = defaultValue;
    }
  }
  function setColorChannel(obj, key) {
    if (!(`${key}Channel` in obj)) {
      obj[`${key}Channel`] = (0, import_system8.private_safeColorChannel)(obj[key], `MUI: Can't create \`palette.${key}Channel\` because \`palette.${key}\` is not one of these formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color().
To suppress this warning, you need to explicitly provide the \`palette.${key}Channel\` as a string (in rgb format, e.g. "12 12 12") or undefined if you want to remove the channel token.`);
    }
  }
  var silent = (fn2) => {
    try {
      return fn2();
    } catch (error) {
    }
    return void 0;
  };
  var createGetCssVar = (cssVarPrefix = "mui") => (0, import_system8.unstable_createGetCssVar)(cssVarPrefix);
  function extendTheme(options = {}, ...args) {
    var _colorSchemesInput$li, _colorSchemesInput$da, _colorSchemesInput$li2, _colorSchemesInput$li3, _colorSchemesInput$da2, _colorSchemesInput$da3;
    const {
      colorSchemes: colorSchemesInput = {},
      cssVarPrefix = "mui",
      shouldSkipGeneratingVar: shouldSkipGeneratingVar2 = shouldSkipGeneratingVar
    } = options, input = _objectWithoutPropertiesLoose(options, _excluded10);
    const getCssVar = createGetCssVar(cssVarPrefix);
    const _createThemeWithoutVa = createTheme_default(_extends({}, input, colorSchemesInput.light && {
      palette: (_colorSchemesInput$li = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li.palette
    })), {
      palette: lightPalette
    } = _createThemeWithoutVa, muiTheme = _objectWithoutPropertiesLoose(_createThemeWithoutVa, _excluded23);
    const {
      palette: darkPalette
    } = createTheme_default({
      palette: _extends({
        mode: "dark"
      }, (_colorSchemesInput$da = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da.palette)
    });
    let theme = _extends({}, muiTheme, {
      cssVarPrefix,
      getCssVar,
      colorSchemes: _extends({}, colorSchemesInput, {
        light: _extends({}, colorSchemesInput.light, {
          palette: lightPalette,
          opacity: _extends({
            inputPlaceholder: 0.42,
            inputUnderline: 0.42,
            switchTrackDisabled: 0.12,
            switchTrack: 0.38
          }, (_colorSchemesInput$li2 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li2.opacity),
          overlays: ((_colorSchemesInput$li3 = colorSchemesInput.light) == null ? void 0 : _colorSchemesInput$li3.overlays) || []
        }),
        dark: _extends({}, colorSchemesInput.dark, {
          palette: darkPalette,
          opacity: _extends({
            inputPlaceholder: 0.5,
            inputUnderline: 0.7,
            switchTrackDisabled: 0.2,
            switchTrack: 0.3
          }, (_colorSchemesInput$da2 = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da2.opacity),
          overlays: ((_colorSchemesInput$da3 = colorSchemesInput.dark) == null ? void 0 : _colorSchemesInput$da3.overlays) || defaultDarkOverlays
        })
      })
    });
    Object.keys(theme.colorSchemes).forEach((key) => {
      const palette = theme.colorSchemes[key].palette;
      const setCssVarColor = (cssVar) => {
        const tokens = cssVar.split("-");
        const color = tokens[1];
        const colorToken = tokens[2];
        return getCssVar(cssVar, palette[color][colorToken]);
      };
      if (key === "light") {
        setColor(palette.common, "background", "#fff");
        setColor(palette.common, "onBackground", "#000");
      } else {
        setColor(palette.common, "background", "#000");
        setColor(palette.common, "onBackground", "#fff");
      }
      assignNode(palette, ["Alert", "AppBar", "Avatar", "Button", "Chip", "FilledInput", "LinearProgress", "Skeleton", "Slider", "SnackbarContent", "SpeedDialAction", "StepConnector", "StepContent", "Switch", "TableCell", "Tooltip"]);
      if (key === "light") {
        setColor(palette.Alert, "errorColor", (0, import_system8.private_safeDarken)(palette.error.light, 0.6));
        setColor(palette.Alert, "infoColor", (0, import_system8.private_safeDarken)(palette.info.light, 0.6));
        setColor(palette.Alert, "successColor", (0, import_system8.private_safeDarken)(palette.success.light, 0.6));
        setColor(palette.Alert, "warningColor", (0, import_system8.private_safeDarken)(palette.warning.light, 0.6));
        setColor(palette.Alert, "errorFilledBg", setCssVarColor("palette-error-main"));
        setColor(palette.Alert, "infoFilledBg", setCssVarColor("palette-info-main"));
        setColor(palette.Alert, "successFilledBg", setCssVarColor("palette-success-main"));
        setColor(palette.Alert, "warningFilledBg", setCssVarColor("palette-warning-main"));
        setColor(palette.Alert, "errorFilledColor", silent(() => lightPalette.getContrastText(palette.error.main)));
        setColor(palette.Alert, "infoFilledColor", silent(() => lightPalette.getContrastText(palette.info.main)));
        setColor(palette.Alert, "successFilledColor", silent(() => lightPalette.getContrastText(palette.success.main)));
        setColor(palette.Alert, "warningFilledColor", silent(() => lightPalette.getContrastText(palette.warning.main)));
        setColor(palette.Alert, "errorStandardBg", (0, import_system8.private_safeLighten)(palette.error.light, 0.9));
        setColor(palette.Alert, "infoStandardBg", (0, import_system8.private_safeLighten)(palette.info.light, 0.9));
        setColor(palette.Alert, "successStandardBg", (0, import_system8.private_safeLighten)(palette.success.light, 0.9));
        setColor(palette.Alert, "warningStandardBg", (0, import_system8.private_safeLighten)(palette.warning.light, 0.9));
        setColor(palette.Alert, "errorIconColor", setCssVarColor("palette-error-main"));
        setColor(palette.Alert, "infoIconColor", setCssVarColor("palette-info-main"));
        setColor(palette.Alert, "successIconColor", setCssVarColor("palette-success-main"));
        setColor(palette.Alert, "warningIconColor", setCssVarColor("palette-warning-main"));
        setColor(palette.AppBar, "defaultBg", setCssVarColor("palette-grey-100"));
        setColor(palette.Avatar, "defaultBg", setCssVarColor("palette-grey-400"));
        setColor(palette.Button, "inheritContainedBg", setCssVarColor("palette-grey-300"));
        setColor(palette.Button, "inheritContainedHoverBg", setCssVarColor("palette-grey-A100"));
        setColor(palette.Chip, "defaultBorder", setCssVarColor("palette-grey-400"));
        setColor(palette.Chip, "defaultAvatarColor", setCssVarColor("palette-grey-700"));
        setColor(palette.Chip, "defaultIconColor", setCssVarColor("palette-grey-700"));
        setColor(palette.FilledInput, "bg", "rgba(0, 0, 0, 0.06)");
        setColor(palette.FilledInput, "hoverBg", "rgba(0, 0, 0, 0.09)");
        setColor(palette.FilledInput, "disabledBg", "rgba(0, 0, 0, 0.12)");
        setColor(palette.LinearProgress, "primaryBg", (0, import_system8.private_safeLighten)(palette.primary.main, 0.62));
        setColor(palette.LinearProgress, "secondaryBg", (0, import_system8.private_safeLighten)(palette.secondary.main, 0.62));
        setColor(palette.LinearProgress, "errorBg", (0, import_system8.private_safeLighten)(palette.error.main, 0.62));
        setColor(palette.LinearProgress, "infoBg", (0, import_system8.private_safeLighten)(palette.info.main, 0.62));
        setColor(palette.LinearProgress, "successBg", (0, import_system8.private_safeLighten)(palette.success.main, 0.62));
        setColor(palette.LinearProgress, "warningBg", (0, import_system8.private_safeLighten)(palette.warning.main, 0.62));
        setColor(palette.Skeleton, "bg", `rgba(${setCssVarColor("palette-text-primaryChannel")} / 0.11)`);
        setColor(palette.Slider, "primaryTrack", (0, import_system8.private_safeLighten)(palette.primary.main, 0.62));
        setColor(palette.Slider, "secondaryTrack", (0, import_system8.private_safeLighten)(palette.secondary.main, 0.62));
        setColor(palette.Slider, "errorTrack", (0, import_system8.private_safeLighten)(palette.error.main, 0.62));
        setColor(palette.Slider, "infoTrack", (0, import_system8.private_safeLighten)(palette.info.main, 0.62));
        setColor(palette.Slider, "successTrack", (0, import_system8.private_safeLighten)(palette.success.main, 0.62));
        setColor(palette.Slider, "warningTrack", (0, import_system8.private_safeLighten)(palette.warning.main, 0.62));
        const snackbarContentBackground = (0, import_system8.private_safeEmphasize)(palette.background.default, 0.8);
        setColor(palette.SnackbarContent, "bg", snackbarContentBackground);
        setColor(palette.SnackbarContent, "color", silent(() => lightPalette.getContrastText(snackbarContentBackground)));
        setColor(palette.SpeedDialAction, "fabHoverBg", (0, import_system8.private_safeEmphasize)(palette.background.paper, 0.15));
        setColor(palette.StepConnector, "border", setCssVarColor("palette-grey-400"));
        setColor(palette.StepContent, "border", setCssVarColor("palette-grey-400"));
        setColor(palette.Switch, "defaultColor", setCssVarColor("palette-common-white"));
        setColor(palette.Switch, "defaultDisabledColor", setCssVarColor("palette-grey-100"));
        setColor(palette.Switch, "primaryDisabledColor", (0, import_system8.private_safeLighten)(palette.primary.main, 0.62));
        setColor(palette.Switch, "secondaryDisabledColor", (0, import_system8.private_safeLighten)(palette.secondary.main, 0.62));
        setColor(palette.Switch, "errorDisabledColor", (0, import_system8.private_safeLighten)(palette.error.main, 0.62));
        setColor(palette.Switch, "infoDisabledColor", (0, import_system8.private_safeLighten)(palette.info.main, 0.62));
        setColor(palette.Switch, "successDisabledColor", (0, import_system8.private_safeLighten)(palette.success.main, 0.62));
        setColor(palette.Switch, "warningDisabledColor", (0, import_system8.private_safeLighten)(palette.warning.main, 0.62));
        setColor(palette.TableCell, "border", (0, import_system8.private_safeLighten)((0, import_system8.private_safeAlpha)(palette.divider, 1), 0.88));
        setColor(palette.Tooltip, "bg", (0, import_system8.private_safeAlpha)(palette.grey[700], 0.92));
      } else {
        setColor(palette.Alert, "errorColor", (0, import_system8.private_safeLighten)(palette.error.light, 0.6));
        setColor(palette.Alert, "infoColor", (0, import_system8.private_safeLighten)(palette.info.light, 0.6));
        setColor(palette.Alert, "successColor", (0, import_system8.private_safeLighten)(palette.success.light, 0.6));
        setColor(palette.Alert, "warningColor", (0, import_system8.private_safeLighten)(palette.warning.light, 0.6));
        setColor(palette.Alert, "errorFilledBg", setCssVarColor("palette-error-dark"));
        setColor(palette.Alert, "infoFilledBg", setCssVarColor("palette-info-dark"));
        setColor(palette.Alert, "successFilledBg", setCssVarColor("palette-success-dark"));
        setColor(palette.Alert, "warningFilledBg", setCssVarColor("palette-warning-dark"));
        setColor(palette.Alert, "errorFilledColor", silent(() => darkPalette.getContrastText(palette.error.dark)));
        setColor(palette.Alert, "infoFilledColor", silent(() => darkPalette.getContrastText(palette.info.dark)));
        setColor(palette.Alert, "successFilledColor", silent(() => darkPalette.getContrastText(palette.success.dark)));
        setColor(palette.Alert, "warningFilledColor", silent(() => darkPalette.getContrastText(palette.warning.dark)));
        setColor(palette.Alert, "errorStandardBg", (0, import_system8.private_safeDarken)(palette.error.light, 0.9));
        setColor(palette.Alert, "infoStandardBg", (0, import_system8.private_safeDarken)(palette.info.light, 0.9));
        setColor(palette.Alert, "successStandardBg", (0, import_system8.private_safeDarken)(palette.success.light, 0.9));
        setColor(palette.Alert, "warningStandardBg", (0, import_system8.private_safeDarken)(palette.warning.light, 0.9));
        setColor(palette.Alert, "errorIconColor", setCssVarColor("palette-error-main"));
        setColor(palette.Alert, "infoIconColor", setCssVarColor("palette-info-main"));
        setColor(palette.Alert, "successIconColor", setCssVarColor("palette-success-main"));
        setColor(palette.Alert, "warningIconColor", setCssVarColor("palette-warning-main"));
        setColor(palette.AppBar, "defaultBg", setCssVarColor("palette-grey-900"));
        setColor(palette.AppBar, "darkBg", setCssVarColor("palette-background-paper"));
        setColor(palette.AppBar, "darkColor", setCssVarColor("palette-text-primary"));
        setColor(palette.Avatar, "defaultBg", setCssVarColor("palette-grey-600"));
        setColor(palette.Button, "inheritContainedBg", setCssVarColor("palette-grey-800"));
        setColor(palette.Button, "inheritContainedHoverBg", setCssVarColor("palette-grey-700"));
        setColor(palette.Chip, "defaultBorder", setCssVarColor("palette-grey-700"));
        setColor(palette.Chip, "defaultAvatarColor", setCssVarColor("palette-grey-300"));
        setColor(palette.Chip, "defaultIconColor", setCssVarColor("palette-grey-300"));
        setColor(palette.FilledInput, "bg", "rgba(255, 255, 255, 0.09)");
        setColor(palette.FilledInput, "hoverBg", "rgba(255, 255, 255, 0.13)");
        setColor(palette.FilledInput, "disabledBg", "rgba(255, 255, 255, 0.12)");
        setColor(palette.LinearProgress, "primaryBg", (0, import_system8.private_safeDarken)(palette.primary.main, 0.5));
        setColor(palette.LinearProgress, "secondaryBg", (0, import_system8.private_safeDarken)(palette.secondary.main, 0.5));
        setColor(palette.LinearProgress, "errorBg", (0, import_system8.private_safeDarken)(palette.error.main, 0.5));
        setColor(palette.LinearProgress, "infoBg", (0, import_system8.private_safeDarken)(palette.info.main, 0.5));
        setColor(palette.LinearProgress, "successBg", (0, import_system8.private_safeDarken)(palette.success.main, 0.5));
        setColor(palette.LinearProgress, "warningBg", (0, import_system8.private_safeDarken)(palette.warning.main, 0.5));
        setColor(palette.Skeleton, "bg", `rgba(${setCssVarColor("palette-text-primaryChannel")} / 0.13)`);
        setColor(palette.Slider, "primaryTrack", (0, import_system8.private_safeDarken)(palette.primary.main, 0.5));
        setColor(palette.Slider, "secondaryTrack", (0, import_system8.private_safeDarken)(palette.secondary.main, 0.5));
        setColor(palette.Slider, "errorTrack", (0, import_system8.private_safeDarken)(palette.error.main, 0.5));
        setColor(palette.Slider, "infoTrack", (0, import_system8.private_safeDarken)(palette.info.main, 0.5));
        setColor(palette.Slider, "successTrack", (0, import_system8.private_safeDarken)(palette.success.main, 0.5));
        setColor(palette.Slider, "warningTrack", (0, import_system8.private_safeDarken)(palette.warning.main, 0.5));
        const snackbarContentBackground = (0, import_system8.private_safeEmphasize)(palette.background.default, 0.98);
        setColor(palette.SnackbarContent, "bg", snackbarContentBackground);
        setColor(palette.SnackbarContent, "color", silent(() => darkPalette.getContrastText(snackbarContentBackground)));
        setColor(palette.SpeedDialAction, "fabHoverBg", (0, import_system8.private_safeEmphasize)(palette.background.paper, 0.15));
        setColor(palette.StepConnector, "border", setCssVarColor("palette-grey-600"));
        setColor(palette.StepContent, "border", setCssVarColor("palette-grey-600"));
        setColor(palette.Switch, "defaultColor", setCssVarColor("palette-grey-300"));
        setColor(palette.Switch, "defaultDisabledColor", setCssVarColor("palette-grey-600"));
        setColor(palette.Switch, "primaryDisabledColor", (0, import_system8.private_safeDarken)(palette.primary.main, 0.55));
        setColor(palette.Switch, "secondaryDisabledColor", (0, import_system8.private_safeDarken)(palette.secondary.main, 0.55));
        setColor(palette.Switch, "errorDisabledColor", (0, import_system8.private_safeDarken)(palette.error.main, 0.55));
        setColor(palette.Switch, "infoDisabledColor", (0, import_system8.private_safeDarken)(palette.info.main, 0.55));
        setColor(palette.Switch, "successDisabledColor", (0, import_system8.private_safeDarken)(palette.success.main, 0.55));
        setColor(palette.Switch, "warningDisabledColor", (0, import_system8.private_safeDarken)(palette.warning.main, 0.55));
        setColor(palette.TableCell, "border", (0, import_system8.private_safeDarken)((0, import_system8.private_safeAlpha)(palette.divider, 1), 0.68));
        setColor(palette.Tooltip, "bg", (0, import_system8.private_safeAlpha)(palette.grey[700], 0.92));
      }
      setColorChannel(palette.background, "default");
      setColorChannel(palette.common, "background");
      setColorChannel(palette.common, "onBackground");
      setColorChannel(palette, "divider");
      Object.keys(palette).forEach((color) => {
        const colors = palette[color];
        if (colors && typeof colors === "object") {
          if (colors.main) {
            setColor(palette[color], "mainChannel", (0, import_system8.private_safeColorChannel)(colors.main));
          }
          if (colors.light) {
            setColor(palette[color], "lightChannel", (0, import_system8.private_safeColorChannel)(colors.light));
          }
          if (colors.dark) {
            setColor(palette[color], "darkChannel", (0, import_system8.private_safeColorChannel)(colors.dark));
          }
          if (colors.contrastText) {
            setColor(palette[color], "contrastTextChannel", (0, import_system8.private_safeColorChannel)(colors.contrastText));
          }
          if (color === "text") {
            setColorChannel(palette[color], "primary");
            setColorChannel(palette[color], "secondary");
          }
          if (color === "action") {
            if (colors.active) {
              setColorChannel(palette[color], "active");
            }
            if (colors.selected) {
              setColorChannel(palette[color], "selected");
            }
          }
        }
      });
    });
    theme = args.reduce((acc, argument) => (0, import_utils14.deepmerge)(acc, argument), theme);
    const parserConfig = {
      prefix: cssVarPrefix,
      shouldSkipGeneratingVar: shouldSkipGeneratingVar2
    };
    const {
      vars: themeVars,
      generateCssVars
    } = (0, import_system8.unstable_prepareCssVars)(theme, parserConfig);
    theme.vars = themeVars;
    theme.generateCssVars = generateCssVars;
    theme.shouldSkipGeneratingVar = shouldSkipGeneratingVar2;
    theme.unstable_sxConfig = _extends({}, import_system8.unstable_defaultSxConfig, input == null ? void 0 : input.unstable_sxConfig);
    theme.unstable_sx = function sx(props) {
      return (0, import_system8.unstable_styleFunctionSx)({
        sx: props,
        theme: this
      });
    };
    return theme;
  }

  // node_modules/@mui/material/styles/excludeVariablesFromRoot.js
  var excludeVariablesFromRoot = (cssVarPrefix) => [...[...Array(24)].map((_5, index3) => `--${cssVarPrefix ? `${cssVarPrefix}-` : ""}overlays-${index3 + 1}`), `--${cssVarPrefix ? `${cssVarPrefix}-` : ""}palette-AppBar-darkBg`, `--${cssVarPrefix ? `${cssVarPrefix}-` : ""}palette-AppBar-darkColor`];
  var excludeVariablesFromRoot_default = excludeVariablesFromRoot;

  // node_modules/@mui/material/styles/CssVarsProvider.js
  var defaultTheme2 = extendTheme();
  var {
    CssVarsProvider,
    useColorScheme,
    getInitColorSchemeScript
  } = (0, import_system9.unstable_createCssVarsProvider)({
    themeId: identifier_default,
    theme: defaultTheme2,
    attribute: "data-mui-color-scheme",
    modeStorageKey: "mui-mode",
    colorSchemeStorageKey: "mui-color-scheme",
    defaultColorScheme: {
      light: "light",
      dark: "dark"
    },
    resolveTheme: (theme) => {
      const newTheme = _extends({}, theme, {
        typography: createTypography(theme.palette, theme.typography)
      });
      newTheme.unstable_sx = function sx(props) {
        return (0, import_system9.unstable_styleFunctionSx)({
          sx: props,
          theme: this
        });
      };
      return newTheme;
    },
    excludeVariablesFromRoot: excludeVariablesFromRoot_default
  });

  // node_modules/@mui/material/styles/index.js
  function experimental_sx() {
    throw new Error(true ? `MUI: The \`experimental_sx\` has been moved to \`theme.unstable_sx\`.For more details, see https://github.com/mui/material-ui/pull/35150.` : (0, import_utils.formatMuiErrorMessage)(20));
  }

  // node_modules/@mui/material/index.js
  __reExport(material_exports, __toESM(require_utils2()));

  // node_modules/@mui/material/Accordion/Accordion.js
  init_extends();
  var React16 = __toESM(require_react());
  var import_react_is = __toESM(require_react_is3());
  var import_prop_types8 = __toESM(require_prop_types());
  var import_utils23 = __toESM(require_utils());
  var import_composeClasses3 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/Collapse/Collapse.js
  init_extends();
  var React13 = __toESM(require_react());
  var import_prop_types6 = __toESM(require_prop_types());

  // node_modules/react-transition-group/esm/Transition.js
  var import_prop_types4 = __toESM(require_prop_types());
  var import_react5 = __toESM(require_react());
  var import_react_dom = __toESM(require_react_dom());

  // node_modules/react-transition-group/esm/config.js
  var config_default = {
    disabled: false
  };

  // node_modules/react-transition-group/esm/utils/PropTypes.js
  var import_prop_types3 = __toESM(require_prop_types());
  var timeoutsShape = true ? import_prop_types3.default.oneOfType([import_prop_types3.default.number, import_prop_types3.default.shape({
    enter: import_prop_types3.default.number,
    exit: import_prop_types3.default.number,
    appear: import_prop_types3.default.number
  }).isRequired]) : null;
  var classNamesShape = true ? import_prop_types3.default.oneOfType([import_prop_types3.default.string, import_prop_types3.default.shape({
    enter: import_prop_types3.default.string,
    exit: import_prop_types3.default.string,
    active: import_prop_types3.default.string
  }), import_prop_types3.default.shape({
    enter: import_prop_types3.default.string,
    enterDone: import_prop_types3.default.string,
    enterActive: import_prop_types3.default.string,
    exit: import_prop_types3.default.string,
    exitDone: import_prop_types3.default.string,
    exitActive: import_prop_types3.default.string
  })]) : null;

  // node_modules/react-transition-group/esm/TransitionGroupContext.js
  var import_react4 = __toESM(require_react());
  var TransitionGroupContext_default = import_react4.default.createContext(null);

  // node_modules/react-transition-group/esm/utils/reflow.js
  var forceReflow = function forceReflow2(node2) {
    return node2.scrollTop;
  };

  // node_modules/react-transition-group/esm/Transition.js
  var UNMOUNTED = "unmounted";
  var EXITED = "exited";
  var ENTERING = "entering";
  var ENTERED = "entered";
  var EXITING = "exiting";
  var Transition = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(Transition2, _React$Component);
    function Transition2(props, context) {
      var _this;
      _this = _React$Component.call(this, props, context) || this;
      var parentGroup = context;
      var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
      var initialStatus;
      _this.appearStatus = null;
      if (props.in) {
        if (appear) {
          initialStatus = EXITED;
          _this.appearStatus = ENTERING;
        } else {
          initialStatus = ENTERED;
        }
      } else {
        if (props.unmountOnExit || props.mountOnEnter) {
          initialStatus = UNMOUNTED;
        } else {
          initialStatus = EXITED;
        }
      }
      _this.state = {
        status: initialStatus
      };
      _this.nextCallback = null;
      return _this;
    }
    Transition2.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
      var nextIn = _ref.in;
      if (nextIn && prevState.status === UNMOUNTED) {
        return {
          status: EXITED
        };
      }
      return null;
    };
    var _proto = Transition2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.updateStatus(true, this.appearStatus);
    };
    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
      var nextStatus = null;
      if (prevProps !== this.props) {
        var status = this.state.status;
        if (this.props.in) {
          if (status !== ENTERING && status !== ENTERED) {
            nextStatus = ENTERING;
          }
        } else {
          if (status === ENTERING || status === ENTERED) {
            nextStatus = EXITING;
          }
        }
      }
      this.updateStatus(false, nextStatus);
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.cancelNextCallback();
    };
    _proto.getTimeouts = function getTimeouts() {
      var timeout2 = this.props.timeout;
      var exit, enter, appear;
      exit = enter = appear = timeout2;
      if (timeout2 != null && typeof timeout2 !== "number") {
        exit = timeout2.exit;
        enter = timeout2.enter;
        appear = timeout2.appear !== void 0 ? timeout2.appear : enter;
      }
      return {
        exit,
        enter,
        appear
      };
    };
    _proto.updateStatus = function updateStatus(mounting, nextStatus) {
      if (mounting === void 0) {
        mounting = false;
      }
      if (nextStatus !== null) {
        this.cancelNextCallback();
        if (nextStatus === ENTERING) {
          if (this.props.unmountOnExit || this.props.mountOnEnter) {
            var node2 = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
            if (node2)
              forceReflow(node2);
          }
          this.performEnter(mounting);
        } else {
          this.performExit();
        }
      } else if (this.props.unmountOnExit && this.state.status === EXITED) {
        this.setState({
          status: UNMOUNTED
        });
      }
    };
    _proto.performEnter = function performEnter(mounting) {
      var _this2 = this;
      var enter = this.props.enter;
      var appearing = this.context ? this.context.isMounting : mounting;
      var _ref2 = this.props.nodeRef ? [appearing] : [import_react_dom.default.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
      var timeouts = this.getTimeouts();
      var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
      if (!mounting && !enter || config_default.disabled) {
        this.safeSetState({
          status: ENTERED
        }, function() {
          _this2.props.onEntered(maybeNode);
        });
        return;
      }
      this.props.onEnter(maybeNode, maybeAppearing);
      this.safeSetState({
        status: ENTERING
      }, function() {
        _this2.props.onEntering(maybeNode, maybeAppearing);
        _this2.onTransitionEnd(enterTimeout, function() {
          _this2.safeSetState({
            status: ENTERED
          }, function() {
            _this2.props.onEntered(maybeNode, maybeAppearing);
          });
        });
      });
    };
    _proto.performExit = function performExit() {
      var _this3 = this;
      var exit = this.props.exit;
      var timeouts = this.getTimeouts();
      var maybeNode = this.props.nodeRef ? void 0 : import_react_dom.default.findDOMNode(this);
      if (!exit || config_default.disabled) {
        this.safeSetState({
          status: EXITED
        }, function() {
          _this3.props.onExited(maybeNode);
        });
        return;
      }
      this.props.onExit(maybeNode);
      this.safeSetState({
        status: EXITING
      }, function() {
        _this3.props.onExiting(maybeNode);
        _this3.onTransitionEnd(timeouts.exit, function() {
          _this3.safeSetState({
            status: EXITED
          }, function() {
            _this3.props.onExited(maybeNode);
          });
        });
      });
    };
    _proto.cancelNextCallback = function cancelNextCallback() {
      if (this.nextCallback !== null) {
        this.nextCallback.cancel();
        this.nextCallback = null;
      }
    };
    _proto.safeSetState = function safeSetState(nextState, callback) {
      callback = this.setNextCallback(callback);
      this.setState(nextState, callback);
    };
    _proto.setNextCallback = function setNextCallback(callback) {
      var _this4 = this;
      var active = true;
      this.nextCallback = function(event) {
        if (active) {
          active = false;
          _this4.nextCallback = null;
          callback(event);
        }
      };
      this.nextCallback.cancel = function() {
        active = false;
      };
      return this.nextCallback;
    };
    _proto.onTransitionEnd = function onTransitionEnd(timeout2, handler) {
      this.setNextCallback(handler);
      var node2 = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
      var doesNotHaveTimeoutOrListener = timeout2 == null && !this.props.addEndListener;
      if (!node2 || doesNotHaveTimeoutOrListener) {
        setTimeout(this.nextCallback, 0);
        return;
      }
      if (this.props.addEndListener) {
        var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node2, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
        this.props.addEndListener(maybeNode, maybeNextCallback);
      }
      if (timeout2 != null) {
        setTimeout(this.nextCallback, timeout2);
      }
    };
    _proto.render = function render() {
      var status = this.state.status;
      if (status === UNMOUNTED) {
        return null;
      }
      var _this$props = this.props, children = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
      return (
        // allows for nested Transitions
        /* @__PURE__ */ import_react5.default.createElement(TransitionGroupContext_default.Provider, {
          value: null
        }, typeof children === "function" ? children(status, childProps) : import_react5.default.cloneElement(import_react5.default.Children.only(children), childProps))
      );
    };
    return Transition2;
  }(import_react5.default.Component);
  Transition.contextType = TransitionGroupContext_default;
  Transition.propTypes = true ? {
    /**
     * A React reference to DOM element that need to transition:
     * https://stackoverflow.com/a/51127130/4671932
     *
     *   - When `nodeRef` prop is used, `node` is not passed to callback functions
     *      (e.g. `onEnter`) because user already has direct access to the node.
     *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
     *     `nodeRef` need to be provided to `Transition` with changed `key` prop
     *     (see
     *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
     */
    nodeRef: import_prop_types4.default.shape({
      current: typeof Element === "undefined" ? import_prop_types4.default.any : function(propValue, key, componentName, location, propFullName, secret) {
        var value = propValue[key];
        return import_prop_types4.default.instanceOf(value && "ownerDocument" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
      }
    }),
    /**
     * A `function` child can be used instead of a React element. This function is
     * called with the current transition status (`'entering'`, `'entered'`,
     * `'exiting'`, `'exited'`), which can be used to apply context
     * specific props to a component.
     *
     * ```jsx
     * <Transition in={this.state.in} timeout={150}>
     *   {state => (
     *     <MyComponent className={`fade fade-${state}`} />
     *   )}
     * </Transition>
     * ```
     */
    children: import_prop_types4.default.oneOfType([import_prop_types4.default.func.isRequired, import_prop_types4.default.element.isRequired]).isRequired,
    /**
     * Show the component; triggers the enter or exit states
     */
    in: import_prop_types4.default.bool,
    /**
     * By default the child component is mounted immediately along with
     * the parent `Transition` component. If you want to "lazy mount" the component on the
     * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
     * mounted, even on "exited", unless you also specify `unmountOnExit`.
     */
    mountOnEnter: import_prop_types4.default.bool,
    /**
     * By default the child component stays mounted after it reaches the `'exited'` state.
     * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
     */
    unmountOnExit: import_prop_types4.default.bool,
    /**
     * By default the child component does not perform the enter transition when
     * it first mounts, regardless of the value of `in`. If you want this
     * behavior, set both `appear` and `in` to `true`.
     *
     * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
     * > only adds an additional enter transition. However, in the
     * > `<CSSTransition>` component that first enter transition does result in
     * > additional `.appear-*` classes, that way you can choose to style it
     * > differently.
     */
    appear: import_prop_types4.default.bool,
    /**
     * Enable or disable enter transitions.
     */
    enter: import_prop_types4.default.bool,
    /**
     * Enable or disable exit transitions.
     */
    exit: import_prop_types4.default.bool,
    /**
     * The duration of the transition, in milliseconds.
     * Required unless `addEndListener` is provided.
     *
     * You may specify a single timeout for all transitions:
     *
     * ```jsx
     * timeout={500}
     * ```
     *
     * or individually:
     *
     * ```jsx
     * timeout={{
     *  appear: 500,
     *  enter: 300,
     *  exit: 500,
     * }}
     * ```
     *
     * - `appear` defaults to the value of `enter`
     * - `enter` defaults to `0`
     * - `exit` defaults to `0`
     *
     * @type {number | { enter?: number, exit?: number, appear?: number }}
     */
    timeout: function timeout(props) {
      var pt = timeoutsShape;
      if (!props.addEndListener)
        pt = pt.isRequired;
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return pt.apply(void 0, [props].concat(args));
    },
    /**
     * Add a custom transition end trigger. Called with the transitioning
     * DOM node and a `done` callback. Allows for more fine grained transition end
     * logic. Timeouts are still used as a fallback if provided.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * ```jsx
     * addEndListener={(node, done) => {
     *   // use the css transitionend event to mark the finish of a transition
     *   node.addEventListener('transitionend', done, false);
     * }}
     * ```
     */
    addEndListener: import_prop_types4.default.func,
    /**
     * Callback fired before the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEnter: import_prop_types4.default.func,
    /**
     * Callback fired after the "entering" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool)
     */
    onEntering: import_prop_types4.default.func,
    /**
     * Callback fired after the "entered" status is applied. An extra parameter
     * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement, isAppearing: bool) -> void
     */
    onEntered: import_prop_types4.default.func,
    /**
     * Callback fired before the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExit: import_prop_types4.default.func,
    /**
     * Callback fired after the "exiting" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed.
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExiting: import_prop_types4.default.func,
    /**
     * Callback fired after the "exited" status is applied.
     *
     * **Note**: when `nodeRef` prop is passed, `node` is not passed
     *
     * @type Function(node: HtmlElement) -> void
     */
    onExited: import_prop_types4.default.func
  } : {};
  function noop() {
  }
  Transition.defaultProps = {
    in: false,
    mountOnEnter: false,
    unmountOnExit: false,
    appear: false,
    enter: true,
    exit: true,
    onEnter: noop,
    onEntering: noop,
    onEntered: noop,
    onExit: noop,
    onExiting: noop,
    onExited: noop
  };
  Transition.UNMOUNTED = UNMOUNTED;
  Transition.EXITED = EXITED;
  Transition.ENTERING = ENTERING;
  Transition.ENTERED = ENTERED;
  Transition.EXITING = EXITING;
  var Transition_default = Transition;

  // node_modules/react-transition-group/esm/TransitionGroup.js
  init_extends();
  var import_prop_types5 = __toESM(require_prop_types());
  var import_react7 = __toESM(require_react());

  // node_modules/react-transition-group/esm/utils/ChildMapping.js
  var import_react6 = __toESM(require_react());
  function getChildMapping(children, mapFn) {
    var mapper = function mapper2(child) {
      return mapFn && (0, import_react6.isValidElement)(child) ? mapFn(child) : child;
    };
    var result = /* @__PURE__ */ Object.create(null);
    if (children)
      import_react6.Children.map(children, function(c) {
        return c;
      }).forEach(function(child) {
        result[child.key] = mapper(child);
      });
    return result;
  }
  function mergeChildMappings(prev2, next2) {
    prev2 = prev2 || {};
    next2 = next2 || {};
    function getValueForKey(key) {
      return key in next2 ? next2[key] : prev2[key];
    }
    var nextKeysPending = /* @__PURE__ */ Object.create(null);
    var pendingKeys = [];
    for (var prevKey in prev2) {
      if (prevKey in next2) {
        if (pendingKeys.length) {
          nextKeysPending[prevKey] = pendingKeys;
          pendingKeys = [];
        }
      } else {
        pendingKeys.push(prevKey);
      }
    }
    var i;
    var childMapping = {};
    for (var nextKey in next2) {
      if (nextKeysPending[nextKey]) {
        for (i = 0; i < nextKeysPending[nextKey].length; i++) {
          var pendingNextKey = nextKeysPending[nextKey][i];
          childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
        }
      }
      childMapping[nextKey] = getValueForKey(nextKey);
    }
    for (i = 0; i < pendingKeys.length; i++) {
      childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
    }
    return childMapping;
  }
  function getProp(child, prop, props) {
    return props[prop] != null ? props[prop] : child.props[prop];
  }
  function getInitialChildMapping(props, onExited) {
    return getChildMapping(props.children, function(child) {
      return (0, import_react6.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: true,
        appear: getProp(child, "appear", props),
        enter: getProp(child, "enter", props),
        exit: getProp(child, "exit", props)
      });
    });
  }
  function getNextChildMapping(nextProps, prevChildMapping, onExited) {
    var nextChildMapping = getChildMapping(nextProps.children);
    var children = mergeChildMappings(prevChildMapping, nextChildMapping);
    Object.keys(children).forEach(function(key) {
      var child = children[key];
      if (!(0, import_react6.isValidElement)(child))
        return;
      var hasPrev = key in prevChildMapping;
      var hasNext = key in nextChildMapping;
      var prevChild = prevChildMapping[key];
      var isLeaving = (0, import_react6.isValidElement)(prevChild) && !prevChild.props.in;
      if (hasNext && (!hasPrev || isLeaving)) {
        children[key] = (0, import_react6.cloneElement)(child, {
          onExited: onExited.bind(null, child),
          in: true,
          exit: getProp(child, "exit", nextProps),
          enter: getProp(child, "enter", nextProps)
        });
      } else if (!hasNext && hasPrev && !isLeaving) {
        children[key] = (0, import_react6.cloneElement)(child, {
          in: false
        });
      } else if (hasNext && hasPrev && (0, import_react6.isValidElement)(prevChild)) {
        children[key] = (0, import_react6.cloneElement)(child, {
          onExited: onExited.bind(null, child),
          in: prevChild.props.in,
          exit: getProp(child, "exit", nextProps),
          enter: getProp(child, "enter", nextProps)
        });
      }
    });
    return children;
  }

  // node_modules/react-transition-group/esm/TransitionGroup.js
  var values = Object.values || function(obj) {
    return Object.keys(obj).map(function(k) {
      return obj[k];
    });
  };
  var defaultProps = {
    component: "div",
    childFactory: function childFactory(child) {
      return child;
    }
  };
  var TransitionGroup = /* @__PURE__ */ function(_React$Component) {
    _inheritsLoose(TransitionGroup2, _React$Component);
    function TransitionGroup2(props, context) {
      var _this;
      _this = _React$Component.call(this, props, context) || this;
      var handleExited = _this.handleExited.bind(_assertThisInitialized(_this));
      _this.state = {
        contextValue: {
          isMounting: true
        },
        handleExited,
        firstRender: true
      };
      return _this;
    }
    var _proto = TransitionGroup2.prototype;
    _proto.componentDidMount = function componentDidMount() {
      this.mounted = true;
      this.setState({
        contextValue: {
          isMounting: false
        }
      });
    };
    _proto.componentWillUnmount = function componentWillUnmount() {
      this.mounted = false;
    };
    TransitionGroup2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
      var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;
      return {
        children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
        firstRender: false
      };
    };
    _proto.handleExited = function handleExited(child, node2) {
      var currentChildMapping = getChildMapping(this.props.children);
      if (child.key in currentChildMapping)
        return;
      if (child.props.onExited) {
        child.props.onExited(node2);
      }
      if (this.mounted) {
        this.setState(function(state) {
          var children = _extends({}, state.children);
          delete children[child.key];
          return {
            children
          };
        });
      }
    };
    _proto.render = function render() {
      var _this$props = this.props, Component = _this$props.component, childFactory2 = _this$props.childFactory, props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);
      var contextValue = this.state.contextValue;
      var children = values(this.state.children).map(childFactory2);
      delete props.appear;
      delete props.enter;
      delete props.exit;
      if (Component === null) {
        return /* @__PURE__ */ import_react7.default.createElement(TransitionGroupContext_default.Provider, {
          value: contextValue
        }, children);
      }
      return /* @__PURE__ */ import_react7.default.createElement(TransitionGroupContext_default.Provider, {
        value: contextValue
      }, /* @__PURE__ */ import_react7.default.createElement(Component, props, children));
    };
    return TransitionGroup2;
  }(import_react7.default.Component);
  TransitionGroup.propTypes = true ? {
    /**
     * `<TransitionGroup>` renders a `<div>` by default. You can change this
     * behavior by providing a `component` prop.
     * If you use React v16+ and would like to avoid a wrapping `<div>` element
     * you can pass in `component={null}`. This is useful if the wrapping div
     * borks your css styles.
     */
    component: import_prop_types5.default.any,
    /**
     * A set of `<Transition>` components, that are toggled `in` and out as they
     * leave. the `<TransitionGroup>` will inject specific transition props, so
     * remember to spread them through if you are wrapping the `<Transition>` as
     * with our `<Fade>` example.
     *
     * While this component is meant for multiple `Transition` or `CSSTransition`
     * children, sometimes you may want to have a single transition child with
     * content that you want to be transitioned out and in when you change it
     * (e.g. routes, images etc.) In that case you can change the `key` prop of
     * the transition child as you change its content, this will cause
     * `TransitionGroup` to transition the child out and back in.
     */
    children: import_prop_types5.default.node,
    /**
     * A convenience prop that enables or disables appear animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    appear: import_prop_types5.default.bool,
    /**
     * A convenience prop that enables or disables enter animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    enter: import_prop_types5.default.bool,
    /**
     * A convenience prop that enables or disables exit animations
     * for all children. Note that specifying this will override any defaults set
     * on individual children Transitions.
     */
    exit: import_prop_types5.default.bool,
    /**
     * You may need to apply reactive updates to a child as it is exiting.
     * This is generally done by using `cloneElement` however in the case of an exiting
     * child the element has already been removed and not accessible to the consumer.
     *
     * If you do need to update a child as it leaves you can provide a `childFactory`
     * to wrap every child, even the ones that are leaving.
     *
     * @type Function(child: ReactElement) -> ReactElement
     */
    childFactory: import_prop_types5.default.func
  } : {};
  TransitionGroup.defaultProps = defaultProps;
  var TransitionGroup_default = TransitionGroup;

  // node_modules/@mui/material/Collapse/Collapse.js
  var import_utils16 = __toESM(require_utils());
  var import_composeClasses = __toESM(require_composeClasses3());

  // node_modules/@mui/material/transitions/utils.js
  var reflow = (node2) => node2.scrollTop;
  function getTransitionProps(props, options) {
    var _style$transitionDura, _style$transitionTimi;
    const {
      timeout: timeout2,
      easing: easing2,
      style = {}
    } = props;
    return {
      duration: (_style$transitionDura = style.transitionDuration) != null ? _style$transitionDura : typeof timeout2 === "number" ? timeout2 : timeout2[options.mode] || 0,
      easing: (_style$transitionTimi = style.transitionTimingFunction) != null ? _style$transitionTimi : typeof easing2 === "object" ? easing2[options.mode] : easing2,
      delay: style.transitionDelay
    };
  }

  // node_modules/@mui/material/Collapse/Collapse.js
  var import_utils18 = __toESM(require_utils2());

  // node_modules/@mui/material/Collapse/collapseClasses.js
  var import_utils15 = __toESM(require_utils());
  var import_generateUtilityClass2 = __toESM(require_generateUtilityClass3());
  function getCollapseUtilityClass(slot) {
    return (0, import_generateUtilityClass2.default)("MuiCollapse", slot);
  }
  var collapseClasses = (0, import_utils15.unstable_generateUtilityClasses)("MuiCollapse", ["root", "horizontal", "vertical", "entered", "hidden", "wrapper", "wrapperInner"]);
  var collapseClasses_default = collapseClasses;

  // node_modules/@mui/material/Collapse/Collapse.js
  var import_jsx_runtime3 = __toESM(require_jsx_runtime());
  var _excluded11 = ["addEndListener", "children", "className", "collapsedSize", "component", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "orientation", "style", "timeout", "TransitionComponent"];
  var useUtilityClasses = (ownerState) => {
    const {
      orientation,
      classes
    } = ownerState;
    const slots = {
      root: ["root", `${orientation}`],
      entered: ["entered"],
      hidden: ["hidden"],
      wrapper: ["wrapper", `${orientation}`],
      wrapperInner: ["wrapperInner", `${orientation}`]
    };
    return (0, import_composeClasses.unstable_composeClasses)(slots, getCollapseUtilityClass, classes);
  };
  var CollapseRoot = styled_default("div", {
    name: "MuiCollapse",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, styles7[ownerState.orientation], ownerState.state === "entered" && styles7.entered, ownerState.state === "exited" && !ownerState.in && ownerState.collapsedSize === "0px" && styles7.hidden];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    height: 0,
    overflow: "hidden",
    transition: theme.transitions.create("height")
  }, ownerState.orientation === "horizontal" && {
    height: "auto",
    width: 0,
    transition: theme.transitions.create("width")
  }, ownerState.state === "entered" && _extends({
    height: "auto",
    overflow: "visible"
  }, ownerState.orientation === "horizontal" && {
    width: "auto"
  }), ownerState.state === "exited" && !ownerState.in && ownerState.collapsedSize === "0px" && {
    visibility: "hidden"
  }));
  var CollapseWrapper = styled_default("div", {
    name: "MuiCollapse",
    slot: "Wrapper",
    overridesResolver: (props, styles7) => styles7.wrapper
  })(({
    ownerState
  }) => _extends({
    // Hack to get children with a negative margin to not falsify the height computation.
    display: "flex",
    width: "100%"
  }, ownerState.orientation === "horizontal" && {
    width: "auto",
    height: "100%"
  }));
  var CollapseWrapperInner = styled_default("div", {
    name: "MuiCollapse",
    slot: "WrapperInner",
    overridesResolver: (props, styles7) => styles7.wrapperInner
  })(({
    ownerState
  }) => _extends({
    width: "100%"
  }, ownerState.orientation === "horizontal" && {
    width: "auto",
    height: "100%"
  }));
  var Collapse = /* @__PURE__ */ React13.forwardRef(function Collapse2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiCollapse"
    });
    const {
      addEndListener,
      children,
      className,
      collapsedSize: collapsedSizeProp = "0px",
      component,
      easing: easing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      orientation = "vertical",
      style,
      timeout: timeout2 = duration.standard,
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition_default
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded11);
    const ownerState = _extends({}, props, {
      orientation,
      collapsedSize: collapsedSizeProp
    });
    const classes = useUtilityClasses(ownerState);
    const theme = useTheme4();
    const timer = React13.useRef();
    const wrapperRef = React13.useRef(null);
    const autoTransitionDuration = React13.useRef();
    const collapsedSize = typeof collapsedSizeProp === "number" ? `${collapsedSizeProp}px` : collapsedSizeProp;
    const isHorizontal2 = orientation === "horizontal";
    const size2 = isHorizontal2 ? "width" : "height";
    React13.useEffect(() => {
      return () => {
        clearTimeout(timer.current);
      };
    }, []);
    const nodeRef = React13.useRef(null);
    const handleRef = (0, import_utils18.useForkRef)(ref, nodeRef);
    const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
      if (callback) {
        const node2 = nodeRef.current;
        if (maybeIsAppearing === void 0) {
          callback(node2);
        } else {
          callback(node2, maybeIsAppearing);
        }
      }
    };
    const getWrapperSize = () => wrapperRef.current ? wrapperRef.current[isHorizontal2 ? "clientWidth" : "clientHeight"] : 0;
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      if (wrapperRef.current && isHorizontal2) {
        wrapperRef.current.style.position = "absolute";
      }
      node2.style[size2] = collapsedSize;
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntering = normalizedTransitionCallback((node2, isAppearing) => {
      const wrapperSize = getWrapperSize();
      if (wrapperRef.current && isHorizontal2) {
        wrapperRef.current.style.position = "";
      }
      const {
        duration: transitionDuration,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "enter"
      });
      if (timeout2 === "auto") {
        const duration2 = theme.transitions.getAutoHeightDuration(wrapperSize);
        node2.style.transitionDuration = `${duration2}ms`;
        autoTransitionDuration.current = duration2;
      } else {
        node2.style.transitionDuration = typeof transitionDuration === "string" ? transitionDuration : `${transitionDuration}ms`;
      }
      node2.style[size2] = `${wrapperSize}px`;
      node2.style.transitionTimingFunction = transitionTimingFunction;
      if (onEntering) {
        onEntering(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback((node2, isAppearing) => {
      node2.style[size2] = "auto";
      if (onEntered) {
        onEntered(node2, isAppearing);
      }
    });
    const handleExit = normalizedTransitionCallback((node2) => {
      node2.style[size2] = `${getWrapperSize()}px`;
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleExiting = normalizedTransitionCallback((node2) => {
      const wrapperSize = getWrapperSize();
      const {
        duration: transitionDuration,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "exit"
      });
      if (timeout2 === "auto") {
        const duration2 = theme.transitions.getAutoHeightDuration(wrapperSize);
        node2.style.transitionDuration = `${duration2}ms`;
        autoTransitionDuration.current = duration2;
      } else {
        node2.style.transitionDuration = typeof transitionDuration === "string" ? transitionDuration : `${transitionDuration}ms`;
      }
      node2.style[size2] = collapsedSize;
      node2.style.transitionTimingFunction = transitionTimingFunction;
      if (onExiting) {
        onExiting(node2);
      }
    });
    const handleAddEndListener = (next2) => {
      if (timeout2 === "auto") {
        timer.current = setTimeout(next2, autoTransitionDuration.current || 0);
      }
      if (addEndListener) {
        addEndListener(nodeRef.current, next2);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(TransitionComponent, _extends({
      in: inProp,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      nodeRef,
      timeout: timeout2 === "auto" ? null : timeout2
    }, other, {
      children: (state, childProps) => /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(CollapseRoot, _extends({
        as: component,
        className: clsx_default(classes.root, className, {
          "entered": classes.entered,
          "exited": !inProp && collapsedSize === "0px" && classes.hidden
        }[state]),
        style: _extends({
          [isHorizontal2 ? "minWidth" : "minHeight"]: collapsedSize
        }, style),
        ownerState: _extends({}, ownerState, {
          state
        }),
        ref: handleRef
      }, childProps, {
        children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(CollapseWrapper, {
          ownerState: _extends({}, ownerState, {
            state
          }),
          className: classes.wrapper,
          ref: wrapperRef,
          children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(CollapseWrapperInner, {
            ownerState: _extends({}, ownerState, {
              state
            }),
            className: classes.wrapperInner,
            children
          })
        })
      }))
    }));
  });
  true ? Collapse.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: import_prop_types6.default.func,
    /**
     * The content node to be collapsed.
     */
    children: import_prop_types6.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types6.default.object,
    /**
     * @ignore
     */
    className: import_prop_types6.default.string,
    /**
     * The width (horizontal) or height (vertical) of the container when collapsed.
     * @default '0px'
     */
    collapsedSize: import_prop_types6.default.oneOfType([import_prop_types6.default.number, import_prop_types6.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_utils16.elementTypeAcceptingRef,
    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     */
    easing: import_prop_types6.default.oneOfType([import_prop_types6.default.shape({
      enter: import_prop_types6.default.string,
      exit: import_prop_types6.default.string
    }), import_prop_types6.default.string]),
    /**
     * If `true`, the component will transition in.
     */
    in: import_prop_types6.default.bool,
    /**
     * @ignore
     */
    onEnter: import_prop_types6.default.func,
    /**
     * @ignore
     */
    onEntered: import_prop_types6.default.func,
    /**
     * @ignore
     */
    onEntering: import_prop_types6.default.func,
    /**
     * @ignore
     */
    onExit: import_prop_types6.default.func,
    /**
     * @ignore
     */
    onExited: import_prop_types6.default.func,
    /**
     * @ignore
     */
    onExiting: import_prop_types6.default.func,
    /**
     * The transition orientation.
     * @default 'vertical'
     */
    orientation: import_prop_types6.default.oneOf(["horizontal", "vertical"]),
    /**
     * @ignore
     */
    style: import_prop_types6.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types6.default.oneOfType([import_prop_types6.default.arrayOf(import_prop_types6.default.oneOfType([import_prop_types6.default.func, import_prop_types6.default.object, import_prop_types6.default.bool])), import_prop_types6.default.func, import_prop_types6.default.object]),
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     *
     * Set to 'auto' to automatically calculate transition time based on height.
     * @default duration.standard
     */
    timeout: import_prop_types6.default.oneOfType([import_prop_types6.default.oneOf(["auto"]), import_prop_types6.default.number, import_prop_types6.default.shape({
      appear: import_prop_types6.default.number,
      enter: import_prop_types6.default.number,
      exit: import_prop_types6.default.number
    })])
  } : void 0;
  Collapse.muiSupportAuto = true;
  var Collapse_default = Collapse;

  // node_modules/@mui/material/Paper/Paper.js
  init_extends();
  var React14 = __toESM(require_react());
  var import_prop_types7 = __toESM(require_prop_types());
  var import_utils20 = __toESM(require_utils());
  var import_composeClasses2 = __toESM(require_composeClasses3());
  var import_system12 = __toESM(require_system());

  // node_modules/@mui/material/Paper/paperClasses.js
  var import_utils19 = __toESM(require_utils());
  var import_generateUtilityClass3 = __toESM(require_generateUtilityClass3());
  function getPaperUtilityClass(slot) {
    return (0, import_generateUtilityClass3.default)("MuiPaper", slot);
  }
  var paperClasses = (0, import_utils19.unstable_generateUtilityClasses)("MuiPaper", ["root", "rounded", "outlined", "elevation", "elevation0", "elevation1", "elevation2", "elevation3", "elevation4", "elevation5", "elevation6", "elevation7", "elevation8", "elevation9", "elevation10", "elevation11", "elevation12", "elevation13", "elevation14", "elevation15", "elevation16", "elevation17", "elevation18", "elevation19", "elevation20", "elevation21", "elevation22", "elevation23", "elevation24"]);
  var paperClasses_default = paperClasses;

  // node_modules/@mui/material/Paper/Paper.js
  var import_jsx_runtime4 = __toESM(require_jsx_runtime());
  var _excluded12 = ["className", "component", "elevation", "square", "variant"];
  var useUtilityClasses2 = (ownerState) => {
    const {
      square,
      elevation,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ["root", variant, !square && "rounded", variant === "elevation" && `elevation${elevation}`]
    };
    return (0, import_composeClasses2.unstable_composeClasses)(slots, getPaperUtilityClass, classes);
  };
  var PaperRoot = styled_default("div", {
    name: "MuiPaper",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, styles7[ownerState.variant], !ownerState.square && styles7.rounded, ownerState.variant === "elevation" && styles7[`elevation${ownerState.elevation}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _theme$vars$overlays;
    return _extends({
      backgroundColor: (theme.vars || theme).palette.background.paper,
      color: (theme.vars || theme).palette.text.primary,
      transition: theme.transitions.create("box-shadow")
    }, !ownerState.square && {
      borderRadius: theme.shape.borderRadius
    }, ownerState.variant === "outlined" && {
      border: `1px solid ${(theme.vars || theme).palette.divider}`
    }, ownerState.variant === "elevation" && _extends({
      boxShadow: (theme.vars || theme).shadows[ownerState.elevation]
    }, !theme.vars && theme.palette.mode === "dark" && {
      backgroundImage: `linear-gradient(${(0, import_system12.alpha)("#fff", getOverlayAlpha_default(ownerState.elevation))}, ${(0, import_system12.alpha)("#fff", getOverlayAlpha_default(ownerState.elevation))})`
    }, theme.vars && {
      backgroundImage: (_theme$vars$overlays = theme.vars.overlays) == null ? void 0 : _theme$vars$overlays[ownerState.elevation]
    }));
  });
  var Paper = /* @__PURE__ */ React14.forwardRef(function Paper2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiPaper"
    });
    const {
      className,
      component = "div",
      elevation = 1,
      square = false,
      variant = "elevation"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded12);
    const ownerState = _extends({}, props, {
      component,
      elevation,
      square,
      variant
    });
    const classes = useUtilityClasses2(ownerState);
    if (true) {
      const theme = useTheme4();
      if (theme.shadows[elevation] === void 0) {
        console.error([`MUI: The elevation provided <Paper elevation={${elevation}}> is not available in the theme.`, `Please make sure that \`theme.shadows[${elevation}]\` is defined.`].join("\n"));
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(PaperRoot, _extends({
      as: component,
      ownerState,
      className: clsx_default(classes.root, className),
      ref
    }, other));
  });
  true ? Paper.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types7.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types7.default.object,
    /**
     * @ignore
     */
    className: import_prop_types7.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types7.default.elementType,
    /**
     * Shadow depth, corresponds to `dp` in the spec.
     * It accepts values between 0 and 24 inclusive.
     * @default 1
     */
    elevation: (0, import_utils20.chainPropTypes)(import_utils20.integerPropType, (props) => {
      const {
        elevation,
        variant
      } = props;
      if (elevation > 0 && variant === "outlined") {
        return new Error(`MUI: Combining \`elevation={${elevation}}\` with \`variant="${variant}"\` has no effect. Either use \`elevation={0}\` or use a different \`variant\`.`);
      }
      return null;
    }),
    /**
     * If `true`, rounded corners are disabled.
     * @default false
     */
    square: import_prop_types7.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object, import_prop_types7.default.bool])), import_prop_types7.default.func, import_prop_types7.default.object]),
    /**
     * The variant to use.
     * @default 'elevation'
     */
    variant: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["elevation", "outlined"]), import_prop_types7.default.string])
  } : void 0;
  var Paper_default = Paper;

  // node_modules/@mui/material/Accordion/AccordionContext.js
  var React15 = __toESM(require_react());
  var AccordionContext = /* @__PURE__ */ React15.createContext({});
  if (true) {
    AccordionContext.displayName = "AccordionContext";
  }
  var AccordionContext_default = AccordionContext;

  // node_modules/@mui/material/utils/useControlled.js
  var import_utils21 = __toESM(require_utils());
  var useControlled_default = import_utils21.unstable_useControlled;

  // node_modules/@mui/material/Accordion/accordionClasses.js
  var import_utils22 = __toESM(require_utils());
  var import_generateUtilityClass4 = __toESM(require_generateUtilityClass3());
  function getAccordionUtilityClass(slot) {
    return (0, import_generateUtilityClass4.default)("MuiAccordion", slot);
  }
  var accordionClasses = (0, import_utils22.unstable_generateUtilityClasses)("MuiAccordion", ["root", "rounded", "expanded", "disabled", "gutters", "region"]);
  var accordionClasses_default = accordionClasses;

  // node_modules/@mui/material/Accordion/Accordion.js
  var import_jsx_runtime5 = __toESM(require_jsx_runtime());
  var import_jsx_runtime6 = __toESM(require_jsx_runtime());
  var _excluded13 = ["children", "className", "defaultExpanded", "disabled", "disableGutters", "expanded", "onChange", "square", "TransitionComponent", "TransitionProps"];
  var useUtilityClasses3 = (ownerState) => {
    const {
      classes,
      square,
      expanded,
      disabled,
      disableGutters
    } = ownerState;
    const slots = {
      root: ["root", !square && "rounded", expanded && "expanded", disabled && "disabled", !disableGutters && "gutters"],
      region: ["region"]
    };
    return (0, import_composeClasses3.unstable_composeClasses)(slots, getAccordionUtilityClass, classes);
  };
  var AccordionRoot = styled_default(Paper_default, {
    name: "MuiAccordion",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${accordionClasses_default.region}`]: styles7.region
      }, styles7.root, !ownerState.square && styles7.rounded, !ownerState.disableGutters && styles7.gutters];
    }
  })(({
    theme
  }) => {
    const transition2 = {
      duration: theme.transitions.duration.shortest
    };
    return {
      position: "relative",
      transition: theme.transitions.create(["margin"], transition2),
      overflowAnchor: "none",
      // Keep the same scrolling position
      "&:before": {
        position: "absolute",
        left: 0,
        top: -1,
        right: 0,
        height: 1,
        content: '""',
        opacity: 1,
        backgroundColor: (theme.vars || theme).palette.divider,
        transition: theme.transitions.create(["opacity", "background-color"], transition2)
      },
      "&:first-of-type": {
        "&:before": {
          display: "none"
        }
      },
      [`&.${accordionClasses_default.expanded}`]: {
        "&:before": {
          opacity: 0
        },
        "&:first-of-type": {
          marginTop: 0
        },
        "&:last-of-type": {
          marginBottom: 0
        },
        "& + &": {
          "&:before": {
            display: "none"
          }
        }
      },
      [`&.${accordionClasses_default.disabled}`]: {
        backgroundColor: (theme.vars || theme).palette.action.disabledBackground
      }
    };
  }, ({
    theme,
    ownerState
  }) => _extends({}, !ownerState.square && {
    borderRadius: 0,
    "&:first-of-type": {
      borderTopLeftRadius: (theme.vars || theme).shape.borderRadius,
      borderTopRightRadius: (theme.vars || theme).shape.borderRadius
    },
    "&:last-of-type": {
      borderBottomLeftRadius: (theme.vars || theme).shape.borderRadius,
      borderBottomRightRadius: (theme.vars || theme).shape.borderRadius,
      // Fix a rendering issue on Edge
      "@supports (-ms-ime-align: auto)": {
        borderBottomLeftRadius: 0,
        borderBottomRightRadius: 0
      }
    }
  }, !ownerState.disableGutters && {
    [`&.${accordionClasses_default.expanded}`]: {
      margin: "16px 0"
    }
  }));
  var Accordion = /* @__PURE__ */ React16.forwardRef(function Accordion2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiAccordion"
    });
    const {
      children: childrenProp,
      className,
      defaultExpanded = false,
      disabled = false,
      disableGutters = false,
      expanded: expandedProp,
      onChange,
      square = false,
      TransitionComponent = Collapse_default,
      TransitionProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded13);
    const [expanded, setExpandedState] = useControlled_default({
      controlled: expandedProp,
      default: defaultExpanded,
      name: "Accordion",
      state: "expanded"
    });
    const handleChange = React16.useCallback((event) => {
      setExpandedState(!expanded);
      if (onChange) {
        onChange(event, !expanded);
      }
    }, [expanded, onChange, setExpandedState]);
    const [summary, ...children] = React16.Children.toArray(childrenProp);
    const contextValue = React16.useMemo(() => ({
      expanded,
      disabled,
      disableGutters,
      toggle: handleChange
    }), [expanded, disabled, disableGutters, handleChange]);
    const ownerState = _extends({}, props, {
      square,
      disabled,
      disableGutters,
      expanded
    });
    const classes = useUtilityClasses3(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(AccordionRoot, _extends({
      className: clsx_default(classes.root, className),
      ref,
      ownerState,
      square
    }, other, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime5.jsx)(AccordionContext_default.Provider, {
        value: contextValue,
        children: summary
      }), /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(TransitionComponent, _extends({
        in: expanded,
        timeout: "auto"
      }, TransitionProps, {
        children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("div", {
          "aria-labelledby": summary.props.id,
          id: summary.props["aria-controls"],
          role: "region",
          className: classes.region,
          children
        })
      }))]
    }));
  });
  true ? Accordion.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: (0, import_utils23.chainPropTypes)(import_prop_types8.default.node.isRequired, (props) => {
      const summary = React16.Children.toArray(props.children)[0];
      if ((0, import_react_is.isFragment)(summary)) {
        return new Error("MUI: The Accordion doesn't accept a Fragment as a child. Consider providing an array instead.");
      }
      if (!/* @__PURE__ */ React16.isValidElement(summary)) {
        return new Error("MUI: Expected the first child of Accordion to be a valid element.");
      }
      return null;
    }),
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types8.default.object,
    /**
     * @ignore
     */
    className: import_prop_types8.default.string,
    /**
     * If `true`, expands the accordion by default.
     * @default false
     */
    defaultExpanded: import_prop_types8.default.bool,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types8.default.bool,
    /**
     * If `true`, it removes the margin between two expanded accordion items and the increase of height.
     * @default false
     */
    disableGutters: import_prop_types8.default.bool,
    /**
     * If `true`, expands the accordion, otherwise collapse it.
     * Setting this prop enables control over the accordion.
     */
    expanded: import_prop_types8.default.bool,
    /**
     * Callback fired when the expand/collapse state is changed.
     *
     * @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.
     * @param {boolean} expanded The `expanded` state of the accordion.
     */
    onChange: import_prop_types8.default.func,
    /**
     * If `true`, rounded corners are disabled.
     * @default false
     */
    square: import_prop_types8.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object]),
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Collapse
     */
    TransitionComponent: import_prop_types8.default.elementType,
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
     */
    TransitionProps: import_prop_types8.default.object
  } : void 0;
  var Accordion_default = Accordion;

  // node_modules/@mui/material/AccordionActions/AccordionActions.js
  init_extends();
  var React17 = __toESM(require_react());
  var import_prop_types9 = __toESM(require_prop_types());
  var import_composeClasses4 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/AccordionActions/accordionActionsClasses.js
  var import_utils24 = __toESM(require_utils());
  var import_generateUtilityClass5 = __toESM(require_generateUtilityClass3());
  function getAccordionActionsUtilityClass(slot) {
    return (0, import_generateUtilityClass5.default)("MuiAccordionActions", slot);
  }
  var accordionActionsClasses = (0, import_utils24.unstable_generateUtilityClasses)("MuiAccordionActions", ["root", "spacing"]);
  var accordionActionsClasses_default = accordionActionsClasses;

  // node_modules/@mui/material/AccordionActions/AccordionActions.js
  var import_jsx_runtime7 = __toESM(require_jsx_runtime());
  var _excluded14 = ["className", "disableSpacing"];
  var useUtilityClasses4 = (ownerState) => {
    const {
      classes,
      disableSpacing
    } = ownerState;
    const slots = {
      root: ["root", !disableSpacing && "spacing"]
    };
    return (0, import_composeClasses4.unstable_composeClasses)(slots, getAccordionActionsUtilityClass, classes);
  };
  var AccordionActionsRoot = styled_default("div", {
    name: "MuiAccordionActions",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, !ownerState.disableSpacing && styles7.spacing];
    }
  })(({
    ownerState
  }) => _extends({
    display: "flex",
    alignItems: "center",
    padding: 8,
    justifyContent: "flex-end"
  }, !ownerState.disableSpacing && {
    "& > :not(:first-of-type)": {
      marginLeft: 8
    }
  }));
  var AccordionActions = /* @__PURE__ */ React17.forwardRef(function AccordionActions2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiAccordionActions"
    });
    const {
      className,
      disableSpacing = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded14);
    const ownerState = _extends({}, props, {
      disableSpacing
    });
    const classes = useUtilityClasses4(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(AccordionActionsRoot, _extends({
      className: clsx_default(classes.root, className),
      ref,
      ownerState
    }, other));
  });
  true ? AccordionActions.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types9.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types9.default.object,
    /**
     * @ignore
     */
    className: import_prop_types9.default.string,
    /**
     * If `true`, the actions do not have additional margin.
     * @default false
     */
    disableSpacing: import_prop_types9.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types9.default.oneOfType([import_prop_types9.default.arrayOf(import_prop_types9.default.oneOfType([import_prop_types9.default.func, import_prop_types9.default.object, import_prop_types9.default.bool])), import_prop_types9.default.func, import_prop_types9.default.object])
  } : void 0;
  var AccordionActions_default = AccordionActions;

  // node_modules/@mui/material/AccordionDetails/AccordionDetails.js
  init_extends();
  var React18 = __toESM(require_react());
  var import_prop_types10 = __toESM(require_prop_types());
  var import_composeClasses5 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/AccordionDetails/accordionDetailsClasses.js
  var import_utils25 = __toESM(require_utils());
  var import_generateUtilityClass6 = __toESM(require_generateUtilityClass3());
  function getAccordionDetailsUtilityClass(slot) {
    return (0, import_generateUtilityClass6.default)("MuiAccordionDetails", slot);
  }
  var accordionDetailsClasses = (0, import_utils25.unstable_generateUtilityClasses)("MuiAccordionDetails", ["root"]);
  var accordionDetailsClasses_default = accordionDetailsClasses;

  // node_modules/@mui/material/AccordionDetails/AccordionDetails.js
  var import_jsx_runtime8 = __toESM(require_jsx_runtime());
  var _excluded15 = ["className"];
  var useUtilityClasses5 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return (0, import_composeClasses5.unstable_composeClasses)(slots, getAccordionDetailsUtilityClass, classes);
  };
  var AccordionDetailsRoot = styled_default("div", {
    name: "MuiAccordionDetails",
    slot: "Root",
    overridesResolver: (props, styles7) => styles7.root
  })(({
    theme
  }) => ({
    padding: theme.spacing(1, 2, 2)
  }));
  var AccordionDetails = /* @__PURE__ */ React18.forwardRef(function AccordionDetails2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiAccordionDetails"
    });
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded15);
    const ownerState = props;
    const classes = useUtilityClasses5(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(AccordionDetailsRoot, _extends({
      className: clsx_default(classes.root, className),
      ref,
      ownerState
    }, other));
  });
  true ? AccordionDetails.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types10.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types10.default.object,
    /**
     * @ignore
     */
    className: import_prop_types10.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types10.default.oneOfType([import_prop_types10.default.arrayOf(import_prop_types10.default.oneOfType([import_prop_types10.default.func, import_prop_types10.default.object, import_prop_types10.default.bool])), import_prop_types10.default.func, import_prop_types10.default.object])
  } : void 0;
  var AccordionDetails_default = AccordionDetails;

  // node_modules/@mui/material/AccordionSummary/AccordionSummary.js
  init_extends();
  var React22 = __toESM(require_react());
  var import_prop_types14 = __toESM(require_prop_types());
  var import_composeClasses7 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/ButtonBase/ButtonBase.js
  init_extends();
  var React21 = __toESM(require_react());
  var import_prop_types13 = __toESM(require_prop_types());
  var import_utils31 = __toESM(require_utils());
  var import_composeClasses6 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/utils/useForkRef.js
  var import_utils26 = __toESM(require_utils());
  var useForkRef_default = import_utils26.unstable_useForkRef;

  // node_modules/@mui/material/utils/useEventCallback.js
  var import_utils27 = __toESM(require_utils());
  var useEventCallback_default = import_utils27.unstable_useEventCallback;

  // node_modules/@mui/material/utils/useIsFocusVisible.js
  var import_utils28 = __toESM(require_utils());
  var useIsFocusVisible_default = import_utils28.unstable_useIsFocusVisible;

  // node_modules/@mui/material/ButtonBase/TouchRipple.js
  init_extends();
  var React20 = __toESM(require_react());
  var import_prop_types12 = __toESM(require_prop_types());
  var import_system13 = __toESM(require_system());

  // node_modules/@mui/material/ButtonBase/Ripple.js
  var React19 = __toESM(require_react());
  var import_prop_types11 = __toESM(require_prop_types());
  var import_jsx_runtime9 = __toESM(require_jsx_runtime());
  function Ripple(props) {
    const {
      className,
      classes,
      pulsate = false,
      rippleX,
      rippleY,
      rippleSize,
      in: inProp,
      onExited,
      timeout: timeout2
    } = props;
    const [leaving, setLeaving] = React19.useState(false);
    const rippleClassName = clsx_default(className, classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
    const rippleStyles = {
      width: rippleSize,
      height: rippleSize,
      top: -(rippleSize / 2) + rippleY,
      left: -(rippleSize / 2) + rippleX
    };
    const childClassName = clsx_default(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
    if (!inProp && !leaving) {
      setLeaving(true);
    }
    React19.useEffect(() => {
      if (!inProp && onExited != null) {
        const timeoutId = setTimeout(onExited, timeout2);
        return () => {
          clearTimeout(timeoutId);
        };
      }
      return void 0;
    }, [onExited, inProp, timeout2]);
    return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("span", {
      className: rippleClassName,
      style: rippleStyles,
      children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("span", {
        className: childClassName
      })
    });
  }
  true ? Ripple.propTypes = {
    /**
     * Override or extend the styles applied to the component.
     * See [CSS API](#css) below for more details.
     */
    classes: import_prop_types11.default.object.isRequired,
    className: import_prop_types11.default.string,
    /**
     * @ignore - injected from TransitionGroup
     */
    in: import_prop_types11.default.bool,
    /**
     * @ignore - injected from TransitionGroup
     */
    onExited: import_prop_types11.default.func,
    /**
     * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.
     */
    pulsate: import_prop_types11.default.bool,
    /**
     * Diameter of the ripple.
     */
    rippleSize: import_prop_types11.default.number,
    /**
     * Horizontal position of the ripple center.
     */
    rippleX: import_prop_types11.default.number,
    /**
     * Vertical position of the ripple center.
     */
    rippleY: import_prop_types11.default.number,
    /**
     * exit delay
     */
    timeout: import_prop_types11.default.number.isRequired
  } : void 0;
  var Ripple_default = Ripple;

  // node_modules/@mui/material/ButtonBase/touchRippleClasses.js
  var import_utils29 = __toESM(require_utils());
  var import_generateUtilityClass7 = __toESM(require_generateUtilityClass3());
  function getTouchRippleUtilityClass(slot) {
    return (0, import_generateUtilityClass7.default)("MuiTouchRipple", slot);
  }
  var touchRippleClasses = (0, import_utils29.unstable_generateUtilityClasses)("MuiTouchRipple", ["root", "ripple", "rippleVisible", "ripplePulsate", "child", "childLeaving", "childPulsate"]);
  var touchRippleClasses_default = touchRippleClasses;

  // node_modules/@mui/material/ButtonBase/TouchRipple.js
  var import_jsx_runtime10 = __toESM(require_jsx_runtime());
  var _excluded16 = ["center", "classes", "className"];
  var _ = (t) => t;
  var _t;
  var _t2;
  var _t3;
  var _t4;
  var DURATION = 550;
  var DELAY_RIPPLE = 80;
  var enterKeyframe = (0, import_system13.keyframes)(_t || (_t = _`
  0% {
    transform: scale(0);
    opacity: 0.1;
  }

  100% {
    transform: scale(1);
    opacity: 0.3;
  }
`));
  var exitKeyframe = (0, import_system13.keyframes)(_t2 || (_t2 = _`
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
`));
  var pulsateKeyframe = (0, import_system13.keyframes)(_t3 || (_t3 = _`
  0% {
    transform: scale(1);
  }

  50% {
    transform: scale(0.92);
  }

  100% {
    transform: scale(1);
  }
`));
  var TouchRippleRoot = styled_default("span", {
    name: "MuiTouchRipple",
    slot: "Root"
  })({
    overflow: "hidden",
    pointerEvents: "none",
    position: "absolute",
    zIndex: 0,
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    borderRadius: "inherit"
  });
  var TouchRippleRipple = styled_default(Ripple_default, {
    name: "MuiTouchRipple",
    slot: "Ripple"
  })(_t4 || (_t4 = _`
  opacity: 0;
  position: absolute;

  &.${0} {
    opacity: 0.3;
    transform: scale(1);
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  &.${0} {
    animation-duration: ${0}ms;
  }

  & .${0} {
    opacity: 1;
    display: block;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: currentColor;
  }

  & .${0} {
    opacity: 0;
    animation-name: ${0};
    animation-duration: ${0}ms;
    animation-timing-function: ${0};
  }

  & .${0} {
    position: absolute;
    /* @noflip */
    left: 0px;
    top: 0;
    animation-name: ${0};
    animation-duration: 2500ms;
    animation-timing-function: ${0};
    animation-iteration-count: infinite;
    animation-delay: 200ms;
  }
`), touchRippleClasses_default.rippleVisible, enterKeyframe, DURATION, ({
    theme
  }) => theme.transitions.easing.easeInOut, touchRippleClasses_default.ripplePulsate, ({
    theme
  }) => theme.transitions.duration.shorter, touchRippleClasses_default.child, touchRippleClasses_default.childLeaving, exitKeyframe, DURATION, ({
    theme
  }) => theme.transitions.easing.easeInOut, touchRippleClasses_default.childPulsate, pulsateKeyframe, ({
    theme
  }) => theme.transitions.easing.easeInOut);
  var TouchRipple = /* @__PURE__ */ React20.forwardRef(function TouchRipple2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiTouchRipple"
    });
    const {
      center: centerProp = false,
      classes = {},
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded16);
    const [ripples, setRipples] = React20.useState([]);
    const nextKey = React20.useRef(0);
    const rippleCallback = React20.useRef(null);
    React20.useEffect(() => {
      if (rippleCallback.current) {
        rippleCallback.current();
        rippleCallback.current = null;
      }
    }, [ripples]);
    const ignoringMouseDown = React20.useRef(false);
    const startTimer = React20.useRef(0);
    const startTimerCommit = React20.useRef(null);
    const container = React20.useRef(null);
    React20.useEffect(() => {
      return () => {
        if (startTimer.current) {
          clearTimeout(startTimer.current);
        }
      };
    }, []);
    const startCommit = React20.useCallback((params) => {
      const {
        pulsate: pulsate2,
        rippleX,
        rippleY,
        rippleSize,
        cb
      } = params;
      setRipples((oldRipples) => [...oldRipples, /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(TouchRippleRipple, {
        classes: {
          ripple: clsx_default(classes.ripple, touchRippleClasses_default.ripple),
          rippleVisible: clsx_default(classes.rippleVisible, touchRippleClasses_default.rippleVisible),
          ripplePulsate: clsx_default(classes.ripplePulsate, touchRippleClasses_default.ripplePulsate),
          child: clsx_default(classes.child, touchRippleClasses_default.child),
          childLeaving: clsx_default(classes.childLeaving, touchRippleClasses_default.childLeaving),
          childPulsate: clsx_default(classes.childPulsate, touchRippleClasses_default.childPulsate)
        },
        timeout: DURATION,
        pulsate: pulsate2,
        rippleX,
        rippleY,
        rippleSize
      }, nextKey.current)]);
      nextKey.current += 1;
      rippleCallback.current = cb;
    }, [classes]);
    const start2 = React20.useCallback((event = {}, options = {}, cb = () => {
    }) => {
      const {
        pulsate: pulsate2 = false,
        center = centerProp || options.pulsate,
        fakeElement = false
        // For test purposes
      } = options;
      if ((event == null ? void 0 : event.type) === "mousedown" && ignoringMouseDown.current) {
        ignoringMouseDown.current = false;
        return;
      }
      if ((event == null ? void 0 : event.type) === "touchstart") {
        ignoringMouseDown.current = true;
      }
      const element = fakeElement ? null : container.current;
      const rect = element ? element.getBoundingClientRect() : {
        width: 0,
        height: 0,
        left: 0,
        top: 0
      };
      let rippleX;
      let rippleY;
      let rippleSize;
      if (center || event === void 0 || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
        rippleX = Math.round(rect.width / 2);
        rippleY = Math.round(rect.height / 2);
      } else {
        const {
          clientX,
          clientY
        } = event.touches && event.touches.length > 0 ? event.touches[0] : event;
        rippleX = Math.round(clientX - rect.left);
        rippleY = Math.round(clientY - rect.top);
      }
      if (center) {
        rippleSize = Math.sqrt((2 * rect.width ** 2 + rect.height ** 2) / 3);
        if (rippleSize % 2 === 0) {
          rippleSize += 1;
        }
      } else {
        const sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
        const sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
        rippleSize = Math.sqrt(sizeX ** 2 + sizeY ** 2);
      }
      if (event != null && event.touches) {
        if (startTimerCommit.current === null) {
          startTimerCommit.current = () => {
            startCommit({
              pulsate: pulsate2,
              rippleX,
              rippleY,
              rippleSize,
              cb
            });
          };
          startTimer.current = setTimeout(() => {
            if (startTimerCommit.current) {
              startTimerCommit.current();
              startTimerCommit.current = null;
            }
          }, DELAY_RIPPLE);
        }
      } else {
        startCommit({
          pulsate: pulsate2,
          rippleX,
          rippleY,
          rippleSize,
          cb
        });
      }
    }, [centerProp, startCommit]);
    const pulsate = React20.useCallback(() => {
      start2({}, {
        pulsate: true
      });
    }, [start2]);
    const stop = React20.useCallback((event, cb) => {
      clearTimeout(startTimer.current);
      if ((event == null ? void 0 : event.type) === "touchend" && startTimerCommit.current) {
        startTimerCommit.current();
        startTimerCommit.current = null;
        startTimer.current = setTimeout(() => {
          stop(event, cb);
        });
        return;
      }
      startTimerCommit.current = null;
      setRipples((oldRipples) => {
        if (oldRipples.length > 0) {
          return oldRipples.slice(1);
        }
        return oldRipples;
      });
      rippleCallback.current = cb;
    }, []);
    React20.useImperativeHandle(ref, () => ({
      pulsate,
      start: start2,
      stop
    }), [pulsate, start2, stop]);
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(TouchRippleRoot, _extends({
      className: clsx_default(touchRippleClasses_default.root, classes.root, className),
      ref: container
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(TransitionGroup_default, {
        component: null,
        exit: true,
        children: ripples
      })
    }));
  });
  true ? TouchRipple.propTypes = {
    /**
     * If `true`, the ripple starts at the center of the component
     * rather than at the point of interaction.
     */
    center: import_prop_types12.default.bool,
    /**
     * Override or extend the styles applied to the component.
     * See [CSS API](#css) below for more details.
     */
    classes: import_prop_types12.default.object,
    /**
     * @ignore
     */
    className: import_prop_types12.default.string
  } : void 0;
  var TouchRipple_default = TouchRipple;

  // node_modules/@mui/material/ButtonBase/buttonBaseClasses.js
  var import_utils30 = __toESM(require_utils());
  var import_generateUtilityClass8 = __toESM(require_generateUtilityClass3());
  function getButtonBaseUtilityClass(slot) {
    return (0, import_generateUtilityClass8.default)("MuiButtonBase", slot);
  }
  var buttonBaseClasses = (0, import_utils30.unstable_generateUtilityClasses)("MuiButtonBase", ["root", "disabled", "focusVisible"]);
  var buttonBaseClasses_default = buttonBaseClasses;

  // node_modules/@mui/material/ButtonBase/ButtonBase.js
  var import_jsx_runtime11 = __toESM(require_jsx_runtime());
  var import_jsx_runtime12 = __toESM(require_jsx_runtime());
  var _excluded17 = ["action", "centerRipple", "children", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "LinkComponent", "onBlur", "onClick", "onContextMenu", "onDragLeave", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "tabIndex", "TouchRippleProps", "touchRippleRef", "type"];
  var useUtilityClasses6 = (ownerState) => {
    const {
      disabled,
      focusVisible,
      focusVisibleClassName,
      classes
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", focusVisible && "focusVisible"]
    };
    const composedClasses = (0, import_composeClasses6.unstable_composeClasses)(slots, getButtonBaseUtilityClass, classes);
    if (focusVisible && focusVisibleClassName) {
      composedClasses.root += ` ${focusVisibleClassName}`;
    }
    return composedClasses;
  };
  var ButtonBaseRoot = styled_default("button", {
    name: "MuiButtonBase",
    slot: "Root",
    overridesResolver: (props, styles7) => styles7.root
  })({
    display: "inline-flex",
    alignItems: "center",
    justifyContent: "center",
    position: "relative",
    boxSizing: "border-box",
    WebkitTapHighlightColor: "transparent",
    backgroundColor: "transparent",
    // Reset default value
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0,
    border: 0,
    margin: 0,
    // Remove the margin in Safari
    borderRadius: 0,
    padding: 0,
    // Remove the padding in Firefox
    cursor: "pointer",
    userSelect: "none",
    verticalAlign: "middle",
    MozAppearance: "none",
    // Reset
    WebkitAppearance: "none",
    // Reset
    textDecoration: "none",
    // So we take precedent over the style of a native <a /> element.
    color: "inherit",
    "&::-moz-focus-inner": {
      borderStyle: "none"
      // Remove Firefox dotted outline.
    },
    [`&.${buttonBaseClasses_default.disabled}`]: {
      pointerEvents: "none",
      // Disable link interactions
      cursor: "default"
    },
    "@media print": {
      colorAdjust: "exact"
    }
  });
  var ButtonBase = /* @__PURE__ */ React21.forwardRef(function ButtonBase2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiButtonBase"
    });
    const {
      action,
      centerRipple = false,
      children,
      className,
      component = "button",
      disabled = false,
      disableRipple = false,
      disableTouchRipple = false,
      focusRipple = false,
      LinkComponent = "a",
      onBlur,
      onClick,
      onContextMenu,
      onDragLeave,
      onFocus,
      onFocusVisible,
      onKeyDown,
      onKeyUp,
      onMouseDown,
      onMouseLeave,
      onMouseUp,
      onTouchEnd,
      onTouchMove,
      onTouchStart,
      tabIndex = 0,
      TouchRippleProps,
      touchRippleRef,
      type
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded17);
    const buttonRef = React21.useRef(null);
    const rippleRef = React21.useRef(null);
    const handleRippleRef = useForkRef_default(rippleRef, touchRippleRef);
    const {
      isFocusVisibleRef,
      onFocus: handleFocusVisible,
      onBlur: handleBlurVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible_default();
    const [focusVisible, setFocusVisible] = React21.useState(false);
    if (disabled && focusVisible) {
      setFocusVisible(false);
    }
    React21.useImperativeHandle(action, () => ({
      focusVisible: () => {
        setFocusVisible(true);
        buttonRef.current.focus();
      }
    }), []);
    const [mountedState, setMountedState] = React21.useState(false);
    React21.useEffect(() => {
      setMountedState(true);
    }, []);
    const enableTouchRipple = mountedState && !disableRipple && !disabled;
    React21.useEffect(() => {
      if (focusVisible && focusRipple && !disableRipple && mountedState) {
        rippleRef.current.pulsate();
      }
    }, [disableRipple, focusRipple, focusVisible, mountedState]);
    function useRippleHandler(rippleAction, eventCallback, skipRippleAction = disableTouchRipple) {
      return useEventCallback_default((event) => {
        if (eventCallback) {
          eventCallback(event);
        }
        const ignore = skipRippleAction;
        if (!ignore && rippleRef.current) {
          rippleRef.current[rippleAction](event);
        }
        return true;
      });
    }
    const handleMouseDown = useRippleHandler("start", onMouseDown);
    const handleContextMenu = useRippleHandler("stop", onContextMenu);
    const handleDragLeave = useRippleHandler("stop", onDragLeave);
    const handleMouseUp = useRippleHandler("stop", onMouseUp);
    const handleMouseLeave = useRippleHandler("stop", (event) => {
      if (focusVisible) {
        event.preventDefault();
      }
      if (onMouseLeave) {
        onMouseLeave(event);
      }
    });
    const handleTouchStart = useRippleHandler("start", onTouchStart);
    const handleTouchEnd = useRippleHandler("stop", onTouchEnd);
    const handleTouchMove = useRippleHandler("stop", onTouchMove);
    const handleBlur2 = useRippleHandler("stop", (event) => {
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setFocusVisible(false);
      }
      if (onBlur) {
        onBlur(event);
      }
    }, false);
    const handleFocus = useEventCallback_default((event) => {
      if (!buttonRef.current) {
        buttonRef.current = event.currentTarget;
      }
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        setFocusVisible(true);
        if (onFocusVisible) {
          onFocusVisible(event);
        }
      }
      if (onFocus) {
        onFocus(event);
      }
    });
    const isNonNativeButton = () => {
      const button = buttonRef.current;
      return component && component !== "button" && !(button.tagName === "A" && button.href);
    };
    const keydownRef = React21.useRef(false);
    const handleKeyDown2 = useEventCallback_default((event) => {
      if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === " ") {
        keydownRef.current = true;
        rippleRef.current.stop(event, () => {
          rippleRef.current.start(event);
        });
      }
      if (event.target === event.currentTarget && isNonNativeButton() && event.key === " ") {
        event.preventDefault();
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
      if (event.target === event.currentTarget && isNonNativeButton() && event.key === "Enter" && !disabled) {
        event.preventDefault();
        if (onClick) {
          onClick(event);
        }
      }
    });
    const handleKeyUp = useEventCallback_default((event) => {
      if (focusRipple && event.key === " " && rippleRef.current && focusVisible && !event.defaultPrevented) {
        keydownRef.current = false;
        rippleRef.current.stop(event, () => {
          rippleRef.current.pulsate(event);
        });
      }
      if (onKeyUp) {
        onKeyUp(event);
      }
      if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === " " && !event.defaultPrevented) {
        onClick(event);
      }
    });
    let ComponentProp = component;
    if (ComponentProp === "button" && (other.href || other.to)) {
      ComponentProp = LinkComponent;
    }
    const buttonProps = {};
    if (ComponentProp === "button") {
      buttonProps.type = type === void 0 ? "button" : type;
      buttonProps.disabled = disabled;
    } else {
      if (!other.href && !other.to) {
        buttonProps.role = "button";
      }
      if (disabled) {
        buttonProps["aria-disabled"] = disabled;
      }
    }
    const handleRef = useForkRef_default(ref, focusVisibleRef, buttonRef);
    if (true) {
      React21.useEffect(() => {
        if (enableTouchRipple && !rippleRef.current) {
          console.error(["MUI: The `component` prop provided to ButtonBase is invalid.", "Please make sure the children prop is rendered in this custom component."].join("\n"));
        }
      }, [enableTouchRipple]);
    }
    const ownerState = _extends({}, props, {
      centerRipple,
      component,
      disabled,
      disableRipple,
      disableTouchRipple,
      focusRipple,
      tabIndex,
      focusVisible
    });
    const classes = useUtilityClasses6(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(ButtonBaseRoot, _extends({
      as: ComponentProp,
      className: clsx_default(classes.root, className),
      ownerState,
      onBlur: handleBlur2,
      onClick,
      onContextMenu: handleContextMenu,
      onFocus: handleFocus,
      onKeyDown: handleKeyDown2,
      onKeyUp: handleKeyUp,
      onMouseDown: handleMouseDown,
      onMouseLeave: handleMouseLeave,
      onMouseUp: handleMouseUp,
      onDragLeave: handleDragLeave,
      onTouchEnd: handleTouchEnd,
      onTouchMove: handleTouchMove,
      onTouchStart: handleTouchStart,
      ref: handleRef,
      tabIndex: disabled ? -1 : tabIndex,
      type
    }, buttonProps, other, {
      children: [children, enableTouchRipple ? (
        /* TouchRipple is only needed client-side, x2 boost on the server. */
        /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(TouchRipple_default, _extends({
          ref: handleRippleRef,
          center: centerRipple
        }, TouchRippleProps))
      ) : null]
    }));
  });
  true ? ButtonBase.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * A ref for imperative actions.
     * It currently only supports `focusVisible()` action.
     */
    action: import_utils31.refType,
    /**
     * If `true`, the ripples are centered.
     * They won't start at the cursor interaction position.
     * @default false
     */
    centerRipple: import_prop_types13.default.bool,
    /**
     * The content of the component.
     */
    children: import_prop_types13.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types13.default.object,
    /**
     * @ignore
     */
    className: import_prop_types13.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_utils31.elementTypeAcceptingRef,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types13.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: import_prop_types13.default.bool,
    /**
     * If `true`, the touch ripple effect is disabled.
     * @default false
     */
    disableTouchRipple: import_prop_types13.default.bool,
    /**
     * If `true`, the base button will have a keyboard focus ripple.
     * @default false
     */
    focusRipple: import_prop_types13.default.bool,
    /**
     * This prop can help identify which element has keyboard focus.
     * The class name will be applied when the element gains the focus through keyboard interaction.
     * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
     * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
     * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
     * if needed.
     */
    focusVisibleClassName: import_prop_types13.default.string,
    /**
     * @ignore
     */
    href: import_prop_types13.default.any,
    /**
     * The component used to render a link when the `href` prop is provided.
     * @default 'a'
     */
    LinkComponent: import_prop_types13.default.elementType,
    /**
     * @ignore
     */
    onBlur: import_prop_types13.default.func,
    /**
     * @ignore
     */
    onClick: import_prop_types13.default.func,
    /**
     * @ignore
     */
    onContextMenu: import_prop_types13.default.func,
    /**
     * @ignore
     */
    onDragLeave: import_prop_types13.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types13.default.func,
    /**
     * Callback fired when the component is focused with a keyboard.
     * We trigger a `onFocus` callback too.
     */
    onFocusVisible: import_prop_types13.default.func,
    /**
     * @ignore
     */
    onKeyDown: import_prop_types13.default.func,
    /**
     * @ignore
     */
    onKeyUp: import_prop_types13.default.func,
    /**
     * @ignore
     */
    onMouseDown: import_prop_types13.default.func,
    /**
     * @ignore
     */
    onMouseLeave: import_prop_types13.default.func,
    /**
     * @ignore
     */
    onMouseUp: import_prop_types13.default.func,
    /**
     * @ignore
     */
    onTouchEnd: import_prop_types13.default.func,
    /**
     * @ignore
     */
    onTouchMove: import_prop_types13.default.func,
    /**
     * @ignore
     */
    onTouchStart: import_prop_types13.default.func,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types13.default.oneOfType([import_prop_types13.default.arrayOf(import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.object, import_prop_types13.default.bool])), import_prop_types13.default.func, import_prop_types13.default.object]),
    /**
     * @default 0
     */
    tabIndex: import_prop_types13.default.number,
    /**
     * Props applied to the `TouchRipple` element.
     */
    TouchRippleProps: import_prop_types13.default.object,
    /**
     * A ref that points to the `TouchRipple` element.
     */
    touchRippleRef: import_prop_types13.default.oneOfType([import_prop_types13.default.func, import_prop_types13.default.shape({
      current: import_prop_types13.default.shape({
        pulsate: import_prop_types13.default.func.isRequired,
        start: import_prop_types13.default.func.isRequired,
        stop: import_prop_types13.default.func.isRequired
      })
    })]),
    /**
     * @ignore
     */
    type: import_prop_types13.default.oneOfType([import_prop_types13.default.oneOf(["button", "reset", "submit"]), import_prop_types13.default.string])
  } : void 0;
  var ButtonBase_default = ButtonBase;

  // node_modules/@mui/material/AccordionSummary/accordionSummaryClasses.js
  var import_utils32 = __toESM(require_utils());
  var import_generateUtilityClass9 = __toESM(require_generateUtilityClass3());
  function getAccordionSummaryUtilityClass(slot) {
    return (0, import_generateUtilityClass9.default)("MuiAccordionSummary", slot);
  }
  var accordionSummaryClasses = (0, import_utils32.unstable_generateUtilityClasses)("MuiAccordionSummary", ["root", "expanded", "focusVisible", "disabled", "gutters", "contentGutters", "content", "expandIconWrapper"]);
  var accordionSummaryClasses_default = accordionSummaryClasses;

  // node_modules/@mui/material/AccordionSummary/AccordionSummary.js
  var import_jsx_runtime13 = __toESM(require_jsx_runtime());
  var import_jsx_runtime14 = __toESM(require_jsx_runtime());
  var _excluded18 = ["children", "className", "expandIcon", "focusVisibleClassName", "onClick"];
  var useUtilityClasses7 = (ownerState) => {
    const {
      classes,
      expanded,
      disabled,
      disableGutters
    } = ownerState;
    const slots = {
      root: ["root", expanded && "expanded", disabled && "disabled", !disableGutters && "gutters"],
      focusVisible: ["focusVisible"],
      content: ["content", expanded && "expanded", !disableGutters && "contentGutters"],
      expandIconWrapper: ["expandIconWrapper", expanded && "expanded"]
    };
    return (0, import_composeClasses7.unstable_composeClasses)(slots, getAccordionSummaryUtilityClass, classes);
  };
  var AccordionSummaryRoot = styled_default(ButtonBase_default, {
    name: "MuiAccordionSummary",
    slot: "Root",
    overridesResolver: (props, styles7) => styles7.root
  })(({
    theme,
    ownerState
  }) => {
    const transition2 = {
      duration: theme.transitions.duration.shortest
    };
    return _extends({
      display: "flex",
      minHeight: 48,
      padding: theme.spacing(0, 2),
      transition: theme.transitions.create(["min-height", "background-color"], transition2),
      [`&.${accordionSummaryClasses_default.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette.action.focus
      },
      [`&.${accordionSummaryClasses_default.disabled}`]: {
        opacity: (theme.vars || theme).palette.action.disabledOpacity
      },
      [`&:hover:not(.${accordionSummaryClasses_default.disabled})`]: {
        cursor: "pointer"
      }
    }, !ownerState.disableGutters && {
      [`&.${accordionSummaryClasses_default.expanded}`]: {
        minHeight: 64
      }
    });
  });
  var AccordionSummaryContent = styled_default("div", {
    name: "MuiAccordionSummary",
    slot: "Content",
    overridesResolver: (props, styles7) => styles7.content
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "flex",
    flexGrow: 1,
    margin: "12px 0"
  }, !ownerState.disableGutters && {
    transition: theme.transitions.create(["margin"], {
      duration: theme.transitions.duration.shortest
    }),
    [`&.${accordionSummaryClasses_default.expanded}`]: {
      margin: "20px 0"
    }
  }));
  var AccordionSummaryExpandIconWrapper = styled_default("div", {
    name: "MuiAccordionSummary",
    slot: "ExpandIconWrapper",
    overridesResolver: (props, styles7) => styles7.expandIconWrapper
  })(({
    theme
  }) => ({
    display: "flex",
    color: (theme.vars || theme).palette.action.active,
    transform: "rotate(0deg)",
    transition: theme.transitions.create("transform", {
      duration: theme.transitions.duration.shortest
    }),
    [`&.${accordionSummaryClasses_default.expanded}`]: {
      transform: "rotate(180deg)"
    }
  }));
  var AccordionSummary = /* @__PURE__ */ React22.forwardRef(function AccordionSummary2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiAccordionSummary"
    });
    const {
      children,
      className,
      expandIcon,
      focusVisibleClassName,
      onClick
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded18);
    const {
      disabled = false,
      disableGutters,
      expanded,
      toggle
    } = React22.useContext(AccordionContext_default);
    const handleChange = (event) => {
      if (toggle) {
        toggle(event);
      }
      if (onClick) {
        onClick(event);
      }
    };
    const ownerState = _extends({}, props, {
      expanded,
      disabled,
      disableGutters
    });
    const classes = useUtilityClasses7(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)(AccordionSummaryRoot, _extends({
      focusRipple: false,
      disableRipple: true,
      disabled,
      component: "div",
      "aria-expanded": expanded,
      className: clsx_default(classes.root, className),
      focusVisibleClassName: clsx_default(classes.focusVisible, focusVisibleClassName),
      onClick: handleChange,
      ref,
      ownerState
    }, other, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime13.jsx)(AccordionSummaryContent, {
        className: classes.content,
        ownerState,
        children
      }), expandIcon && /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(AccordionSummaryExpandIconWrapper, {
        className: classes.expandIconWrapper,
        ownerState,
        children: expandIcon
      })]
    }));
  });
  true ? AccordionSummary.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types14.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types14.default.object,
    /**
     * @ignore
     */
    className: import_prop_types14.default.string,
    /**
     * The icon to display as the expand indicator.
     */
    expandIcon: import_prop_types14.default.node,
    /**
     * This prop can help identify which element has keyboard focus.
     * The class name will be applied when the element gains the focus through keyboard interaction.
     * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
     * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
     * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
     * if needed.
     */
    focusVisibleClassName: import_prop_types14.default.string,
    /**
     * @ignore
     */
    onClick: import_prop_types14.default.func,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types14.default.oneOfType([import_prop_types14.default.arrayOf(import_prop_types14.default.oneOfType([import_prop_types14.default.func, import_prop_types14.default.object, import_prop_types14.default.bool])), import_prop_types14.default.func, import_prop_types14.default.object])
  } : void 0;
  var AccordionSummary_default = AccordionSummary;

  // node_modules/@mui/material/Alert/Alert.js
  init_extends();
  var React30 = __toESM(require_react());
  var import_prop_types16 = __toESM(require_prop_types());
  var import_composeClasses9 = __toESM(require_composeClasses3());
  var import_system15 = __toESM(require_system());

  // node_modules/@mui/material/utils/capitalize.js
  var import_utils33 = __toESM(require_utils());
  var capitalize_default = import_utils33.unstable_capitalize;

  // node_modules/@mui/material/Alert/alertClasses.js
  var import_utils34 = __toESM(require_utils());
  var import_generateUtilityClass10 = __toESM(require_generateUtilityClass3());
  function getAlertUtilityClass(slot) {
    return (0, import_generateUtilityClass10.default)("MuiAlert", slot);
  }
  var alertClasses = (0, import_utils34.unstable_generateUtilityClasses)("MuiAlert", ["root", "action", "icon", "message", "filled", "filledSuccess", "filledInfo", "filledWarning", "filledError", "outlined", "outlinedSuccess", "outlinedInfo", "outlinedWarning", "outlinedError", "standard", "standardSuccess", "standardInfo", "standardWarning", "standardError"]);
  var alertClasses_default = alertClasses;

  // node_modules/@mui/material/IconButton/IconButton.js
  init_extends();
  var React23 = __toESM(require_react());
  var import_prop_types15 = __toESM(require_prop_types());
  var import_utils36 = __toESM(require_utils());
  var import_composeClasses8 = __toESM(require_composeClasses3());
  var import_system14 = __toESM(require_system());

  // node_modules/@mui/material/IconButton/iconButtonClasses.js
  var import_utils35 = __toESM(require_utils());
  var import_generateUtilityClass11 = __toESM(require_generateUtilityClass3());
  function getIconButtonUtilityClass(slot) {
    return (0, import_generateUtilityClass11.default)("MuiIconButton", slot);
  }
  var iconButtonClasses = (0, import_utils35.unstable_generateUtilityClasses)("MuiIconButton", ["root", "disabled", "colorInherit", "colorPrimary", "colorSecondary", "colorError", "colorInfo", "colorSuccess", "colorWarning", "edgeStart", "edgeEnd", "sizeSmall", "sizeMedium", "sizeLarge"]);
  var iconButtonClasses_default = iconButtonClasses;

  // node_modules/@mui/material/IconButton/IconButton.js
  var import_jsx_runtime15 = __toESM(require_jsx_runtime());
  var _excluded19 = ["edge", "children", "className", "color", "disabled", "disableFocusRipple", "size"];
  var useUtilityClasses8 = (ownerState) => {
    const {
      classes,
      disabled,
      color,
      edge,
      size: size2
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", color !== "default" && `color${capitalize_default(color)}`, edge && `edge${capitalize_default(edge)}`, `size${capitalize_default(size2)}`]
    };
    return (0, import_composeClasses8.unstable_composeClasses)(slots, getIconButtonUtilityClass, classes);
  };
  var IconButtonRoot = styled_default(ButtonBase_default, {
    name: "MuiIconButton",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, ownerState.color !== "default" && styles7[`color${capitalize_default(ownerState.color)}`], ownerState.edge && styles7[`edge${capitalize_default(ownerState.edge)}`], styles7[`size${capitalize_default(ownerState.size)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    textAlign: "center",
    flex: "0 0 auto",
    fontSize: theme.typography.pxToRem(24),
    padding: 8,
    borderRadius: "50%",
    overflow: "visible",
    // Explicitly set the default value to solve a bug on IE11.
    color: (theme.vars || theme).palette.action.active,
    transition: theme.transitions.create("background-color", {
      duration: theme.transitions.duration.shortest
    })
  }, !ownerState.disableRipple && {
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_system14.alpha)(theme.palette.action.active, theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    }
  }, ownerState.edge === "start" && {
    marginLeft: ownerState.size === "small" ? -3 : -12
  }, ownerState.edge === "end" && {
    marginRight: ownerState.size === "small" ? -3 : -12
  }), ({
    theme,
    ownerState
  }) => {
    var _palette;
    const palette = (_palette = (theme.vars || theme).palette) == null ? void 0 : _palette[ownerState.color];
    return _extends({}, ownerState.color === "inherit" && {
      color: "inherit"
    }, ownerState.color !== "inherit" && ownerState.color !== "default" && _extends({
      color: palette == null ? void 0 : palette.main
    }, !ownerState.disableRipple && {
      "&:hover": _extends({}, palette && {
        backgroundColor: theme.vars ? `rgba(${palette.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_system14.alpha)(palette.main, theme.palette.action.hoverOpacity)
      }, {
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      })
    }), ownerState.size === "small" && {
      padding: 5,
      fontSize: theme.typography.pxToRem(18)
    }, ownerState.size === "large" && {
      padding: 12,
      fontSize: theme.typography.pxToRem(28)
    }, {
      [`&.${iconButtonClasses_default.disabled}`]: {
        backgroundColor: "transparent",
        color: (theme.vars || theme).palette.action.disabled
      }
    });
  });
  var IconButton = /* @__PURE__ */ React23.forwardRef(function IconButton2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiIconButton"
    });
    const {
      edge = false,
      children,
      className,
      color = "default",
      disabled = false,
      disableFocusRipple = false,
      size: size2 = "medium"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded19);
    const ownerState = _extends({}, props, {
      edge,
      color,
      disabled,
      disableFocusRipple,
      size: size2
    });
    const classes = useUtilityClasses8(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(IconButtonRoot, _extends({
      className: clsx_default(classes.root, className),
      centerRipple: true,
      focusRipple: !disableFocusRipple,
      disabled,
      ref,
      ownerState
    }, other, {
      children
    }));
  });
  true ? IconButton.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The icon to display.
     */
    children: (0, import_utils36.chainPropTypes)(import_prop_types15.default.node, (props) => {
      const found = React23.Children.toArray(props.children).some((child) => /* @__PURE__ */ React23.isValidElement(child) && child.props.onClick);
      if (found) {
        return new Error(["MUI: You are providing an onClick event listener to a child of a button element.", "Prefer applying it to the IconButton directly.", "This guarantees that the whole <button> will be responsive to click events."].join("\n"));
      }
      return null;
    }),
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types15.default.object,
    /**
     * @ignore
     */
    className: import_prop_types15.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'default'
     */
    color: import_prop_types15.default.oneOfType([import_prop_types15.default.oneOf(["inherit", "default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types15.default.string]),
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types15.default.bool,
    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: import_prop_types15.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: import_prop_types15.default.bool,
    /**
     * If given, uses a negative margin to counteract the padding on one
     * side (this is often helpful for aligning the left or right
     * side of the icon with content above or below, without ruining the border
     * size and shape).
     * @default false
     */
    edge: import_prop_types15.default.oneOf(["end", "start", false]),
    /**
     * The size of the component.
     * `small` is equivalent to the dense button styling.
     * @default 'medium'
     */
    size: import_prop_types15.default.oneOfType([import_prop_types15.default.oneOf(["small", "medium", "large"]), import_prop_types15.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types15.default.oneOfType([import_prop_types15.default.arrayOf(import_prop_types15.default.oneOfType([import_prop_types15.default.func, import_prop_types15.default.object, import_prop_types15.default.bool])), import_prop_types15.default.func, import_prop_types15.default.object])
  } : void 0;
  var IconButton_default = IconButton;

  // node_modules/@mui/material/internal/svg-icons/SuccessOutlined.js
  var React25 = __toESM(require_react());

  // node_modules/@mui/material/utils/createSvgIcon.js
  init_extends();
  var React24 = __toESM(require_react());
  var import_SvgIcon = __toESM(require_SvgIcon2());
  var import_jsx_runtime16 = __toESM(require_jsx_runtime());
  function createSvgIcon(path, displayName) {
    function Component(props, ref) {
      return /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(import_SvgIcon.default, _extends({
        "data-testid": `${displayName}Icon`,
        ref
      }, props, {
        children: path
      }));
    }
    if (true) {
      Component.displayName = `${displayName}Icon`;
    }
    Component.muiName = import_SvgIcon.default.muiName;
    return /* @__PURE__ */ React24.memo(/* @__PURE__ */ React24.forwardRef(Component));
  }

  // node_modules/@mui/material/internal/svg-icons/SuccessOutlined.js
  var import_jsx_runtime17 = __toESM(require_jsx_runtime());
  var SuccessOutlined_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime17.jsx)("path", {
    d: "M20,12A8,8 0 0,1 12,20A8,8 0 0,1 4,12A8,8 0 0,1 12,4C12.76,4 13.5,4.11 14.2, 4.31L15.77,2.74C14.61,2.26 13.34,2 12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0, 0 22,12M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z"
  }), "SuccessOutlined");

  // node_modules/@mui/material/internal/svg-icons/ReportProblemOutlined.js
  var React26 = __toESM(require_react());
  var import_jsx_runtime18 = __toESM(require_jsx_runtime());
  var ReportProblemOutlined_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime18.jsx)("path", {
    d: "M12 5.99L19.53 19H4.47L12 5.99M12 2L1 21h22L12 2zm1 14h-2v2h2v-2zm0-6h-2v4h2v-4z"
  }), "ReportProblemOutlined");

  // node_modules/@mui/material/internal/svg-icons/ErrorOutline.js
  var React27 = __toESM(require_react());
  var import_jsx_runtime19 = __toESM(require_jsx_runtime());
  var ErrorOutline_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime19.jsx)("path", {
    d: "M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
  }), "ErrorOutline");

  // node_modules/@mui/material/internal/svg-icons/InfoOutlined.js
  var React28 = __toESM(require_react());
  var import_jsx_runtime20 = __toESM(require_jsx_runtime());
  var InfoOutlined_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime20.jsx)("path", {
    d: "M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20, 12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10, 10 0 0,0 12,2M11,17H13V11H11V17Z"
  }), "InfoOutlined");

  // node_modules/@mui/material/internal/svg-icons/Close.js
  var React29 = __toESM(require_react());
  var import_jsx_runtime21 = __toESM(require_jsx_runtime());
  var Close_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime21.jsx)("path", {
    d: "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"
  }), "Close");

  // node_modules/@mui/material/Alert/Alert.js
  var import_jsx_runtime22 = __toESM(require_jsx_runtime());
  var import_jsx_runtime23 = __toESM(require_jsx_runtime());
  var _excluded20 = ["action", "children", "className", "closeText", "color", "components", "componentsProps", "icon", "iconMapping", "onClose", "role", "severity", "slotProps", "slots", "variant"];
  var useUtilityClasses9 = (ownerState) => {
    const {
      variant,
      color,
      severity,
      classes
    } = ownerState;
    const slots = {
      root: ["root", `${variant}${capitalize_default(color || severity)}`, `${variant}`],
      icon: ["icon"],
      message: ["message"],
      action: ["action"]
    };
    return (0, import_composeClasses9.unstable_composeClasses)(slots, getAlertUtilityClass, classes);
  };
  var AlertRoot = styled_default(Paper_default, {
    name: "MuiAlert",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, styles7[ownerState.variant], styles7[`${ownerState.variant}${capitalize_default(ownerState.color || ownerState.severity)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    const getColor = theme.palette.mode === "light" ? import_system15.darken : import_system15.lighten;
    const getBackgroundColor = theme.palette.mode === "light" ? import_system15.lighten : import_system15.darken;
    const color = ownerState.color || ownerState.severity;
    return _extends({}, theme.typography.body2, {
      backgroundColor: "transparent",
      display: "flex",
      padding: "6px 16px"
    }, color && ownerState.variant === "standard" && {
      color: theme.vars ? theme.vars.palette.Alert[`${color}Color`] : getColor(theme.palette[color].light, 0.6),
      backgroundColor: theme.vars ? theme.vars.palette.Alert[`${color}StandardBg`] : getBackgroundColor(theme.palette[color].light, 0.9),
      [`& .${alertClasses_default.icon}`]: theme.vars ? {
        color: theme.vars.palette.Alert[`${color}IconColor`]
      } : {
        color: theme.palette[color].main
      }
    }, color && ownerState.variant === "outlined" && {
      color: theme.vars ? theme.vars.palette.Alert[`${color}Color`] : getColor(theme.palette[color].light, 0.6),
      border: `1px solid ${(theme.vars || theme).palette[color].light}`,
      [`& .${alertClasses_default.icon}`]: theme.vars ? {
        color: theme.vars.palette.Alert[`${color}IconColor`]
      } : {
        color: theme.palette[color].main
      }
    }, color && ownerState.variant === "filled" && _extends({
      fontWeight: theme.typography.fontWeightMedium
    }, theme.vars ? {
      color: theme.vars.palette.Alert[`${color}FilledColor`],
      backgroundColor: theme.vars.palette.Alert[`${color}FilledBg`]
    } : {
      backgroundColor: theme.palette.mode === "dark" ? theme.palette[color].dark : theme.palette[color].main,
      color: theme.palette.getContrastText(theme.palette[color].main)
    }));
  });
  var AlertIcon = styled_default("div", {
    name: "MuiAlert",
    slot: "Icon",
    overridesResolver: (props, styles7) => styles7.icon
  })({
    marginRight: 12,
    padding: "7px 0",
    display: "flex",
    fontSize: 22,
    opacity: 0.9
  });
  var AlertMessage = styled_default("div", {
    name: "MuiAlert",
    slot: "Message",
    overridesResolver: (props, styles7) => styles7.message
  })({
    padding: "8px 0",
    minWidth: 0,
    overflow: "auto"
  });
  var AlertAction = styled_default("div", {
    name: "MuiAlert",
    slot: "Action",
    overridesResolver: (props, styles7) => styles7.action
  })({
    display: "flex",
    alignItems: "flex-start",
    padding: "4px 0 0 16px",
    marginLeft: "auto",
    marginRight: -8
  });
  var defaultIconMapping = {
    success: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(SuccessOutlined_default, {
      fontSize: "inherit"
    }),
    warning: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(ReportProblemOutlined_default, {
      fontSize: "inherit"
    }),
    error: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(ErrorOutline_default, {
      fontSize: "inherit"
    }),
    info: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(InfoOutlined_default, {
      fontSize: "inherit"
    })
  };
  var Alert = /* @__PURE__ */ React30.forwardRef(function Alert2(inProps, ref) {
    var _ref, _slots$closeButton, _ref2, _slots$closeIcon, _slotProps$closeButto, _slotProps$closeIcon;
    const props = useThemeProps({
      props: inProps,
      name: "MuiAlert"
    });
    const {
      action,
      children,
      className,
      closeText = "Close",
      color,
      components = {},
      componentsProps = {},
      icon,
      iconMapping = defaultIconMapping,
      onClose,
      role = "alert",
      severity = "success",
      slotProps = {},
      slots = {},
      variant = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded20);
    const ownerState = _extends({}, props, {
      color,
      severity,
      variant
    });
    const classes = useUtilityClasses9(ownerState);
    const AlertCloseButton = (_ref = (_slots$closeButton = slots.closeButton) != null ? _slots$closeButton : components.CloseButton) != null ? _ref : IconButton_default;
    const AlertCloseIcon = (_ref2 = (_slots$closeIcon = slots.closeIcon) != null ? _slots$closeIcon : components.CloseIcon) != null ? _ref2 : Close_default;
    const closeButtonProps = (_slotProps$closeButto = slotProps.closeButton) != null ? _slotProps$closeButto : componentsProps.closeButton;
    const closeIconProps = (_slotProps$closeIcon = slotProps.closeIcon) != null ? _slotProps$closeIcon : componentsProps.closeIcon;
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)(AlertRoot, _extends({
      role,
      elevation: 0,
      ownerState,
      className: clsx_default(classes.root, className),
      ref
    }, other, {
      children: [icon !== false ? /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(AlertIcon, {
        ownerState,
        className: classes.icon,
        children: icon || iconMapping[severity] || defaultIconMapping[severity]
      }) : null, /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(AlertMessage, {
        ownerState,
        className: classes.message,
        children
      }), action != null ? /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(AlertAction, {
        ownerState,
        className: classes.action,
        children: action
      }) : null, action == null && onClose ? /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(AlertAction, {
        ownerState,
        className: classes.action,
        children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(AlertCloseButton, _extends({
          size: "small",
          "aria-label": closeText,
          title: closeText,
          color: "inherit",
          onClick: onClose
        }, closeButtonProps, {
          children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(AlertCloseIcon, _extends({
            fontSize: "small"
          }, closeIconProps))
        }))
      }) : null]
    }));
  });
  true ? Alert.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The action to display. It renders after the message, at the end of the alert.
     */
    action: import_prop_types16.default.node,
    /**
     * The content of the component.
     */
    children: import_prop_types16.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types16.default.object,
    /**
     * @ignore
     */
    className: import_prop_types16.default.string,
    /**
     * Override the default label for the *close popup* icon button.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'Close'
     */
    closeText: import_prop_types16.default.string,
    /**
     * The color of the component. Unless provided, the value is taken from the `severity` prop.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     */
    color: import_prop_types16.default.oneOfType([import_prop_types16.default.oneOf(["error", "info", "success", "warning"]), import_prop_types16.default.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types16.default.shape({
      CloseButton: import_prop_types16.default.elementType,
      CloseIcon: import_prop_types16.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types16.default.shape({
      closeButton: import_prop_types16.default.object,
      closeIcon: import_prop_types16.default.object
    }),
    /**
     * Override the icon displayed before the children.
     * Unless provided, the icon is mapped to the value of the `severity` prop.
     * Set to `false` to remove the `icon`.
     */
    icon: import_prop_types16.default.node,
    /**
     * The component maps the `severity` prop to a range of different icons,
     * for instance success to `<SuccessOutlined>`.
     * If you wish to change this mapping, you can provide your own.
     * Alternatively, you can use the `icon` prop to override the icon displayed.
     */
    iconMapping: import_prop_types16.default.shape({
      error: import_prop_types16.default.node,
      info: import_prop_types16.default.node,
      success: import_prop_types16.default.node,
      warning: import_prop_types16.default.node
    }),
    /**
     * Callback fired when the component requests to be closed.
     * When provided and no `action` prop is set, a close icon button is displayed that triggers the callback when clicked.
     * @param {React.SyntheticEvent} event The event source of the callback.
     */
    onClose: import_prop_types16.default.func,
    /**
     * The ARIA role attribute of the element.
     * @default 'alert'
     */
    role: import_prop_types16.default.string,
    /**
     * The severity of the alert. This defines the color and icon used.
     * @default 'success'
     */
    severity: import_prop_types16.default.oneOf(["error", "info", "success", "warning"]),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types16.default.shape({
      closeButton: import_prop_types16.default.object,
      closeIcon: import_prop_types16.default.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types16.default.shape({
      closeButton: import_prop_types16.default.elementType,
      closeIcon: import_prop_types16.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types16.default.oneOfType([import_prop_types16.default.arrayOf(import_prop_types16.default.oneOfType([import_prop_types16.default.func, import_prop_types16.default.object, import_prop_types16.default.bool])), import_prop_types16.default.func, import_prop_types16.default.object]),
    /**
     * The variant to use.
     * @default 'standard'
     */
    variant: import_prop_types16.default.oneOfType([import_prop_types16.default.oneOf(["filled", "outlined", "standard"]), import_prop_types16.default.string])
  } : void 0;
  var Alert_default = Alert;

  // node_modules/@mui/material/AlertTitle/AlertTitle.js
  init_extends();
  var React32 = __toESM(require_react());
  var import_prop_types18 = __toESM(require_prop_types());
  var import_composeClasses11 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/Typography/Typography.js
  init_extends();
  var React31 = __toESM(require_react());
  var import_prop_types17 = __toESM(require_prop_types());
  var import_system16 = __toESM(require_system());
  var import_composeClasses10 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/Typography/typographyClasses.js
  var import_utils37 = __toESM(require_utils());
  var import_generateUtilityClass12 = __toESM(require_generateUtilityClass3());
  function getTypographyUtilityClass(slot) {
    return (0, import_generateUtilityClass12.default)("MuiTypography", slot);
  }
  var typographyClasses = (0, import_utils37.unstable_generateUtilityClasses)("MuiTypography", ["root", "h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "inherit", "button", "caption", "overline", "alignLeft", "alignRight", "alignCenter", "alignJustify", "noWrap", "gutterBottom", "paragraph"]);
  var typographyClasses_default = typographyClasses;

  // node_modules/@mui/material/Typography/Typography.js
  var import_jsx_runtime24 = __toESM(require_jsx_runtime());
  var _excluded21 = ["align", "className", "component", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"];
  var useUtilityClasses10 = (ownerState) => {
    const {
      align,
      gutterBottom,
      noWrap,
      paragraph,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ["root", variant, ownerState.align !== "inherit" && `align${capitalize_default(align)}`, gutterBottom && "gutterBottom", noWrap && "noWrap", paragraph && "paragraph"]
    };
    return (0, import_composeClasses10.unstable_composeClasses)(slots, getTypographyUtilityClass, classes);
  };
  var TypographyRoot = styled_default("span", {
    name: "MuiTypography",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, ownerState.variant && styles7[ownerState.variant], ownerState.align !== "inherit" && styles7[`align${capitalize_default(ownerState.align)}`], ownerState.noWrap && styles7.noWrap, ownerState.gutterBottom && styles7.gutterBottom, ownerState.paragraph && styles7.paragraph];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    margin: 0
  }, ownerState.variant === "inherit" && {
    // Some elements, like <button> on Chrome have default font that doesn't inherit, reset this.
    font: "inherit"
  }, ownerState.variant !== "inherit" && theme.typography[ownerState.variant], ownerState.align !== "inherit" && {
    textAlign: ownerState.align
  }, ownerState.noWrap && {
    overflow: "hidden",
    textOverflow: "ellipsis",
    whiteSpace: "nowrap"
  }, ownerState.gutterBottom && {
    marginBottom: "0.35em"
  }, ownerState.paragraph && {
    marginBottom: 16
  }));
  var defaultVariantMapping = {
    h1: "h1",
    h2: "h2",
    h3: "h3",
    h4: "h4",
    h5: "h5",
    h6: "h6",
    subtitle1: "h6",
    subtitle2: "h6",
    body1: "p",
    body2: "p",
    inherit: "p"
  };
  var colorTransformations = {
    primary: "primary.main",
    textPrimary: "text.primary",
    secondary: "secondary.main",
    textSecondary: "text.secondary",
    error: "error.main"
  };
  var transformDeprecatedColors = (color) => {
    return colorTransformations[color] || color;
  };
  var Typography = /* @__PURE__ */ React31.forwardRef(function Typography2(inProps, ref) {
    const themeProps = useThemeProps({
      props: inProps,
      name: "MuiTypography"
    });
    const color = transformDeprecatedColors(themeProps.color);
    const props = (0, import_system16.unstable_extendSxProp)(_extends({}, themeProps, {
      color
    }));
    const {
      align = "inherit",
      className,
      component,
      gutterBottom = false,
      noWrap = false,
      paragraph = false,
      variant = "body1",
      variantMapping = defaultVariantMapping
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded21);
    const ownerState = _extends({}, props, {
      align,
      color,
      className,
      component,
      gutterBottom,
      noWrap,
      paragraph,
      variant,
      variantMapping
    });
    const Component = component || (paragraph ? "p" : variantMapping[variant] || defaultVariantMapping[variant]) || "span";
    const classes = useUtilityClasses10(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(TypographyRoot, _extends({
      as: Component,
      ref,
      ownerState,
      className: clsx_default(classes.root, className)
    }, other));
  });
  true ? Typography.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Set the text-align on the component.
     * @default 'inherit'
     */
    align: import_prop_types17.default.oneOf(["center", "inherit", "justify", "left", "right"]),
    /**
     * The content of the component.
     */
    children: import_prop_types17.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types17.default.object,
    /**
     * @ignore
     */
    className: import_prop_types17.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types17.default.elementType,
    /**
     * If `true`, the text will have a bottom margin.
     * @default false
     */
    gutterBottom: import_prop_types17.default.bool,
    /**
     * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
     *
     * Note that text overflow can only happen with block or inline-block level elements
     * (the element needs to have a width in order to overflow).
     * @default false
     */
    noWrap: import_prop_types17.default.bool,
    /**
     * If `true`, the element will be a paragraph element.
     * @default false
     */
    paragraph: import_prop_types17.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types17.default.oneOfType([import_prop_types17.default.arrayOf(import_prop_types17.default.oneOfType([import_prop_types17.default.func, import_prop_types17.default.object, import_prop_types17.default.bool])), import_prop_types17.default.func, import_prop_types17.default.object]),
    /**
     * Applies the theme typography styles.
     * @default 'body1'
     */
    variant: import_prop_types17.default.oneOfType([import_prop_types17.default.oneOf(["body1", "body2", "button", "caption", "h1", "h2", "h3", "h4", "h5", "h6", "inherit", "overline", "subtitle1", "subtitle2"]), import_prop_types17.default.string]),
    /**
     * The component maps the variant prop to a range of different HTML element types.
     * For instance, subtitle1 to `<h6>`.
     * If you wish to change that mapping, you can provide your own.
     * Alternatively, you can use the `component` prop.
     * @default {
     *   h1: 'h1',
     *   h2: 'h2',
     *   h3: 'h3',
     *   h4: 'h4',
     *   h5: 'h5',
     *   h6: 'h6',
     *   subtitle1: 'h6',
     *   subtitle2: 'h6',
     *   body1: 'p',
     *   body2: 'p',
     *   inherit: 'p',
     * }
     */
    variantMapping: import_prop_types17.default.object
  } : void 0;
  var Typography_default = Typography;

  // node_modules/@mui/material/AlertTitle/alertTitleClasses.js
  var import_utils38 = __toESM(require_utils());
  var import_generateUtilityClass13 = __toESM(require_generateUtilityClass3());
  function getAlertTitleUtilityClass(slot) {
    return (0, import_generateUtilityClass13.default)("MuiAlertTitle", slot);
  }
  var alertTitleClasses = (0, import_utils38.unstable_generateUtilityClasses)("MuiAlertTitle", ["root"]);
  var alertTitleClasses_default = alertTitleClasses;

  // node_modules/@mui/material/AlertTitle/AlertTitle.js
  var import_jsx_runtime25 = __toESM(require_jsx_runtime());
  var _excluded24 = ["className"];
  var useUtilityClasses11 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return (0, import_composeClasses11.unstable_composeClasses)(slots, getAlertTitleUtilityClass, classes);
  };
  var AlertTitleRoot = styled_default(Typography_default, {
    name: "MuiAlertTitle",
    slot: "Root",
    overridesResolver: (props, styles7) => styles7.root
  })(({
    theme
  }) => {
    return {
      fontWeight: theme.typography.fontWeightMedium,
      marginTop: -2
    };
  });
  var AlertTitle = /* @__PURE__ */ React32.forwardRef(function AlertTitle2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiAlertTitle"
    });
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded24);
    const ownerState = props;
    const classes = useUtilityClasses11(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(AlertTitleRoot, _extends({
      gutterBottom: true,
      component: "div",
      ownerState,
      ref,
      className: clsx_default(classes.root, className)
    }, other));
  });
  true ? AlertTitle.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types18.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types18.default.object,
    /**
     * @ignore
     */
    className: import_prop_types18.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types18.default.oneOfType([import_prop_types18.default.arrayOf(import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.object, import_prop_types18.default.bool])), import_prop_types18.default.func, import_prop_types18.default.object])
  } : void 0;
  var AlertTitle_default = AlertTitle;

  // node_modules/@mui/material/AppBar/AppBar.js
  init_extends();
  var React33 = __toESM(require_react());
  var import_prop_types19 = __toESM(require_prop_types());
  var import_composeClasses12 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/AppBar/appBarClasses.js
  var import_utils39 = __toESM(require_utils());
  var import_generateUtilityClass14 = __toESM(require_generateUtilityClass3());
  function getAppBarUtilityClass(slot) {
    return (0, import_generateUtilityClass14.default)("MuiAppBar", slot);
  }
  var appBarClasses = (0, import_utils39.unstable_generateUtilityClasses)("MuiAppBar", ["root", "positionFixed", "positionAbsolute", "positionSticky", "positionStatic", "positionRelative", "colorDefault", "colorPrimary", "colorSecondary", "colorInherit", "colorTransparent"]);
  var appBarClasses_default = appBarClasses;

  // node_modules/@mui/material/AppBar/AppBar.js
  var import_jsx_runtime26 = __toESM(require_jsx_runtime());
  var _excluded25 = ["className", "color", "enableColorOnDark", "position"];
  var useUtilityClasses12 = (ownerState) => {
    const {
      color,
      position: position2,
      classes
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color)}`, `position${capitalize_default(position2)}`]
    };
    return (0, import_composeClasses12.unstable_composeClasses)(slots, getAppBarUtilityClass, classes);
  };
  var joinVars = (var1, var2) => var1 ? `${var1 == null ? void 0 : var1.replace(")", "")}, ${var2})` : var2;
  var AppBarRoot = styled_default(Paper_default, {
    name: "MuiAppBar",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, styles7[`position${capitalize_default(ownerState.position)}`], styles7[`color${capitalize_default(ownerState.color)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    const backgroundColorDefault = theme.palette.mode === "light" ? theme.palette.grey[100] : theme.palette.grey[900];
    return _extends({
      display: "flex",
      flexDirection: "column",
      width: "100%",
      boxSizing: "border-box",
      // Prevent padding issue with the Modal and fixed positioned AppBar.
      flexShrink: 0
    }, ownerState.position === "fixed" && {
      position: "fixed",
      zIndex: (theme.vars || theme).zIndex.appBar,
      top: 0,
      left: "auto",
      right: 0,
      "@media print": {
        // Prevent the app bar to be visible on each printed page.
        position: "absolute"
      }
    }, ownerState.position === "absolute" && {
      position: "absolute",
      zIndex: (theme.vars || theme).zIndex.appBar,
      top: 0,
      left: "auto",
      right: 0
    }, ownerState.position === "sticky" && {
      // ⚠️ sticky is not supported by IE11.
      position: "sticky",
      zIndex: (theme.vars || theme).zIndex.appBar,
      top: 0,
      left: "auto",
      right: 0
    }, ownerState.position === "static" && {
      position: "static"
    }, ownerState.position === "relative" && {
      position: "relative"
    }, !theme.vars && _extends({}, ownerState.color === "default" && {
      backgroundColor: backgroundColorDefault,
      color: theme.palette.getContrastText(backgroundColorDefault)
    }, ownerState.color && ownerState.color !== "default" && ownerState.color !== "inherit" && ownerState.color !== "transparent" && {
      backgroundColor: theme.palette[ownerState.color].main,
      color: theme.palette[ownerState.color].contrastText
    }, ownerState.color === "inherit" && {
      color: "inherit"
    }, theme.palette.mode === "dark" && !ownerState.enableColorOnDark && {
      backgroundColor: null,
      color: null
    }, ownerState.color === "transparent" && _extends({
      backgroundColor: "transparent",
      color: "inherit"
    }, theme.palette.mode === "dark" && {
      backgroundImage: "none"
    })), theme.vars && _extends({}, ownerState.color === "default" && {
      "--AppBar-background": ownerState.enableColorOnDark ? theme.vars.palette.AppBar.defaultBg : joinVars(theme.vars.palette.AppBar.darkBg, theme.vars.palette.AppBar.defaultBg),
      "--AppBar-color": ownerState.enableColorOnDark ? theme.vars.palette.text.primary : joinVars(theme.vars.palette.AppBar.darkColor, theme.vars.palette.text.primary)
    }, ownerState.color && !ownerState.color.match(/^(default|inherit|transparent)$/) && {
      "--AppBar-background": ownerState.enableColorOnDark ? theme.vars.palette[ownerState.color].main : joinVars(theme.vars.palette.AppBar.darkBg, theme.vars.palette[ownerState.color].main),
      "--AppBar-color": ownerState.enableColorOnDark ? theme.vars.palette[ownerState.color].contrastText : joinVars(theme.vars.palette.AppBar.darkColor, theme.vars.palette[ownerState.color].contrastText)
    }, {
      backgroundColor: "var(--AppBar-background)",
      color: ownerState.color === "inherit" ? "inherit" : "var(--AppBar-color)"
    }, ownerState.color === "transparent" && {
      backgroundImage: "none",
      backgroundColor: "transparent",
      color: "inherit"
    }));
  });
  var AppBar = /* @__PURE__ */ React33.forwardRef(function AppBar2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiAppBar"
    });
    const {
      className,
      color = "primary",
      enableColorOnDark = false,
      position: position2 = "fixed"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded25);
    const ownerState = _extends({}, props, {
      color,
      position: position2,
      enableColorOnDark
    });
    const classes = useUtilityClasses12(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(AppBarRoot, _extends({
      square: true,
      component: "header",
      ownerState,
      elevation: 4,
      className: clsx_default(classes.root, className, position2 === "fixed" && "mui-fixed"),
      ref
    }, other));
  });
  true ? AppBar.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types19.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types19.default.object,
    /**
     * @ignore
     */
    className: import_prop_types19.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'primary'
     */
    color: import_prop_types19.default.oneOfType([import_prop_types19.default.oneOf(["default", "inherit", "primary", "secondary", "transparent"]), import_prop_types19.default.string]),
    /**
     * If true, the `color` prop is applied in dark mode.
     * @default false
     */
    enableColorOnDark: import_prop_types19.default.bool,
    /**
     * The positioning type. The behavior of the different options is described
     * [in the MDN web docs](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning).
     * Note: `sticky` is not universally supported and will fall back to `static` when unavailable.
     * @default 'fixed'
     */
    position: import_prop_types19.default.oneOf(["absolute", "fixed", "relative", "static", "sticky"]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types19.default.oneOfType([import_prop_types19.default.arrayOf(import_prop_types19.default.oneOfType([import_prop_types19.default.func, import_prop_types19.default.object, import_prop_types19.default.bool])), import_prop_types19.default.func, import_prop_types19.default.object])
  } : void 0;
  var AppBar_default = AppBar;

  // node_modules/@mui/material/Autocomplete/Autocomplete.js
  init_extends();
  var React112 = __toESM(require_react());
  var import_prop_types53 = __toESM(require_prop_types());
  var import_utils117 = __toESM(require_utils());

  // node_modules/@mui/base/index.js
  var base_exports = {};
  __export(base_exports, {
    Badge: () => Badge,
    Button: () => Button,
    ClassNameConfigurator: () => ClassNameConfigurator,
    ClickAwayListener: () => ClickAwayListener,
    Dropdown: () => Dropdown,
    FocusTrap: () => FocusTrap,
    FormControl: () => FormControl,
    FormControlContext: () => FormControlContext,
    Identity: () => Identity,
    Input: () => Input,
    Menu: () => Menu,
    MenuButton: () => MenuButton,
    MenuItem: () => MenuItem,
    MenuProvider: () => MenuProvider,
    Modal: () => Modal,
    ModalManager: () => ModalManager,
    NoSsr: () => NoSsr,
    Option: () => Option,
    OptionGroup: () => OptionGroup,
    Popper: () => Popper,
    Portal: () => Portal,
    Select: () => Select,
    SelectActionTypes: () => SelectActionTypes,
    SelectProvider: () => SelectProvider,
    Slider: () => Slider,
    Snackbar: () => Snackbar,
    Switch: () => Switch,
    Tab: () => Tab,
    TabPanel: () => TabPanel,
    TablePagination: () => TablePagination,
    TablePaginationActions: () => TablePaginationActions,
    Tabs: () => Tabs,
    TabsContext: () => TabsContext,
    TabsList: () => TabsList,
    TabsListActionTypes: () => TabsListActionTypes,
    TabsListProvider: () => TabsListProvider,
    TabsProvider: () => TabsProvider,
    TextareaAutosize: () => TextareaAutosize,
    Unstable_NumberInput: () => NumberInput,
    Unstable_Popup: () => Popup,
    appendOwnerState: () => appendOwnerState,
    areArraysEqual: () => areArraysEqual,
    ariaHidden: () => ariaHidden,
    badgeClasses: () => badgeClasses,
    buttonClasses: () => buttonClasses,
    createFilterOptions: () => createFilterOptions,
    extractEventHandlers: () => extractEventHandlers,
    formControlClasses: () => formControlClasses,
    getBadgeUtilityClass: () => getBadgeUtilityClass,
    getButtonUtilityClass: () => getButtonUtilityClass,
    getFormControlUtilityClass: () => getFormControlUtilityClass,
    getInputUtilityClass: () => getInputUtilityClass,
    getMenuButtonUtilityClass: () => getMenuButtonUtilityClass,
    getMenuItemUtilityClass: () => getMenuItemUtilityClass,
    getMenuUtilityClass: () => getMenuUtilityClass,
    getModalUtilityClass: () => getModalUtilityClass,
    getNumberInputUtilityClass: () => getNumberInputUtilityClass,
    getOptionGroupUtilityClass: () => getOptionGroupUtilityClass,
    getOptionUtilityClass: () => getOptionUtilityClass,
    getPopupUtilityClass: () => getPopupUtilityClass,
    getSelectUtilityClass: () => getSelectUtilityClass,
    getSliderUtilityClass: () => getSliderUtilityClass,
    getSnackbarUtilityClass: () => getSnackbarUtilityClass,
    getSwitchUtilityClass: () => getSwitchUtilityClass,
    getTabPanelUtilityClass: () => getTabPanelUtilityClass,
    getTabUtilityClass: () => getTabUtilityClass,
    getTablePaginationUtilityClass: () => getTablePaginationUtilityClass,
    getTabsListUtilityClass: () => getTabsListUtilityClass,
    getTabsUtilityClass: () => getTabsUtilityClass,
    inputClasses: () => inputClasses,
    isHostComponent: () => isHostComponent,
    menuButtonClasses: () => menuButtonClasses,
    menuClasses: () => menuClasses,
    menuItemClasses: () => menuItemClasses,
    mergeSlotProps: () => mergeSlotProps,
    modalClasses: () => modalClasses,
    numberInputClasses: () => numberInputClasses,
    optionClasses: () => optionClasses,
    optionGroupClasses: () => optionGroupClasses,
    popupClasses: () => popupClasses,
    prepareForSlot: () => prepareForSlot,
    resolveComponentProps: () => resolveComponentProps,
    selectClasses: () => selectClasses,
    sliderClasses: () => sliderClasses,
    snackbarClasses: () => snackbarClasses,
    switchClasses: () => switchClasses,
    tabClasses: () => tabClasses,
    tabPanelClasses: () => tabPanelClasses,
    tablePaginationClasses: () => tablePaginationClasses,
    tabsClasses: () => tabsClasses,
    tabsListClasses: () => tabsListClasses,
    unstable_useModal: () => useModal,
    unstable_useNumberInput: () => useNumberInput,
    useAutocomplete: () => useAutocomplete,
    useBadge: () => useBadge,
    useButton: () => useButton,
    useDropdown: () => useDropdown,
    useFormControlContext: () => useFormControlContext,
    useInput: () => useInput,
    useMenu: () => useMenu,
    useMenuButton: () => useMenuButton,
    useMenuItem: () => useMenuItem,
    useOption: () => useOption,
    useSelect: () => useSelect,
    useSlider: () => useSlider,
    useSlotProps: () => useSlotProps,
    useSnackbar: () => useSnackbar,
    useSwitch: () => useSwitch,
    useTab: () => useTab,
    useTabPanel: () => useTabPanel,
    useTabs: () => useTabs,
    useTabsContext: () => useTabsContext,
    useTabsList: () => useTabsList,
    valueToPercent: () => valueToPercent
  });

  // node_modules/@mui/base/utils/appendOwnerState.js
  init_extends();

  // node_modules/@mui/base/utils/isHostComponent.js
  function isHostComponent(element) {
    return typeof element === "string";
  }

  // node_modules/@mui/base/utils/appendOwnerState.js
  function appendOwnerState(elementType, otherProps, ownerState) {
    if (elementType === void 0 || isHostComponent(elementType)) {
      return otherProps;
    }
    return _extends({}, otherProps, {
      ownerState: _extends({}, otherProps.ownerState, ownerState)
    });
  }

  // node_modules/@mui/base/utils/areArraysEqual.js
  function areArraysEqual(array1, array2, itemComparer = (a, b) => a === b) {
    return array1.length === array2.length && array1.every((value, index3) => itemComparer(value, array2[index3]));
  }

  // node_modules/@mui/base/utils/ClassNameConfigurator.js
  var React34 = __toESM(require_react());
  var import_jsx_runtime27 = __toESM(require_jsx_runtime());
  var defaultContextValue = {
    disableDefaultClasses: false
  };
  var ClassNameConfiguratorContext = /* @__PURE__ */ React34.createContext(defaultContextValue);
  function useClassNamesOverride(generateUtilityClass116) {
    const {
      disableDefaultClasses
    } = React34.useContext(ClassNameConfiguratorContext);
    return (slot) => {
      if (disableDefaultClasses) {
        return "";
      }
      return generateUtilityClass116(slot);
    };
  }
  function ClassNameConfigurator(props) {
    const {
      disableDefaultClasses,
      children
    } = props;
    const contextValue = React34.useMemo(() => ({
      disableDefaultClasses: disableDefaultClasses != null ? disableDefaultClasses : false
    }), [disableDefaultClasses]);
    return /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(ClassNameConfiguratorContext.Provider, {
      value: contextValue,
      children
    });
  }

  // node_modules/@mui/base/utils/extractEventHandlers.js
  function extractEventHandlers(object, excludeKeys = []) {
    if (object === void 0) {
      return {};
    }
    const result = {};
    Object.keys(object).filter((prop) => prop.match(/^on[A-Z]/) && typeof object[prop] === "function" && !excludeKeys.includes(prop)).forEach((prop) => {
      result[prop] = object[prop];
    });
    return result;
  }

  // node_modules/@mui/base/utils/resolveComponentProps.js
  function resolveComponentProps(componentProps, ownerState, slotState) {
    if (typeof componentProps === "function") {
      return componentProps(ownerState, slotState);
    }
    return componentProps;
  }

  // node_modules/@mui/base/utils/useSlotProps.js
  init_extends();
  var import_utils40 = __toESM(require_utils());

  // node_modules/@mui/base/utils/mergeSlotProps.js
  init_extends();

  // node_modules/@mui/base/utils/omitEventHandlers.js
  function omitEventHandlers(object) {
    if (object === void 0) {
      return {};
    }
    const result = {};
    Object.keys(object).filter((prop) => !(prop.match(/^on[A-Z]/) && typeof object[prop] === "function")).forEach((prop) => {
      result[prop] = object[prop];
    });
    return result;
  }

  // node_modules/@mui/base/utils/mergeSlotProps.js
  function mergeSlotProps(parameters) {
    const {
      getSlotProps,
      additionalProps,
      externalSlotProps,
      externalForwardedProps,
      className
    } = parameters;
    if (!getSlotProps) {
      const joinedClasses2 = clsx_default(externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className, className, additionalProps == null ? void 0 : additionalProps.className);
      const mergedStyle2 = _extends({}, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
      const props2 = _extends({}, additionalProps, externalForwardedProps, externalSlotProps);
      if (joinedClasses2.length > 0) {
        props2.className = joinedClasses2;
      }
      if (Object.keys(mergedStyle2).length > 0) {
        props2.style = mergedStyle2;
      }
      return {
        props: props2,
        internalRef: void 0
      };
    }
    const eventHandlers = extractEventHandlers(_extends({}, externalForwardedProps, externalSlotProps));
    const componentsPropsWithoutEventHandlers = omitEventHandlers(externalSlotProps);
    const otherPropsWithoutEventHandlers = omitEventHandlers(externalForwardedProps);
    const internalSlotProps = getSlotProps(eventHandlers);
    const joinedClasses = clsx_default(internalSlotProps == null ? void 0 : internalSlotProps.className, additionalProps == null ? void 0 : additionalProps.className, className, externalForwardedProps == null ? void 0 : externalForwardedProps.className, externalSlotProps == null ? void 0 : externalSlotProps.className);
    const mergedStyle = _extends({}, internalSlotProps == null ? void 0 : internalSlotProps.style, additionalProps == null ? void 0 : additionalProps.style, externalForwardedProps == null ? void 0 : externalForwardedProps.style, externalSlotProps == null ? void 0 : externalSlotProps.style);
    const props = _extends({}, internalSlotProps, additionalProps, otherPropsWithoutEventHandlers, componentsPropsWithoutEventHandlers);
    if (joinedClasses.length > 0) {
      props.className = joinedClasses;
    }
    if (Object.keys(mergedStyle).length > 0) {
      props.style = mergedStyle;
    }
    return {
      props,
      internalRef: internalSlotProps.ref
    };
  }

  // node_modules/@mui/base/utils/useSlotProps.js
  var _excluded26 = ["elementType", "externalSlotProps", "ownerState", "skipResolvingSlotProps"];
  function useSlotProps(parameters) {
    var _parameters$additiona;
    const {
      elementType,
      externalSlotProps,
      ownerState,
      skipResolvingSlotProps = false
    } = parameters, rest = _objectWithoutPropertiesLoose(parameters, _excluded26);
    const resolvedComponentsProps = skipResolvingSlotProps ? {} : resolveComponentProps(externalSlotProps, ownerState);
    const {
      props: mergedProps,
      internalRef
    } = mergeSlotProps(_extends({}, rest, {
      externalSlotProps: resolvedComponentsProps
    }));
    const ref = (0, import_utils40.unstable_useForkRef)(internalRef, resolvedComponentsProps == null ? void 0 : resolvedComponentsProps.ref, (_parameters$additiona = parameters.additionalProps) == null ? void 0 : _parameters$additiona.ref);
    const props = appendOwnerState(elementType, _extends({}, mergedProps, {
      ref
    }), ownerState);
    return props;
  }

  // node_modules/@mui/base/utils/prepareForSlot.js
  init_extends();
  var React35 = __toESM(require_react());
  var _excluded27 = ["ownerState"];
  function prepareForSlot(Component) {
    return /* @__PURE__ */ React35.forwardRef(function Slot(props, ref) {
      const other = _objectWithoutPropertiesLoose(props, _excluded27);
      return /* @__PURE__ */ React35.createElement(Component, _extends({}, other, {
        ref
      }));
    });
  }

  // node_modules/@mui/base/Badge/Badge.js
  init_extends();
  var React36 = __toESM(require_react());
  var import_prop_types20 = __toESM(require_prop_types());
  var import_composeClasses13 = __toESM(require_composeClasses3());

  // node_modules/@mui/base/useBadge/useBadge.js
  var import_utils41 = __toESM(require_utils());
  function useBadge(parameters) {
    const {
      badgeContent: badgeContentProp,
      invisible: invisibleProp = false,
      max: maxProp = 99,
      showZero = false
    } = parameters;
    const prevProps = (0, import_utils41.usePreviousProps)({
      badgeContent: badgeContentProp,
      max: maxProp
    });
    let invisible = invisibleProp;
    if (invisibleProp === false && badgeContentProp === 0 && !showZero) {
      invisible = true;
    }
    const {
      badgeContent,
      max: max3 = maxProp
    } = invisible ? prevProps : parameters;
    const displayValue = badgeContent && Number(badgeContent) > max3 ? `${max3}+` : badgeContent;
    return {
      badgeContent,
      invisible,
      max: max3,
      displayValue
    };
  }

  // node_modules/@mui/base/generateUtilityClasses/index.js
  var import_utils42 = __toESM(require_utils());

  // node_modules/@mui/base/generateUtilityClass/index.js
  var import_utils43 = __toESM(require_utils());

  // node_modules/@mui/base/Badge/badgeClasses.js
  function getBadgeUtilityClass(slot) {
    return (0, import_utils43.unstable_generateUtilityClass)("MuiBadge", slot);
  }
  var badgeClasses = (0, import_utils42.unstable_generateUtilityClasses)("MuiBadge", ["root", "badge", "invisible"]);

  // node_modules/@mui/base/Badge/Badge.js
  var import_jsx_runtime28 = __toESM(require_jsx_runtime());
  var import_jsx_runtime29 = __toESM(require_jsx_runtime());
  var _excluded28 = ["badgeContent", "children", "invisible", "max", "slotProps", "slots", "showZero"];
  var useUtilityClasses13 = (ownerState) => {
    const {
      invisible
    } = ownerState;
    const slots = {
      root: ["root"],
      badge: ["badge", invisible && "invisible"]
    };
    return (0, import_composeClasses13.unstable_composeClasses)(slots, useClassNamesOverride(getBadgeUtilityClass));
  };
  var Badge = /* @__PURE__ */ React36.forwardRef(function Badge2(props, forwardedRef) {
    var _slots$root, _slots$badge;
    const {
      children,
      max: maxProp = 99,
      slotProps = {},
      slots = {},
      showZero = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded28);
    const {
      badgeContent,
      max: max3,
      displayValue,
      invisible
    } = useBadge(_extends({}, props, {
      max: maxProp
    }));
    const ownerState = _extends({}, props, {
      badgeContent,
      invisible,
      max: max3,
      showZero
    });
    const classes = useUtilityClasses13(ownerState);
    const Root = (_slots$root = slots.root) != null ? _slots$root : "span";
    const rootProps = useSlotProps({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        ref: forwardedRef
      },
      ownerState,
      className: classes.root
    });
    const BadgeComponent = (_slots$badge = slots.badge) != null ? _slots$badge : "span";
    const badgeProps = useSlotProps({
      elementType: BadgeComponent,
      externalSlotProps: slotProps.badge,
      ownerState,
      className: classes.badge
    });
    return /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)(Root, _extends({}, rootProps, {
      children: [children, /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(BadgeComponent, _extends({}, badgeProps, {
        children: displayValue
      }))]
    }));
  });
  true ? Badge.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The content rendered within the badge.
     */
    badgeContent: import_prop_types20.default.node,
    /**
     * The badge will be added relative to this node.
     */
    children: import_prop_types20.default.node,
    /**
     * If `true`, the badge is invisible.
     * @default false
     */
    invisible: import_prop_types20.default.bool,
    /**
     * Max count to show.
     * @default 99
     */
    max: import_prop_types20.default.number,
    /**
     * Controls whether the badge is hidden when `badgeContent` is zero.
     * @default false
     */
    showZero: import_prop_types20.default.bool,
    /**
     * The props used for each slot inside the Badge.
     * @default {}
     */
    slotProps: import_prop_types20.default.shape({
      badge: import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object]),
      root: import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object])
    }),
    /**
     * The components used for each slot inside the Badge.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types20.default.shape({
      badge: import_prop_types20.default.elementType,
      root: import_prop_types20.default.elementType
    })
  } : void 0;

  // node_modules/@mui/base/Button/Button.js
  init_extends();
  var React38 = __toESM(require_react());
  var import_prop_types21 = __toESM(require_prop_types());
  var import_composeClasses14 = __toESM(require_composeClasses3());

  // node_modules/@mui/base/Button/buttonClasses.js
  function getButtonUtilityClass(slot) {
    return (0, import_utils43.unstable_generateUtilityClass)("MuiButton", slot);
  }
  var buttonClasses = (0, import_utils42.unstable_generateUtilityClasses)("MuiButton", ["root", "active", "disabled", "focusVisible"]);

  // node_modules/@mui/base/useButton/useButton.js
  init_extends();
  var React37 = __toESM(require_react());
  var import_utils45 = __toESM(require_utils());
  function useButton(parameters = {}) {
    const {
      disabled = false,
      focusableWhenDisabled,
      href,
      rootRef: externalRef,
      tabIndex,
      to,
      type
    } = parameters;
    const buttonRef = React37.useRef();
    const [active, setActive] = React37.useState(false);
    const {
      isFocusVisibleRef,
      onFocus: handleFocusVisible,
      onBlur: handleBlurVisible,
      ref: focusVisibleRef
    } = (0, import_utils45.unstable_useIsFocusVisible)();
    const [focusVisible, setFocusVisible] = React37.useState(false);
    if (disabled && !focusableWhenDisabled && focusVisible) {
      setFocusVisible(false);
    }
    React37.useEffect(() => {
      isFocusVisibleRef.current = focusVisible;
    }, [focusVisible, isFocusVisibleRef]);
    const [hostElementName, setHostElementName] = React37.useState("");
    const createHandleMouseLeave = (otherHandlers) => (event) => {
      var _otherHandlers$onMous;
      if (focusVisible) {
        event.preventDefault();
      }
      (_otherHandlers$onMous = otherHandlers.onMouseLeave) == null || _otherHandlers$onMous.call(otherHandlers, event);
    };
    const createHandleBlur = (otherHandlers) => (event) => {
      var _otherHandlers$onBlur;
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setFocusVisible(false);
      }
      (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);
    };
    const createHandleFocus = (otherHandlers) => (event) => {
      var _otherHandlers$onFocu2;
      if (!buttonRef.current) {
        buttonRef.current = event.currentTarget;
      }
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        var _otherHandlers$onFocu;
        setFocusVisible(true);
        (_otherHandlers$onFocu = otherHandlers.onFocusVisible) == null || _otherHandlers$onFocu.call(otherHandlers, event);
      }
      (_otherHandlers$onFocu2 = otherHandlers.onFocus) == null || _otherHandlers$onFocu2.call(otherHandlers, event);
    };
    const isNativeButton = () => {
      const button = buttonRef.current;
      return hostElementName === "BUTTON" || hostElementName === "INPUT" && ["button", "submit", "reset"].includes(button == null ? void 0 : button.type) || hostElementName === "A" && (button == null ? void 0 : button.href);
    };
    const createHandleClick = (otherHandlers) => (event) => {
      if (!disabled) {
        var _otherHandlers$onClic;
        (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
      }
    };
    const createHandleMouseDown = (otherHandlers) => (event) => {
      var _otherHandlers$onMous2;
      if (!disabled) {
        setActive(true);
        document.addEventListener("mouseup", () => {
          setActive(false);
        }, {
          once: true
        });
      }
      (_otherHandlers$onMous2 = otherHandlers.onMouseDown) == null || _otherHandlers$onMous2.call(otherHandlers, event);
    };
    const createHandleKeyDown = (otherHandlers) => (event) => {
      var _otherHandlers$onKeyD;
      (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);
      if (event.defaultMuiPrevented) {
        return;
      }
      if (event.target === event.currentTarget && !isNativeButton() && event.key === " ") {
        event.preventDefault();
      }
      if (event.target === event.currentTarget && event.key === " " && !disabled) {
        setActive(true);
      }
      if (event.target === event.currentTarget && !isNativeButton() && event.key === "Enter" && !disabled) {
        var _otherHandlers$onClic2;
        (_otherHandlers$onClic2 = otherHandlers.onClick) == null || _otherHandlers$onClic2.call(otherHandlers, event);
        event.preventDefault();
      }
    };
    const createHandleKeyUp = (otherHandlers) => (event) => {
      var _otherHandlers$onKeyU;
      if (event.target === event.currentTarget) {
        setActive(false);
      }
      (_otherHandlers$onKeyU = otherHandlers.onKeyUp) == null || _otherHandlers$onKeyU.call(otherHandlers, event);
      if (event.target === event.currentTarget && !isNativeButton() && !disabled && event.key === " " && !event.defaultMuiPrevented) {
        var _otherHandlers$onClic3;
        (_otherHandlers$onClic3 = otherHandlers.onClick) == null || _otherHandlers$onClic3.call(otherHandlers, event);
      }
    };
    const updateHostElementName = React37.useCallback((instance) => {
      var _instance$tagName;
      setHostElementName((_instance$tagName = instance == null ? void 0 : instance.tagName) != null ? _instance$tagName : "");
    }, []);
    const handleRef = (0, import_utils45.unstable_useForkRef)(updateHostElementName, externalRef, focusVisibleRef, buttonRef);
    const buttonProps = {};
    if (tabIndex !== void 0) {
      buttonProps.tabIndex = tabIndex;
    }
    if (hostElementName === "BUTTON") {
      buttonProps.type = type != null ? type : "button";
      if (focusableWhenDisabled) {
        buttonProps["aria-disabled"] = disabled;
      } else {
        buttonProps.disabled = disabled;
      }
    } else if (hostElementName !== "") {
      if (!href && !to) {
        buttonProps.role = "button";
        buttonProps.tabIndex = tabIndex != null ? tabIndex : 0;
      }
      if (disabled) {
        buttonProps["aria-disabled"] = disabled;
        buttonProps.tabIndex = focusableWhenDisabled ? tabIndex != null ? tabIndex : 0 : -1;
      }
    }
    const getRootProps = (externalProps = {}) => {
      const externalEventHandlers = _extends({}, extractEventHandlers(parameters), extractEventHandlers(externalProps));
      const props = _extends({
        type
      }, externalEventHandlers, buttonProps, externalProps, {
        onBlur: createHandleBlur(externalEventHandlers),
        onClick: createHandleClick(externalEventHandlers),
        onFocus: createHandleFocus(externalEventHandlers),
        onKeyDown: createHandleKeyDown(externalEventHandlers),
        onKeyUp: createHandleKeyUp(externalEventHandlers),
        onMouseDown: createHandleMouseDown(externalEventHandlers),
        onMouseLeave: createHandleMouseLeave(externalEventHandlers),
        ref: handleRef
      });
      delete props.onFocusVisible;
      return props;
    };
    return {
      getRootProps,
      focusVisible,
      setFocusVisible,
      active,
      rootRef: handleRef
    };
  }

  // node_modules/@mui/base/Button/Button.js
  var import_jsx_runtime30 = __toESM(require_jsx_runtime());
  var _excluded29 = ["action", "children", "disabled", "focusableWhenDisabled", "onFocusVisible", "slotProps", "slots"];
  var useUtilityClasses14 = (ownerState) => {
    const {
      active,
      disabled,
      focusVisible
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", focusVisible && "focusVisible", active && "active"]
    };
    return (0, import_composeClasses14.unstable_composeClasses)(slots, useClassNamesOverride(getButtonUtilityClass));
  };
  var Button = /* @__PURE__ */ React38.forwardRef(function Button2(props, forwardedRef) {
    var _slots$root;
    const {
      action,
      children,
      focusableWhenDisabled = false,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded29);
    const buttonRef = React38.useRef();
    const {
      active,
      focusVisible,
      setFocusVisible,
      getRootProps
    } = useButton(_extends({}, props, {
      focusableWhenDisabled
    }));
    React38.useImperativeHandle(action, () => ({
      focusVisible: () => {
        setFocusVisible(true);
        buttonRef.current.focus();
      }
    }), [setFocusVisible]);
    const ownerState = _extends({}, props, {
      active,
      focusableWhenDisabled,
      focusVisible
    });
    const classes = useUtilityClasses14(ownerState);
    const defaultElement = other.href || other.to ? "a" : "button";
    const Root = (_slots$root = slots.root) != null ? _slots$root : defaultElement;
    const rootProps = useSlotProps({
      elementType: Root,
      getSlotProps: getRootProps,
      externalForwardedProps: other,
      externalSlotProps: slotProps.root,
      additionalProps: {
        ref: forwardedRef
      },
      ownerState,
      className: classes.root
    });
    return /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(Root, _extends({}, rootProps, {
      children
    }));
  });
  true ? Button.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * A ref for imperative actions. It currently only supports `focusVisible()` action.
     */
    action: import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.shape({
      current: import_prop_types21.default.shape({
        focusVisible: import_prop_types21.default.func.isRequired
      })
    })]),
    /**
     * @ignore
     */
    children: import_prop_types21.default.node,
    /**
     * @ignore
     */
    className: import_prop_types21.default.string,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types21.default.bool,
    /**
     * If `true`, allows a disabled button to receive focus.
     * @default false
     */
    focusableWhenDisabled: import_prop_types21.default.bool,
    /**
     * @ignore
     */
    href: import_prop_types21.default.string,
    /**
     * @ignore
     */
    onFocusVisible: import_prop_types21.default.func,
    /**
     * The props used for each slot inside the Button.
     * @default {}
     */
    slotProps: import_prop_types21.default.shape({
      root: import_prop_types21.default.oneOfType([import_prop_types21.default.func, import_prop_types21.default.object])
    }),
    /**
     * The components used for each slot inside the Button.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types21.default.shape({
      root: import_prop_types21.default.elementType
    }),
    /**
     * @ignore
     */
    to: import_prop_types21.default.string
  } : void 0;

  // node_modules/@mui/base/ClickAwayListener/ClickAwayListener.js
  var React39 = __toESM(require_react());
  var import_prop_types22 = __toESM(require_prop_types());
  var import_utils47 = __toESM(require_utils());
  var import_jsx_runtime31 = __toESM(require_jsx_runtime());
  function mapEventPropToEvent(eventProp) {
    return eventProp.substring(2).toLowerCase();
  }
  function clickedRootScrollbar(event, doc) {
    return doc.documentElement.clientWidth < event.clientX || doc.documentElement.clientHeight < event.clientY;
  }
  function ClickAwayListener(props) {
    const {
      children,
      disableReactTree = false,
      mouseEvent = "onClick",
      onClickAway,
      touchEvent = "onTouchEnd"
    } = props;
    const movedRef = React39.useRef(false);
    const nodeRef = React39.useRef(null);
    const activatedRef = React39.useRef(false);
    const syntheticEventRef = React39.useRef(false);
    React39.useEffect(() => {
      setTimeout(() => {
        activatedRef.current = true;
      }, 0);
      return () => {
        activatedRef.current = false;
      };
    }, []);
    const handleRef = (0, import_utils47.unstable_useForkRef)(
      // @ts-expect-error TODO upstream fix
      children.ref,
      nodeRef
    );
    const handleClickAway = (0, import_utils47.unstable_useEventCallback)((event) => {
      const insideReactTree = syntheticEventRef.current;
      syntheticEventRef.current = false;
      const doc = (0, import_utils47.unstable_ownerDocument)(nodeRef.current);
      if (!activatedRef.current || !nodeRef.current || "clientX" in event && clickedRootScrollbar(event, doc)) {
        return;
      }
      if (movedRef.current) {
        movedRef.current = false;
        return;
      }
      let insideDOM;
      if (event.composedPath) {
        insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;
      } else {
        insideDOM = !doc.documentElement.contains(
          // @ts-expect-error returns `false` as intended when not dispatched from a Node
          event.target
        ) || nodeRef.current.contains(
          // @ts-expect-error returns `false` as intended when not dispatched from a Node
          event.target
        );
      }
      if (!insideDOM && (disableReactTree || !insideReactTree)) {
        onClickAway(event);
      }
    });
    const createHandleSynthetic = (handlerName) => (event) => {
      syntheticEventRef.current = true;
      const childrenPropsHandler = children.props[handlerName];
      if (childrenPropsHandler) {
        childrenPropsHandler(event);
      }
    };
    const childrenProps = {
      ref: handleRef
    };
    if (touchEvent !== false) {
      childrenProps[touchEvent] = createHandleSynthetic(touchEvent);
    }
    React39.useEffect(() => {
      if (touchEvent !== false) {
        const mappedTouchEvent = mapEventPropToEvent(touchEvent);
        const doc = (0, import_utils47.unstable_ownerDocument)(nodeRef.current);
        const handleTouchMove = () => {
          movedRef.current = true;
        };
        doc.addEventListener(mappedTouchEvent, handleClickAway);
        doc.addEventListener("touchmove", handleTouchMove);
        return () => {
          doc.removeEventListener(mappedTouchEvent, handleClickAway);
          doc.removeEventListener("touchmove", handleTouchMove);
        };
      }
      return void 0;
    }, [handleClickAway, touchEvent]);
    if (mouseEvent !== false) {
      childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);
    }
    React39.useEffect(() => {
      if (mouseEvent !== false) {
        const mappedMouseEvent = mapEventPropToEvent(mouseEvent);
        const doc = (0, import_utils47.unstable_ownerDocument)(nodeRef.current);
        doc.addEventListener(mappedMouseEvent, handleClickAway);
        return () => {
          doc.removeEventListener(mappedMouseEvent, handleClickAway);
        };
      }
      return void 0;
    }, [handleClickAway, mouseEvent]);
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(React39.Fragment, {
      children: /* @__PURE__ */ React39.cloneElement(children, childrenProps)
    });
  }
  true ? ClickAwayListener.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The wrapped element.
     */
    children: import_utils47.elementAcceptingRef.isRequired,
    /**
     * If `true`, the React tree is ignored and only the DOM tree is considered.
     * This prop changes how portaled elements are handled.
     * @default false
     */
    disableReactTree: import_prop_types22.default.bool,
    /**
     * The mouse event to listen to. You can disable the listener by providing `false`.
     * @default 'onClick'
     */
    mouseEvent: import_prop_types22.default.oneOf(["onClick", "onMouseDown", "onMouseUp", "onPointerDown", "onPointerUp", false]),
    /**
     * Callback fired when a "click away" event is detected.
     */
    onClickAway: import_prop_types22.default.func.isRequired,
    /**
     * The touch event to listen to. You can disable the listener by providing `false`.
     * @default 'onTouchEnd'
     */
    touchEvent: import_prop_types22.default.oneOf(["onTouchEnd", "onTouchStart", false])
  } : void 0;
  if (true) {
    ClickAwayListener["propTypes"] = (0, import_utils47.exactProp)(ClickAwayListener.propTypes);
  }

  // node_modules/@mui/base/index.js
  __reExport(base_exports, __toESM(require_composeClasses3()));

  // node_modules/@mui/base/Dropdown/Dropdown.js
  var React43 = __toESM(require_react());
  var import_prop_types23 = __toESM(require_prop_types());
  var import_utils48 = __toESM(require_utils());

  // node_modules/@mui/base/useDropdown/DropdownContext.js
  var React40 = __toESM(require_react());
  var DropdownContext = /* @__PURE__ */ React40.createContext(null);

  // node_modules/@mui/base/useDropdown/useDropdown.js
  var React42 = __toESM(require_react());

  // node_modules/@mui/base/utils/useControllableReducer.js
  init_extends();
  var React41 = __toESM(require_react());
  function areEqual(a, b) {
    return a === b;
  }
  var EMPTY_OBJECT = {};
  var NOOP = () => {
  };
  function getControlledState(internalState, controlledProps) {
    const augmentedState = _extends({}, internalState);
    Object.keys(controlledProps).forEach((key) => {
      if (controlledProps[key] !== void 0) {
        augmentedState[key] = controlledProps[key];
      }
    });
    return augmentedState;
  }
  function useStateChangeDetection(parameters) {
    const {
      nextState,
      initialState,
      stateComparers,
      onStateChange,
      controlledProps,
      lastActionRef
    } = parameters;
    const internalPreviousStateRef = React41.useRef(initialState);
    React41.useEffect(() => {
      if (lastActionRef.current === null) {
        return;
      }
      const previousState = getControlledState(internalPreviousStateRef.current, controlledProps);
      Object.keys(nextState).forEach((key) => {
        var _stateComparers$key;
        const stateComparer = (_stateComparers$key = stateComparers[key]) != null ? _stateComparers$key : areEqual;
        const nextStateItem = nextState[key];
        const previousStateItem = previousState[key];
        if (previousStateItem == null && nextStateItem != null || previousStateItem != null && nextStateItem == null || previousStateItem != null && nextStateItem != null && !stateComparer(nextStateItem, previousStateItem)) {
          var _event, _type;
          onStateChange == null || onStateChange((_event = lastActionRef.current.event) != null ? _event : null, key, nextStateItem, (_type = lastActionRef.current.type) != null ? _type : "", nextState);
        }
      });
      internalPreviousStateRef.current = nextState;
      lastActionRef.current = null;
    }, [internalPreviousStateRef, nextState, lastActionRef, onStateChange, stateComparers, controlledProps]);
  }
  function useControllableReducer(parameters) {
    const lastActionRef = React41.useRef(null);
    const {
      reducer,
      initialState,
      controlledProps = EMPTY_OBJECT,
      stateComparers = EMPTY_OBJECT,
      onStateChange = NOOP,
      actionContext
    } = parameters;
    const reducerWithControlledState = React41.useCallback((state, action) => {
      lastActionRef.current = action;
      const controlledState = getControlledState(state, controlledProps);
      const newState = reducer(controlledState, action);
      return newState;
    }, [controlledProps, reducer]);
    const [nextState, dispatch] = React41.useReducer(reducerWithControlledState, initialState);
    const dispatchWithContext = React41.useCallback((action) => {
      dispatch(_extends({}, action, {
        context: actionContext
      }));
    }, [actionContext]);
    useStateChangeDetection({
      nextState,
      initialState,
      stateComparers: stateComparers != null ? stateComparers : EMPTY_OBJECT,
      onStateChange: onStateChange != null ? onStateChange : NOOP,
      controlledProps,
      lastActionRef
    });
    return [getControlledState(nextState, controlledProps), dispatchWithContext];
  }

  // node_modules/@mui/base/useDropdown/useDropdown.types.js
  var DropdownActionTypes = {
    blur: "dropdown:blur",
    escapeKeyDown: "dropdown:escapeKeyDown",
    toggle: "dropdown:toggle",
    open: "dropdown:open",
    close: "dropdown:close"
  };

  // node_modules/@mui/base/useDropdown/dropdownReducer.js
  function dropdownReducer(state, action) {
    switch (action.type) {
      case DropdownActionTypes.blur:
        return {
          open: false
        };
      case DropdownActionTypes.escapeKeyDown:
        return {
          open: false
        };
      case DropdownActionTypes.toggle:
        return {
          open: !state.open
        };
      case DropdownActionTypes.open:
        return {
          open: true
        };
      case DropdownActionTypes.close:
        return {
          open: false
        };
      default:
        throw new Error(`Unhandled action`);
    }
  }

  // node_modules/@mui/base/useDropdown/useDropdown.js
  function useDropdown(parameters = {}) {
    const {
      defaultOpen,
      onOpenChange,
      open: openProp
    } = parameters;
    const [popupId, setPopupId] = React42.useState("");
    const [triggerElement, setTriggerElement] = React42.useState(null);
    const lastActionType = React42.useRef(null);
    const handleStateChange = React42.useCallback((event, field, value, reason) => {
      if (field === "open") {
        onOpenChange == null || onOpenChange(event, value);
      }
      lastActionType.current = reason;
    }, [onOpenChange]);
    const controlledProps = React42.useMemo(() => openProp !== void 0 ? {
      open: openProp
    } : {}, [openProp]);
    const [state, dispatch] = useControllableReducer({
      controlledProps,
      initialState: defaultOpen ? {
        open: true
      } : {
        open: false
      },
      onStateChange: handleStateChange,
      reducer: dropdownReducer
    });
    React42.useEffect(() => {
      if (!state.open && lastActionType.current !== null && lastActionType.current !== DropdownActionTypes.blur) {
        triggerElement == null || triggerElement.focus();
      }
    }, [state.open, triggerElement]);
    const contextValue = {
      state,
      dispatch,
      popupId,
      registerPopup: setPopupId,
      registerTrigger: setTriggerElement,
      triggerElement
    };
    return {
      contextValue,
      open: state.open
    };
  }

  // node_modules/@mui/base/Dropdown/Dropdown.js
  var import_jsx_runtime32 = __toESM(require_jsx_runtime());
  function Dropdown(props) {
    const {
      children,
      open,
      defaultOpen,
      onOpenChange
    } = props;
    const {
      contextValue
    } = useDropdown({
      defaultOpen,
      onOpenChange,
      open
    });
    return /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(DropdownContext.Provider, {
      value: contextValue,
      children
    });
  }
  true ? Dropdown.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: import_prop_types23.default.node,
    /**
     * If `true`, the dropdown is initially open.
     */
    defaultOpen: import_prop_types23.default.bool,
    /**
     * Callback fired when the component requests to be opened or closed.
     */
    onOpenChange: import_prop_types23.default.func,
    /**
     * Allows to control whether the dropdown is open.
     * This is a controlled counterpart of `defaultOpen`.
     */
    open: import_prop_types23.default.bool
  } : void 0;
  if (true) {
    Dropdown["propTypes"] = (0, import_utils48.exactProp)(Dropdown.propTypes);
  }

  // node_modules/@mui/base/FocusTrap/FocusTrap.js
  var React44 = __toESM(require_react());
  var import_prop_types24 = __toESM(require_prop_types());
  var import_utils49 = __toESM(require_utils());
  var import_jsx_runtime33 = __toESM(require_jsx_runtime());
  var import_jsx_runtime34 = __toESM(require_jsx_runtime());
  var candidatesSelector = ["input", "select", "textarea", "a[href]", "button", "[tabindex]", "audio[controls]", "video[controls]", '[contenteditable]:not([contenteditable="false"])'].join(",");
  function getTabIndex(node2) {
    const tabindexAttr = parseInt(node2.getAttribute("tabindex") || "", 10);
    if (!Number.isNaN(tabindexAttr)) {
      return tabindexAttr;
    }
    if (node2.contentEditable === "true" || (node2.nodeName === "AUDIO" || node2.nodeName === "VIDEO" || node2.nodeName === "DETAILS") && node2.getAttribute("tabindex") === null) {
      return 0;
    }
    return node2.tabIndex;
  }
  function isNonTabbableRadio(node2) {
    if (node2.tagName !== "INPUT" || node2.type !== "radio") {
      return false;
    }
    if (!node2.name) {
      return false;
    }
    const getRadio = (selector) => node2.ownerDocument.querySelector(`input[type="radio"]${selector}`);
    let roving = getRadio(`[name="${node2.name}"]:checked`);
    if (!roving) {
      roving = getRadio(`[name="${node2.name}"]`);
    }
    return roving !== node2;
  }
  function isNodeMatchingSelectorFocusable(node2) {
    if (node2.disabled || node2.tagName === "INPUT" && node2.type === "hidden" || isNonTabbableRadio(node2)) {
      return false;
    }
    return true;
  }
  function defaultGetTabbable(root) {
    const regularTabNodes = [];
    const orderedTabNodes = [];
    Array.from(root.querySelectorAll(candidatesSelector)).forEach((node2, i) => {
      const nodeTabIndex = getTabIndex(node2);
      if (nodeTabIndex === -1 || !isNodeMatchingSelectorFocusable(node2)) {
        return;
      }
      if (nodeTabIndex === 0) {
        regularTabNodes.push(node2);
      } else {
        orderedTabNodes.push({
          documentOrder: i,
          tabIndex: nodeTabIndex,
          node: node2
        });
      }
    });
    return orderedTabNodes.sort((a, b) => a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex).map((a) => a.node).concat(regularTabNodes);
  }
  function defaultIsEnabled() {
    return true;
  }
  function FocusTrap(props) {
    const {
      children,
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableRestoreFocus = false,
      getTabbable = defaultGetTabbable,
      isEnabled = defaultIsEnabled,
      open
    } = props;
    const ignoreNextEnforceFocus = React44.useRef(false);
    const sentinelStart = React44.useRef(null);
    const sentinelEnd = React44.useRef(null);
    const nodeToRestore = React44.useRef(null);
    const reactFocusEventTarget = React44.useRef(null);
    const activated = React44.useRef(false);
    const rootRef = React44.useRef(null);
    const handleRef = (0, import_utils49.unstable_useForkRef)(children.ref, rootRef);
    const lastKeydown = React44.useRef(null);
    React44.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      activated.current = !disableAutoFocus;
    }, [disableAutoFocus, open]);
    React44.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      const doc = (0, import_utils49.unstable_ownerDocument)(rootRef.current);
      if (!rootRef.current.contains(doc.activeElement)) {
        if (!rootRef.current.hasAttribute("tabIndex")) {
          if (true) {
            console.error(["MUI: The modal content node does not accept focus.", 'For the benefit of assistive technologies, the tabIndex of the node is being set to "-1".'].join("\n"));
          }
          rootRef.current.setAttribute("tabIndex", "-1");
        }
        if (activated.current) {
          rootRef.current.focus();
        }
      }
      return () => {
        if (!disableRestoreFocus) {
          if (nodeToRestore.current && nodeToRestore.current.focus) {
            ignoreNextEnforceFocus.current = true;
            nodeToRestore.current.focus();
          }
          nodeToRestore.current = null;
        }
      };
    }, [open]);
    React44.useEffect(() => {
      if (!open || !rootRef.current) {
        return;
      }
      const doc = (0, import_utils49.unstable_ownerDocument)(rootRef.current);
      const loopFocus = (nativeEvent) => {
        lastKeydown.current = nativeEvent;
        if (disableEnforceFocus || !isEnabled() || nativeEvent.key !== "Tab") {
          return;
        }
        if (doc.activeElement === rootRef.current && nativeEvent.shiftKey) {
          ignoreNextEnforceFocus.current = true;
          if (sentinelEnd.current) {
            sentinelEnd.current.focus();
          }
        }
      };
      const contain = () => {
        const rootElement = rootRef.current;
        if (rootElement === null) {
          return;
        }
        if (!doc.hasFocus() || !isEnabled() || ignoreNextEnforceFocus.current) {
          ignoreNextEnforceFocus.current = false;
          return;
        }
        if (rootElement.contains(doc.activeElement)) {
          return;
        }
        if (disableEnforceFocus && doc.activeElement !== sentinelStart.current && doc.activeElement !== sentinelEnd.current) {
          return;
        }
        if (doc.activeElement !== reactFocusEventTarget.current) {
          reactFocusEventTarget.current = null;
        } else if (reactFocusEventTarget.current !== null) {
          return;
        }
        if (!activated.current) {
          return;
        }
        let tabbable = [];
        if (doc.activeElement === sentinelStart.current || doc.activeElement === sentinelEnd.current) {
          tabbable = getTabbable(rootRef.current);
        }
        if (tabbable.length > 0) {
          var _lastKeydown$current, _lastKeydown$current2;
          const isShiftTab = Boolean(((_lastKeydown$current = lastKeydown.current) == null ? void 0 : _lastKeydown$current.shiftKey) && ((_lastKeydown$current2 = lastKeydown.current) == null ? void 0 : _lastKeydown$current2.key) === "Tab");
          const focusNext = tabbable[0];
          const focusPrevious = tabbable[tabbable.length - 1];
          if (typeof focusNext !== "string" && typeof focusPrevious !== "string") {
            if (isShiftTab) {
              focusPrevious.focus();
            } else {
              focusNext.focus();
            }
          }
        } else {
          rootElement.focus();
        }
      };
      doc.addEventListener("focusin", contain);
      doc.addEventListener("keydown", loopFocus, true);
      const interval = setInterval(() => {
        if (doc.activeElement && doc.activeElement.tagName === "BODY") {
          contain();
        }
      }, 50);
      return () => {
        clearInterval(interval);
        doc.removeEventListener("focusin", contain);
        doc.removeEventListener("keydown", loopFocus, true);
      };
    }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open, getTabbable]);
    const onFocus = (event) => {
      if (nodeToRestore.current === null) {
        nodeToRestore.current = event.relatedTarget;
      }
      activated.current = true;
      reactFocusEventTarget.current = event.target;
      const childrenPropsHandler = children.props.onFocus;
      if (childrenPropsHandler) {
        childrenPropsHandler(event);
      }
    };
    const handleFocusSentinel = (event) => {
      if (nodeToRestore.current === null) {
        nodeToRestore.current = event.relatedTarget;
      }
      activated.current = true;
    };
    return /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)(React44.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", {
        tabIndex: open ? 0 : -1,
        onFocus: handleFocusSentinel,
        ref: sentinelStart,
        "data-testid": "sentinelStart"
      }), /* @__PURE__ */ React44.cloneElement(children, {
        ref: handleRef,
        onFocus
      }), /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", {
        tabIndex: open ? 0 : -1,
        onFocus: handleFocusSentinel,
        ref: sentinelEnd,
        "data-testid": "sentinelEnd"
      })]
    });
  }
  true ? FocusTrap.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * A single child content element.
     */
    children: import_utils49.elementAcceptingRef,
    /**
     * If `true`, the focus trap will not automatically shift focus to itself when it opens, and
     * replace it to the last focused element when it closes.
     * This also works correctly with any focus trap children that have the `disableAutoFocus` prop.
     *
     * Generally this should never be set to `true` as it makes the focus trap less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableAutoFocus: import_prop_types24.default.bool,
    /**
     * If `true`, the focus trap will not prevent focus from leaving the focus trap while open.
     *
     * Generally this should never be set to `true` as it makes the focus trap less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableEnforceFocus: import_prop_types24.default.bool,
    /**
     * If `true`, the focus trap will not restore focus to previously focused element once
     * focus trap is hidden or unmounted.
     * @default false
     */
    disableRestoreFocus: import_prop_types24.default.bool,
    /**
     * Returns an array of ordered tabbable nodes (i.e. in tab order) within the root.
     * For instance, you can provide the "tabbable" npm dependency.
     * @param {HTMLElement} root
     */
    getTabbable: import_prop_types24.default.func,
    /**
     * This prop extends the `open` prop.
     * It allows to toggle the open state without having to wait for a rerender when changing the `open` prop.
     * This prop should be memoized.
     * It can be used to support multiple focus trap mounted at the same time.
     * @default function defaultIsEnabled(): boolean {
     *   return true;
     * }
     */
    isEnabled: import_prop_types24.default.func,
    /**
     * If `true`, focus is locked.
     */
    open: import_prop_types24.default.bool.isRequired
  } : void 0;
  if (true) {
    FocusTrap["propTypes"] = (0, import_utils49.exactProp)(FocusTrap.propTypes);
  }

  // node_modules/@mui/base/FormControl/FormControl.js
  init_extends();
  var React46 = __toESM(require_react());
  var import_prop_types25 = __toESM(require_prop_types());
  var import_useControlled2 = __toESM(require_useControlled2());

  // node_modules/@mui/base/FormControl/FormControlContext.js
  var React45 = __toESM(require_react());
  var FormControlContext = /* @__PURE__ */ React45.createContext(void 0);
  if (true) {
    FormControlContext.displayName = "FormControlContext";
  }

  // node_modules/@mui/base/FormControl/formControlClasses.js
  function getFormControlUtilityClass(slot) {
    return (0, import_utils43.unstable_generateUtilityClass)("MuiFormControl", slot);
  }
  var formControlClasses = (0, import_utils42.unstable_generateUtilityClasses)("MuiFormControl", ["root", "disabled", "error", "filled", "focused", "required"]);

  // node_modules/@mui/base/FormControl/FormControl.js
  var import_composeClasses15 = __toESM(require_composeClasses3());
  var import_jsx_runtime35 = __toESM(require_jsx_runtime());
  var _excluded30 = ["defaultValue", "children", "disabled", "error", "onChange", "required", "slotProps", "slots", "value"];
  function hasValue(value) {
    return value != null && !(Array.isArray(value) && value.length === 0) && value !== "";
  }
  function useUtilityClasses15(ownerState) {
    const {
      disabled,
      error,
      filled,
      focused,
      required
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", focused && "focused", error && "error", filled && "filled", required && "required"]
    };
    return (0, import_composeClasses15.unstable_composeClasses)(slots, useClassNamesOverride(getFormControlUtilityClass));
  }
  var FormControl = /* @__PURE__ */ React46.forwardRef(function FormControl2(props, forwardedRef) {
    var _slots$root;
    const {
      defaultValue,
      children,
      disabled = false,
      error = false,
      onChange,
      required = false,
      slotProps = {},
      slots = {},
      value: incomingValue
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded30);
    const [value, setValue] = (0, import_useControlled2.default)({
      controlled: incomingValue,
      default: defaultValue,
      name: "FormControl",
      state: "value"
    });
    const filled = hasValue(value);
    const [focusedState, setFocused] = React46.useState(false);
    const focused = focusedState && !disabled;
    React46.useEffect(() => setFocused((isFocused) => disabled ? false : isFocused), [disabled]);
    const ownerState = _extends({}, props, {
      disabled,
      error,
      filled,
      focused,
      required
    });
    const childContext = React46.useMemo(() => {
      return {
        disabled,
        error,
        filled,
        focused,
        onBlur: () => {
          setFocused(false);
        },
        onChange: (event) => {
          setValue(event.target.value);
          onChange == null || onChange(event);
        },
        onFocus: () => {
          setFocused(true);
        },
        required,
        value: value != null ? value : ""
      };
    }, [disabled, error, filled, focused, onChange, required, setValue, value]);
    const classes = useUtilityClasses15(ownerState);
    const renderChildren = () => {
      if (typeof children === "function") {
        return children(childContext);
      }
      return children;
    };
    const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
    const rootProps = useSlotProps({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        ref: forwardedRef,
        children: renderChildren()
      },
      ownerState,
      className: classes.root
    });
    return /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(FormControlContext.Provider, {
      value: childContext,
      children: /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(Root, _extends({}, rootProps))
    });
  });
  true ? FormControl.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types25.default.oneOfType([import_prop_types25.default.node, import_prop_types25.default.func]),
    /**
     * Class name applied to the root element.
     */
    className: import_prop_types25.default.string,
    /**
     * @ignore
     */
    defaultValue: import_prop_types25.default.any,
    /**
     * If `true`, the label, input and helper text should be displayed in a disabled state.
     * @default false
     */
    disabled: import_prop_types25.default.bool,
    /**
     * If `true`, the label is displayed in an error state.
     * @default false
     */
    error: import_prop_types25.default.bool,
    /**
     * Callback fired when the form element's value is modified.
     */
    onChange: import_prop_types25.default.func,
    /**
     * If `true`, the label will indicate that the `input` is required.
     * @default false
     */
    required: import_prop_types25.default.bool,
    /**
     * The props used for each slot inside the FormControl.
     * @default {}
     */
    slotProps: import_prop_types25.default.shape({
      root: import_prop_types25.default.oneOfType([import_prop_types25.default.func, import_prop_types25.default.object])
    }),
    /**
     * The components used for each slot inside the FormControl.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types25.default.shape({
      root: import_prop_types25.default.elementType
    }),
    /**
     * The value of the form element.
     */
    value: import_prop_types25.default.any
  } : void 0;

  // node_modules/@mui/base/FormControl/useFormControlContext.js
  var React47 = __toESM(require_react());
  function useFormControlContext() {
    return React47.useContext(FormControlContext);
  }

  // node_modules/@mui/base/Input/Input.js
  init_extends();
  var React49 = __toESM(require_react());
  var import_prop_types26 = __toESM(require_prop_types());

  // node_modules/@mui/base/Input/inputClasses.js
  function getInputUtilityClass(slot) {
    return (0, import_utils43.unstable_generateUtilityClass)("MuiInput", slot);
  }
  var inputClasses = (0, import_utils42.unstable_generateUtilityClasses)("MuiInput", ["root", "formControl", "focused", "disabled", "error", "multiline", "input", "inputMultiline", "inputTypeSearch", "adornedStart", "adornedEnd"]);

  // node_modules/@mui/base/useInput/useInput.js
  init_extends();
  var React48 = __toESM(require_react());
  var import_utils51 = __toESM(require_utils());
  function useInput(parameters = {}) {
    const {
      defaultValue: defaultValueProp,
      disabled: disabledProp = false,
      error: errorProp = false,
      onBlur,
      onChange,
      onFocus,
      required: requiredProp = false,
      value: valueProp,
      inputRef: inputRefProp
    } = parameters;
    const formControlContext = useFormControlContext();
    let defaultValue;
    let disabled;
    let error;
    let required;
    let value;
    if (formControlContext) {
      var _formControlContext$d, _formControlContext$e, _formControlContext$r;
      defaultValue = void 0;
      disabled = (_formControlContext$d = formControlContext.disabled) != null ? _formControlContext$d : false;
      error = (_formControlContext$e = formControlContext.error) != null ? _formControlContext$e : false;
      required = (_formControlContext$r = formControlContext.required) != null ? _formControlContext$r : false;
      value = formControlContext.value;
      if (true) {
        const definedLocalProps = ["defaultValue", "disabled", "error", "required", "value"].filter((prop) => parameters[prop] !== void 0);
        if (definedLocalProps.length > 0) {
          console.warn(["MUI: You have set props on an input that is inside a FormControl.", "Set these props on a FormControl instead. Otherwise they will be ignored.", `Ignored props: ${definedLocalProps.join(", ")}`].join("\n"));
        }
      }
    } else {
      defaultValue = defaultValueProp;
      disabled = disabledProp;
      error = errorProp;
      required = requiredProp;
      value = valueProp;
    }
    const {
      current: isControlled
    } = React48.useRef(value != null);
    const handleInputRefWarning = React48.useCallback((instance) => {
      if (true) {
        if (instance && instance.nodeName !== "INPUT" && !instance.focus) {
          console.error(["MUI: You have provided a `slots.input` to the input component", "that does not correctly handle the `ref` prop.", "Make sure the `ref` prop is called with a HTMLInputElement."].join("\n"));
        }
      }
    }, []);
    const inputRef = React48.useRef(null);
    const handleInputRef = (0, import_utils51.unstable_useForkRef)(inputRef, inputRefProp, handleInputRefWarning);
    const [focused, setFocused] = React48.useState(false);
    React48.useEffect(() => {
      if (!formControlContext && disabled && focused) {
        setFocused(false);
        onBlur == null || onBlur();
      }
    }, [formControlContext, disabled, focused, onBlur]);
    const handleFocus = (otherHandlers) => (event) => {
      var _otherHandlers$onFocu;
      if (formControlContext != null && formControlContext.disabled) {
        event.stopPropagation();
        return;
      }
      (_otherHandlers$onFocu = otherHandlers.onFocus) == null || _otherHandlers$onFocu.call(otherHandlers, event);
      if (formControlContext && formControlContext.onFocus) {
        var _formControlContext$o;
        formControlContext == null || (_formControlContext$o = formControlContext.onFocus) == null || _formControlContext$o.call(formControlContext);
      } else {
        setFocused(true);
      }
    };
    const handleBlur2 = (otherHandlers) => (event) => {
      var _otherHandlers$onBlur;
      (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);
      if (formControlContext && formControlContext.onBlur) {
        formControlContext.onBlur();
      } else {
        setFocused(false);
      }
    };
    const handleChange = (otherHandlers) => (event, ...args) => {
      var _formControlContext$o2, _otherHandlers$onChan;
      if (!isControlled) {
        const element = event.target || inputRef.current;
        if (element == null) {
          throw new Error(true ? `MUI: Expected valid input target. Did you use a custom \`slots.input\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` : (0, import_utils.formatMuiErrorMessage)(17));
        }
      }
      formControlContext == null || (_formControlContext$o2 = formControlContext.onChange) == null || _formControlContext$o2.call(formControlContext, event);
      (_otherHandlers$onChan = otherHandlers.onChange) == null || _otherHandlers$onChan.call(otherHandlers, event, ...args);
    };
    const handleClick = (otherHandlers) => (event) => {
      var _otherHandlers$onClic;
      if (inputRef.current && event.currentTarget === event.target) {
        inputRef.current.focus();
      }
      (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
    };
    const getRootProps = (externalProps = {}) => {
      const propsEventHandlers = extractEventHandlers(parameters, ["onBlur", "onChange", "onFocus"]);
      const externalEventHandlers = _extends({}, propsEventHandlers, extractEventHandlers(externalProps));
      return _extends({}, externalProps, externalEventHandlers, {
        onClick: handleClick(externalEventHandlers)
      });
    };
    const getInputProps = (externalProps = {}) => {
      const propsEventHandlers = {
        onBlur,
        onChange,
        onFocus
      };
      const externalEventHandlers = _extends({}, propsEventHandlers, extractEventHandlers(externalProps));
      const mergedEventHandlers = _extends({}, externalEventHandlers, {
        onBlur: handleBlur2(externalEventHandlers),
        onChange: handleChange(externalEventHandlers),
        onFocus: handleFocus(externalEventHandlers)
      });
      return _extends({}, mergedEventHandlers, {
        "aria-invalid": error || void 0,
        defaultValue,
        value,
        required,
        disabled
      }, externalProps, {
        ref: handleInputRef
      }, mergedEventHandlers);
    };
    return {
      disabled,
      error,
      focused,
      formControlContext,
      getInputProps,
      getRootProps,
      inputRef: handleInputRef,
      required,
      value
    };
  }

  // node_modules/@mui/base/Input/Input.js
  var import_composeClasses16 = __toESM(require_composeClasses3());
  var import_jsx_runtime36 = __toESM(require_jsx_runtime());
  var import_jsx_runtime37 = __toESM(require_jsx_runtime());
  var _excluded31 = ["aria-describedby", "aria-label", "aria-labelledby", "autoComplete", "autoFocus", "className", "defaultValue", "disabled", "endAdornment", "error", "id", "multiline", "name", "onClick", "onChange", "onKeyDown", "onKeyUp", "onFocus", "onBlur", "placeholder", "readOnly", "required", "startAdornment", "value", "type", "rows", "slotProps", "slots", "minRows", "maxRows"];
  var useUtilityClasses16 = (ownerState) => {
    const {
      disabled,
      error,
      focused,
      formControlContext,
      multiline,
      startAdornment,
      endAdornment
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", error && "error", focused && "focused", Boolean(formControlContext) && "formControl", multiline && "multiline", Boolean(startAdornment) && "adornedStart", Boolean(endAdornment) && "adornedEnd"],
      input: ["input", disabled && "disabled", multiline && "multiline"]
    };
    return (0, import_composeClasses16.unstable_composeClasses)(slots, useClassNamesOverride(getInputUtilityClass));
  };
  var Input = /* @__PURE__ */ React49.forwardRef(function Input2(props, forwardedRef) {
    var _slots$root, _slots$textarea, _slots$input;
    const {
      "aria-describedby": ariaDescribedby,
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledby,
      autoComplete,
      autoFocus,
      className,
      defaultValue,
      disabled,
      endAdornment,
      error,
      id,
      multiline = false,
      name,
      onClick,
      onChange,
      onKeyDown,
      onKeyUp,
      onFocus,
      onBlur,
      placeholder,
      readOnly,
      required,
      startAdornment,
      value,
      type: typeProp,
      rows,
      slotProps = {},
      slots = {},
      minRows,
      maxRows
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded31);
    const {
      getRootProps,
      getInputProps,
      focused,
      formControlContext,
      error: errorState,
      disabled: disabledState
    } = useInput({
      disabled,
      defaultValue,
      error,
      onBlur,
      onClick,
      onChange,
      onFocus,
      required,
      value
    });
    const type = !multiline ? typeProp != null ? typeProp : "text" : void 0;
    const ownerState = _extends({}, props, {
      disabled: disabledState,
      error: errorState,
      focused,
      formControlContext,
      multiline,
      type
    });
    const classes = useUtilityClasses16(ownerState);
    const propsToForward = {
      "aria-describedby": ariaDescribedby,
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledby,
      autoComplete,
      autoFocus,
      id,
      onKeyDown,
      onKeyUp,
      name,
      placeholder,
      readOnly,
      type
    };
    const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
    const rootProps = useSlotProps({
      elementType: Root,
      getSlotProps: getRootProps,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        ref: forwardedRef
      },
      ownerState,
      className: [classes.root, className]
    });
    const InputComponent = multiline ? (_slots$textarea = slots.textarea) != null ? _slots$textarea : "textarea" : (_slots$input = slots.input) != null ? _slots$input : "input";
    const inputProps = useSlotProps({
      elementType: InputComponent,
      getSlotProps: (otherHandlers) => {
        return getInputProps(_extends({}, propsToForward, otherHandlers));
      },
      externalSlotProps: slotProps.input,
      additionalProps: _extends({
        rows: multiline ? rows : void 0
      }, multiline && !isHostComponent(InputComponent) && {
        minRows: rows || minRows,
        maxRows: rows || maxRows
      }),
      ownerState,
      className: classes.input
    });
    if (true) {
      if (multiline) {
        if (rows) {
          if (minRows || maxRows) {
            console.warn("MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.");
          }
        }
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)(Root, _extends({}, rootProps, {
      children: [startAdornment, /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(InputComponent, _extends({}, inputProps)), endAdornment]
    }));
  });
  true ? Input.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    "aria-describedby": import_prop_types26.default.string,
    /**
     * @ignore
     */
    "aria-label": import_prop_types26.default.string,
    /**
     * @ignore
     */
    "aria-labelledby": import_prop_types26.default.string,
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: import_prop_types26.default.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: import_prop_types26.default.bool,
    /**
     * Class name applied to the root element.
     */
    className: import_prop_types26.default.string,
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types26.default.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: import_prop_types26.default.bool,
    /**
     * Trailing adornment for this input.
     */
    endAdornment: import_prop_types26.default.node,
    /**
     * If `true`, the `input` will indicate an error by setting the `aria-invalid` attribute on the input and the `Mui-error` class on the root element.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: import_prop_types26.default.bool,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types26.default.string,
    /**
     * @ignore
     */
    inputRef: import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.shape({
      current: import_prop_types26.default.object
    })]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: import_prop_types26.default.number,
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: import_prop_types26.default.number,
    /**
     * If `true`, a `textarea` element is rendered.
     * @default false
     */
    multiline: import_prop_types26.default.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types26.default.string,
    /**
     * @ignore
     */
    onBlur: import_prop_types26.default.func,
    /**
     * @ignore
     */
    onChange: import_prop_types26.default.func,
    /**
     * @ignore
     */
    onClick: import_prop_types26.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types26.default.func,
    /**
     * @ignore
     */
    onKeyDown: import_prop_types26.default.func,
    /**
     * @ignore
     */
    onKeyUp: import_prop_types26.default.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: import_prop_types26.default.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: import_prop_types26.default.bool,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: import_prop_types26.default.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: import_prop_types26.default.number,
    /**
     * The props used for each slot inside the Input.
     * @default {}
     */
    slotProps: import_prop_types26.default.shape({
      input: import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object]),
      root: import_prop_types26.default.oneOfType([import_prop_types26.default.func, import_prop_types26.default.object])
    }),
    /**
     * The components used for each slot inside the InputBase.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types26.default.shape({
      input: import_prop_types26.default.elementType,
      root: import_prop_types26.default.elementType,
      textarea: import_prop_types26.default.elementType
    }),
    /**
     * Leading adornment for this input.
     */
    startAdornment: import_prop_types26.default.node,
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: import_prop_types26.default.oneOf(["button", "checkbox", "color", "date", "datetime-local", "email", "file", "hidden", "image", "month", "number", "password", "radio", "range", "reset", "search", "submit", "tel", "text", "time", "url", "week"]),
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: import_prop_types26.default.any
  } : void 0;

  // node_modules/@mui/base/Menu/Menu.js
  init_extends();
  var React63 = __toESM(require_react());
  var import_prop_types29 = __toESM(require_prop_types());
  var import_utils59 = __toESM(require_utils());

  // node_modules/@mui/base/Menu/menuClasses.js
  function getMenuUtilityClass(slot) {
    return (0, import_utils43.unstable_generateUtilityClass)("MuiMenu", slot);
  }
  var menuClasses = (0, import_utils42.unstable_generateUtilityClasses)("MuiMenu", ["root", "listbox", "expanded"]);

  // node_modules/@mui/base/useMenu/useMenu.js
  init_extends();
  var React59 = __toESM(require_react());
  var import_utils55 = __toESM(require_utils());

  // node_modules/@mui/base/useMenu/menuReducer.js
  init_extends();

  // node_modules/@mui/base/useList/useList.js
  init_extends();
  var React54 = __toESM(require_react());
  var import_utils53 = __toESM(require_utils());

  // node_modules/@mui/base/useList/listActions.types.js
  var ListActionTypes = {
    blur: "list:blur",
    focus: "list:focus",
    itemClick: "list:itemClick",
    itemHover: "list:itemHover",
    itemsChange: "list:itemsChange",
    keyDown: "list:keyDown",
    resetHighlight: "list:resetHighlight",
    textNavigation: "list:textNavigation"
  };

  // node_modules/@mui/base/useList/listReducer.js
  init_extends();
  function findValidItemToHighlight(currentIndex, lookupDirection, items, includeDisabledItems, isItemDisabled, wrapAround) {
    if (items.length === 0 || !includeDisabledItems && items.every((item, itemIndex) => isItemDisabled(item, itemIndex))) {
      return -1;
    }
    let nextFocus = currentIndex;
    for (; ; ) {
      if (!wrapAround && lookupDirection === "next" && nextFocus === items.length || !wrapAround && lookupDirection === "previous" && nextFocus === -1) {
        return -1;
      }
      const nextFocusDisabled = includeDisabledItems ? false : isItemDisabled(items[nextFocus], nextFocus);
      if (nextFocusDisabled) {
        nextFocus += lookupDirection === "next" ? 1 : -1;
        if (wrapAround) {
          nextFocus = (nextFocus + items.length) % items.length;
        }
      } else {
        return nextFocus;
      }
    }
  }
  function moveHighlight(previouslyHighlightedValue, offset3, context) {
    var _items$nextIndex;
    const {
      items,
      isItemDisabled,
      disableListWrap,
      disabledItemsFocusable,
      itemComparer,
      focusManagement
    } = context;
    const defaultHighlightedIndex = focusManagement === "DOM" ? 0 : -1;
    const maxIndex = items.length - 1;
    const previouslyHighlightedIndex = previouslyHighlightedValue == null ? -1 : items.findIndex((item) => itemComparer(item, previouslyHighlightedValue));
    let nextIndexCandidate;
    let lookupDirection;
    let wrapAround = !disableListWrap;
    switch (offset3) {
      case "reset":
        if (defaultHighlightedIndex === -1) {
          return null;
        }
        nextIndexCandidate = 0;
        lookupDirection = "next";
        wrapAround = false;
        break;
      case "start":
        nextIndexCandidate = 0;
        lookupDirection = "next";
        wrapAround = false;
        break;
      case "end":
        nextIndexCandidate = maxIndex;
        lookupDirection = "previous";
        wrapAround = false;
        break;
      default: {
        const newIndex = previouslyHighlightedIndex + offset3;
        if (newIndex < 0) {
          if (!wrapAround && previouslyHighlightedIndex !== -1 || Math.abs(offset3) > 1) {
            nextIndexCandidate = 0;
            lookupDirection = "next";
          } else {
            nextIndexCandidate = maxIndex;
            lookupDirection = "previous";
          }
        } else if (newIndex > maxIndex) {
          if (!wrapAround || Math.abs(offset3) > 1) {
            nextIndexCandidate = maxIndex;
            lookupDirection = "previous";
          } else {
            nextIndexCandidate = 0;
            lookupDirection = "next";
          }
        } else {
          nextIndexCandidate = newIndex;
          lookupDirection = offset3 >= 0 ? "next" : "previous";
        }
      }
    }
    const nextIndex = findValidItemToHighlight(nextIndexCandidate, lookupDirection, items, disabledItemsFocusable, isItemDisabled, wrapAround);
    if (nextIndex === -1 && previouslyHighlightedValue !== null && !isItemDisabled(previouslyHighlightedValue, previouslyHighlightedIndex)) {
      return previouslyHighlightedValue;
    }
    return (_items$nextIndex = items[nextIndex]) != null ? _items$nextIndex : null;
  }
  function toggleSelection(item, selectedValues, selectionMode, itemComparer) {
    if (selectionMode === "none") {
      return [];
    }
    if (selectionMode === "single") {
      if (itemComparer(selectedValues[0], item)) {
        return selectedValues;
      }
      return [item];
    }
    if (selectedValues.some((sv) => itemComparer(sv, item))) {
      return selectedValues.filter((sv) => !itemComparer(sv, item));
    }
    return [...selectedValues, item];
  }
  function handleItemSelection(item, state, context) {
    const {
      itemComparer,
      isItemDisabled,
      selectionMode,
      items
    } = context;
    const {
      selectedValues
    } = state;
    const itemIndex = items.findIndex((i) => itemComparer(item, i));
    if (isItemDisabled(item, itemIndex)) {
      return state;
    }
    const newSelectedValues = toggleSelection(item, selectedValues, selectionMode, itemComparer);
    return _extends({}, state, {
      selectedValues: newSelectedValues,
      highlightedValue: item
    });
  }
  function handleKeyDown(key, state, context) {
    const previouslySelectedValue = state.highlightedValue;
    const {
      orientation,
      pageSize: pageSize2
    } = context;
    switch (key) {
      case "Home":
        return _extends({}, state, {
          highlightedValue: moveHighlight(previouslySelectedValue, "start", context)
        });
      case "End":
        return _extends({}, state, {
          highlightedValue: moveHighlight(previouslySelectedValue, "end", context)
        });
      case "PageUp":
        return _extends({}, state, {
          highlightedValue: moveHighlight(previouslySelectedValue, -pageSize2, context)
        });
      case "PageDown":
        return _extends({}, state, {
          highlightedValue: moveHighlight(previouslySelectedValue, pageSize2, context)
        });
      case "ArrowUp":
        if (orientation !== "vertical") {
          break;
        }
        return _extends({}, state, {
          highlightedValue: moveHighlight(previouslySelectedValue, -1, context)
        });
      case "ArrowDown":
        if (orientation !== "vertical") {
          break;
        }
        return _extends({}, state, {
          highlightedValue: moveHighlight(previouslySelectedValue, 1, context)
        });
      case "ArrowLeft": {
        if (orientation === "vertical") {
          break;
        }
        const offset3 = orientation === "horizontal-ltr" ? -1 : 1;
        return _extends({}, state, {
          highlightedValue: moveHighlight(previouslySelectedValue, offset3, context)
        });
      }
      case "ArrowRight": {
        if (orientation === "vertical") {
          break;
        }
        const offset3 = orientation === "horizontal-ltr" ? 1 : -1;
        return _extends({}, state, {
          highlightedValue: moveHighlight(previouslySelectedValue, offset3, context)
        });
      }
      case "Enter":
      case " ":
        if (state.highlightedValue === null) {
          return state;
        }
        return handleItemSelection(state.highlightedValue, state, context);
      default:
        break;
    }
    return state;
  }
  function handleBlur(state, context) {
    if (context.focusManagement === "DOM") {
      return state;
    }
    return _extends({}, state, {
      highlightedValue: null
    });
  }
  function textCriteriaMatches(nextFocus, searchString, stringifyItem) {
    var _stringifyItem;
    const text = (_stringifyItem = stringifyItem(nextFocus)) == null ? void 0 : _stringifyItem.trim().toLowerCase();
    if (!text || text.length === 0) {
      return false;
    }
    return text.indexOf(searchString) === 0;
  }
  function handleTextNavigation(state, searchString, context) {
    const {
      items,
      isItemDisabled,
      disabledItemsFocusable,
      getItemAsString
    } = context;
    const startWithCurrentItem = searchString.length > 1;
    let nextItem3 = startWithCurrentItem ? state.highlightedValue : moveHighlight(state.highlightedValue, 1, context);
    for (let index3 = 0; index3 < items.length; index3 += 1) {
      if (!nextItem3 || !startWithCurrentItem && state.highlightedValue === nextItem3) {
        return state;
      }
      if (textCriteriaMatches(nextItem3, searchString, getItemAsString) && (!isItemDisabled(nextItem3, items.indexOf(nextItem3)) || disabledItemsFocusable)) {
        return _extends({}, state, {
          highlightedValue: nextItem3
        });
      }
      nextItem3 = moveHighlight(nextItem3, 1, context);
    }
    return state;
  }
  function handleItemsChange(items, previousItems, state, context) {
    var _state$selectedValues;
    const {
      itemComparer,
      focusManagement
    } = context;
    let newHighlightedValue = null;
    if (state.highlightedValue != null) {
      var _items$find;
      newHighlightedValue = (_items$find = items.find((item) => itemComparer(item, state.highlightedValue))) != null ? _items$find : null;
    } else if (focusManagement === "DOM" && previousItems.length === 0) {
      newHighlightedValue = moveHighlight(null, "reset", context);
    }
    const selectedValues = (_state$selectedValues = state.selectedValues) != null ? _state$selectedValues : [];
    const newSelectedValues = selectedValues.filter((selectedValue) => items.some((item) => itemComparer(item, selectedValue)));
    return _extends({}, state, {
      highlightedValue: newHighlightedValue,
      selectedValues: newSelectedValues
    });
  }
  function handleResetHighlight(state, context) {
    return _extends({}, state, {
      highlightedValue: moveHighlight(null, "reset", context)
    });
  }
  function listReducer(state, action) {
    const {
      type,
      context
    } = action;
    switch (type) {
      case ListActionTypes.keyDown:
        return handleKeyDown(action.key, state, context);
      case ListActionTypes.itemClick:
        return handleItemSelection(action.item, state, context);
      case ListActionTypes.blur:
        return handleBlur(state, context);
      case ListActionTypes.textNavigation:
        return handleTextNavigation(state, action.searchString, context);
      case ListActionTypes.itemsChange:
        return handleItemsChange(action.items, action.previousItems, state, context);
      case ListActionTypes.resetHighlight:
        return handleResetHighlight(state, context);
      default:
        return state;
    }
  }

  // node_modules/@mui/base/useList/useListChangeNotifiers.js
  var React51 = __toESM(require_react());

  // node_modules/@mui/base/utils/useMessageBus.js
  var React50 = __toESM(require_react());
  function createMessageBus() {
    const listeners = /* @__PURE__ */ new Map();
    function subscribe(topic, callback) {
      let topicListeners = listeners.get(topic);
      if (!topicListeners) {
        topicListeners = /* @__PURE__ */ new Set([callback]);
        listeners.set(topic, topicListeners);
      } else {
        topicListeners.add(callback);
      }
      return () => {
        topicListeners.delete(callback);
        if (topicListeners.size === 0) {
          listeners.delete(topic);
        }
      };
    }
    function publish(topic, ...args) {
      const topicListeners = listeners.get(topic);
      if (topicListeners) {
        topicListeners.forEach((callback) => callback(...args));
      }
    }
    return {
      subscribe,
      publish
    };
  }
  function useMessageBus() {
    const bus = React50.useRef();
    if (!bus.current) {
      bus.current = createMessageBus();
    }
    return bus.current;
  }

  // node_modules/@mui/base/useList/useListChangeNotifiers.js
  var SELECTION_CHANGE_TOPIC = "select:change-selection";
  var HIGHLIGHT_CHANGE_TOPIC = "select:change-highlight";
  function useListChangeNotifiers() {
    const messageBus = useMessageBus();
    const notifySelectionChanged = React51.useCallback((newSelectedItems) => {
      messageBus.publish(SELECTION_CHANGE_TOPIC, newSelectedItems);
    }, [messageBus]);
    const notifyHighlightChanged = React51.useCallback((newHighlightedItem) => {
      messageBus.publish(HIGHLIGHT_CHANGE_TOPIC, newHighlightedItem);
    }, [messageBus]);
    const registerSelectionChangeHandler = React51.useCallback((handler) => {
      return messageBus.subscribe(SELECTION_CHANGE_TOPIC, handler);
    }, [messageBus]);
    const registerHighlightChangeHandler = React51.useCallback((handler) => {
      return messageBus.subscribe(HIGHLIGHT_CHANGE_TOPIC, handler);
    }, [messageBus]);
    return {
      notifySelectionChanged,
      notifyHighlightChanged,
      registerSelectionChangeHandler,
      registerHighlightChangeHandler
    };
  }

  // node_modules/@mui/base/utils/useLatest.js
  var React52 = __toESM(require_react());
  function useLatest(value, deps) {
    const ref = React52.useRef(value);
    React52.useEffect(() => {
      ref.current = value;
    }, deps != null ? deps : [value]);
    return ref;
  }

  // node_modules/@mui/base/utils/useTextNavigation.js
  var React53 = __toESM(require_react());
  var TEXT_NAVIGATION_RESET_TIMEOUT = 500;
  function useTextNavigation(callback) {
    const textCriteriaRef = React53.useRef({
      searchString: "",
      lastTime: null
    });
    return React53.useCallback((event) => {
      if (event.key.length === 1 && event.key !== " ") {
        const textCriteria = textCriteriaRef.current;
        const lowerKey = event.key.toLowerCase();
        const currentTime = performance.now();
        if (textCriteria.searchString.length > 0 && textCriteria.lastTime && currentTime - textCriteria.lastTime > TEXT_NAVIGATION_RESET_TIMEOUT) {
          textCriteria.searchString = lowerKey;
        } else if (textCriteria.searchString.length !== 1 || lowerKey !== textCriteria.searchString) {
          textCriteria.searchString += lowerKey;
        }
        textCriteria.lastTime = currentTime;
        callback(textCriteria.searchString, event);
      }
    }, [callback]);
  }

  // node_modules/@mui/base/useList/useList.js
  var EMPTY_OBJECT2 = {};
  var NOOP2 = () => {
  };
  var defaultItemComparer = (optionA, optionB) => optionA === optionB;
  var defaultIsItemDisabled = () => false;
  var defaultItemStringifier = (item) => typeof item === "string" ? item : String(item);
  var defaultGetInitialState = () => ({
    highlightedValue: null,
    selectedValues: []
  });
  function useList(params) {
    const {
      controlledProps = EMPTY_OBJECT2,
      disabledItemsFocusable = false,
      disableListWrap = false,
      focusManagement = "activeDescendant",
      getInitialState = defaultGetInitialState,
      getItemDomElement,
      getItemId,
      isItemDisabled = defaultIsItemDisabled,
      rootRef: externalListRef,
      onStateChange = NOOP2,
      items,
      itemComparer = defaultItemComparer,
      getItemAsString = defaultItemStringifier,
      onChange,
      onHighlightChange,
      onItemsChange,
      orientation = "vertical",
      pageSize: pageSize2 = 5,
      reducerActionContext = EMPTY_OBJECT2,
      selectionMode = "single",
      stateReducer: externalReducer
    } = params;
    if (true) {
      if (focusManagement === "DOM" && getItemDomElement == null) {
        throw new Error("useList: The `getItemDomElement` prop is required when using the `DOM` focus management.");
      }
      if (focusManagement === "activeDescendant" && getItemId == null) {
        throw new Error("useList: The `getItemId` prop is required when using the `activeDescendant` focus management.");
      }
    }
    const listRef = React54.useRef(null);
    const handleRef = (0, import_utils53.unstable_useForkRef)(externalListRef, listRef);
    const handleHighlightChange = React54.useCallback((event, value, reason) => {
      onHighlightChange == null || onHighlightChange(event, value, reason);
      if (focusManagement === "DOM" && value != null && (reason === ListActionTypes.itemClick || reason === ListActionTypes.keyDown || reason === ListActionTypes.textNavigation)) {
        var _getItemDomElement;
        getItemDomElement == null || (_getItemDomElement = getItemDomElement(value)) == null || _getItemDomElement.focus();
      }
    }, [getItemDomElement, onHighlightChange, focusManagement]);
    const stateComparers = React54.useMemo(() => ({
      highlightedValue: itemComparer,
      selectedValues: (valuesArray1, valuesArray2) => areArraysEqual(valuesArray1, valuesArray2, itemComparer)
    }), [itemComparer]);
    const handleStateChange = React54.useCallback((event, field, value, reason, state2) => {
      onStateChange == null || onStateChange(event, field, value, reason, state2);
      switch (field) {
        case "highlightedValue":
          handleHighlightChange(event, value, reason);
          break;
        case "selectedValues":
          onChange == null || onChange(event, value, reason);
          break;
        default:
          break;
      }
    }, [handleHighlightChange, onChange, onStateChange]);
    const listActionContext = React54.useMemo(() => {
      return {
        disabledItemsFocusable,
        disableListWrap,
        focusManagement,
        isItemDisabled,
        itemComparer,
        items,
        getItemAsString,
        onHighlightChange: handleHighlightChange,
        orientation,
        pageSize: pageSize2,
        selectionMode,
        stateComparers
      };
    }, [disabledItemsFocusable, disableListWrap, focusManagement, isItemDisabled, itemComparer, items, getItemAsString, handleHighlightChange, orientation, pageSize2, selectionMode, stateComparers]);
    const initialState = getInitialState();
    const reducer = externalReducer != null ? externalReducer : listReducer;
    const actionContext = React54.useMemo(() => _extends({}, reducerActionContext, listActionContext), [reducerActionContext, listActionContext]);
    const [state, dispatch] = useControllableReducer({
      reducer,
      actionContext,
      initialState,
      controlledProps,
      stateComparers,
      onStateChange: handleStateChange
    });
    const {
      highlightedValue,
      selectedValues
    } = state;
    const handleTextNavigation2 = useTextNavigation((searchString, event) => dispatch({
      type: ListActionTypes.textNavigation,
      event,
      searchString
    }));
    const latestSelectedValues = useLatest(selectedValues);
    const latestHighlightedValue = useLatest(highlightedValue);
    const previousItems = React54.useRef([]);
    React54.useEffect(() => {
      if (areArraysEqual(previousItems.current, items, itemComparer)) {
        return;
      }
      dispatch({
        type: ListActionTypes.itemsChange,
        event: null,
        items,
        previousItems: previousItems.current
      });
      previousItems.current = items;
      onItemsChange == null || onItemsChange(items);
    }, [items, itemComparer, dispatch, onItemsChange]);
    const {
      notifySelectionChanged,
      notifyHighlightChanged,
      registerHighlightChangeHandler,
      registerSelectionChangeHandler
    } = useListChangeNotifiers();
    React54.useEffect(() => {
      notifySelectionChanged(selectedValues);
    }, [selectedValues, notifySelectionChanged]);
    React54.useEffect(() => {
      notifyHighlightChanged(highlightedValue);
    }, [highlightedValue, notifyHighlightChanged]);
    const createHandleKeyDown = (externalHandlers) => (event) => {
      var _externalHandlers$onK;
      (_externalHandlers$onK = externalHandlers.onKeyDown) == null || _externalHandlers$onK.call(externalHandlers, event);
      if (event.defaultMuiPrevented) {
        return;
      }
      const keysToPreventDefault = ["Home", "End", "PageUp", "PageDown"];
      if (orientation === "vertical") {
        keysToPreventDefault.push("ArrowUp", "ArrowDown");
      } else {
        keysToPreventDefault.push("ArrowLeft", "ArrowRight");
      }
      if (focusManagement === "activeDescendant") {
        keysToPreventDefault.push(" ", "Enter");
      }
      if (keysToPreventDefault.includes(event.key)) {
        event.preventDefault();
      }
      dispatch({
        type: ListActionTypes.keyDown,
        key: event.key,
        event
      });
      handleTextNavigation2(event);
    };
    const createHandleBlur = (externalHandlers) => (event) => {
      var _externalHandlers$onB, _listRef$current;
      (_externalHandlers$onB = externalHandlers.onBlur) == null || _externalHandlers$onB.call(externalHandlers, event);
      if (event.defaultMuiPrevented) {
        return;
      }
      if ((_listRef$current = listRef.current) != null && _listRef$current.contains(event.relatedTarget)) {
        return;
      }
      dispatch({
        type: ListActionTypes.blur,
        event
      });
    };
    const getRootProps = (externalProps = {}) => {
      const externalEventHandlers = extractEventHandlers(externalProps);
      return _extends({}, externalProps, {
        "aria-activedescendant": focusManagement === "activeDescendant" && highlightedValue != null ? getItemId(highlightedValue) : void 0,
        tabIndex: focusManagement === "DOM" ? -1 : 0,
        ref: handleRef
      }, externalEventHandlers, {
        onBlur: createHandleBlur(externalEventHandlers),
        onKeyDown: createHandleKeyDown(externalEventHandlers)
      });
    };
    const getItemState = React54.useCallback((item) => {
      var _latestSelectedValues;
      const index3 = items.findIndex((i) => itemComparer(i, item));
      const selected = ((_latestSelectedValues = latestSelectedValues.current) != null ? _latestSelectedValues : []).some((value) => value != null && itemComparer(item, value));
      const disabled = isItemDisabled(item, index3);
      const highlighted = latestHighlightedValue.current != null && itemComparer(item, latestHighlightedValue.current);
      const focusable = focusManagement === "DOM";
      return {
        disabled,
        focusable,
        highlighted,
        index: index3,
        selected
      };
    }, [items, isItemDisabled, itemComparer, latestSelectedValues, latestHighlightedValue, focusManagement]);
    const contextValue = React54.useMemo(() => ({
      dispatch,
      getItemState,
      registerHighlightChangeHandler,
      registerSelectionChangeHandler
    }), [dispatch, getItemState, registerHighlightChangeHandler, registerSelectionChangeHandler]);
    React54.useDebugValue({
      state
    });
    return {
      contextValue,
      dispatch,
      getRootProps,
      rootRef: handleRef,
      state
    };
  }

  // node_modules/@mui/base/useList/useListItem.js
  init_extends();
  var React57 = __toESM(require_react());
  var import_utils54 = __toESM(require_utils());

  // node_modules/@mui/base/utils/useForcedRerendering.js
  var React55 = __toESM(require_react());
  function useForcedRerendering() {
    const [, setState] = React55.useState({});
    return React55.useCallback(() => {
      setState({});
    }, []);
  }

  // node_modules/@mui/base/useList/ListContext.js
  var React56 = __toESM(require_react());
  var ListContext = /* @__PURE__ */ React56.createContext(null);
  if (true) {
    ListContext.displayName = "ListContext";
  }

  // node_modules/@mui/base/useList/useListItem.js
  function useListItem(parameters) {
    const {
      handlePointerOverEvents = false,
      item,
      rootRef: externalRef
    } = parameters;
    const itemRef = React57.useRef(null);
    const handleRef = (0, import_utils54.unstable_useForkRef)(itemRef, externalRef);
    const listContext = React57.useContext(ListContext);
    if (!listContext) {
      throw new Error("useListItem must be used within a ListProvider");
    }
    const {
      dispatch,
      getItemState,
      registerHighlightChangeHandler,
      registerSelectionChangeHandler
    } = listContext;
    const {
      highlighted,
      selected,
      focusable
    } = getItemState(item);
    const rerender = useForcedRerendering();
    (0, import_utils54.unstable_useEnhancedEffect)(() => {
      function updateHighlightedState(highlightedItem) {
        if (highlightedItem === item && !highlighted) {
          rerender();
        } else if (highlightedItem !== item && highlighted) {
          rerender();
        }
      }
      return registerHighlightChangeHandler(updateHighlightedState);
    });
    (0, import_utils54.unstable_useEnhancedEffect)(() => {
      function updateSelectedState(selectedItems) {
        if (!selected) {
          if (selectedItems.includes(item)) {
            rerender();
          }
        } else if (!selectedItems.includes(item)) {
          rerender();
        }
      }
      return registerSelectionChangeHandler(updateSelectedState);
    }, [registerSelectionChangeHandler, rerender, selected, item]);
    const createHandleClick = React57.useCallback((externalHandlers) => (event) => {
      var _externalHandlers$onC;
      (_externalHandlers$onC = externalHandlers.onClick) == null || _externalHandlers$onC.call(externalHandlers, event);
      if (event.defaultPrevented) {
        return;
      }
      dispatch({
        type: ListActionTypes.itemClick,
        item,
        event
      });
    }, [dispatch, item]);
    const createHandlePointerOver = React57.useCallback((externalHandlers) => (event) => {
      var _externalHandlers$onM;
      (_externalHandlers$onM = externalHandlers.onMouseOver) == null || _externalHandlers$onM.call(externalHandlers, event);
      if (event.defaultPrevented) {
        return;
      }
      dispatch({
        type: ListActionTypes.itemHover,
        item,
        event
      });
    }, [dispatch, item]);
    let tabIndex;
    if (focusable) {
      tabIndex = highlighted ? 0 : -1;
    }
    const getRootProps = (externalProps = {}) => {
      const externalEventHandlers = extractEventHandlers(externalProps);
      return _extends({}, externalProps, {
        onClick: createHandleClick(externalEventHandlers),
        onPointerOver: handlePointerOverEvents ? createHandlePointerOver(externalEventHandlers) : void 0,
        ref: handleRef,
        tabIndex
      });
    };
    return {
      getRootProps,
      highlighted,
      rootRef: handleRef,
      selected
    };
  }

  // node_modules/@mui/base/useMenu/menuReducer.js
  function menuReducer(state, action) {
    if (action.type === ListActionTypes.itemHover) {
      return state;
    }
    const newState = listReducer(state, action);
    if (newState.highlightedValue === null && action.context.items.length > 0) {
      return _extends({}, newState, {
        highlightedValue: action.context.items[0]
      });
    }
    if (action.type === ListActionTypes.keyDown) {
      if (action.event.key === "Escape") {
        return _extends({}, newState, {
          open: false
        });
      }
    }
    if (action.type === ListActionTypes.blur) {
      var _action$context$listb;
      if (!((_action$context$listb = action.context.listboxRef.current) != null && _action$context$listb.contains(action.event.relatedTarget))) {
        var _action$context$listb2, _action$event$related;
        const listboxId = (_action$context$listb2 = action.context.listboxRef.current) == null ? void 0 : _action$context$listb2.getAttribute("id");
        const controlledBy = (_action$event$related = action.event.relatedTarget) == null ? void 0 : _action$event$related.getAttribute("aria-controls");
        if (listboxId && controlledBy && listboxId === controlledBy) {
          return newState;
        }
        return _extends({}, newState, {
          open: false,
          highlightedValue: action.context.items[0]
        });
      }
    }
    return newState;
  }

  // node_modules/@mui/base/utils/useCompound.js
  var React58 = __toESM(require_react());
  var CompoundComponentContext = /* @__PURE__ */ React58.createContext(null);
  CompoundComponentContext.displayName = "CompoundComponentContext";
  function sortSubitems(subitems) {
    const subitemsArray = Array.from(subitems.keys()).map((key) => {
      const subitem = subitems.get(key);
      return {
        key,
        subitem
      };
    });
    subitemsArray.sort((a, b) => {
      const aNode = a.subitem.ref.current;
      const bNode = b.subitem.ref.current;
      if (aNode === null || bNode === null || aNode === bNode) {
        return 0;
      }
      return aNode.compareDocumentPosition(bNode) & Node.DOCUMENT_POSITION_PRECEDING ? 1 : -1;
    });
    return new Map(subitemsArray.map((item) => [item.key, item.subitem]));
  }
  function useCompoundParent() {
    const [subitems, setSubitems] = React58.useState(/* @__PURE__ */ new Map());
    const subitemKeys = React58.useRef(/* @__PURE__ */ new Set());
    const deregisterItem = React58.useCallback(function deregisterItem2(id) {
      subitemKeys.current.delete(id);
      setSubitems((previousState) => {
        const newState = new Map(previousState);
        newState.delete(id);
        return newState;
      });
    }, []);
    const registerItem = React58.useCallback(function registerItem2(id, item) {
      let providedOrGeneratedId;
      if (typeof id === "function") {
        providedOrGeneratedId = id(subitemKeys.current);
      } else {
        providedOrGeneratedId = id;
      }
      subitemKeys.current.add(providedOrGeneratedId);
      setSubitems((previousState) => {
        const newState = new Map(previousState);
        newState.set(providedOrGeneratedId, item);
        return newState;
      });
      return {
        id: providedOrGeneratedId,
        deregister: () => deregisterItem(providedOrGeneratedId)
      };
    }, [deregisterItem]);
    const sortedSubitems = React58.useMemo(() => sortSubitems(subitems), [subitems]);
    const getItemIndex = React58.useCallback(function getItemIndex2(id) {
      return Array.from(sortedSubitems.keys()).indexOf(id);
    }, [sortedSubitems]);
    const contextValue = React58.useMemo(() => ({
      getItemIndex,
      registerItem,
      totalSubitemCount: subitems.size
    }), [getItemIndex, registerItem, subitems.size]);
    return {
      contextValue,
      subitems: sortedSubitems
    };
  }

  // node_modules/@mui/base/utils/combineHooksSlotProps.js
  init_extends();
  function combineHooksSlotProps(getFirstProps, getSecondProps) {
    return function getCombinedProps(external = {}) {
      const firstResult = _extends({}, external, getFirstProps(external));
      const result = _extends({}, firstResult, getSecondProps(firstResult));
      return result;
    };
  }

  // node_modules/@mui/base/useMenu/useMenu.js
  var FALLBACK_MENU_CONTEXT = {
    dispatch: () => {
    },
    popupId: "",
    registerPopup: () => {
    },
    registerTrigger: () => {
    },
    state: {
      open: true
    },
    triggerElement: null
  };
  function useMenu(parameters = {}) {
    var _useId, _React$useContext;
    const {
      listboxRef: listboxRefProp,
      onItemsChange,
      id: idParam
    } = parameters;
    const rootRef = React59.useRef(null);
    const handleRef = (0, import_utils55.unstable_useForkRef)(rootRef, listboxRefProp);
    const listboxId = (_useId = (0, import_utils55.unstable_useId)(idParam)) != null ? _useId : "";
    const {
      state: {
        open
      },
      dispatch: menuDispatch,
      triggerElement,
      registerPopup
    } = (_React$useContext = React59.useContext(DropdownContext)) != null ? _React$useContext : FALLBACK_MENU_CONTEXT;
    const isInitiallyOpen = React59.useRef(open);
    const {
      subitems,
      contextValue: compoundComponentContextValue
    } = useCompoundParent();
    const subitemKeys = React59.useMemo(() => Array.from(subitems.keys()), [subitems]);
    const getItemDomElement = React59.useCallback((itemId) => {
      var _subitems$get$ref$cur, _subitems$get;
      if (itemId == null) {
        return null;
      }
      return (_subitems$get$ref$cur = (_subitems$get = subitems.get(itemId)) == null ? void 0 : _subitems$get.ref.current) != null ? _subitems$get$ref$cur : null;
    }, [subitems]);
    const {
      dispatch: listDispatch,
      getRootProps: getListRootProps,
      contextValue: listContextValue,
      state: {
        highlightedValue
      },
      rootRef: mergedListRef
    } = useList({
      disabledItemsFocusable: true,
      focusManagement: "DOM",
      getItemDomElement,
      getInitialState: () => ({
        selectedValues: [],
        highlightedValue: null
      }),
      isItemDisabled: (id) => {
        var _subitems$get2;
        return (subitems == null || (_subitems$get2 = subitems.get(id)) == null ? void 0 : _subitems$get2.disabled) || false;
      },
      items: subitemKeys,
      getItemAsString: (id) => {
        var _subitems$get3, _subitems$get4;
        return ((_subitems$get3 = subitems.get(id)) == null ? void 0 : _subitems$get3.label) || ((_subitems$get4 = subitems.get(id)) == null || (_subitems$get4 = _subitems$get4.ref.current) == null ? void 0 : _subitems$get4.innerText);
      },
      rootRef: handleRef,
      onItemsChange,
      reducerActionContext: {
        listboxRef: rootRef
      },
      selectionMode: "none",
      stateReducer: menuReducer
    });
    (0, import_utils55.unstable_useEnhancedEffect)(() => {
      registerPopup(listboxId);
    }, [listboxId, registerPopup]);
    React59.useEffect(() => {
      if (open && highlightedValue === subitemKeys[0] && !isInitiallyOpen.current) {
        var _subitems$get5;
        (_subitems$get5 = subitems.get(subitemKeys[0])) == null || (_subitems$get5 = _subitems$get5.ref) == null || (_subitems$get5 = _subitems$get5.current) == null || _subitems$get5.focus();
      }
    }, [open, highlightedValue, subitems, subitemKeys]);
    React59.useEffect(() => {
      var _rootRef$current;
      if ((_rootRef$current = rootRef.current) != null && _rootRef$current.contains(document.activeElement) && highlightedValue !== null) {
        var _subitems$get6;
        subitems == null || (_subitems$get6 = subitems.get(highlightedValue)) == null || (_subitems$get6 = _subitems$get6.ref.current) == null || _subitems$get6.focus();
      }
    }, [highlightedValue, subitems]);
    const createHandleBlur = (otherHandlers) => (event) => {
      var _otherHandlers$onBlur, _rootRef$current2;
      (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);
      if (event.defaultMuiPrevented) {
        return;
      }
      if ((_rootRef$current2 = rootRef.current) != null && _rootRef$current2.contains(event.relatedTarget) || event.relatedTarget === triggerElement) {
        return;
      }
      menuDispatch({
        type: DropdownActionTypes.blur,
        event
      });
    };
    const createHandleKeyDown = (otherHandlers) => (event) => {
      var _otherHandlers$onKeyD;
      (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);
      if (event.defaultMuiPrevented) {
        return;
      }
      if (event.key === "Escape") {
        menuDispatch({
          type: DropdownActionTypes.escapeKeyDown,
          event
        });
      }
    };
    const getOwnListboxHandlers = (otherHandlers = {}) => ({
      onBlur: createHandleBlur(otherHandlers),
      onKeyDown: createHandleKeyDown(otherHandlers)
    });
    const getListboxProps = (externalProps = {}) => {
      const getCombinedRootProps = combineHooksSlotProps(getOwnListboxHandlers, getListRootProps);
      const externalEventHandlers = extractEventHandlers(externalProps);
      return _extends({}, externalProps, externalEventHandlers, getCombinedRootProps(externalEventHandlers), {
        id: listboxId,
        role: "menu"
      });
    };
    React59.useDebugValue({
      subitems,
      highlightedValue
    });
    return {
      contextValue: _extends({}, compoundComponentContextValue, listContextValue),
      dispatch: listDispatch,
      getListboxProps,
      highlightedValue,
      listboxRef: mergedListRef,
      menuItems: subitems,
      open,
      triggerElement
    };
  }

  // node_modules/@mui/base/useMenu/MenuProvider.js
  var React60 = __toESM(require_react());
  var import_jsx_runtime38 = __toESM(require_jsx_runtime());
  function MenuProvider(props) {
    const {
      value,
      children
    } = props;
    const {
      dispatch,
      getItemIndex,
      getItemState,
      registerHighlightChangeHandler,
      registerSelectionChangeHandler,
      registerItem,
      totalSubitemCount
    } = value;
    const listContextValue = React60.useMemo(() => ({
      dispatch,
      getItemState,
      getItemIndex,
      registerHighlightChangeHandler,
      registerSelectionChangeHandler
    }), [dispatch, getItemIndex, getItemState, registerHighlightChangeHandler, registerSelectionChangeHandler]);
    const compoundComponentContextValue = React60.useMemo(() => ({
      getItemIndex,
      registerItem,
      totalSubitemCount
    }), [registerItem, getItemIndex, totalSubitemCount]);
    return /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(CompoundComponentContext.Provider, {
      value: compoundComponentContextValue,
      children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(ListContext.Provider, {
        value: listContextValue,
        children
      })
    });
  }

  // node_modules/@mui/base/Menu/Menu.js
  var import_composeClasses18 = __toESM(require_composeClasses3());

  // node_modules/@mui/base/Popper/Popper.js
  init_extends();
  var React62 = __toESM(require_react());
  var import_utils57 = __toESM(require_utils());

  // node_modules/@popperjs/core/lib/enums.js
  var top = "top";
  var bottom = "bottom";
  var right = "right";
  var left = "left";
  var auto = "auto";
  var basePlacements = [top, bottom, right, left];
  var start = "start";
  var end = "end";
  var clippingParents = "clippingParents";
  var viewport = "viewport";
  var popper = "popper";
  var reference = "reference";
  var variationPlacements = /* @__PURE__ */ basePlacements.reduce(function(acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements = /* @__PURE__ */ [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []);
  var beforeRead = "beforeRead";
  var read = "read";
  var afterRead = "afterRead";
  var beforeMain = "beforeMain";
  var main = "main";
  var afterMain = "afterMain";
  var beforeWrite = "beforeWrite";
  var write = "write";
  var afterWrite = "afterWrite";
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  // node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
  function getNodeName(element) {
    return element ? (element.nodeName || "").toLowerCase() : null;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getWindow.js
  function getWindow(node2) {
    if (node2 == null) {
      return window;
    }
    if (node2.toString() !== "[object Window]") {
      var ownerDocument8 = node2.ownerDocument;
      return ownerDocument8 ? ownerDocument8.defaultView || window : window;
    }
    return node2;
  }

  // node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
  function isElement(node2) {
    var OwnElement = getWindow(node2).Element;
    return node2 instanceof OwnElement || node2 instanceof Element;
  }
  function isHTMLElement(node2) {
    var OwnElement = getWindow(node2).HTMLElement;
    return node2 instanceof OwnElement || node2 instanceof HTMLElement;
  }
  function isShadowRoot(node2) {
    if (typeof ShadowRoot === "undefined") {
      return false;
    }
    var OwnElement = getWindow(node2).ShadowRoot;
    return node2 instanceof OwnElement || node2 instanceof ShadowRoot;
  }

  // node_modules/@popperjs/core/lib/modifiers/applyStyles.js
  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function(name) {
      var style = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name];
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function(name2) {
        var value = attributes[name2];
        if (value === false) {
          element.removeAttribute(name2);
        } else {
          element.setAttribute(name2, value === true ? "" : value);
        }
      });
    });
  }
  function effect(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: "0",
        top: "0",
        margin: "0"
      },
      arrow: {
        position: "absolute"
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;
    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }
    return function() {
      Object.keys(state.elements).forEach(function(name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
        var style = styleProperties.reduce(function(style2, property) {
          style2[property] = "";
          return style2;
        }, {});
        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }
        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function(attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  }
  var applyStyles_default = {
    name: "applyStyles",
    enabled: true,
    phase: "write",
    fn: applyStyles,
    effect,
    requires: ["computeStyles"]
  };

  // node_modules/@popperjs/core/lib/utils/getBasePlacement.js
  function getBasePlacement(placement) {
    return placement.split("-")[0];
  }

  // node_modules/@popperjs/core/lib/utils/math.js
  var max = Math.max;
  var min = Math.min;
  var round2 = Math.round;

  // node_modules/@popperjs/core/lib/utils/userAgent.js
  function getUAString() {
    var uaData = navigator.userAgentData;
    if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
      return uaData.brands.map(function(item) {
        return item.brand + "/" + item.version;
      }).join(" ");
    }
    return navigator.userAgent;
  }

  // node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js
  function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test(getUAString());
  }

  // node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
  function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;
    if (includeScale && isHTMLElement(element)) {
      scaleX = element.offsetWidth > 0 ? round2(clientRect.width) / element.offsetWidth || 1 : 1;
      scaleY = element.offsetHeight > 0 ? round2(clientRect.height) / element.offsetHeight || 1 : 1;
    }
    var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
    var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width = clientRect.width / scaleX;
    var height = clientRect.height / scaleY;
    return {
      width,
      height,
      top: y,
      right: x + width,
      bottom: y + height,
      left: x,
      x,
      y
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element);
    var width = element.offsetWidth;
    var height = element.offsetHeight;
    if (Math.abs(clientRect.width - width) <= 1) {
      width = clientRect.width;
    }
    if (Math.abs(clientRect.height - height) <= 1) {
      height = clientRect.height;
    }
    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width,
      height
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/contains.js
  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode();
    if (parent.contains(child)) {
      return true;
    } else if (rootNode && isShadowRoot(rootNode)) {
      var next2 = child;
      do {
        if (next2 && parent.isSameNode(next2)) {
          return true;
        }
        next2 = next2.parentNode || next2.host;
      } while (next2);
    }
    return false;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
  function getComputedStyle(element) {
    return getWindow(element).getComputedStyle(element);
  }

  // node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
  function isTableElement(element) {
    return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
  function getDocumentElement(element) {
    return ((isElement(element) ? element.ownerDocument : (
      // $FlowFixMe[prop-missing]
      element.document
    )) || window.document).documentElement;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
  function getParentNode(element) {
    if (getNodeName(element) === "html") {
      return element;
    }
    return (
      // this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || // DOM Element detected
      (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element)
    );
  }

  // node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle(element).position === "fixed") {
      return null;
    }
    return element.offsetParent;
  }
  function getContainingBlock(element) {
    var isFirefox = /firefox/i.test(getUAString());
    var isIE = /Trident/i.test(getUAString());
    if (isIE && isHTMLElement(element)) {
      var elementCss = getComputedStyle(element);
      if (elementCss.position === "fixed") {
        return null;
      }
    }
    var currentNode = getParentNode(element);
    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }
    while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
      var css7 = getComputedStyle(currentNode);
      if (css7.transform !== "none" || css7.perspective !== "none" || css7.contain === "paint" || ["transform", "perspective"].indexOf(css7.willChange) !== -1 || isFirefox && css7.willChange === "filter" || isFirefox && css7.filter && css7.filter !== "none") {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }
    return null;
  }
  function getOffsetParent(element) {
    var window2 = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);
    while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
      offsetParent = getTrueOffsetParent(offsetParent);
    }
    if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static")) {
      return window2;
    }
    return offsetParent || getContainingBlock(element) || window2;
  }

  // node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
  function getMainAxisFromPlacement(placement) {
    return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
  }

  // node_modules/@popperjs/core/lib/utils/within.js
  function within(min3, value, max3) {
    return max(min3, min(value, max3));
  }
  function withinMaxClamp(min3, value, max3) {
    var v = within(min3, value, max3);
    return v > max3 ? max3 : v;
  }

  // node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  // node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  // node_modules/@popperjs/core/lib/utils/expandToHashMap.js
  function expandToHashMap(value, keys) {
    return keys.reduce(function(hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  // node_modules/@popperjs/core/lib/modifiers/arrow.js
  var toPaddingObject = function toPaddingObject2(padding, state) {
    padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding;
    return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  };
  function arrow(_ref) {
    var _state$modifiersData$;
    var state = _ref.state, name = _ref.name, options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? "height" : "width";
    if (!arrowElement || !popperOffsets2) {
      return;
    }
    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === "y" ? top : left;
    var maxProp = axis === "y" ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
    var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2;
    var min3 = paddingObject[minProp];
    var max3 = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset3 = within(min3, center, max3);
    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset3, _state$modifiersData$.centerOffset = offset3 - center, _state$modifiersData$);
  }
  function effect2(_ref2) {
    var state = _ref2.state, options = _ref2.options;
    var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
    if (arrowElement == null) {
      return;
    }
    if (typeof arrowElement === "string") {
      arrowElement = state.elements.popper.querySelector(arrowElement);
      if (!arrowElement) {
        return;
      }
    }
    if (!contains(state.elements.popper, arrowElement)) {
      return;
    }
    state.elements.arrow = arrowElement;
  }
  var arrow_default = {
    name: "arrow",
    enabled: true,
    phase: "main",
    fn: arrow,
    effect: effect2,
    requires: ["popperOffsets"],
    requiresIfExists: ["preventOverflow"]
  };

  // node_modules/@popperjs/core/lib/utils/getVariation.js
  function getVariation(placement) {
    return placement.split("-")[1];
  }

  // node_modules/@popperjs/core/lib/modifiers/computeStyles.js
  var unsetSides = {
    top: "auto",
    right: "auto",
    bottom: "auto",
    left: "auto"
  };
  function roundOffsetsByDPR(_ref, win) {
    var x = _ref.x, y = _ref.y;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round2(x * dpr) / dpr || 0,
      y: round2(y * dpr) / dpr || 0
    };
  }
  function mapToStyles(_ref2) {
    var _Object$assign2;
    var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position2 = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
    var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
      x,
      y
    }) : {
      x,
      y
    };
    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty("x");
    var hasY = offsets.hasOwnProperty("y");
    var sideX = left;
    var sideY = top;
    var win = window;
    if (adaptive) {
      var offsetParent = getOffsetParent(popper2);
      var heightProp = "clientHeight";
      var widthProp = "clientWidth";
      if (offsetParent === getWindow(popper2)) {
        offsetParent = getDocumentElement(popper2);
        if (getComputedStyle(offsetParent).position !== "static" && position2 === "absolute") {
          heightProp = "scrollHeight";
          widthProp = "scrollWidth";
        }
      }
      offsetParent = offsetParent;
      if (placement === top || (placement === left || placement === right) && variation === end) {
        sideY = bottom;
        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : (
          // $FlowFixMe[prop-missing]
          offsetParent[heightProp]
        );
        y -= offsetY - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }
      if (placement === left || (placement === top || placement === bottom) && variation === end) {
        sideX = right;
        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : (
          // $FlowFixMe[prop-missing]
          offsetParent[widthProp]
        );
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }
    var commonStyles = Object.assign({
      position: position2
    }, adaptive && unsetSides);
    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x,
      y
    }, getWindow(popper2)) : {
      x,
      y
    };
    x = _ref4.x;
    y = _ref4.y;
    if (gpuAcceleration) {
      var _Object$assign;
      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }
    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
  }
  function computeStyles(_ref5) {
    var state = _ref5.state, options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration,
      isFixed: state.options.strategy === "fixed"
    };
    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive,
        roundOffsets
      })));
    }
    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: "absolute",
        adaptive: false,
        roundOffsets
      })));
    }
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-placement": state.placement
    });
  }
  var computeStyles_default = {
    name: "computeStyles",
    enabled: true,
    phase: "beforeWrite",
    fn: computeStyles,
    data: {}
  };

  // node_modules/@popperjs/core/lib/modifiers/eventListeners.js
  var passive = {
    passive: true
  };
  function effect3(_ref) {
    var state = _ref.state, instance = _ref.instance, options = _ref.options;
    var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
    var window2 = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.addEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.addEventListener("resize", instance.update, passive);
    }
    return function() {
      if (scroll) {
        scrollParents.forEach(function(scrollParent) {
          scrollParent.removeEventListener("scroll", instance.update, passive);
        });
      }
      if (resize) {
        window2.removeEventListener("resize", instance.update, passive);
      }
    };
  }
  var eventListeners_default = {
    name: "eventListeners",
    enabled: true,
    phase: "write",
    fn: function fn() {
    },
    effect: effect3,
    data: {}
  };

  // node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
  var hash2 = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function(matched) {
      return hash2[matched];
    });
  }

  // node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
  var hash3 = {
    start: "end",
    end: "start"
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function(matched) {
      return hash3[matched];
    });
  }

  // node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
  function getWindowScroll(node2) {
    var win = getWindow(node2);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft,
      scrollTop
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
  function getWindowScrollBarX(element) {
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  // node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
  function getViewportRect(element, strategy) {
    var win = getWindow(element);
    var html2 = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html2.clientWidth;
    var height = html2.clientHeight;
    var x = 0;
    var y = 0;
    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      var layoutViewport = isLayoutViewport();
      if (layoutViewport || !layoutViewport && strategy === "fixed") {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }
    return {
      width,
      height,
      x: x + getWindowScrollBarX(element),
      y
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
  function getDocumentRect(element) {
    var _element$ownerDocumen;
    var html2 = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body2 = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html2.scrollWidth, html2.clientWidth, body2 ? body2.scrollWidth : 0, body2 ? body2.clientWidth : 0);
    var height = max(html2.scrollHeight, html2.clientHeight, body2 ? body2.scrollHeight : 0, body2 ? body2.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;
    if (getComputedStyle(body2 || html2).direction === "rtl") {
      x += max(html2.clientWidth, body2 ? body2.clientWidth : 0) - width;
    }
    return {
      width,
      height,
      x,
      y
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
  function isScrollParent(element) {
    var _getComputedStyle = getComputedStyle(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  // node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
  function getScrollParent(node2) {
    if (["html", "body", "#document"].indexOf(getNodeName(node2)) >= 0) {
      return node2.ownerDocument.body;
    }
    if (isHTMLElement(node2) && isScrollParent(node2)) {
      return node2;
    }
    return getScrollParent(getParentNode(node2));
  }

  // node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
  function listScrollParents(element, list) {
    var _element$ownerDocumen;
    if (list === void 0) {
      list = [];
    }
    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : (
      // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
      updatedList.concat(listScrollParents(getParentNode(target)))
    );
  }

  // node_modules/@popperjs/core/lib/utils/rectToClientRect.js
  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  // node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
  function getInnerBoundingClientRect(element, strategy) {
    var rect = getBoundingClientRect(element, false, strategy === "fixed");
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }
  function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  }
  function getClippingParents(element) {
    var clippingParents2 = listScrollParents(getParentNode(element));
    var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
    if (!isElement(clipperElement)) {
      return [];
    }
    return clippingParents2.filter(function(clippingParent) {
      return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
    });
  }
  function getClippingRect(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
    var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents2[0];
    var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  // node_modules/@popperjs/core/lib/utils/computeOffsets.js
  function computeOffsets(_ref) {
    var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference2.x + reference2.width / 2 - element.width / 2;
    var commonY = reference2.y + reference2.height / 2 - element.height / 2;
    var offsets;
    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference2.y - element.height
        };
        break;
      case bottom:
        offsets = {
          x: commonX,
          y: reference2.y + reference2.height
        };
        break;
      case right:
        offsets = {
          x: reference2.x + reference2.width,
          y: commonY
        };
        break;
      case left:
        offsets = {
          x: reference2.x - element.width,
          y: commonY
        };
        break;
      default:
        offsets = {
          x: reference2.x,
          y: reference2.y
        };
    }
    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
    if (mainAxis != null) {
      var len = mainAxis === "y" ? "height" : "width";
      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
          break;
        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
          break;
        default:
      }
    }
    return offsets;
  }

  // node_modules/@popperjs/core/lib/utils/detectOverflow.js
  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets2 = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: "absolute",
      placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset;
    if (elementContext === popper && offsetData) {
      var offset3 = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function(key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
        overflowOffsets[key] += offset3[axis] * multiply;
      });
    }
    return overflowOffsets;
  }

  // node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }
    var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements3 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
      return getVariation(placement2) === variation;
    }) : basePlacements;
    var allowedPlacements = placements3.filter(function(placement2) {
      return allowedAutoPlacements.indexOf(placement2) >= 0;
    });
    if (allowedPlacements.length === 0) {
      allowedPlacements = placements3;
    }
    var overflows = allowedPlacements.reduce(function(acc, placement2) {
      acc[placement2] = detectOverflow(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding
      })[getBasePlacement(placement2)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function(a, b) {
      return overflows[a] - overflows[b];
    });
  }

  // node_modules/@popperjs/core/lib/modifiers/flip.js
  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return [];
    }
    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }
  function flip(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    if (state.modifiersData[name]._skip) {
      return;
    }
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements3 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
      return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
        placement: placement2,
        boundary,
        rootBoundary,
        padding,
        flipVariations,
        allowedAutoPlacements
      }) : placement2);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = /* @__PURE__ */ new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements3[0];
    for (var i = 0; i < placements3.length; i++) {
      var placement = placements3[i];
      var _basePlacement = getBasePlacement(placement);
      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? "width" : "height";
      var overflow = detectOverflow(state, {
        placement,
        boundary,
        rootBoundary,
        altBoundary,
        padding
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }
      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];
      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }
      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }
      if (checks.every(function(check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }
      checksMap.set(placement, checks);
    }
    if (makeFallbackChecks) {
      var numberOfChecks = flipVariations ? 3 : 1;
      var _loop = function _loop2(_i2) {
        var fittingPlacement = placements3.find(function(placement2) {
          var checks2 = checksMap.get(placement2);
          if (checks2) {
            return checks2.slice(0, _i2).every(function(check) {
              return check;
            });
          }
        });
        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };
      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);
        if (_ret === "break")
          break;
      }
    }
    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  }
  var flip_default = {
    name: "flip",
    enabled: true,
    phase: "main",
    fn: flip,
    requiresIfExists: ["offset"],
    data: {
      _skip: false
    }
  };

  // node_modules/@popperjs/core/lib/modifiers/hide.js
  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }
    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }
  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function(side) {
      return overflow[side] >= 0;
    });
  }
  function hide(_ref) {
    var state = _ref.state, name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: "reference"
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets,
      popperEscapeOffsets,
      isReferenceHidden,
      hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      "data-popper-reference-hidden": isReferenceHidden,
      "data-popper-escaped": hasPopperEscaped
    });
  }
  var hide_default = {
    name: "hide",
    enabled: true,
    phase: "main",
    requiresIfExists: ["preventOverflow"],
    fn: hide
  };

  // node_modules/@popperjs/core/lib/modifiers/offset.js
  function distanceAndSkiddingToXY(placement, rects, offset3) {
    var basePlacement = getBasePlacement(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
    var _ref = typeof offset3 === "function" ? offset3(Object.assign({}, rects, {
      placement
    })) : offset3, skidding = _ref[0], distance = _ref[1];
    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }
  function offset(_ref2) {
    var state = _ref2.state, options = _ref2.options, name = _ref2.name;
    var _options$offset = options.offset, offset3 = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function(acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset3);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }
    state.modifiersData[name] = data;
  }
  var offset_default = {
    name: "offset",
    enabled: true,
    phase: "main",
    requires: ["popperOffsets"],
    fn: offset
  };

  // node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
  function popperOffsets(_ref) {
    var state = _ref.state, name = _ref.name;
    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: "absolute",
      placement: state.placement
    });
  }
  var popperOffsets_default = {
    name: "popperOffsets",
    enabled: true,
    phase: "read",
    fn: popperOffsets,
    data: {}
  };

  // node_modules/@popperjs/core/lib/utils/getAltAxis.js
  function getAltAxis(axis) {
    return axis === "x" ? "y" : "x";
  }

  // node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
  function preventOverflow(_ref) {
    var state = _ref.state, options = _ref.options, name = _ref.name;
    var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary,
      rootBoundary,
      padding,
      altBoundary
    });
    var basePlacement = getBasePlacement(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets2 = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };
    if (!popperOffsets2) {
      return;
    }
    if (checkMainAxis) {
      var _offsetModifierState$;
      var mainSide = mainAxis === "y" ? top : left;
      var altSide = mainAxis === "y" ? bottom : right;
      var len = mainAxis === "y" ? "height" : "width";
      var offset3 = popperOffsets2[mainAxis];
      var min3 = offset3 + overflow[mainSide];
      var max3 = offset3 - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide];
      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset3 + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset3 + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? min(min3, tetherMin) : min3, offset3, tether ? max(max3, tetherMax) : max3);
      popperOffsets2[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset3;
    }
    if (checkAltAxis) {
      var _offsetModifierState$2;
      var _mainSide = mainAxis === "x" ? top : left;
      var _altSide = mainAxis === "x" ? bottom : right;
      var _offset = popperOffsets2[altAxis];
      var _len = altAxis === "y" ? "height" : "width";
      var _min = _offset + overflow[_mainSide];
      var _max = _offset - overflow[_altSide];
      var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
      popperOffsets2[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }
    state.modifiersData[name] = data;
  }
  var preventOverflow_default = {
    name: "preventOverflow",
    enabled: true,
    phase: "main",
    fn: preventOverflow,
    requiresIfExists: ["offset"]
  };

  // node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  // node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
  function getNodeScroll(node2) {
    if (node2 === getWindow(node2) || !isHTMLElement(node2)) {
      return getWindowScroll(node2);
    } else {
      return getHTMLElementScroll(node2);
    }
  }

  // node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round2(rect.width) / element.offsetWidth || 1;
    var scaleY = round2(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  }
  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }
    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  // node_modules/@popperjs/core/lib/utils/orderModifiers.js
  function order(modifiers) {
    var map = /* @__PURE__ */ new Map();
    var visited = /* @__PURE__ */ new Set();
    var result = [];
    modifiers.forEach(function(modifier) {
      map.set(modifier.name, modifier);
    });
    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function(dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);
          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }
    modifiers.forEach(function(modifier) {
      if (!visited.has(modifier.name)) {
        sort(modifier);
      }
    });
    return result;
  }
  function orderModifiers(modifiers) {
    var orderedModifiers = order(modifiers);
    return modifierPhases.reduce(function(acc, phase) {
      return acc.concat(orderedModifiers.filter(function(modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  // node_modules/@popperjs/core/lib/utils/debounce.js
  function debounce(fn2) {
    var pending;
    return function() {
      if (!pending) {
        pending = new Promise(function(resolve) {
          Promise.resolve().then(function() {
            pending = void 0;
            resolve(fn2());
          });
        });
      }
      return pending;
    };
  }

  // node_modules/@popperjs/core/lib/utils/mergeByName.js
  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function(merged2, current) {
      var existing = merged2[current.name];
      merged2[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged2;
    }, {});
    return Object.keys(merged).map(function(key) {
      return merged[key];
    });
  }

  // node_modules/@popperjs/core/lib/createPopper.js
  var DEFAULT_OPTIONS = {
    placement: "bottom",
    modifiers: [],
    strategy: "absolute"
  };
  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return !args.some(function(element) {
      return !(element && typeof element.getBoundingClientRect === "function");
    });
  }
  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }
    var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers2 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions2 = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
    return function createPopper2(reference2, popper2, options) {
      if (options === void 0) {
        options = defaultOptions2;
      }
      var state = {
        placement: "bottom",
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions2),
        modifiersData: {},
        elements: {
          reference: reference2,
          popper: popper2
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state,
        setOptions: function setOptions(setOptionsAction) {
          var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions2, state.options, options2);
          state.scrollParents = {
            reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
            popper: listScrollParents(popper2)
          };
          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers2, state.options.modifiers)));
          state.orderedModifiers = orderedModifiers.filter(function(m) {
            return m.enabled;
          });
          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }
          var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
          if (!areValidElements(reference3, popper3)) {
            return;
          }
          state.rects = {
            reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
            popper: getLayoutRect(popper3)
          };
          state.reset = false;
          state.placement = state.options.placement;
          state.orderedModifiers.forEach(function(modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });
          for (var index3 = 0; index3 < state.orderedModifiers.length; index3++) {
            if (state.reset === true) {
              state.reset = false;
              index3 = -1;
              continue;
            }
            var _state$orderedModifie = state.orderedModifiers[index3], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
            if (typeof fn2 === "function") {
              state = fn2({
                state,
                options: _options,
                name,
                instance
              }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce(function() {
          return new Promise(function(resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };
      if (!areValidElements(reference2, popper2)) {
        return instance;
      }
      instance.setOptions(options).then(function(state2) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state2);
        }
      });
      function runModifierEffects() {
        state.orderedModifiers.forEach(function(_ref) {
          var name = _ref.name, _ref$options = _ref.options, options2 = _ref$options === void 0 ? {} : _ref$options, effect4 = _ref.effect;
          if (typeof effect4 === "function") {
            var cleanupFn = effect4({
              state,
              name,
              instance,
              options: options2
            });
            var noopFn = function noopFn2() {
            };
            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }
      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function(fn2) {
          return fn2();
        });
        effectCleanupFns = [];
      }
      return instance;
    };
  }

  // node_modules/@popperjs/core/lib/popper.js
  var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
  var createPopper = /* @__PURE__ */ popperGenerator({
    defaultModifiers
  });

  // node_modules/@mui/base/Popper/Popper.js
  var import_prop_types28 = __toESM(require_prop_types());
  var import_composeClasses17 = __toESM(require_composeClasses3());

  // node_modules/@mui/base/Portal/Portal.js
  var React61 = __toESM(require_react());
  var ReactDOM2 = __toESM(require_react_dom());
  var import_prop_types27 = __toESM(require_prop_types());
  var import_utils56 = __toESM(require_utils());
  var import_jsx_runtime39 = __toESM(require_jsx_runtime());
  function getContainer(container) {
    return typeof container === "function" ? container() : container;
  }
  var Portal = /* @__PURE__ */ React61.forwardRef(function Portal2(props, forwardedRef) {
    const {
      children,
      container,
      disablePortal = false
    } = props;
    const [mountNode, setMountNode] = React61.useState(null);
    const handleRef = (0, import_utils56.unstable_useForkRef)(/* @__PURE__ */ React61.isValidElement(children) ? children.ref : null, forwardedRef);
    (0, import_utils56.unstable_useEnhancedEffect)(() => {
      if (!disablePortal) {
        setMountNode(getContainer(container) || document.body);
      }
    }, [container, disablePortal]);
    (0, import_utils56.unstable_useEnhancedEffect)(() => {
      if (mountNode && !disablePortal) {
        (0, import_utils56.unstable_setRef)(forwardedRef, mountNode);
        return () => {
          (0, import_utils56.unstable_setRef)(forwardedRef, null);
        };
      }
      return void 0;
    }, [forwardedRef, mountNode, disablePortal]);
    if (disablePortal) {
      if (/* @__PURE__ */ React61.isValidElement(children)) {
        const newProps = {
          ref: handleRef
        };
        return /* @__PURE__ */ React61.cloneElement(children, newProps);
      }
      return /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(React61.Fragment, {
        children
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(React61.Fragment, {
      children: mountNode ? /* @__PURE__ */ ReactDOM2.createPortal(children, mountNode) : mountNode
    });
  });
  true ? Portal.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The children to render into the `container`.
     */
    children: import_prop_types27.default.node,
    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: import_prop_types27.default.oneOfType([import_utils56.HTMLElementType, import_prop_types27.default.func]),
    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: import_prop_types27.default.bool
  } : void 0;
  if (true) {
    Portal["propTypes"] = (0, import_utils56.exactProp)(Portal.propTypes);
  }

  // node_modules/@mui/base/Popper/popperClasses.js
  function getPopperUtilityClass(slot) {
    return (0, import_utils43.unstable_generateUtilityClass)("MuiPopper", slot);
  }
  var popperClasses = (0, import_utils42.unstable_generateUtilityClasses)("MuiPopper", ["root"]);

  // node_modules/@mui/base/Popper/Popper.js
  var import_jsx_runtime40 = __toESM(require_jsx_runtime());
  var _excluded32 = ["anchorEl", "children", "direction", "disablePortal", "modifiers", "open", "placement", "popperOptions", "popperRef", "slotProps", "slots", "TransitionProps", "ownerState"];
  var _excluded210 = ["anchorEl", "children", "container", "direction", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "style", "transition", "slotProps", "slots"];
  function flipPlacement(placement, direction) {
    if (direction === "ltr") {
      return placement;
    }
    switch (placement) {
      case "bottom-end":
        return "bottom-start";
      case "bottom-start":
        return "bottom-end";
      case "top-end":
        return "top-start";
      case "top-start":
        return "top-end";
      default:
        return placement;
    }
  }
  function resolveAnchorEl(anchorEl) {
    return typeof anchorEl === "function" ? anchorEl() : anchorEl;
  }
  function isHTMLElement2(element) {
    return element.nodeType !== void 0;
  }
  function isVirtualElement(element) {
    return !isHTMLElement2(element);
  }
  var useUtilityClasses17 = () => {
    const slots = {
      root: ["root"]
    };
    return (0, import_composeClasses17.unstable_composeClasses)(slots, useClassNamesOverride(getPopperUtilityClass));
  };
  var defaultPopperOptions = {};
  var PopperTooltip = /* @__PURE__ */ React62.forwardRef(function PopperTooltip2(props, forwardedRef) {
    var _slots$root;
    const {
      anchorEl,
      children,
      direction,
      disablePortal,
      modifiers,
      open,
      placement: initialPlacement,
      popperOptions,
      popperRef: popperRefProp,
      slotProps = {},
      slots = {},
      TransitionProps
      // @ts-ignore internal logic
      // prevent from spreading to DOM, it can come from the parent component e.g. Select.
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded32);
    const tooltipRef = React62.useRef(null);
    const ownRef = (0, import_utils57.unstable_useForkRef)(tooltipRef, forwardedRef);
    const popperRef = React62.useRef(null);
    const handlePopperRef = (0, import_utils57.unstable_useForkRef)(popperRef, popperRefProp);
    const handlePopperRefRef = React62.useRef(handlePopperRef);
    (0, import_utils57.unstable_useEnhancedEffect)(() => {
      handlePopperRefRef.current = handlePopperRef;
    }, [handlePopperRef]);
    React62.useImperativeHandle(popperRefProp, () => popperRef.current, []);
    const rtlPlacement = flipPlacement(initialPlacement, direction);
    const [placement, setPlacement] = React62.useState(rtlPlacement);
    const [resolvedAnchorElement, setResolvedAnchorElement] = React62.useState(resolveAnchorEl(anchorEl));
    React62.useEffect(() => {
      if (popperRef.current) {
        popperRef.current.forceUpdate();
      }
    });
    React62.useEffect(() => {
      if (anchorEl) {
        setResolvedAnchorElement(resolveAnchorEl(anchorEl));
      }
    }, [anchorEl]);
    (0, import_utils57.unstable_useEnhancedEffect)(() => {
      if (!resolvedAnchorElement || !open) {
        return void 0;
      }
      const handlePopperUpdate = (data) => {
        setPlacement(data.placement);
      };
      if (true) {
        if (resolvedAnchorElement && isHTMLElement2(resolvedAnchorElement) && resolvedAnchorElement.nodeType === 1) {
          const box = resolvedAnchorElement.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        }
      }
      let popperModifiers = [{
        name: "preventOverflow",
        options: {
          altBoundary: disablePortal
        }
      }, {
        name: "flip",
        options: {
          altBoundary: disablePortal
        }
      }, {
        name: "onUpdate",
        enabled: true,
        phase: "afterWrite",
        fn: ({
          state
        }) => {
          handlePopperUpdate(state);
        }
      }];
      if (modifiers != null) {
        popperModifiers = popperModifiers.concat(modifiers);
      }
      if (popperOptions && popperOptions.modifiers != null) {
        popperModifiers = popperModifiers.concat(popperOptions.modifiers);
      }
      const popper2 = createPopper(resolvedAnchorElement, tooltipRef.current, _extends({
        placement: rtlPlacement
      }, popperOptions, {
        modifiers: popperModifiers
      }));
      handlePopperRefRef.current(popper2);
      return () => {
        popper2.destroy();
        handlePopperRefRef.current(null);
      };
    }, [resolvedAnchorElement, disablePortal, modifiers, open, popperOptions, rtlPlacement]);
    const childProps = {
      placement
    };
    if (TransitionProps !== null) {
      childProps.TransitionProps = TransitionProps;
    }
    const classes = useUtilityClasses17();
    const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
    const rootProps = useSlotProps({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        role: "tooltip",
        ref: ownRef
      },
      ownerState: props,
      className: classes.root
    });
    return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(Root, _extends({}, rootProps, {
      children: typeof children === "function" ? children(childProps) : children
    }));
  });
  var Popper = /* @__PURE__ */ React62.forwardRef(function Popper2(props, forwardedRef) {
    const {
      anchorEl,
      children,
      container: containerProp,
      direction = "ltr",
      disablePortal = false,
      keepMounted = false,
      modifiers,
      open,
      placement = "bottom",
      popperOptions = defaultPopperOptions,
      popperRef,
      style,
      transition: transition2 = false,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded210);
    const [exited, setExited] = React62.useState(true);
    const handleEnter = () => {
      setExited(false);
    };
    const handleExited = () => {
      setExited(true);
    };
    if (!keepMounted && !open && (!transition2 || exited)) {
      return null;
    }
    let container;
    if (containerProp) {
      container = containerProp;
    } else if (anchorEl) {
      const resolvedAnchorEl = resolveAnchorEl(anchorEl);
      container = resolvedAnchorEl && isHTMLElement2(resolvedAnchorEl) ? (0, import_utils57.unstable_ownerDocument)(resolvedAnchorEl).body : (0, import_utils57.unstable_ownerDocument)(null).body;
    }
    const display = !open && keepMounted && (!transition2 || exited) ? "none" : void 0;
    const transitionProps = transition2 ? {
      in: open,
      onEnter: handleEnter,
      onExited: handleExited
    } : void 0;
    return /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(Portal, {
      disablePortal,
      container,
      children: /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(PopperTooltip, _extends({
        anchorEl,
        direction,
        disablePortal,
        modifiers,
        ref: forwardedRef,
        open: transition2 ? !exited : open,
        placement,
        popperOptions,
        popperRef,
        slotProps,
        slots
      }, other, {
        style: _extends({
          // Prevents scroll issue, waiting for Popper.js to add this style once initiated.
          position: "fixed",
          // Fix Popper.js display issue
          top: 0,
          left: 0,
          display
        }, style),
        TransitionProps: transitionProps,
        children
      }))
    });
  });
  true ? Popper.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
     * or a function that returns either.
     * It's used to set the position of the popper.
     * The return value will passed as the reference object of the Popper instance.
     */
    anchorEl: (0, import_utils57.chainPropTypes)(import_prop_types28.default.oneOfType([import_utils57.HTMLElementType, import_prop_types28.default.object, import_prop_types28.default.func]), (props) => {
      if (props.open) {
        const resolvedAnchorEl = resolveAnchorEl(props.anchorEl);
        if (resolvedAnchorEl && isHTMLElement2(resolvedAnchorEl) && resolvedAnchorEl.nodeType === 1) {
          const box = resolvedAnchorEl.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        } else if (!resolvedAnchorEl || typeof resolvedAnchorEl.getBoundingClientRect !== "function" || isVirtualElement(resolvedAnchorEl) && resolvedAnchorEl.contextElement != null && resolvedAnchorEl.contextElement.nodeType !== 1) {
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "It should be an HTML element instance or a virtualElement ", "(https://popper.js.org/docs/v2/virtual-elements/)."].join("\n"));
        }
      }
      return null;
    }),
    /**
     * Popper render function or node.
     */
    children: import_prop_types28.default.oneOfType([import_prop_types28.default.node, import_prop_types28.default.func]),
    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: import_prop_types28.default.oneOfType([import_utils57.HTMLElementType, import_prop_types28.default.func]),
    /**
     * Direction of the text.
     * @default 'ltr'
     */
    direction: import_prop_types28.default.oneOf(["ltr", "rtl"]),
    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: import_prop_types28.default.bool,
    /**
     * Always keep the children in the DOM.
     * This prop can be useful in SEO situation or
     * when you want to maximize the responsiveness of the Popper.
     * @default false
     */
    keepMounted: import_prop_types28.default.bool,
    /**
     * Popper.js is based on a "plugin-like" architecture,
     * most of its features are fully encapsulated "modifiers".
     *
     * A modifier is a function that is called each time Popper.js needs to
     * compute the position of the popper.
     * For this reason, modifiers should be very performant to avoid bottlenecks.
     * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
     */
    modifiers: import_prop_types28.default.arrayOf(import_prop_types28.default.shape({
      data: import_prop_types28.default.object,
      effect: import_prop_types28.default.func,
      enabled: import_prop_types28.default.bool,
      fn: import_prop_types28.default.func,
      name: import_prop_types28.default.any,
      options: import_prop_types28.default.object,
      phase: import_prop_types28.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
      requires: import_prop_types28.default.arrayOf(import_prop_types28.default.string),
      requiresIfExists: import_prop_types28.default.arrayOf(import_prop_types28.default.string)
    })),
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types28.default.bool.isRequired,
    /**
     * Popper placement.
     * @default 'bottom'
     */
    placement: import_prop_types28.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    /**
     * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
     * @default {}
     */
    popperOptions: import_prop_types28.default.shape({
      modifiers: import_prop_types28.default.array,
      onFirstUpdate: import_prop_types28.default.func,
      placement: import_prop_types28.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
      strategy: import_prop_types28.default.oneOf(["absolute", "fixed"])
    }),
    /**
     * A ref that points to the used popper instance.
     */
    popperRef: import_utils57.refType,
    /**
     * The props used for each slot inside the Popper.
     * @default {}
     */
    slotProps: import_prop_types28.default.shape({
      root: import_prop_types28.default.oneOfType([import_prop_types28.default.func, import_prop_types28.default.object])
    }),
    /**
     * The components used for each slot inside the Popper.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types28.default.shape({
      root: import_prop_types28.default.elementType
    }),
    /**
     * Help supporting a react-transition-group/Transition component.
     * @default false
     */
    transition: import_prop_types28.default.bool
  } : void 0;

  // node_modules/@mui/base/Menu/Menu.js
  var import_jsx_runtime41 = __toESM(require_jsx_runtime());
  var _excluded33 = ["actions", "children", "onItemsChange", "slotProps", "slots"];
  function useUtilityClasses18(ownerState) {
    const {
      open
    } = ownerState;
    const slots = {
      root: ["root", open && "expanded"],
      listbox: ["listbox", open && "expanded"]
    };
    return (0, import_composeClasses18.unstable_composeClasses)(slots, useClassNamesOverride(getMenuUtilityClass));
  }
  var Menu = /* @__PURE__ */ React63.forwardRef(function Menu2(props, forwardedRef) {
    var _slots$root, _slots$listbox;
    const {
      actions,
      children,
      onItemsChange,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded33);
    const {
      contextValue,
      getListboxProps,
      dispatch,
      open,
      triggerElement
    } = useMenu({
      onItemsChange
    });
    React63.useImperativeHandle(actions, () => ({
      dispatch,
      resetHighlight: () => dispatch({
        type: ListActionTypes.resetHighlight,
        event: null
      })
    }), [dispatch]);
    const ownerState = _extends({}, props, {
      open
    });
    const classes = useUtilityClasses18(ownerState);
    const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
    const rootProps = useSlotProps({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        ref: forwardedRef,
        role: void 0
      },
      className: classes.root,
      ownerState
    });
    const Listbox = (_slots$listbox = slots.listbox) != null ? _slots$listbox : "ul";
    const listboxProps = useSlotProps({
      elementType: Listbox,
      getSlotProps: getListboxProps,
      externalSlotProps: slotProps.listbox,
      className: classes.listbox,
      ownerState
    });
    if (open === true && triggerElement == null) {
      return /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(Root, _extends({}, rootProps, {
        children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(Listbox, _extends({}, listboxProps, {
          children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(MenuProvider, {
            value: contextValue,
            children
          })
        }))
      }));
    }
    return /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(Popper, _extends({}, rootProps, {
      open,
      anchorEl: triggerElement,
      slots: {
        root: Root
      },
      children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(Listbox, _extends({}, listboxProps, {
        children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(MenuProvider, {
          value: contextValue,
          children
        })
      }))
    }));
  });
  true ? Menu.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * A ref with imperative actions that can be performed on the menu.
     */
    actions: import_utils59.refType,
    /**
     * @ignore
     */
    children: import_prop_types29.default.node,
    /**
     * @ignore
     */
    className: import_prop_types29.default.string,
    /**
     * Function called when the items displayed in the menu change.
     */
    onItemsChange: import_prop_types29.default.func,
    /**
     * The props used for each slot inside the Menu.
     * @default {}
     */
    slotProps: import_prop_types29.default.shape({
      listbox: import_prop_types29.default.oneOfType([import_prop_types29.default.func, import_prop_types29.default.object]),
      root: import_prop_types29.default.oneOfType([import_prop_types29.default.func, import_prop_types29.default.object])
    }),
    /**
     * The components used for each slot inside the Menu.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types29.default.shape({
      listbox: import_prop_types29.default.elementType,
      root: import_prop_types29.default.elementType
    })
  } : void 0;

  // node_modules/@mui/base/MenuButton/MenuButton.js
  init_extends();
  var React65 = __toESM(require_react());
  var import_prop_types30 = __toESM(require_prop_types());

  // node_modules/@mui/base/useMenuButton/useMenuButton.js
  init_extends();
  var React64 = __toESM(require_react());
  var import_utils60 = __toESM(require_utils());
  function useMenuButton(parameters = {}) {
    const {
      disabled = false,
      focusableWhenDisabled,
      rootRef: externalRef
    } = parameters;
    const menuContext = React64.useContext(DropdownContext);
    if (menuContext === null) {
      throw new Error("useMenuButton: no menu context available.");
    }
    const {
      state,
      dispatch,
      registerTrigger,
      popupId
    } = menuContext;
    const {
      getRootProps: getButtonRootProps,
      rootRef: buttonRootRef,
      active
    } = useButton({
      disabled,
      focusableWhenDisabled,
      rootRef: externalRef
    });
    const handleRef = (0, import_utils60.unstable_useForkRef)(buttonRootRef, registerTrigger);
    const createHandleClick = (otherHandlers) => (event) => {
      var _otherHandlers$onClic;
      (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
      if (event.defaultMuiPrevented) {
        return;
      }
      dispatch({
        type: DropdownActionTypes.toggle,
        event
      });
    };
    const createHandleKeyDown = (otherHandlers) => (event) => {
      var _otherHandlers$onKeyD;
      (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);
      if (event.defaultMuiPrevented) {
        return;
      }
      if (event.key === "ArrowDown" || event.key === "ArrowUp") {
        event.preventDefault();
        dispatch({
          type: DropdownActionTypes.open,
          event
        });
      }
    };
    const getOwnRootProps = (otherHandlers = {}) => ({
      onClick: createHandleClick(otherHandlers),
      onKeyDown: createHandleKeyDown(otherHandlers)
    });
    const getRootProps = (externalProps = {}) => {
      const externalEventHandlers = extractEventHandlers(externalProps);
      const getCombinedProps = combineHooksSlotProps(getButtonRootProps, getOwnRootProps);
      return _extends({
        "aria-haspopup": "menu",
        "aria-expanded": state.open,
        "aria-controls": popupId
      }, externalProps, externalEventHandlers, getCombinedProps(externalEventHandlers), {
        ref: handleRef
      });
    };
    return {
      active,
      getRootProps,
      open: state.open,
      rootRef: handleRef
    };
  }

  // node_modules/@mui/base/MenuButton/MenuButton.js
  var import_composeClasses19 = __toESM(require_composeClasses3());

  // node_modules/@mui/base/MenuButton/menuButtonClasses.js
  function getMenuButtonUtilityClass(slot) {
    return (0, import_utils43.unstable_generateUtilityClass)("MuiMenuButton", slot);
  }
  var menuButtonClasses = (0, import_utils42.unstable_generateUtilityClasses)("MuiMenuButton", ["root", "active", "disabled", "expanded"]);

  // node_modules/@mui/base/MenuButton/MenuButton.js
  var import_jsx_runtime42 = __toESM(require_jsx_runtime());
  var _excluded34 = ["children", "disabled", "label", "slots", "slotProps", "focusableWhenDisabled"];
  var useUtilityClasses19 = (ownerState) => {
    const {
      active,
      disabled,
      open
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", active && "active", open && "expanded"]
    };
    return (0, import_composeClasses19.unstable_composeClasses)(slots, useClassNamesOverride(getMenuButtonUtilityClass));
  };
  var MenuButton = /* @__PURE__ */ React65.forwardRef(function MenuButton2(props, forwardedRef) {
    const {
      children,
      disabled = false,
      slots = {},
      slotProps = {},
      focusableWhenDisabled = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded34);
    const {
      getRootProps,
      open,
      active
    } = useMenuButton({
      disabled,
      focusableWhenDisabled,
      rootRef: forwardedRef
    });
    const ownerState = _extends({}, props, {
      open,
      active,
      disabled,
      focusableWhenDisabled
    });
    const classes = useUtilityClasses19(ownerState);
    const Root = slots.root || "button";
    const rootProps = useSlotProps({
      elementType: Root,
      getSlotProps: getRootProps,
      externalForwardedProps: other,
      externalSlotProps: slotProps.root,
      additionalProps: {
        ref: forwardedRef,
        type: "button"
      },
      ownerState,
      className: classes.root
    });
    return /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(Root, _extends({}, rootProps, {
      children
    }));
  });
  true ? MenuButton.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: import_prop_types30.default.node,
    /**
     * Class name applied to the root element.
     */
    className: import_prop_types30.default.string,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types30.default.bool,
    /**
     * If `true`, allows a disabled button to receive focus.
     * @default false
     */
    focusableWhenDisabled: import_prop_types30.default.bool,
    /**
     * Label of the button
     */
    label: import_prop_types30.default.string,
    /**
     * The components used for each slot inside the MenuButton.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slotProps: import_prop_types30.default.shape({
      root: import_prop_types30.default.oneOfType([import_prop_types30.default.func, import_prop_types30.default.object])
    }),
    /**
     * The props used for each slot inside the MenuButton.
     * @default {}
     */
    slots: import_prop_types30.default.shape({
      root: import_prop_types30.default.elementType
    })
  } : void 0;

  // node_modules/@mui/base/MenuItem/MenuItem.js
  init_extends();
  var React68 = __toESM(require_react());
  var import_prop_types31 = __toESM(require_prop_types());

  // node_modules/@mui/base/MenuItem/menuItemClasses.js
  function getMenuItemUtilityClass(slot) {
    return (0, import_utils43.unstable_generateUtilityClass)("MuiMenuItem", slot);
  }
  var menuItemClasses = (0, import_utils42.unstable_generateUtilityClasses)("MuiMenuItem", ["root", "disabled", "focusVisible"]);

  // node_modules/@mui/base/useMenuItem/useMenuItem.js
  init_extends();
  var React67 = __toESM(require_react());
  var import_utils64 = __toESM(require_utils());

  // node_modules/@mui/base/utils/useCompoundItem.js
  var React66 = __toESM(require_react());
  var import_utils63 = __toESM(require_utils());
  function useCompoundItem(id, itemMetadata) {
    const context = React66.useContext(CompoundComponentContext);
    if (context === null) {
      throw new Error("useCompoundItem must be used within a useCompoundParent");
    }
    const {
      registerItem
    } = context;
    const [registeredId, setRegisteredId] = React66.useState(typeof id === "function" ? void 0 : id);
    (0, import_utils63.unstable_useEnhancedEffect)(() => {
      const {
        id: returnedId,
        deregister
      } = registerItem(id, itemMetadata);
      setRegisteredId(returnedId);
      return deregister;
    }, [registerItem, itemMetadata, id]);
    return {
      id: registeredId,
      index: registeredId !== void 0 ? context.getItemIndex(registeredId) : -1,
      totalItemCount: context.totalSubitemCount
    };
  }

  // node_modules/@mui/base/useMenuItem/useMenuItem.js
  function idGenerator(existingKeys) {
    return `menu-item-${existingKeys.size}`;
  }
  var FALLBACK_MENU_CONTEXT2 = {
    dispatch: () => {
    },
    popupId: "",
    registerPopup: () => {
    },
    registerTrigger: () => {
    },
    state: {
      open: true
    },
    triggerElement: null
  };
  function useMenuItem(params) {
    var _React$useContext;
    const {
      disabled = false,
      id: idParam,
      rootRef: externalRef,
      label
    } = params;
    const id = (0, import_utils64.unstable_useId)(idParam);
    const itemRef = React67.useRef(null);
    const itemMetadata = React67.useMemo(() => ({
      disabled,
      id: id != null ? id : "",
      label,
      ref: itemRef
    }), [disabled, id, label]);
    const {
      dispatch
    } = (_React$useContext = React67.useContext(DropdownContext)) != null ? _React$useContext : FALLBACK_MENU_CONTEXT2;
    const {
      getRootProps: getListRootProps,
      highlighted,
      rootRef: listItemRefHandler
    } = useListItem({
      item: id
    });
    const {
      index: index3,
      totalItemCount
    } = useCompoundItem(id != null ? id : idGenerator, itemMetadata);
    const {
      getRootProps: getButtonProps,
      focusVisible,
      rootRef: buttonRefHandler
    } = useButton({
      disabled,
      focusableWhenDisabled: true
    });
    const handleRef = (0, import_utils64.unstable_useForkRef)(listItemRefHandler, buttonRefHandler, externalRef, itemRef);
    React67.useDebugValue({
      id,
      highlighted,
      disabled,
      label
    });
    const createHandleClick = (otherHandlers) => (event) => {
      var _otherHandlers$onClic;
      (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
      if (event.defaultMuiPrevented) {
        return;
      }
      dispatch({
        type: DropdownActionTypes.close,
        event
      });
    };
    const getOwnHandlers = (otherHandlers = {}) => _extends({}, otherHandlers, {
      onClick: createHandleClick(otherHandlers)
    });
    function getRootProps(externalProps = {}) {
      const externalEventHandlers = extractEventHandlers(externalProps);
      const getCombinedRootProps = combineHooksSlotProps(getOwnHandlers, combineHooksSlotProps(getButtonProps, getListRootProps));
      return _extends({}, externalProps, externalEventHandlers, getCombinedRootProps(externalEventHandlers), {
        ref: handleRef,
        role: "menuitem"
      });
    }
    if (id === void 0) {
      return {
        getRootProps,
        disabled: false,
        focusVisible,
        highlighted: false,
        index: -1,
        totalItemCount: 0,
        rootRef: handleRef
      };
    }
    return {
      getRootProps,
      disabled,
      focusVisible,
      highlighted,
      index: index3,
      totalItemCount,
      rootRef: handleRef
    };
  }

  // node_modules/@mui/base/MenuItem/MenuItem.js
  var import_composeClasses20 = __toESM(require_composeClasses3());
  var import_jsx_runtime43 = __toESM(require_jsx_runtime());
  var _excluded35 = ["children", "disabled", "label", "slotProps", "slots"];
  function useUtilityClasses20(ownerState) {
    const {
      disabled,
      focusVisible
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", focusVisible && "focusVisible"]
    };
    return (0, import_composeClasses20.unstable_composeClasses)(slots, useClassNamesOverride(getMenuItemUtilityClass));
  }
  var MenuItem = /* @__PURE__ */ React68.forwardRef(function MenuItem2(props, forwardedRef) {
    var _slots$root;
    const {
      children,
      disabled: disabledProp = false,
      label,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded35);
    const {
      getRootProps,
      disabled,
      focusVisible,
      highlighted
    } = useMenuItem({
      disabled: disabledProp,
      rootRef: forwardedRef,
      label
    });
    const ownerState = _extends({}, props, {
      disabled,
      focusVisible,
      highlighted
    });
    const classes = useUtilityClasses20(ownerState);
    const Root = (_slots$root = slots.root) != null ? _slots$root : "li";
    const rootProps = useSlotProps({
      elementType: Root,
      getSlotProps: getRootProps,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      className: classes.root,
      ownerState
    });
    return /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(Root, _extends({}, rootProps, {
      children
    }));
  });
  true ? MenuItem.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: import_prop_types31.default.node,
    /**
     * @ignore
     */
    className: import_prop_types31.default.string,
    /**
     * @ignore
     */
    disabled: import_prop_types31.default.bool,
    /**
     * A text representation of the menu item's content.
     * Used for keyboard text navigation matching.
     */
    label: import_prop_types31.default.string,
    /**
     * @ignore
     */
    onClick: import_prop_types31.default.func,
    /**
     * The props used for each slot inside the MenuItem.
     * @default {}
     */
    slotProps: import_prop_types31.default.shape({
      root: import_prop_types31.default.oneOfType([import_prop_types31.default.func, import_prop_types31.default.object])
    }),
    /**
     * The components used for each slot inside the MenuItem.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types31.default.shape({
      root: import_prop_types31.default.elementType
    })
  } : void 0;

  // node_modules/@mui/base/Modal/Modal.js
  init_extends();
  var React70 = __toESM(require_react());
  var import_prop_types32 = __toESM(require_prop_types());
  var import_utils68 = __toESM(require_utils());
  var import_composeClasses21 = __toESM(require_composeClasses3());

  // node_modules/@mui/base/unstable_useModal/useModal.js
  init_extends();
  var React69 = __toESM(require_react());
  var import_utils66 = __toESM(require_utils());

  // node_modules/@mui/base/unstable_useModal/ModalManager.js
  var import_utils65 = __toESM(require_utils());
  function isOverflowing(container) {
    const doc = (0, import_utils65.unstable_ownerDocument)(container);
    if (doc.body === container) {
      return (0, import_utils65.unstable_ownerWindow)(container).innerWidth > doc.documentElement.clientWidth;
    }
    return container.scrollHeight > container.clientHeight;
  }
  function ariaHidden(element, show) {
    if (show) {
      element.setAttribute("aria-hidden", "true");
    } else {
      element.removeAttribute("aria-hidden");
    }
  }
  function getPaddingRight(element) {
    return parseInt((0, import_utils65.unstable_ownerWindow)(element).getComputedStyle(element).paddingRight, 10) || 0;
  }
  function isAriaHiddenForbiddenOnElement(element) {
    const forbiddenTagNames = ["TEMPLATE", "SCRIPT", "STYLE", "LINK", "MAP", "META", "NOSCRIPT", "PICTURE", "COL", "COLGROUP", "PARAM", "SLOT", "SOURCE", "TRACK"];
    const isForbiddenTagName = forbiddenTagNames.indexOf(element.tagName) !== -1;
    const isInputHidden = element.tagName === "INPUT" && element.getAttribute("type") === "hidden";
    return isForbiddenTagName || isInputHidden;
  }
  function ariaHiddenSiblings(container, mountElement, currentElement, elementsToExclude, show) {
    const blacklist = [mountElement, currentElement, ...elementsToExclude];
    [].forEach.call(container.children, (element) => {
      const isNotExcludedElement = blacklist.indexOf(element) === -1;
      const isNotForbiddenElement = !isAriaHiddenForbiddenOnElement(element);
      if (isNotExcludedElement && isNotForbiddenElement) {
        ariaHidden(element, show);
      }
    });
  }
  function findIndexOf(items, callback) {
    let idx = -1;
    items.some((item, index3) => {
      if (callback(item)) {
        idx = index3;
        return true;
      }
      return false;
    });
    return idx;
  }
  function handleContainer(containerInfo, props) {
    const restoreStyle = [];
    const container = containerInfo.container;
    if (!props.disableScrollLock) {
      if (isOverflowing(container)) {
        const scrollbarSize = (0, import_utils65.unstable_getScrollbarSize)((0, import_utils65.unstable_ownerDocument)(container));
        restoreStyle.push({
          value: container.style.paddingRight,
          property: "padding-right",
          el: container
        });
        container.style.paddingRight = `${getPaddingRight(container) + scrollbarSize}px`;
        const fixedElements2 = (0, import_utils65.unstable_ownerDocument)(container).querySelectorAll(".mui-fixed");
        [].forEach.call(fixedElements2, (element) => {
          restoreStyle.push({
            value: element.style.paddingRight,
            property: "padding-right",
            el: element
          });
          element.style.paddingRight = `${getPaddingRight(element) + scrollbarSize}px`;
        });
      }
      let scrollContainer;
      if (container.parentNode instanceof DocumentFragment) {
        scrollContainer = (0, import_utils65.unstable_ownerDocument)(container).body;
      } else {
        const parent = container.parentElement;
        const containerWindow = (0, import_utils65.unstable_ownerWindow)(container);
        scrollContainer = (parent == null ? void 0 : parent.nodeName) === "HTML" && containerWindow.getComputedStyle(parent).overflowY === "scroll" ? parent : container;
      }
      restoreStyle.push({
        value: scrollContainer.style.overflow,
        property: "overflow",
        el: scrollContainer
      }, {
        value: scrollContainer.style.overflowX,
        property: "overflow-x",
        el: scrollContainer
      }, {
        value: scrollContainer.style.overflowY,
        property: "overflow-y",
        el: scrollContainer
      });
      scrollContainer.style.overflow = "hidden";
    }
    const restore = () => {
      restoreStyle.forEach(({
        value,
        el: el2,
        property
      }) => {
        if (value) {
          el2.style.setProperty(property, value);
        } else {
          el2.style.removeProperty(property);
        }
      });
    };
    return restore;
  }
  function getHiddenSiblings(container) {
    const hiddenSiblings = [];
    [].forEach.call(container.children, (element) => {
      if (element.getAttribute("aria-hidden") === "true") {
        hiddenSiblings.push(element);
      }
    });
    return hiddenSiblings;
  }
  var ModalManager = class {
    constructor() {
      this.containers = void 0;
      this.modals = void 0;
      this.modals = [];
      this.containers = [];
    }
    add(modal, container) {
      let modalIndex = this.modals.indexOf(modal);
      if (modalIndex !== -1) {
        return modalIndex;
      }
      modalIndex = this.modals.length;
      this.modals.push(modal);
      if (modal.modalRef) {
        ariaHidden(modal.modalRef, false);
      }
      const hiddenSiblings = getHiddenSiblings(container);
      ariaHiddenSiblings(container, modal.mount, modal.modalRef, hiddenSiblings, true);
      const containerIndex = findIndexOf(this.containers, (item) => item.container === container);
      if (containerIndex !== -1) {
        this.containers[containerIndex].modals.push(modal);
        return modalIndex;
      }
      this.containers.push({
        modals: [modal],
        container,
        restore: null,
        hiddenSiblings
      });
      return modalIndex;
    }
    mount(modal, props) {
      const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
      const containerInfo = this.containers[containerIndex];
      if (!containerInfo.restore) {
        containerInfo.restore = handleContainer(containerInfo, props);
      }
    }
    remove(modal, ariaHiddenState = true) {
      const modalIndex = this.modals.indexOf(modal);
      if (modalIndex === -1) {
        return modalIndex;
      }
      const containerIndex = findIndexOf(this.containers, (item) => item.modals.indexOf(modal) !== -1);
      const containerInfo = this.containers[containerIndex];
      containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
      this.modals.splice(modalIndex, 1);
      if (containerInfo.modals.length === 0) {
        if (containerInfo.restore) {
          containerInfo.restore();
        }
        if (modal.modalRef) {
          ariaHidden(modal.modalRef, ariaHiddenState);
        }
        ariaHiddenSiblings(containerInfo.container, modal.mount, modal.modalRef, containerInfo.hiddenSiblings, false);
        this.containers.splice(containerIndex, 1);
      } else {
        const nextTop = containerInfo.modals[containerInfo.modals.length - 1];
        if (nextTop.modalRef) {
          ariaHidden(nextTop.modalRef, false);
        }
      }
      return modalIndex;
    }
    isTopModal(modal) {
      return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
    }
  };

  // node_modules/@mui/base/unstable_useModal/useModal.js
  function getContainer2(container) {
    return typeof container === "function" ? container() : container;
  }
  function getHasTransition(children) {
    return children ? children.props.hasOwnProperty("in") : false;
  }
  var defaultManager = new ModalManager();
  function useModal(parameters) {
    const {
      container,
      disableEscapeKeyDown = false,
      disableScrollLock = false,
      // @ts-ignore internal logic - Base UI supports the manager as a prop too
      manager = defaultManager,
      closeAfterTransition = false,
      onTransitionEnter,
      onTransitionExited,
      children,
      onClose,
      open,
      rootRef
    } = parameters;
    const modal = React69.useRef({});
    const mountNodeRef = React69.useRef(null);
    const modalRef = React69.useRef(null);
    const handleRef = (0, import_utils66.unstable_useForkRef)(modalRef, rootRef);
    const [exited, setExited] = React69.useState(!open);
    const hasTransition = getHasTransition(children);
    let ariaHiddenProp = true;
    if (parameters["aria-hidden"] === "false" || parameters["aria-hidden"] === false) {
      ariaHiddenProp = false;
    }
    const getDoc = () => (0, import_utils66.unstable_ownerDocument)(mountNodeRef.current);
    const getModal = () => {
      modal.current.modalRef = modalRef.current;
      modal.current.mount = mountNodeRef.current;
      return modal.current;
    };
    const handleMounted = () => {
      manager.mount(getModal(), {
        disableScrollLock
      });
      if (modalRef.current) {
        modalRef.current.scrollTop = 0;
      }
    };
    const handleOpen = (0, import_utils66.unstable_useEventCallback)(() => {
      const resolvedContainer = getContainer2(container) || getDoc().body;
      manager.add(getModal(), resolvedContainer);
      if (modalRef.current) {
        handleMounted();
      }
    });
    const isTopModal = React69.useCallback(() => manager.isTopModal(getModal()), [manager]);
    const handlePortalRef = (0, import_utils66.unstable_useEventCallback)((node2) => {
      mountNodeRef.current = node2;
      if (!node2) {
        return;
      }
      if (open && isTopModal()) {
        handleMounted();
      } else if (modalRef.current) {
        ariaHidden(modalRef.current, ariaHiddenProp);
      }
    });
    const handleClose = React69.useCallback(() => {
      manager.remove(getModal(), ariaHiddenProp);
    }, [ariaHiddenProp, manager]);
    React69.useEffect(() => {
      return () => {
        handleClose();
      };
    }, [handleClose]);
    React69.useEffect(() => {
      if (open) {
        handleOpen();
      } else if (!hasTransition || !closeAfterTransition) {
        handleClose();
      }
    }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);
    const createHandleKeyDown = (otherHandlers) => (event) => {
      var _otherHandlers$onKeyD;
      (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);
      if (event.key !== "Escape" || !isTopModal()) {
        return;
      }
      if (!disableEscapeKeyDown) {
        event.stopPropagation();
        if (onClose) {
          onClose(event, "escapeKeyDown");
        }
      }
    };
    const createHandleBackdropClick = (otherHandlers) => (event) => {
      var _otherHandlers$onClic;
      (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
      if (event.target !== event.currentTarget) {
        return;
      }
      if (onClose) {
        onClose(event, "backdropClick");
      }
    };
    const getRootProps = (otherHandlers = {}) => {
      const propsEventHandlers = extractEventHandlers(parameters);
      delete propsEventHandlers.onTransitionEnter;
      delete propsEventHandlers.onTransitionExited;
      const externalEventHandlers = _extends({}, propsEventHandlers, otherHandlers);
      return _extends({
        role: "presentation"
      }, externalEventHandlers, {
        onKeyDown: createHandleKeyDown(externalEventHandlers),
        ref: handleRef
      });
    };
    const getBackdropProps = (otherHandlers = {}) => {
      const externalEventHandlers = otherHandlers;
      return _extends({
        "aria-hidden": true
      }, externalEventHandlers, {
        onClick: createHandleBackdropClick(externalEventHandlers),
        open
      });
    };
    const getTransitionProps2 = () => {
      const handleEnter = () => {
        setExited(false);
        if (onTransitionEnter) {
          onTransitionEnter();
        }
      };
      const handleExited = () => {
        setExited(true);
        if (onTransitionExited) {
          onTransitionExited();
        }
        if (closeAfterTransition) {
          handleClose();
        }
      };
      return {
        onEnter: (0, import_utils66.unstable_createChainedFunction)(handleEnter, children == null ? void 0 : children.props.onEnter),
        onExited: (0, import_utils66.unstable_createChainedFunction)(handleExited, children == null ? void 0 : children.props.onExited)
      };
    };
    return {
      getRootProps,
      getBackdropProps,
      getTransitionProps: getTransitionProps2,
      rootRef: handleRef,
      portalRef: handlePortalRef,
      isTopModal,
      exited,
      hasTransition
    };
  }

  // node_modules/@mui/base/Modal/modalClasses.js
  function getModalUtilityClass(slot) {
    return (0, import_utils43.unstable_generateUtilityClass)("MuiModal", slot);
  }
  var modalClasses = (0, import_utils42.unstable_generateUtilityClasses)("MuiModal", ["root", "hidden", "backdrop"]);

  // node_modules/@mui/base/Modal/Modal.js
  var import_jsx_runtime44 = __toESM(require_jsx_runtime());
  var import_jsx_runtime45 = __toESM(require_jsx_runtime());
  var _excluded36 = ["children", "closeAfterTransition", "container", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "onBackdropClick", "onClose", "onKeyDown", "open", "onTransitionEnter", "onTransitionExited", "slotProps", "slots"];
  var useUtilityClasses21 = (ownerState) => {
    const {
      open,
      exited
    } = ownerState;
    const slots = {
      root: ["root", !open && exited && "hidden"],
      backdrop: ["backdrop"]
    };
    return (0, import_composeClasses21.unstable_composeClasses)(slots, useClassNamesOverride(getModalUtilityClass));
  };
  var Modal = /* @__PURE__ */ React70.forwardRef(function Modal2(props, forwardedRef) {
    var _slots$root;
    const {
      children,
      closeAfterTransition = false,
      container,
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableEscapeKeyDown = false,
      disablePortal = false,
      disableRestoreFocus = false,
      disableScrollLock = false,
      hideBackdrop = false,
      keepMounted = false,
      onBackdropClick,
      open,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded36);
    const propsWithDefaults = _extends({}, props, {
      closeAfterTransition,
      disableAutoFocus,
      disableEnforceFocus,
      disableEscapeKeyDown,
      disablePortal,
      disableRestoreFocus,
      disableScrollLock,
      hideBackdrop,
      keepMounted
    });
    const {
      getRootProps,
      getBackdropProps,
      getTransitionProps: getTransitionProps2,
      portalRef,
      isTopModal,
      exited,
      hasTransition
    } = useModal(_extends({}, propsWithDefaults, {
      rootRef: forwardedRef
    }));
    const ownerState = _extends({}, propsWithDefaults, {
      exited,
      hasTransition
    });
    const classes = useUtilityClasses21(ownerState);
    const childProps = {};
    if (children.props.tabIndex === void 0) {
      childProps.tabIndex = "-1";
    }
    if (hasTransition) {
      const {
        onEnter,
        onExited
      } = getTransitionProps2();
      childProps.onEnter = onEnter;
      childProps.onExited = onExited;
    }
    const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
    const rootProps = useSlotProps({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      getSlotProps: getRootProps,
      className: classes.root,
      ownerState
    });
    const BackdropComponent = slots.backdrop;
    const backdropProps = useSlotProps({
      elementType: BackdropComponent,
      externalSlotProps: slotProps.backdrop,
      getSlotProps: (otherHandlers) => {
        return getBackdropProps(_extends({}, otherHandlers, {
          onClick: (e) => {
            if (onBackdropClick) {
              onBackdropClick(e);
            }
            if (otherHandlers != null && otherHandlers.onClick) {
              otherHandlers.onClick(e);
            }
          }
        }));
      },
      className: classes.backdrop,
      ownerState
    });
    if (!keepMounted && !open && (!hasTransition || exited)) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(Portal, {
      ref: portalRef,
      container,
      disablePortal,
      children: /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)(Root, _extends({}, rootProps, {
        children: [!hideBackdrop && BackdropComponent ? /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(BackdropComponent, _extends({}, backdropProps)) : null, /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(FocusTrap, {
          disableEnforceFocus,
          disableAutoFocus,
          disableRestoreFocus,
          isEnabled: isTopModal,
          open,
          children: /* @__PURE__ */ React70.cloneElement(children, childProps)
        })]
      }))
    });
  });
  true ? Modal.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * A single child content element.
     */
    children: import_utils68.elementAcceptingRef.isRequired,
    /**
     * When set to true the Modal waits until a nested Transition is completed before closing.
     * @default false
     */
    closeAfterTransition: import_prop_types32.default.bool,
    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: import_prop_types32.default.oneOfType([import_utils68.HTMLElementType, import_prop_types32.default.func]),
    /**
     * If `true`, the modal will not automatically shift focus to itself when it opens, and
     * replace it to the last focused element when it closes.
     * This also works correctly with any modal children that have the `disableAutoFocus` prop.
     *
     * Generally this should never be set to `true` as it makes the modal less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableAutoFocus: import_prop_types32.default.bool,
    /**
     * If `true`, the modal will not prevent focus from leaving the modal while open.
     *
     * Generally this should never be set to `true` as it makes the modal less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableEnforceFocus: import_prop_types32.default.bool,
    /**
     * If `true`, hitting escape will not fire the `onClose` callback.
     * @default false
     */
    disableEscapeKeyDown: import_prop_types32.default.bool,
    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: import_prop_types32.default.bool,
    /**
     * If `true`, the modal will not restore focus to previously focused element once
     * modal is hidden or unmounted.
     * @default false
     */
    disableRestoreFocus: import_prop_types32.default.bool,
    /**
     * Disable the scroll lock behavior.
     * @default false
     */
    disableScrollLock: import_prop_types32.default.bool,
    /**
     * If `true`, the backdrop is not rendered.
     * @default false
     */
    hideBackdrop: import_prop_types32.default.bool,
    /**
     * Always keep the children in the DOM.
     * This prop can be useful in SEO situation or
     * when you want to maximize the responsiveness of the Modal.
     * @default false
     */
    keepMounted: import_prop_types32.default.bool,
    /**
     * Callback fired when the backdrop is clicked.
     * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
     */
    onBackdropClick: import_prop_types32.default.func,
    /**
     * Callback fired when the component requests to be closed.
     * The `reason` parameter can optionally be used to control the response to `onClose`.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
     */
    onClose: import_prop_types32.default.func,
    /**
     * A function called when a transition enters.
     */
    onTransitionEnter: import_prop_types32.default.func,
    /**
     * A function called when a transition has exited.
     */
    onTransitionExited: import_prop_types32.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types32.default.bool.isRequired,
    /**
     * The props used for each slot inside the Modal.
     * @default {}
     */
    slotProps: import_prop_types32.default.shape({
      backdrop: import_prop_types32.default.oneOfType([import_prop_types32.default.func, import_prop_types32.default.object]),
      root: import_prop_types32.default.oneOfType([import_prop_types32.default.func, import_prop_types32.default.object])
    }),
    /**
     * The components used for each slot inside the Modal.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types32.default.shape({
      backdrop: import_prop_types32.default.elementType,
      root: import_prop_types32.default.elementType
    })
  } : void 0;

  // node_modules/@mui/base/NoSsr/NoSsr.js
  var React71 = __toESM(require_react());
  var import_prop_types33 = __toESM(require_prop_types());
  var import_utils70 = __toESM(require_utils());
  var import_jsx_runtime46 = __toESM(require_jsx_runtime());
  function NoSsr(props) {
    const {
      children,
      defer = false,
      fallback = null
    } = props;
    const [mountedState, setMountedState] = React71.useState(false);
    (0, import_utils70.unstable_useEnhancedEffect)(() => {
      if (!defer) {
        setMountedState(true);
      }
    }, [defer]);
    React71.useEffect(() => {
      if (defer) {
        setMountedState(true);
      }
    }, [defer]);
    return /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(React71.Fragment, {
      children: mountedState ? children : fallback
    });
  }
  true ? NoSsr.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * You can wrap a node.
     */
    children: import_prop_types33.default.node,
    /**
     * If `true`, the component will not only prevent server-side rendering.
     * It will also defer the rendering of the children into a different screen frame.
     * @default false
     */
    defer: import_prop_types33.default.bool,
    /**
     * The fallback content to display.
     * @default null
     */
    fallback: import_prop_types33.default.node
  } : void 0;
  if (true) {
    NoSsr["propTypes"] = (0, import_utils70.exactProp)(NoSsr.propTypes);
  }

  // node_modules/@mui/base/Unstable_NumberInput/NumberInput.js
  init_extends();
  var React73 = __toESM(require_react());
  var import_prop_types34 = __toESM(require_prop_types());

  // node_modules/@mui/base/Unstable_NumberInput/numberInputClasses.js
  function getNumberInputUtilityClass(slot) {
    return (0, import_utils43.unstable_generateUtilityClass)("MuiNumberInput", slot);
  }
  var numberInputClasses = (0, import_utils42.unstable_generateUtilityClasses)("MuiNumberInput", ["root", "formControl", "focused", "disabled", "readOnly", "error", "input", "incrementButton", "decrementButton", "adornedStart", "adornedEnd"]);

  // node_modules/@mui/base/unstable_useNumberInput/useNumberInput.js
  init_extends();
  var React72 = __toESM(require_react());
  var import_utils71 = __toESM(require_utils());

  // node_modules/@mui/base/unstable_useNumberInput/utils.js
  function simpleClamp(val, min3 = Number.MIN_SAFE_INTEGER, max3 = Number.MAX_SAFE_INTEGER) {
    return Math.max(min3, Math.min(val, max3));
  }
  function clamp(val, min3 = Number.MIN_SAFE_INTEGER, max3 = Number.MAX_SAFE_INTEGER, stepProp = NaN) {
    if (Number.isNaN(stepProp)) {
      return simpleClamp(val, min3, max3);
    }
    const step = stepProp || 1;
    const remainder = val % step;
    const positivity = Math.sign(remainder);
    if (Math.abs(remainder) > step / 2) {
      return simpleClamp(val + positivity * (step - Math.abs(remainder)), min3, max3);
    }
    return simpleClamp(val - positivity * Math.abs(remainder), min3, max3);
  }
  function isNumber(val) {
    return typeof val === "number" && !Number.isNaN(val) && Number.isFinite(val);
  }

  // node_modules/@mui/base/unstable_useNumberInput/useNumberInput.js
  var STEP_KEYS = ["ArrowUp", "ArrowDown", "PageUp", "PageDown"];
  var SUPPORTED_KEYS = [...STEP_KEYS, "Home", "End"];
  function parseInput(v) {
    return v ? String(v.trim()) : String(v);
  }
  function useNumberInput(parameters) {
    const {
      min: min3,
      max: max3,
      step,
      shiftMultiplier = 10,
      defaultValue: defaultValueProp,
      disabled: disabledProp = false,
      error: errorProp = false,
      onBlur,
      onInputChange,
      onFocus,
      onChange,
      required: requiredProp = false,
      readOnly: readOnlyProp = false,
      value: valueProp,
      inputRef: inputRefProp,
      inputId: inputIdProp
    } = parameters;
    const formControlContext = useFormControlContext();
    const {
      current: isControlled
    } = React72.useRef(valueProp != null);
    const handleInputRefWarning = React72.useCallback((instance) => {
      if (true) {
        if (instance && instance.nodeName !== "INPUT" && !instance.focus) {
          console.error(["MUI: You have provided a `slots.input` to the input component", "that does not correctly handle the `ref` prop.", "Make sure the `ref` prop is called with a HTMLInputElement."].join("\n"));
        }
      }
    }, []);
    const inputRef = React72.useRef(null);
    const handleInputRef = (0, import_utils71.unstable_useForkRef)(inputRef, inputRefProp, handleInputRefWarning);
    const inputId = (0, import_utils71.unstable_useId)(inputIdProp);
    const [focused, setFocused] = React72.useState(false);
    const [value, setValue] = (0, import_utils71.unstable_useControlled)({
      controlled: valueProp,
      default: defaultValueProp,
      name: "NumberInput"
    });
    const [dirtyValue, setDirtyValue] = React72.useState(value ? String(value) : void 0);
    React72.useEffect(() => {
      if (!formControlContext && disabledProp && focused) {
        setFocused(false);
        onBlur == null || onBlur();
      }
    }, [formControlContext, disabledProp, focused, onBlur]);
    const handleFocus = (otherHandlers) => (event) => {
      var _otherHandlers$onFocu;
      (_otherHandlers$onFocu = otherHandlers.onFocus) == null || _otherHandlers$onFocu.call(otherHandlers, event);
      if (event.defaultPrevented) {
        return;
      }
      if (formControlContext && formControlContext.onFocus) {
        var _formControlContext$o;
        formControlContext == null || (_formControlContext$o = formControlContext.onFocus) == null || _formControlContext$o.call(formControlContext);
      }
      setFocused(true);
    };
    const handleValueChange = () => (event, val) => {
      let newValue;
      if (val === void 0) {
        newValue = val;
        setDirtyValue("");
      } else {
        newValue = clamp(val, min3, max3, step);
        setDirtyValue(String(newValue));
      }
      setValue(newValue);
      if (isNumber(newValue)) {
        onChange == null || onChange(event, newValue);
      } else {
        onChange == null || onChange(event, void 0);
      }
    };
    const handleInputChange = (otherHandlers) => (event) => {
      var _formControlContext$o2, _otherHandlers$onInpu;
      if (!isControlled && event.target === null) {
        throw new Error(true ? `MUI: Expected valid input target. Did you use a custom \`slots.input\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` : (0, import_utils.formatMuiErrorMessage)(17));
      }
      formControlContext == null || (_formControlContext$o2 = formControlContext.onChange) == null || _formControlContext$o2.call(formControlContext, event);
      (_otherHandlers$onInpu = otherHandlers.onInputChange) == null || _otherHandlers$onInpu.call(otherHandlers, event);
      const val = parseInput(event.currentTarget.value);
      if (val === "" || val === "-") {
        setDirtyValue(val);
        setValue(void 0);
      }
      if (val.match(/^-?\d+?$/)) {
        setDirtyValue(val);
        setValue(parseInt(val, 10));
      }
    };
    const handleBlur2 = (otherHandlers) => (event) => {
      var _otherHandlers$onBlur;
      const val = parseInput(event.currentTarget.value);
      (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);
      if (val === "" || val === "-") {
        handleValueChange()(event, void 0);
      } else {
        handleValueChange()(event, parseInt(val, 10));
      }
      if (formControlContext && formControlContext.onBlur) {
        formControlContext.onBlur();
      }
      setFocused(false);
    };
    const handleClick = (otherHandlers) => (event) => {
      var _otherHandlers$onClic;
      if (inputRef.current && event.currentTarget === event.target) {
        inputRef.current.focus();
      }
      (_otherHandlers$onClic = otherHandlers.onClick) == null || _otherHandlers$onClic.call(otherHandlers, event);
    };
    const handleStep = (direction) => (event) => {
      let newValue;
      if (isNumber(value)) {
        const multiplier = event.shiftKey || event.key === "PageUp" || event.key === "PageDown" ? shiftMultiplier : 1;
        newValue = {
          up: value + (step != null ? step : 1) * multiplier,
          down: value - (step != null ? step : 1) * multiplier
        }[direction];
      } else {
        newValue = {
          up: min3 != null ? min3 : 0,
          down: max3 != null ? max3 : 0
        }[direction];
      }
      handleValueChange()(event, newValue);
    };
    const handleKeyDown2 = (otherHandlers) => (event) => {
      var _otherHandlers$onKeyD;
      (_otherHandlers$onKeyD = otherHandlers.onKeyDown) == null || _otherHandlers$onKeyD.call(otherHandlers, event);
      if (event.defaultPrevented) {
        return;
      }
      if (SUPPORTED_KEYS.includes(event.key)) {
        event.preventDefault();
      }
      if (STEP_KEYS.includes(event.key)) {
        const direction = {
          ArrowUp: "up",
          ArrowDown: "down",
          PageUp: "up",
          PageDown: "down"
        }[event.key];
        handleStep(direction)(event);
      }
      if (event.key === "Home" && isNumber(max3)) {
        handleValueChange()(event, max3);
      }
      if (event.key === "End" && isNumber(min3)) {
        handleValueChange()(event, min3);
      }
    };
    const getRootProps = (externalProps = {}) => {
      const propsEventHandlers = extractEventHandlers(parameters, ["onBlur", "onInputChange", "onFocus", "onChange"]);
      const externalEventHandlers = _extends({}, propsEventHandlers, extractEventHandlers(externalProps));
      return _extends({}, externalProps, externalEventHandlers, {
        onClick: handleClick(externalEventHandlers)
      });
    };
    const getInputProps = (externalProps = {}) => {
      var _ref;
      const externalEventHandlers = _extends({
        onBlur,
        onFocus
      }, extractEventHandlers(externalProps, ["onInputChange"]));
      const mergedEventHandlers = _extends({}, externalProps, externalEventHandlers, {
        onFocus: handleFocus(externalEventHandlers),
        onChange: handleInputChange(_extends({}, externalEventHandlers, {
          onInputChange
        })),
        onBlur: handleBlur2(externalEventHandlers),
        onKeyDown: handleKeyDown2(externalEventHandlers)
      });
      const displayValue = (_ref = focused ? dirtyValue : value) != null ? _ref : "";
      return _extends({}, mergedEventHandlers, {
        type: "text",
        id: inputId,
        "aria-invalid": errorProp || void 0,
        defaultValue: void 0,
        ref: handleInputRef,
        value: displayValue,
        "aria-valuenow": displayValue,
        "aria-valuetext": String(displayValue),
        "aria-valuemin": min3,
        "aria-valuemax": max3,
        autoComplete: "off",
        autoCorrect: "off",
        spellCheck: "false",
        required: requiredProp,
        readOnly: readOnlyProp,
        "aria-disabled": disabledProp,
        disabled: disabledProp
      });
    };
    const handleStepperButtonMouseDown = (event) => {
      event.preventDefault();
      if (inputRef.current) {
        inputRef.current.focus();
      }
    };
    const stepperButtonCommonProps = {
      "aria-controls": inputId,
      tabIndex: -1
    };
    const isIncrementDisabled = disabledProp || (isNumber(value) ? value >= (max3 != null ? max3 : Number.MAX_SAFE_INTEGER) : false);
    const getIncrementButtonProps = (externalProps = {}) => {
      return _extends({}, externalProps, stepperButtonCommonProps, {
        disabled: isIncrementDisabled,
        "aria-disabled": isIncrementDisabled,
        onMouseDown: handleStepperButtonMouseDown,
        onClick: handleStep("up")
      });
    };
    const isDecrementDisabled = disabledProp || (isNumber(value) ? value <= (min3 != null ? min3 : Number.MIN_SAFE_INTEGER) : false);
    const getDecrementButtonProps = (externalProps = {}) => {
      return _extends({}, externalProps, stepperButtonCommonProps, {
        disabled: isDecrementDisabled,
        "aria-disabled": isDecrementDisabled,
        onMouseDown: handleStepperButtonMouseDown,
        onClick: handleStep("down")
      });
    };
    return {
      disabled: disabledProp,
      error: errorProp,
      focused,
      formControlContext,
      getInputProps,
      getIncrementButtonProps,
      getDecrementButtonProps,
      getRootProps,
      required: requiredProp,
      value: focused ? dirtyValue : value,
      isIncrementDisabled,
      isDecrementDisabled,
      inputValue: dirtyValue
    };
  }

  // node_modules/@mui/base/Unstable_NumberInput/NumberInput.js
  var import_composeClasses22 = __toESM(require_composeClasses3());
  var import_jsx_runtime47 = __toESM(require_jsx_runtime());
  var import_jsx_runtime48 = __toESM(require_jsx_runtime());
  var _excluded37 = ["className", "defaultValue", "disabled", "endAdornment", "error", "id", "max", "min", "onBlur", "onInputChange", "onFocus", "onChange", "placeholder", "required", "readOnly", "shiftMultiplier", "startAdornment", "step", "value", "slotProps", "slots"];
  var useUtilityClasses22 = (ownerState) => {
    const {
      disabled,
      error,
      focused,
      readOnly,
      formControlContext,
      isIncrementDisabled,
      isDecrementDisabled,
      startAdornment,
      endAdornment
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", error && "error", focused && "focused", readOnly && "readOnly", Boolean(formControlContext) && "formControl", Boolean(startAdornment) && "adornedStart", Boolean(endAdornment) && "adornedEnd"],
      input: ["input", disabled && "disabled", readOnly && "readOnly"],
      incrementButton: ["incrementButton", isIncrementDisabled && "disabled"],
      decrementButton: ["decrementButton", isDecrementDisabled && "disabled"]
    };
    return (0, import_composeClasses22.unstable_composeClasses)(slots, useClassNamesOverride(getNumberInputUtilityClass));
  };
  var NumberInput = /* @__PURE__ */ React73.forwardRef(function NumberInput2(props, forwardedRef) {
    var _slots$root, _slots$input, _slots$incrementButto, _slots$decrementButto;
    const {
      className,
      defaultValue,
      disabled,
      endAdornment,
      error,
      id,
      max: max3,
      min: min3,
      onBlur,
      onInputChange,
      onFocus,
      onChange,
      placeholder,
      required,
      readOnly = false,
      shiftMultiplier,
      startAdornment,
      step,
      value,
      slotProps = {},
      slots = {}
    } = props, rest = _objectWithoutPropertiesLoose(props, _excluded37);
    const {
      getRootProps,
      getInputProps,
      getIncrementButtonProps,
      getDecrementButtonProps,
      focused,
      error: errorState,
      disabled: disabledState,
      formControlContext,
      isIncrementDisabled,
      isDecrementDisabled
    } = useNumberInput({
      min: min3,
      max: max3,
      step,
      shiftMultiplier,
      defaultValue,
      disabled,
      error,
      onFocus,
      onInputChange,
      onBlur,
      onChange,
      required,
      readOnly,
      value,
      inputId: id
    });
    const ownerState = _extends({}, props, {
      disabled: disabledState,
      error: errorState,
      focused,
      readOnly,
      formControlContext,
      isIncrementDisabled,
      isDecrementDisabled
    });
    const classes = useUtilityClasses22(ownerState);
    const propsForwardedToInputSlot = {
      placeholder
    };
    const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
    const rootProps = useSlotProps({
      elementType: Root,
      getSlotProps: getRootProps,
      externalSlotProps: slotProps.root,
      externalForwardedProps: rest,
      additionalProps: {
        ref: forwardedRef
      },
      ownerState,
      className: [classes.root, className]
    });
    const Input5 = (_slots$input = slots.input) != null ? _slots$input : "input";
    const inputProps = useSlotProps({
      elementType: Input5,
      getSlotProps: (otherHandlers) => getInputProps(_extends({}, otherHandlers, propsForwardedToInputSlot)),
      externalSlotProps: slotProps.input,
      ownerState,
      className: classes.input
    });
    const IncrementButton = (_slots$incrementButto = slots.incrementButton) != null ? _slots$incrementButto : "button";
    const incrementButtonProps = useSlotProps({
      elementType: IncrementButton,
      getSlotProps: getIncrementButtonProps,
      externalSlotProps: slotProps.incrementButton,
      ownerState,
      className: classes.incrementButton
    });
    const DecrementButton = (_slots$decrementButto = slots.decrementButton) != null ? _slots$decrementButto : "button";
    const decrementButtonProps = useSlotProps({
      elementType: DecrementButton,
      getSlotProps: getDecrementButtonProps,
      externalSlotProps: slotProps.decrementButton,
      ownerState,
      className: classes.decrementButton
    });
    return /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)(Root, _extends({}, rootProps, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime47.jsx)(DecrementButton, _extends({}, decrementButtonProps)), /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(IncrementButton, _extends({}, incrementButtonProps)), startAdornment, /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(Input5, _extends({}, inputProps)), endAdornment]
    }));
  });
  true ? NumberInput.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: import_prop_types34.default.node,
    /**
     * @ignore
     */
    className: import_prop_types34.default.string,
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types34.default.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: import_prop_types34.default.bool,
    /**
     * Trailing adornment for this input.
     */
    endAdornment: import_prop_types34.default.node,
    /**
     * If `true`, the `input` will indicate an error by setting the `aria-invalid` attribute on the input and the `Mui-error` class on the root element.
     */
    error: import_prop_types34.default.bool,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types34.default.string,
    /**
     * The maximum value.
     */
    max: import_prop_types34.default.number,
    /**
     * The minimum value.
     */
    min: import_prop_types34.default.number,
    /**
     * @ignore
     */
    onBlur: import_prop_types34.default.func,
    /**
     * Callback fired after the value is clamped and changes - when the `input` is blurred or when
     * the stepper buttons are triggered.
     * Called with `undefined` when the value is unset.
     *
     * @param {React.FocusEvent<HTMLInputElement>|React.PointerEvent|React.KeyboardEvent} event The event source of the callback
     * @param {number|undefined} value The new value of the component
     */
    onChange: import_prop_types34.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types34.default.func,
    /**
     * Callback fired when the `input` value changes after each keypress, before clamping is applied.
     * Note that `event.target.value` may contain values that fall outside of `min` and `max` or
     * are otherwise "invalid".
     *
     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
     */
    onInputChange: import_prop_types34.default.func,
    /**
     * @ignore
     */
    placeholder: import_prop_types34.default.string,
    /**
     * If `true`, the `input` element becomes read-only. The stepper buttons remain active,
     * with the addition that they are now keyboard focusable.
     * @default false
     */
    readOnly: import_prop_types34.default.bool,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: import_prop_types34.default.bool,
    /**
     * Multiplier applied to `step` if the shift key is held while incrementing
     * or decrementing the value. Defaults to `10`.
     */
    shiftMultiplier: import_prop_types34.default.number,
    /**
     * The props used for each slot inside the NumberInput.
     * @default {}
     */
    slotProps: import_prop_types34.default.shape({
      decrementButton: import_prop_types34.default.oneOfType([import_prop_types34.default.func, import_prop_types34.default.object]),
      incrementButton: import_prop_types34.default.oneOfType([import_prop_types34.default.func, import_prop_types34.default.object]),
      input: import_prop_types34.default.oneOfType([import_prop_types34.default.func, import_prop_types34.default.object]),
      root: import_prop_types34.default.oneOfType([import_prop_types34.default.func, import_prop_types34.default.object])
    }),
    /**
     * The components used for each slot inside the InputBase.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types34.default.shape({
      decrementButton: import_prop_types34.default.elementType,
      incrementButton: import_prop_types34.default.elementType,
      input: import_prop_types34.default.elementType,
      root: import_prop_types34.default.elementType
    }),
    /**
     * Leading adornment for this input.
     */
    startAdornment: import_prop_types34.default.node,
    /**
     * The amount that the value changes on each increment or decrement.
     */
    step: import_prop_types34.default.number,
    /**
     * The current value. Use when the component is controlled.
     */
    value: import_prop_types34.default.any
  } : void 0;

  // node_modules/@mui/base/OptionGroup/OptionGroup.js
  init_extends();
  var React74 = __toESM(require_react());
  var import_prop_types35 = __toESM(require_prop_types());
  var import_composeClasses23 = __toESM(require_composeClasses3());

  // node_modules/@mui/base/OptionGroup/optionGroupClasses.js
  function getOptionGroupUtilityClass(slot) {
    return (0, import_utils43.unstable_generateUtilityClass)("MuiOptionGroup", slot);
  }
  var optionGroupClasses = (0, import_utils42.unstable_generateUtilityClasses)("MuiOptionGroup", ["root", "disabled", "label", "list"]);

  // node_modules/@mui/base/OptionGroup/OptionGroup.js
  var import_jsx_runtime49 = __toESM(require_jsx_runtime());
  var import_jsx_runtime50 = __toESM(require_jsx_runtime());
  var _excluded38 = ["disabled", "slotProps", "slots"];
  function useUtilityClasses23(disabled) {
    const slots = {
      root: ["root", disabled && "disabled"],
      label: ["label"],
      list: ["list"]
    };
    return (0, import_composeClasses23.unstable_composeClasses)(slots, useClassNamesOverride(getOptionGroupUtilityClass));
  }
  var OptionGroup = /* @__PURE__ */ React74.forwardRef(function OptionGroup2(props, forwardedRef) {
    const {
      disabled = false,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded38);
    const Root = (slots == null ? void 0 : slots.root) || "li";
    const Label = (slots == null ? void 0 : slots.label) || "span";
    const List4 = (slots == null ? void 0 : slots.list) || "ul";
    const classes = useUtilityClasses23(disabled);
    const rootProps = useSlotProps({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        ref: forwardedRef
      },
      ownerState: props,
      className: classes.root
    });
    const labelProps = useSlotProps({
      elementType: Label,
      externalSlotProps: slotProps.label,
      ownerState: props,
      className: classes.label
    });
    const listProps = useSlotProps({
      elementType: List4,
      externalSlotProps: slotProps.list,
      ownerState: props,
      className: classes.list
    });
    return /* @__PURE__ */ (0, import_jsx_runtime50.jsxs)(Root, _extends({}, rootProps, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime49.jsx)(Label, _extends({}, labelProps, {
        children: props.label
      })), /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(List4, _extends({}, listProps, {
        children: props.children
      }))]
    }));
  });
  true ? OptionGroup.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: import_prop_types35.default.node,
    /**
     * @ignore
     */
    className: import_prop_types35.default.string,
    /**
     * If `true` all the options in the group will be disabled.
     * @default false
     */
    disabled: import_prop_types35.default.bool,
    /**
     * The human-readable description of the group.
     */
    label: import_prop_types35.default.node,
    /**
     * The props used for each slot inside the Input.
     * @default {}
     */
    slotProps: import_prop_types35.default.shape({
      label: import_prop_types35.default.oneOfType([import_prop_types35.default.func, import_prop_types35.default.object]),
      list: import_prop_types35.default.oneOfType([import_prop_types35.default.func, import_prop_types35.default.object]),
      root: import_prop_types35.default.oneOfType([import_prop_types35.default.func, import_prop_types35.default.object])
    }),
    /**
     * The components used for each slot inside the OptionGroup.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types35.default.shape({
      label: import_prop_types35.default.elementType,
      list: import_prop_types35.default.elementType,
      root: import_prop_types35.default.elementType
    })
  } : void 0;

  // node_modules/@mui/base/Option/Option.js
  init_extends();
  var React76 = __toESM(require_react());
  var import_prop_types36 = __toESM(require_prop_types());
  var import_utils76 = __toESM(require_utils());
  var import_composeClasses24 = __toESM(require_composeClasses3());

  // node_modules/@mui/base/Option/optionClasses.js
  function getOptionUtilityClass(slot) {
    return (0, import_utils43.unstable_generateUtilityClass)("MuiOption", slot);
  }
  var optionClasses = (0, import_utils42.unstable_generateUtilityClasses)("MuiOption", ["root", "disabled", "selected", "highlighted"]);

  // node_modules/@mui/base/useOption/useOption.js
  init_extends();
  var React75 = __toESM(require_react());
  var import_utils75 = __toESM(require_utils());
  function useOption(params) {
    const {
      value,
      label,
      disabled,
      rootRef: optionRefParam,
      id: idParam
    } = params;
    const {
      getRootProps: getListItemProps,
      rootRef: listItemRefHandler,
      highlighted,
      selected
    } = useListItem({
      item: value
    });
    const id = (0, import_utils75.unstable_useId)(idParam);
    const optionRef = React75.useRef(null);
    const selectOption = React75.useMemo(() => ({
      disabled,
      label,
      value,
      ref: optionRef,
      id
    }), [disabled, label, value, id]);
    const {
      index: index3
    } = useCompoundItem(value, selectOption);
    const handleRef = (0, import_utils75.unstable_useForkRef)(optionRefParam, optionRef, listItemRefHandler);
    return {
      getRootProps: (externalProps = {}) => {
        const externalEventHandlers = extractEventHandlers(externalProps);
        return _extends({}, externalProps, getListItemProps(externalEventHandlers), {
          id,
          ref: handleRef,
          role: "option",
          "aria-selected": selected
        });
      },
      highlighted,
      index: index3,
      selected,
      rootRef: handleRef
    };
  }

  // node_modules/@mui/base/Option/Option.js
  var import_jsx_runtime51 = __toESM(require_jsx_runtime());
  var _excluded39 = ["children", "disabled", "label", "slotProps", "slots", "value"];
  function useUtilityClasses24(ownerState) {
    const {
      disabled,
      highlighted,
      selected
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", highlighted && "highlighted", selected && "selected"]
    };
    return (0, import_composeClasses24.unstable_composeClasses)(slots, useClassNamesOverride(getOptionUtilityClass));
  }
  var Option = /* @__PURE__ */ React76.memo(/* @__PURE__ */ React76.forwardRef(function Option2(props, forwardedRef) {
    var _slots$root, _optionRef$current;
    const {
      children,
      disabled = false,
      label,
      slotProps = {},
      slots = {},
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded39);
    const Root = (_slots$root = slots.root) != null ? _slots$root : "li";
    const optionRef = React76.useRef(null);
    const combinedRef = (0, import_utils76.unstable_useForkRef)(optionRef, forwardedRef);
    const computedLabel = label != null ? label : typeof children === "string" ? children : (_optionRef$current = optionRef.current) == null ? void 0 : _optionRef$current.innerText;
    const {
      getRootProps,
      selected,
      highlighted,
      index: index3
    } = useOption({
      disabled,
      label: computedLabel,
      rootRef: combinedRef,
      value
    });
    const ownerState = _extends({}, props, {
      disabled,
      highlighted,
      index: index3,
      selected
    });
    const classes = useUtilityClasses24(ownerState);
    const rootProps = useSlotProps({
      getSlotProps: getRootProps,
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      className: classes.root,
      ownerState
    });
    return /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(Root, _extends({}, rootProps, {
      children
    }));
  }));
  true ? Option.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: import_prop_types36.default.node,
    /**
     * @ignore
     */
    className: import_prop_types36.default.string,
    /**
     * If `true`, the option will be disabled.
     * @default false
     */
    disabled: import_prop_types36.default.bool,
    /**
     * A text representation of the option's content.
     * Used for keyboard text navigation matching.
     */
    label: import_prop_types36.default.string,
    /**
     * The props used for each slot inside the Option.
     * @default {}
     */
    slotProps: import_prop_types36.default.shape({
      root: import_prop_types36.default.oneOfType([import_prop_types36.default.func, import_prop_types36.default.object])
    }),
    /**
     * The components used for each slot inside the Option.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types36.default.shape({
      root: import_prop_types36.default.elementType
    }),
    /**
     * The value of the option.
     */
    value: import_prop_types36.default.any.isRequired
  } : void 0;

  // node_modules/@mui/base/Unstable_Popup/Popup.js
  init_extends();
  var React78 = __toESM(require_react());
  var import_prop_types37 = __toESM(require_prop_types());

  // node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs
  var min2 = Math.min;
  var max2 = Math.max;
  var round3 = Math.round;
  var floor = Math.floor;
  var createCoords = (v) => ({
    x: v,
    y: v
  });
  var oppositeSideMap = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  var oppositeAlignmentMap = {
    start: "end",
    end: "start"
  };
  function evaluate(value, param) {
    return typeof value === "function" ? value(param) : value;
  }
  function getSide(placement) {
    return placement.split("-")[0];
  }
  function getAlignment(placement) {
    return placement.split("-")[1];
  }
  function getOppositeAxis(axis) {
    return axis === "x" ? "y" : "x";
  }
  function getAxisLength(axis) {
    return axis === "y" ? "height" : "width";
  }
  function getSideAxis(placement) {
    return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
  }
  function getAlignmentAxis(placement) {
    return getOppositeAxis(getSideAxis(placement));
  }
  function getAlignmentSides(placement, rects, rtl) {
    if (rtl === void 0) {
      rtl = false;
    }
    const alignment = getAlignment(placement);
    const alignmentAxis = getAlignmentAxis(placement);
    const length2 = getAxisLength(alignmentAxis);
    let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
    if (rects.reference[length2] > rects.floating[length2]) {
      mainAlignmentSide = getOppositePlacement2(mainAlignmentSide);
    }
    return [mainAlignmentSide, getOppositePlacement2(mainAlignmentSide)];
  }
  function getExpandedPlacements(placement) {
    const oppositePlacement = getOppositePlacement2(placement);
    return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
  }
  function getOppositeAlignmentPlacement(placement) {
    return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
  }
  function getSideList(side, isStart, rtl) {
    const lr = ["left", "right"];
    const rl = ["right", "left"];
    const tb = ["top", "bottom"];
    const bt = ["bottom", "top"];
    switch (side) {
      case "top":
      case "bottom":
        if (rtl)
          return isStart ? rl : lr;
        return isStart ? lr : rl;
      case "left":
      case "right":
        return isStart ? tb : bt;
      default:
        return [];
    }
  }
  function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
    const alignment = getAlignment(placement);
    let list = getSideList(getSide(placement), direction === "start", rtl);
    if (alignment) {
      list = list.map((side) => side + "-" + alignment);
      if (flipAlignment) {
        list = list.concat(list.map(getOppositeAlignmentPlacement));
      }
    }
    return list;
  }
  function getOppositePlacement2(placement) {
    return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
  }
  function expandPaddingObject(padding) {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      ...padding
    };
  }
  function getPaddingObject(padding) {
    return typeof padding !== "number" ? expandPaddingObject(padding) : {
      top: padding,
      right: padding,
      bottom: padding,
      left: padding
    };
  }
  function rectToClientRect2(rect) {
    return {
      ...rect,
      top: rect.y,
      left: rect.x,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    };
  }

  // node_modules/@floating-ui/core/dist/floating-ui.core.mjs
  function computeCoordsFromPlacement(_ref, placement, rtl) {
    let {
      reference: reference2,
      floating
    } = _ref;
    const sideAxis = getSideAxis(placement);
    const alignmentAxis = getAlignmentAxis(placement);
    const alignLength = getAxisLength(alignmentAxis);
    const side = getSide(placement);
    const isVertical = sideAxis === "y";
    const commonX = reference2.x + reference2.width / 2 - floating.width / 2;
    const commonY = reference2.y + reference2.height / 2 - floating.height / 2;
    const commonAlign = reference2[alignLength] / 2 - floating[alignLength] / 2;
    let coords;
    switch (side) {
      case "top":
        coords = {
          x: commonX,
          y: reference2.y - floating.height
        };
        break;
      case "bottom":
        coords = {
          x: commonX,
          y: reference2.y + reference2.height
        };
        break;
      case "right":
        coords = {
          x: reference2.x + reference2.width,
          y: commonY
        };
        break;
      case "left":
        coords = {
          x: reference2.x - floating.width,
          y: commonY
        };
        break;
      default:
        coords = {
          x: reference2.x,
          y: reference2.y
        };
    }
    switch (getAlignment(placement)) {
      case "start":
        coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
        break;
      case "end":
        coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
        break;
    }
    return coords;
  }
  var computePosition = async (reference2, floating, config2) => {
    const {
      placement = "bottom",
      strategy = "absolute",
      middleware: middleware2 = [],
      platform: platform2
    } = config2;
    const validMiddleware = middleware2.filter(Boolean);
    const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
    let rects = await platform2.getElementRects({
      reference: reference2,
      floating,
      strategy
    });
    let {
      x,
      y
    } = computeCoordsFromPlacement(rects, placement, rtl);
    let statefulPlacement = placement;
    let middlewareData = {};
    let resetCount = 0;
    for (let i = 0; i < validMiddleware.length; i++) {
      const {
        name,
        fn: fn2
      } = validMiddleware[i];
      const {
        x: nextX,
        y: nextY,
        data,
        reset
      } = await fn2({
        x,
        y,
        initialPlacement: placement,
        placement: statefulPlacement,
        strategy,
        middlewareData,
        rects,
        platform: platform2,
        elements: {
          reference: reference2,
          floating
        }
      });
      x = nextX != null ? nextX : x;
      y = nextY != null ? nextY : y;
      middlewareData = {
        ...middlewareData,
        [name]: {
          ...middlewareData[name],
          ...data
        }
      };
      if (reset && resetCount <= 50) {
        resetCount++;
        if (typeof reset === "object") {
          if (reset.placement) {
            statefulPlacement = reset.placement;
          }
          if (reset.rects) {
            rects = reset.rects === true ? await platform2.getElementRects({
              reference: reference2,
              floating,
              strategy
            }) : reset.rects;
          }
          ({
            x,
            y
          } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
        }
        i = -1;
        continue;
      }
    }
    return {
      x,
      y,
      placement: statefulPlacement,
      strategy,
      middlewareData
    };
  };
  async function detectOverflow2(state, options) {
    var _await$platform$isEle;
    if (options === void 0) {
      options = {};
    }
    const {
      x,
      y,
      platform: platform2,
      rects,
      elements,
      strategy
    } = state;
    const {
      boundary = "clippingAncestors",
      rootBoundary = "viewport",
      elementContext = "floating",
      altBoundary = false,
      padding = 0
    } = evaluate(options, state);
    const paddingObject = getPaddingObject(padding);
    const altContext = elementContext === "floating" ? "reference" : "floating";
    const element = elements[altBoundary ? altContext : elementContext];
    const clippingClientRect = rectToClientRect2(await platform2.getClippingRect({
      element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
      boundary,
      rootBoundary,
      strategy
    }));
    const rect = elementContext === "floating" ? {
      ...rects.floating,
      x,
      y
    } : rects.reference;
    const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
    const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
      x: 1,
      y: 1
    } : {
      x: 1,
      y: 1
    };
    const elementClientRect = rectToClientRect2(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
      rect,
      offsetParent,
      strategy
    }) : rect);
    return {
      top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
      bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
      left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
      right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
    };
  }
  var flip2 = function(options) {
    if (options === void 0) {
      options = {};
    }
    return {
      name: "flip",
      options,
      async fn(state) {
        var _middlewareData$arrow, _middlewareData$flip;
        const {
          placement,
          middlewareData,
          rects,
          initialPlacement,
          platform: platform2,
          elements
        } = state;
        const {
          mainAxis: checkMainAxis = true,
          crossAxis: checkCrossAxis = true,
          fallbackPlacements: specifiedFallbackPlacements,
          fallbackStrategy = "bestFit",
          fallbackAxisSideDirection = "none",
          flipAlignment = true,
          ...detectOverflowOptions
        } = evaluate(options, state);
        if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
          return {};
        }
        const side = getSide(placement);
        const isBasePlacement = getSide(initialPlacement) === initialPlacement;
        const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
        const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement2(initialPlacement)] : getExpandedPlacements(initialPlacement));
        if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== "none") {
          fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
        }
        const placements3 = [initialPlacement, ...fallbackPlacements];
        const overflow = await detectOverflow2(state, detectOverflowOptions);
        const overflows = [];
        let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
        if (checkMainAxis) {
          overflows.push(overflow[side]);
        }
        if (checkCrossAxis) {
          const sides2 = getAlignmentSides(placement, rects, rtl);
          overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
        }
        overflowsData = [...overflowsData, {
          placement,
          overflows
        }];
        if (!overflows.every((side2) => side2 <= 0)) {
          var _middlewareData$flip2, _overflowsData$filter;
          const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
          const nextPlacement = placements3[nextIndex];
          if (nextPlacement) {
            return {
              data: {
                index: nextIndex,
                overflows: overflowsData
              },
              reset: {
                placement: nextPlacement
              }
            };
          }
          let resetPlacement = (_overflowsData$filter = overflowsData.filter((d) => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
          if (!resetPlacement) {
            switch (fallbackStrategy) {
              case "bestFit": {
                var _overflowsData$map$so;
                const placement2 = (_overflowsData$map$so = overflowsData.map((d) => [d.placement, d.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];
                if (placement2) {
                  resetPlacement = placement2;
                }
                break;
              }
              case "initialPlacement":
                resetPlacement = initialPlacement;
                break;
            }
          }
          if (placement !== resetPlacement) {
            return {
              reset: {
                placement: resetPlacement
              }
            };
          }
        }
        return {};
      }
    };
  };
  async function convertValueToCoords(state, options) {
    const {
      placement,
      platform: platform2,
      elements
    } = state;
    const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
    const side = getSide(placement);
    const alignment = getAlignment(placement);
    const isVertical = getSideAxis(placement) === "y";
    const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
    const crossAxisMulti = rtl && isVertical ? -1 : 1;
    const rawValue = evaluate(options, state);
    let {
      mainAxis,
      crossAxis,
      alignmentAxis
    } = typeof rawValue === "number" ? {
      mainAxis: rawValue,
      crossAxis: 0,
      alignmentAxis: null
    } : {
      mainAxis: 0,
      crossAxis: 0,
      alignmentAxis: null,
      ...rawValue
    };
    if (alignment && typeof alignmentAxis === "number") {
      crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
    }
    return isVertical ? {
      x: crossAxis * crossAxisMulti,
      y: mainAxis * mainAxisMulti
    } : {
      x: mainAxis * mainAxisMulti,
      y: crossAxis * crossAxisMulti
    };
  }
  var offset2 = function(options) {
    if (options === void 0) {
      options = 0;
    }
    return {
      name: "offset",
      options,
      async fn(state) {
        const {
          x,
          y
        } = state;
        const diffCoords = await convertValueToCoords(state, options);
        return {
          x: x + diffCoords.x,
          y: y + diffCoords.y,
          data: diffCoords
        };
      }
    };
  };

  // node_modules/@floating-ui/utils/dom/dist/floating-ui.utils.dom.mjs
  function getNodeName2(node2) {
    if (isNode(node2)) {
      return (node2.nodeName || "").toLowerCase();
    }
    return "#document";
  }
  function getWindow2(node2) {
    var _node$ownerDocument;
    return (node2 == null ? void 0 : (_node$ownerDocument = node2.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
  }
  function getDocumentElement2(node2) {
    var _ref;
    return (_ref = (isNode(node2) ? node2.ownerDocument : node2.document) || window.document) == null ? void 0 : _ref.documentElement;
  }
  function isNode(value) {
    return value instanceof Node || value instanceof getWindow2(value).Node;
  }
  function isElement2(value) {
    return value instanceof Element || value instanceof getWindow2(value).Element;
  }
  function isHTMLElement3(value) {
    return value instanceof HTMLElement || value instanceof getWindow2(value).HTMLElement;
  }
  function isShadowRoot2(value) {
    if (typeof ShadowRoot === "undefined") {
      return false;
    }
    return value instanceof ShadowRoot || value instanceof getWindow2(value).ShadowRoot;
  }
  function isOverflowElement(element) {
    const {
      overflow,
      overflowX,
      overflowY,
      display
    } = getComputedStyle2(element);
    return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
  }
  function isTableElement2(element) {
    return ["table", "td", "th"].includes(getNodeName2(element));
  }
  function isContainingBlock(element) {
    const webkit = isWebKit();
    const css7 = getComputedStyle2(element);
    return css7.transform !== "none" || css7.perspective !== "none" || (css7.containerType ? css7.containerType !== "normal" : false) || !webkit && (css7.backdropFilter ? css7.backdropFilter !== "none" : false) || !webkit && (css7.filter ? css7.filter !== "none" : false) || ["transform", "perspective", "filter"].some((value) => (css7.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css7.contain || "").includes(value));
  }
  function getContainingBlock2(element) {
    let currentNode = getParentNode2(element);
    while (isHTMLElement3(currentNode) && !isLastTraversableNode(currentNode)) {
      if (isContainingBlock(currentNode)) {
        return currentNode;
      } else {
        currentNode = getParentNode2(currentNode);
      }
    }
    return null;
  }
  function isWebKit() {
    if (typeof CSS === "undefined" || !CSS.supports)
      return false;
    return CSS.supports("-webkit-backdrop-filter", "none");
  }
  function isLastTraversableNode(node2) {
    return ["html", "body", "#document"].includes(getNodeName2(node2));
  }
  function getComputedStyle2(element) {
    return getWindow2(element).getComputedStyle(element);
  }
  function getNodeScroll2(element) {
    if (isElement2(element)) {
      return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
      };
    }
    return {
      scrollLeft: element.pageXOffset,
      scrollTop: element.pageYOffset
    };
  }
  function getParentNode2(node2) {
    if (getNodeName2(node2) === "html") {
      return node2;
    }
    const result = (
      // Step into the shadow DOM of the parent of a slotted node.
      node2.assignedSlot || // DOM Element detected.
      node2.parentNode || // ShadowRoot detected.
      isShadowRoot2(node2) && node2.host || // Fallback.
      getDocumentElement2(node2)
    );
    return isShadowRoot2(result) ? result.host : result;
  }
  function getNearestOverflowAncestor(node2) {
    const parentNode = getParentNode2(node2);
    if (isLastTraversableNode(parentNode)) {
      return node2.ownerDocument ? node2.ownerDocument.body : node2.body;
    }
    if (isHTMLElement3(parentNode) && isOverflowElement(parentNode)) {
      return parentNode;
    }
    return getNearestOverflowAncestor(parentNode);
  }
  function getOverflowAncestors(node2, list, traverseIframes) {
    var _node$ownerDocument2;
    if (list === void 0) {
      list = [];
    }
    if (traverseIframes === void 0) {
      traverseIframes = true;
    }
    const scrollableAncestor = getNearestOverflowAncestor(node2);
    const isBody = scrollableAncestor === ((_node$ownerDocument2 = node2.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
    const win = getWindow2(scrollableAncestor);
    if (isBody) {
      return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);
    }
    return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
  }

  // node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
  function getCssDimensions(element) {
    const css7 = getComputedStyle2(element);
    let width = parseFloat(css7.width) || 0;
    let height = parseFloat(css7.height) || 0;
    const hasOffset = isHTMLElement3(element);
    const offsetWidth = hasOffset ? element.offsetWidth : width;
    const offsetHeight = hasOffset ? element.offsetHeight : height;
    const shouldFallback = round3(width) !== offsetWidth || round3(height) !== offsetHeight;
    if (shouldFallback) {
      width = offsetWidth;
      height = offsetHeight;
    }
    return {
      width,
      height,
      $: shouldFallback
    };
  }
  function unwrapElement(element) {
    return !isElement2(element) ? element.contextElement : element;
  }
  function getScale(element) {
    const domElement = unwrapElement(element);
    if (!isHTMLElement3(domElement)) {
      return createCoords(1);
    }
    const rect = domElement.getBoundingClientRect();
    const {
      width,
      height,
      $
    } = getCssDimensions(domElement);
    let x = ($ ? round3(rect.width) : rect.width) / width;
    let y = ($ ? round3(rect.height) : rect.height) / height;
    if (!x || !Number.isFinite(x)) {
      x = 1;
    }
    if (!y || !Number.isFinite(y)) {
      y = 1;
    }
    return {
      x,
      y
    };
  }
  var noOffsets = /* @__PURE__ */ createCoords(0);
  function getVisualOffsets(element) {
    const win = getWindow2(element);
    if (!isWebKit() || !win.visualViewport) {
      return noOffsets;
    }
    return {
      x: win.visualViewport.offsetLeft,
      y: win.visualViewport.offsetTop
    };
  }
  function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow2(element)) {
      return false;
    }
    return isFixed;
  }
  function getBoundingClientRect2(element, includeScale, isFixedStrategy, offsetParent) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    const clientRect = element.getBoundingClientRect();
    const domElement = unwrapElement(element);
    let scale = createCoords(1);
    if (includeScale) {
      if (offsetParent) {
        if (isElement2(offsetParent)) {
          scale = getScale(offsetParent);
        }
      } else {
        scale = getScale(element);
      }
    }
    const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
    let x = (clientRect.left + visualOffsets.x) / scale.x;
    let y = (clientRect.top + visualOffsets.y) / scale.y;
    let width = clientRect.width / scale.x;
    let height = clientRect.height / scale.y;
    if (domElement) {
      const win = getWindow2(domElement);
      const offsetWin = offsetParent && isElement2(offsetParent) ? getWindow2(offsetParent) : offsetParent;
      let currentIFrame = win.frameElement;
      while (currentIFrame && offsetParent && offsetWin !== win) {
        const iframeScale = getScale(currentIFrame);
        const iframeRect = currentIFrame.getBoundingClientRect();
        const css7 = getComputedStyle2(currentIFrame);
        const left2 = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css7.paddingLeft)) * iframeScale.x;
        const top2 = iframeRect.top + (currentIFrame.clientTop + parseFloat(css7.paddingTop)) * iframeScale.y;
        x *= iframeScale.x;
        y *= iframeScale.y;
        width *= iframeScale.x;
        height *= iframeScale.y;
        x += left2;
        y += top2;
        currentIFrame = getWindow2(currentIFrame).frameElement;
      }
    }
    return rectToClientRect2({
      width,
      height,
      x,
      y
    });
  }
  function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
    let {
      rect,
      offsetParent,
      strategy
    } = _ref;
    const isOffsetParentAnElement = isHTMLElement3(offsetParent);
    const documentElement = getDocumentElement2(offsetParent);
    if (offsetParent === documentElement) {
      return rect;
    }
    let scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    let scale = createCoords(1);
    const offsets = createCoords(0);
    if (isOffsetParentAnElement || !isOffsetParentAnElement && strategy !== "fixed") {
      if (getNodeName2(offsetParent) !== "body" || isOverflowElement(documentElement)) {
        scroll = getNodeScroll2(offsetParent);
      }
      if (isHTMLElement3(offsetParent)) {
        const offsetRect = getBoundingClientRect2(offsetParent);
        scale = getScale(offsetParent);
        offsets.x = offsetRect.x + offsetParent.clientLeft;
        offsets.y = offsetRect.y + offsetParent.clientTop;
      }
    }
    return {
      width: rect.width * scale.x,
      height: rect.height * scale.y,
      x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
      y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
    };
  }
  function getClientRects(element) {
    return Array.from(element.getClientRects());
  }
  function getWindowScrollBarX2(element) {
    return getBoundingClientRect2(getDocumentElement2(element)).left + getNodeScroll2(element).scrollLeft;
  }
  function getDocumentRect2(element) {
    const html2 = getDocumentElement2(element);
    const scroll = getNodeScroll2(element);
    const body2 = element.ownerDocument.body;
    const width = max2(html2.scrollWidth, html2.clientWidth, body2.scrollWidth, body2.clientWidth);
    const height = max2(html2.scrollHeight, html2.clientHeight, body2.scrollHeight, body2.clientHeight);
    let x = -scroll.scrollLeft + getWindowScrollBarX2(element);
    const y = -scroll.scrollTop;
    if (getComputedStyle2(body2).direction === "rtl") {
      x += max2(html2.clientWidth, body2.clientWidth) - width;
    }
    return {
      width,
      height,
      x,
      y
    };
  }
  function getViewportRect2(element, strategy) {
    const win = getWindow2(element);
    const html2 = getDocumentElement2(element);
    const visualViewport = win.visualViewport;
    let width = html2.clientWidth;
    let height = html2.clientHeight;
    let x = 0;
    let y = 0;
    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      const visualViewportBased = isWebKit();
      if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }
    return {
      width,
      height,
      x,
      y
    };
  }
  function getInnerBoundingClientRect2(element, strategy) {
    const clientRect = getBoundingClientRect2(element, true, strategy === "fixed");
    const top2 = clientRect.top + element.clientTop;
    const left2 = clientRect.left + element.clientLeft;
    const scale = isHTMLElement3(element) ? getScale(element) : createCoords(1);
    const width = element.clientWidth * scale.x;
    const height = element.clientHeight * scale.y;
    const x = left2 * scale.x;
    const y = top2 * scale.y;
    return {
      width,
      height,
      x,
      y
    };
  }
  function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
    let rect;
    if (clippingAncestor === "viewport") {
      rect = getViewportRect2(element, strategy);
    } else if (clippingAncestor === "document") {
      rect = getDocumentRect2(getDocumentElement2(element));
    } else if (isElement2(clippingAncestor)) {
      rect = getInnerBoundingClientRect2(clippingAncestor, strategy);
    } else {
      const visualOffsets = getVisualOffsets(element);
      rect = {
        ...clippingAncestor,
        x: clippingAncestor.x - visualOffsets.x,
        y: clippingAncestor.y - visualOffsets.y
      };
    }
    return rectToClientRect2(rect);
  }
  function hasFixedPositionAncestor(element, stopNode) {
    const parentNode = getParentNode2(element);
    if (parentNode === stopNode || !isElement2(parentNode) || isLastTraversableNode(parentNode)) {
      return false;
    }
    return getComputedStyle2(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
  }
  function getClippingElementAncestors(element, cache3) {
    const cachedResult = cache3.get(element);
    if (cachedResult) {
      return cachedResult;
    }
    let result = getOverflowAncestors(element, [], false).filter((el2) => isElement2(el2) && getNodeName2(el2) !== "body");
    let currentContainingBlockComputedStyle = null;
    const elementIsFixed = getComputedStyle2(element).position === "fixed";
    let currentNode = elementIsFixed ? getParentNode2(element) : element;
    while (isElement2(currentNode) && !isLastTraversableNode(currentNode)) {
      const computedStyle = getComputedStyle2(currentNode);
      const currentNodeIsContaining = isContainingBlock(currentNode);
      if (!currentNodeIsContaining && computedStyle.position === "fixed") {
        currentContainingBlockComputedStyle = null;
      }
      const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
      if (shouldDropCurrentNode) {
        result = result.filter((ancestor) => ancestor !== currentNode);
      } else {
        currentContainingBlockComputedStyle = computedStyle;
      }
      currentNode = getParentNode2(currentNode);
    }
    cache3.set(element, result);
    return result;
  }
  function getClippingRect2(_ref) {
    let {
      element,
      boundary,
      rootBoundary,
      strategy
    } = _ref;
    const elementClippingAncestors = boundary === "clippingAncestors" ? getClippingElementAncestors(element, this._c) : [].concat(boundary);
    const clippingAncestors = [...elementClippingAncestors, rootBoundary];
    const firstClippingAncestor = clippingAncestors[0];
    const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
      const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
      accRect.top = max2(rect.top, accRect.top);
      accRect.right = min2(rect.right, accRect.right);
      accRect.bottom = min2(rect.bottom, accRect.bottom);
      accRect.left = max2(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
    return {
      width: clippingRect.right - clippingRect.left,
      height: clippingRect.bottom - clippingRect.top,
      x: clippingRect.left,
      y: clippingRect.top
    };
  }
  function getDimensions(element) {
    return getCssDimensions(element);
  }
  function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
    const isOffsetParentAnElement = isHTMLElement3(offsetParent);
    const documentElement = getDocumentElement2(offsetParent);
    const isFixed = strategy === "fixed";
    const rect = getBoundingClientRect2(element, true, isFixed, offsetParent);
    let scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    const offsets = createCoords(0);
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName2(offsetParent) !== "body" || isOverflowElement(documentElement)) {
        scroll = getNodeScroll2(offsetParent);
      }
      if (isOffsetParentAnElement) {
        const offsetRect = getBoundingClientRect2(offsetParent, true, isFixed, offsetParent);
        offsets.x = offsetRect.x + offsetParent.clientLeft;
        offsets.y = offsetRect.y + offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX2(documentElement);
      }
    }
    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }
  function getTrueOffsetParent2(element, polyfill) {
    if (!isHTMLElement3(element) || getComputedStyle2(element).position === "fixed") {
      return null;
    }
    if (polyfill) {
      return polyfill(element);
    }
    return element.offsetParent;
  }
  function getOffsetParent2(element, polyfill) {
    const window2 = getWindow2(element);
    if (!isHTMLElement3(element)) {
      return window2;
    }
    let offsetParent = getTrueOffsetParent2(element, polyfill);
    while (offsetParent && isTableElement2(offsetParent) && getComputedStyle2(offsetParent).position === "static") {
      offsetParent = getTrueOffsetParent2(offsetParent, polyfill);
    }
    if (offsetParent && (getNodeName2(offsetParent) === "html" || getNodeName2(offsetParent) === "body" && getComputedStyle2(offsetParent).position === "static" && !isContainingBlock(offsetParent))) {
      return window2;
    }
    return offsetParent || getContainingBlock2(element) || window2;
  }
  var getElementRects = async function(_ref) {
    let {
      reference: reference2,
      floating,
      strategy
    } = _ref;
    const getOffsetParentFn = this.getOffsetParent || getOffsetParent2;
    const getDimensionsFn = this.getDimensions;
    return {
      reference: getRectRelativeToOffsetParent(reference2, await getOffsetParentFn(floating), strategy),
      floating: {
        x: 0,
        y: 0,
        ...await getDimensionsFn(floating)
      }
    };
  };
  function isRTL(element) {
    return getComputedStyle2(element).direction === "rtl";
  }
  var platform = {
    convertOffsetParentRelativeRectToViewportRelativeRect,
    getDocumentElement: getDocumentElement2,
    getClippingRect: getClippingRect2,
    getOffsetParent: getOffsetParent2,
    getElementRects,
    getClientRects,
    getDimensions,
    getScale,
    isElement: isElement2,
    isRTL
  };
  function observeMove(element, onMove) {
    let io = null;
    let timeoutId;
    const root = getDocumentElement2(element);
    function cleanup() {
      clearTimeout(timeoutId);
      io && io.disconnect();
      io = null;
    }
    function refresh(skip, threshold) {
      if (skip === void 0) {
        skip = false;
      }
      if (threshold === void 0) {
        threshold = 1;
      }
      cleanup();
      const {
        left: left2,
        top: top2,
        width,
        height
      } = element.getBoundingClientRect();
      if (!skip) {
        onMove();
      }
      if (!width || !height) {
        return;
      }
      const insetTop = floor(top2);
      const insetRight = floor(root.clientWidth - (left2 + width));
      const insetBottom = floor(root.clientHeight - (top2 + height));
      const insetLeft = floor(left2);
      const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
      const options = {
        rootMargin,
        threshold: max2(0, min2(1, threshold)) || 1
      };
      let isFirstUpdate = true;
      function handleObserve(entries) {
        const ratio = entries[0].intersectionRatio;
        if (ratio !== threshold) {
          if (!isFirstUpdate) {
            return refresh();
          }
          if (!ratio) {
            timeoutId = setTimeout(() => {
              refresh(false, 1e-7);
            }, 100);
          } else {
            refresh(false, ratio);
          }
        }
        isFirstUpdate = false;
      }
      try {
        io = new IntersectionObserver(handleObserve, {
          ...options,
          // Handle <iframe>s
          root: root.ownerDocument
        });
      } catch (e) {
        io = new IntersectionObserver(handleObserve, options);
      }
      io.observe(element);
    }
    refresh(true);
    return cleanup;
  }
  function autoUpdate(reference2, floating, update2, options) {
    if (options === void 0) {
      options = {};
    }
    const {
      ancestorScroll = true,
      ancestorResize = true,
      elementResize = typeof ResizeObserver === "function",
      layoutShift = typeof IntersectionObserver === "function",
      animationFrame = false
    } = options;
    const referenceEl = unwrapElement(reference2);
    const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.addEventListener("scroll", update2, {
        passive: true
      });
      ancestorResize && ancestor.addEventListener("resize", update2);
    });
    const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update2) : null;
    let reobserveFrame = -1;
    let resizeObserver = null;
    if (elementResize) {
      resizeObserver = new ResizeObserver((_ref) => {
        let [firstEntry] = _ref;
        if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
          resizeObserver.unobserve(floating);
          cancelAnimationFrame(reobserveFrame);
          reobserveFrame = requestAnimationFrame(() => {
            resizeObserver && resizeObserver.observe(floating);
          });
        }
        update2();
      });
      if (referenceEl && !animationFrame) {
        resizeObserver.observe(referenceEl);
      }
      resizeObserver.observe(floating);
    }
    let frameId;
    let prevRefRect = animationFrame ? getBoundingClientRect2(reference2) : null;
    if (animationFrame) {
      frameLoop();
    }
    function frameLoop() {
      const nextRefRect = getBoundingClientRect2(reference2);
      if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
        update2();
      }
      prevRefRect = nextRefRect;
      frameId = requestAnimationFrame(frameLoop);
    }
    update2();
    return () => {
      ancestors.forEach((ancestor) => {
        ancestorScroll && ancestor.removeEventListener("scroll", update2);
        ancestorResize && ancestor.removeEventListener("resize", update2);
      });
      cleanupIo && cleanupIo();
      resizeObserver && resizeObserver.disconnect();
      resizeObserver = null;
      if (animationFrame) {
        cancelAnimationFrame(frameId);
      }
    };
  }
  var computePosition2 = (reference2, floating, options) => {
    const cache3 = /* @__PURE__ */ new Map();
    const mergedOptions = {
      platform,
      ...options
    };
    const platformWithCache = {
      ...mergedOptions.platform,
      _c: cache3
    };
    return computePosition(reference2, floating, {
      ...mergedOptions,
      platform: platformWithCache
    });
  };

  // node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs
  var React77 = __toESM(require_react(), 1);
  var import_react8 = __toESM(require_react(), 1);
  var ReactDOM3 = __toESM(require_react_dom(), 1);
  var index2 = typeof document !== "undefined" ? import_react8.useLayoutEffect : import_react8.useEffect;
  function deepEqual(a, b) {
    if (a === b) {
      return true;
    }
    if (typeof a !== typeof b) {
      return false;
    }
    if (typeof a === "function" && a.toString() === b.toString()) {
      return true;
    }
    let length2, i, keys;
    if (a && b && typeof a == "object") {
      if (Array.isArray(a)) {
        length2 = a.length;
        if (length2 != b.length)
          return false;
        for (i = length2; i-- !== 0; ) {
          if (!deepEqual(a[i], b[i])) {
            return false;
          }
        }
        return true;
      }
      keys = Object.keys(a);
      length2 = keys.length;
      if (length2 !== Object.keys(b).length) {
        return false;
      }
      for (i = length2; i-- !== 0; ) {
        if (!{}.hasOwnProperty.call(b, keys[i])) {
          return false;
        }
      }
      for (i = length2; i-- !== 0; ) {
        const key = keys[i];
        if (key === "_owner" && a.$$typeof) {
          continue;
        }
        if (!deepEqual(a[key], b[key])) {
          return false;
        }
      }
      return true;
    }
    return a !== a && b !== b;
  }
  function getDPR(element) {
    if (typeof window === "undefined") {
      return 1;
    }
    const win = element.ownerDocument.defaultView || window;
    return win.devicePixelRatio || 1;
  }
  function roundByDPR(element, value) {
    const dpr = getDPR(element);
    return Math.round(value * dpr) / dpr;
  }
  function useLatestRef(value) {
    const ref = React77.useRef(value);
    index2(() => {
      ref.current = value;
    });
    return ref;
  }
  function useFloating(options) {
    if (options === void 0) {
      options = {};
    }
    const {
      placement = "bottom",
      strategy = "absolute",
      middleware: middleware2 = [],
      platform: platform2,
      elements: {
        reference: externalReference,
        floating: externalFloating
      } = {},
      transform: transform2 = true,
      whileElementsMounted,
      open
    } = options;
    const [data, setData] = React77.useState({
      x: 0,
      y: 0,
      strategy,
      placement,
      middlewareData: {},
      isPositioned: false
    });
    const [latestMiddleware, setLatestMiddleware] = React77.useState(middleware2);
    if (!deepEqual(latestMiddleware, middleware2)) {
      setLatestMiddleware(middleware2);
    }
    const [_reference, _setReference] = React77.useState(null);
    const [_floating, _setFloating] = React77.useState(null);
    const setReference = React77.useCallback((node2) => {
      if (node2 != referenceRef.current) {
        referenceRef.current = node2;
        _setReference(node2);
      }
    }, [_setReference]);
    const setFloating = React77.useCallback((node2) => {
      if (node2 !== floatingRef.current) {
        floatingRef.current = node2;
        _setFloating(node2);
      }
    }, [_setFloating]);
    const referenceEl = externalReference || _reference;
    const floatingEl = externalFloating || _floating;
    const referenceRef = React77.useRef(null);
    const floatingRef = React77.useRef(null);
    const dataRef = React77.useRef(data);
    const whileElementsMountedRef = useLatestRef(whileElementsMounted);
    const platformRef = useLatestRef(platform2);
    const update2 = React77.useCallback(() => {
      if (!referenceRef.current || !floatingRef.current) {
        return;
      }
      const config2 = {
        placement,
        strategy,
        middleware: latestMiddleware
      };
      if (platformRef.current) {
        config2.platform = platformRef.current;
      }
      computePosition2(referenceRef.current, floatingRef.current, config2).then((data2) => {
        const fullData = {
          ...data2,
          isPositioned: true
        };
        if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {
          dataRef.current = fullData;
          ReactDOM3.flushSync(() => {
            setData(fullData);
          });
        }
      });
    }, [latestMiddleware, placement, strategy, platformRef]);
    index2(() => {
      if (open === false && dataRef.current.isPositioned) {
        dataRef.current.isPositioned = false;
        setData((data2) => ({
          ...data2,
          isPositioned: false
        }));
      }
    }, [open]);
    const isMountedRef = React77.useRef(false);
    index2(() => {
      isMountedRef.current = true;
      return () => {
        isMountedRef.current = false;
      };
    }, []);
    index2(() => {
      if (referenceEl)
        referenceRef.current = referenceEl;
      if (floatingEl)
        floatingRef.current = floatingEl;
      if (referenceEl && floatingEl) {
        if (whileElementsMountedRef.current) {
          return whileElementsMountedRef.current(referenceEl, floatingEl, update2);
        } else {
          update2();
        }
      }
    }, [referenceEl, floatingEl, update2, whileElementsMountedRef]);
    const refs = React77.useMemo(() => ({
      reference: referenceRef,
      floating: floatingRef,
      setReference,
      setFloating
    }), [setReference, setFloating]);
    const elements = React77.useMemo(() => ({
      reference: referenceEl,
      floating: floatingEl
    }), [referenceEl, floatingEl]);
    const floatingStyles = React77.useMemo(() => {
      const initialStyles = {
        position: strategy,
        left: 0,
        top: 0
      };
      if (!elements.floating) {
        return initialStyles;
      }
      const x = roundByDPR(elements.floating, data.x);
      const y = roundByDPR(elements.floating, data.y);
      if (transform2) {
        return {
          ...initialStyles,
          transform: "translate(" + x + "px, " + y + "px)",
          ...getDPR(elements.floating) >= 1.5 && {
            willChange: "transform"
          }
        };
      }
      return {
        position: strategy,
        left: x,
        top: y
      };
    }, [strategy, transform2, elements.floating, data.x, data.y]);
    return React77.useMemo(() => ({
      ...data,
      update: update2,
      refs,
      elements,
      floatingStyles
    }), [data, update2, refs, elements, floatingStyles]);
  }

  // node_modules/@mui/base/Unstable_Popup/Popup.js
  var import_utils81 = __toESM(require_utils());
  var import_composeClasses25 = __toESM(require_composeClasses3());

  // node_modules/@mui/base/Unstable_Popup/popupClasses.js
  function getPopupUtilityClass(slot) {
    return (0, import_utils43.unstable_generateUtilityClass)("MuiPopup", slot);
  }
  var popupClasses = (0, import_utils42.unstable_generateUtilityClasses)("MuiPopup", ["root", "open"]);

  // node_modules/@mui/base/Unstable_Popup/Popup.js
  var import_jsx_runtime52 = __toESM(require_jsx_runtime());
  var _excluded40 = ["anchor", "children", "container", "disablePortal", "keepMounted", "middleware", "offset", "open", "placement", "slotProps", "slots", "strategy", "withTransition"];
  function useUtilityClasses25(ownerState) {
    const {
      open
    } = ownerState;
    const slots = {
      root: ["root", open && "open"]
    };
    return (0, import_composeClasses25.unstable_composeClasses)(slots, useClassNamesOverride(getPopupUtilityClass));
  }
  function resolveAnchor(anchor) {
    return typeof anchor === "function" ? anchor() : anchor;
  }
  var Popup = /* @__PURE__ */ React78.forwardRef(function Popup2(props, forwardedRef) {
    var _slots$root;
    const {
      anchor: anchorProp,
      children,
      container,
      disablePortal = false,
      keepMounted = false,
      middleware: middleware2,
      offset: offsetProp = 0,
      open = false,
      placement = "bottom",
      slotProps = {},
      slots = {},
      strategy = "absolute",
      withTransition = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded40);
    const {
      refs,
      elements,
      floatingStyles,
      update: update2,
      placement: finalPlacement
    } = useFloating({
      elements: {
        reference: resolveAnchor(anchorProp)
      },
      open,
      middleware: middleware2 != null ? middleware2 : [offset2(offsetProp != null ? offsetProp : 0), flip2()],
      placement,
      strategy,
      whileElementsMounted: !keepMounted ? autoUpdate : void 0
    });
    const handleRef = (0, import_utils81.unstable_useForkRef)(refs.setFloating, forwardedRef);
    const [exited, setExited] = React78.useState(true);
    const handleEntering = () => {
      setExited(false);
    };
    const handleExited = () => {
      setExited(true);
    };
    (0, import_utils81.unstable_useEnhancedEffect)(() => {
      if (keepMounted && open && elements.reference && elements.floating) {
        const cleanup = autoUpdate(elements.reference, elements.floating, update2);
        return cleanup;
      }
      return void 0;
    }, [keepMounted, open, elements, update2]);
    const ownerState = _extends({}, props, {
      disablePortal,
      keepMounted,
      offset: offset2,
      open,
      placement,
      finalPlacement,
      strategy,
      withTransition
    });
    const display = !open && keepMounted && (!withTransition || exited) ? "none" : void 0;
    const classes = useUtilityClasses25(ownerState);
    const Root = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : "div";
    const rootProps = useSlotProps({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      ownerState,
      className: classes.root,
      additionalProps: {
        ref: handleRef,
        role: "tooltip",
        style: _extends({}, floatingStyles, {
          display
        })
      }
    });
    const shouldRender = open || keepMounted || withTransition && !exited;
    if (!shouldRender) {
      return null;
    }
    const childProps = {
      placement: finalPlacement,
      requestOpen: open,
      onExited: handleExited,
      onEnter: handleEntering
    };
    return /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Portal, {
      disablePortal,
      container,
      children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(Root, _extends({}, rootProps, {
        children: typeof children === "function" ? children(childProps) : children
      }))
    });
  });
  true ? Popup.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * An HTML element, [virtual element](https://floating-ui.com/docs/virtual-elements),
     * or a function that returns either.
     * It's used to set the position of the popup.
     */
    anchor: import_prop_types37.default.oneOfType([import_utils81.HTMLElementType, import_prop_types37.default.object, import_prop_types37.default.func]),
    /**
     * @ignore
     */
    children: import_prop_types37.default.oneOfType([import_prop_types37.default.node, import_prop_types37.default.func]),
    /**
     * An HTML element or function that returns one. The container will have the portal children appended to it.
     * By default, it uses the body of the top-level document object, so it's `document.body` in these cases.
     */
    container: import_prop_types37.default.oneOfType([import_utils81.HTMLElementType, import_prop_types37.default.func]),
    /**
     * If `true`, the popup will be rendered where it is defined, without the use of portals.
     * @default false
     */
    disablePortal: import_prop_types37.default.bool,
    /**
     * If `true`, the popup will exist in the DOM even if it's closed.
     * Its visibility will be controlled by the `display` CSS property.
     *
     * Otherwise, a closed popup will be removed from the DOM.
     *
     * @default false
     */
    keepMounted: import_prop_types37.default.bool,
    /**
     * Collection of Floating UI middleware to use when positioning the popup.
     * If not provided, the [`offset`](https://floating-ui.com/docs/offset)
     * and [`flip`](https://floating-ui.com/docs/flip) functions will be used.
     *
     * @see https://floating-ui.com/docs/computePosition#middleware
     */
    middleware: import_prop_types37.default.arrayOf(import_prop_types37.default.oneOfType([import_prop_types37.default.oneOf([false]), import_prop_types37.default.shape({
      fn: import_prop_types37.default.func.isRequired,
      name: import_prop_types37.default.string.isRequired,
      options: import_prop_types37.default.any
    })])),
    /**
     * Distance between a popup and the trigger element.
     * This prop is ignored when custom `middleware` is provided.
     *
     * @default 0
     * @see https://floating-ui.com/docs/offset
     */
    offset: import_prop_types37.default.oneOfType([import_prop_types37.default.func, import_prop_types37.default.number, import_prop_types37.default.shape({
      alignmentAxis: import_prop_types37.default.number,
      crossAxis: import_prop_types37.default.number,
      mainAxis: import_prop_types37.default.number
    })]),
    /**
     * If `true`, the popup is visible.
     *
     * @default false
     */
    open: import_prop_types37.default.bool,
    /**
     * Determines where to place the popup relative to the trigger element.
     *
     * @default 'bottom'
     * @see https://floating-ui.com/docs/computePosition#placement
     */
    placement: import_prop_types37.default.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    /**
     * The props used for each slot inside the Popup.
     *
     * @default {}
     */
    slotProps: import_prop_types37.default.shape({
      root: import_prop_types37.default.oneOfType([import_prop_types37.default.func, import_prop_types37.default.object])
    }),
    /**
     * The components used for each slot inside the Popup.
     * Either a string to use a HTML element or a component.
     *
     * @default {}
     */
    slots: import_prop_types37.default.shape({
      root: import_prop_types37.default.elementType
    }),
    /**
     * The type of CSS position property to use (absolute or fixed).
     *
     * @default 'absolute'
     * @see https://floating-ui.com/docs/computePosition#strategy
     */
    strategy: import_prop_types37.default.oneOf(["absolute", "fixed"]),
    /**
     * If `true`, the popup will not disappear immediately when it needs to be closed
     * but wait until the exit transition has finished.
     * In such a case, a function form of `children` must be used and `onExited`
     * callback function must be called when the transition or animation finish.
     *
     * @default false
     */
    withTransition: import_prop_types37.default.bool
  } : void 0;

  // node_modules/@mui/base/Select/Select.js
  init_extends();
  var React81 = __toESM(require_react());
  var import_prop_types38 = __toESM(require_prop_types());
  var import_utils84 = __toESM(require_utils());

  // node_modules/@mui/base/useSelect/useSelect.js
  init_extends();
  var React79 = __toESM(require_react());
  var import_utils83 = __toESM(require_utils());

  // node_modules/@mui/base/useSelect/useSelect.types.js
  var SelectActionTypes = {
    buttonClick: "buttonClick"
  };

  // node_modules/@mui/base/useSelect/defaultOptionStringifier.js
  var defaultOptionStringifier = (option) => {
    const {
      label,
      value
    } = option;
    if (typeof label === "string") {
      return label;
    }
    if (typeof value === "string") {
      return value;
    }
    return String(option);
  };

  // node_modules/@mui/base/useSelect/selectReducer.js
  init_extends();
  function selectReducer(state, action) {
    const {
      open
    } = state;
    const {
      context: {
        selectionMode
      }
    } = action;
    if (action.type === SelectActionTypes.buttonClick) {
      var _state$selectedValues;
      const itemToHighlight = (_state$selectedValues = state.selectedValues[0]) != null ? _state$selectedValues : moveHighlight(null, "start", action.context);
      return _extends({}, state, {
        open: !open,
        highlightedValue: !open ? itemToHighlight : null
      });
    }
    const newState = listReducer(state, action);
    switch (action.type) {
      case ListActionTypes.keyDown:
        if (state.open) {
          if (action.event.key === "Escape") {
            return _extends({}, newState, {
              open: false
            });
          }
          if (selectionMode === "single" && (action.event.key === "Enter" || action.event.key === " ")) {
            return _extends({}, newState, {
              open: false
            });
          }
        } else {
          if (action.event.key === "Enter" || action.event.key === " " || action.event.key === "ArrowDown") {
            var _state$selectedValues2;
            return _extends({}, state, {
              open: true,
              highlightedValue: (_state$selectedValues2 = state.selectedValues[0]) != null ? _state$selectedValues2 : moveHighlight(null, "start", action.context)
            });
          }
          if (action.event.key === "ArrowUp") {
            var _state$selectedValues3;
            return _extends({}, state, {
              open: true,
              highlightedValue: (_state$selectedValues3 = state.selectedValues[0]) != null ? _state$selectedValues3 : moveHighlight(null, "end", action.context)
            });
          }
        }
        break;
      case ListActionTypes.itemClick:
        if (selectionMode === "single") {
          return _extends({}, newState, {
            open: false
          });
        }
        break;
      case ListActionTypes.blur:
        return _extends({}, newState, {
          open: false
        });
      default:
        return newState;
    }
    return newState;
  }

  // node_modules/@mui/base/useSelect/useSelect.js
  var visuallyHiddenStyle = {
    clip: "rect(1px, 1px, 1px, 1px)",
    clipPath: "inset(50%)",
    height: "1px",
    width: "1px",
    margin: "-1px",
    overflow: "hidden",
    padding: 0,
    position: "absolute",
    left: "50%",
    bottom: 0
    // to display the native browser validation error at the bottom of the Select.
  };
  var noop2 = () => {
  };
  function defaultFormValueProvider(selectedOption) {
    if (Array.isArray(selectedOption)) {
      if (selectedOption.length === 0) {
        return "";
      }
      return JSON.stringify(selectedOption.map((o) => o.value));
    }
    if ((selectedOption == null ? void 0 : selectedOption.value) == null) {
      return "";
    }
    if (typeof selectedOption.value === "string" || typeof selectedOption.value === "number") {
      return selectedOption.value;
    }
    return JSON.stringify(selectedOption.value);
  }
  function preventDefault(event) {
    event.preventDefault();
  }
  function useSelect(props) {
    const {
      areOptionsEqual,
      buttonRef: buttonRefProp,
      defaultOpen = false,
      defaultValue: defaultValueProp,
      disabled = false,
      listboxId: listboxIdProp,
      listboxRef: listboxRefProp,
      multiple = false,
      name,
      required,
      onChange,
      onHighlightChange,
      onOpenChange,
      open: openProp,
      options: optionsParam,
      getOptionAsString = defaultOptionStringifier,
      getSerializedValue = defaultFormValueProvider,
      value: valueProp
    } = props;
    const buttonRef = React79.useRef(null);
    const handleButtonRef = (0, import_utils83.unstable_useForkRef)(buttonRefProp, buttonRef);
    const listboxRef = React79.useRef(null);
    const listboxId = (0, import_utils83.unstable_useId)(listboxIdProp);
    let defaultValue;
    if (valueProp === void 0 && defaultValueProp === void 0) {
      defaultValue = [];
    } else if (defaultValueProp !== void 0) {
      if (multiple) {
        defaultValue = defaultValueProp;
      } else {
        defaultValue = defaultValueProp == null ? [] : [defaultValueProp];
      }
    }
    const value = React79.useMemo(() => {
      if (valueProp !== void 0) {
        if (multiple) {
          return valueProp;
        }
        return valueProp == null ? [] : [valueProp];
      }
      return void 0;
    }, [valueProp, multiple]);
    const {
      subitems,
      contextValue: compoundComponentContextValue
    } = useCompoundParent();
    const options = React79.useMemo(() => {
      if (optionsParam != null) {
        return new Map(optionsParam.map((option, index3) => [option.value, {
          value: option.value,
          label: option.label,
          disabled: option.disabled,
          ref: /* @__PURE__ */ React79.createRef(),
          id: `${listboxId}_${index3}`
        }]));
      }
      return subitems;
    }, [optionsParam, subitems, listboxId]);
    const handleListboxRef = (0, import_utils83.unstable_useForkRef)(listboxRefProp, listboxRef);
    const {
      getRootProps: getButtonRootProps,
      active: buttonActive,
      focusVisible: buttonFocusVisible,
      rootRef: mergedButtonRef
    } = useButton({
      disabled,
      rootRef: handleButtonRef
    });
    const optionValues = React79.useMemo(() => Array.from(options.keys()), [options]);
    const getOptionByValue = React79.useCallback((valueToGet) => {
      if (areOptionsEqual !== void 0) {
        const similarValue = optionValues.find((optionValue) => areOptionsEqual(optionValue, valueToGet));
        return options.get(similarValue);
      }
      return options.get(valueToGet);
    }, [options, areOptionsEqual, optionValues]);
    const isItemDisabled = React79.useCallback((valueToCheck) => {
      var _option$disabled;
      const option = getOptionByValue(valueToCheck);
      return (_option$disabled = option == null ? void 0 : option.disabled) != null ? _option$disabled : false;
    }, [getOptionByValue]);
    const stringifyOption = React79.useCallback((valueToCheck) => {
      const option = getOptionByValue(valueToCheck);
      if (!option) {
        return "";
      }
      return getOptionAsString(option);
    }, [getOptionByValue, getOptionAsString]);
    const controlledState = React79.useMemo(() => ({
      selectedValues: value,
      open: openProp
    }), [value, openProp]);
    const getItemId = React79.useCallback((itemValue) => {
      var _options$get;
      return (_options$get = options.get(itemValue)) == null ? void 0 : _options$get.id;
    }, [options]);
    const handleSelectionChange = React79.useCallback((event, newValues) => {
      if (multiple) {
        onChange == null || onChange(event, newValues);
      } else {
        var _newValues$;
        onChange == null || onChange(event, (_newValues$ = newValues[0]) != null ? _newValues$ : null);
      }
    }, [multiple, onChange]);
    const handleHighlightChange = React79.useCallback((event, newValue) => {
      onHighlightChange == null || onHighlightChange(event, newValue != null ? newValue : null);
    }, [onHighlightChange]);
    const handleStateChange = React79.useCallback((event, field, fieldValue) => {
      if (field === "open") {
        onOpenChange == null || onOpenChange(fieldValue);
        if (fieldValue === false && (event == null ? void 0 : event.type) !== "blur") {
          var _buttonRef$current;
          (_buttonRef$current = buttonRef.current) == null || _buttonRef$current.focus();
        }
      }
    }, [onOpenChange]);
    const useListParameters = {
      getInitialState: () => {
        var _defaultValue;
        return {
          highlightedValue: null,
          selectedValues: (_defaultValue = defaultValue) != null ? _defaultValue : [],
          open: defaultOpen
        };
      },
      getItemId,
      controlledProps: controlledState,
      itemComparer: areOptionsEqual,
      isItemDisabled,
      rootRef: mergedButtonRef,
      onChange: handleSelectionChange,
      onHighlightChange: handleHighlightChange,
      onStateChange: handleStateChange,
      reducerActionContext: React79.useMemo(() => ({
        multiple
      }), [multiple]),
      items: optionValues,
      getItemAsString: stringifyOption,
      selectionMode: multiple ? "multiple" : "single",
      stateReducer: selectReducer
    };
    const {
      dispatch,
      getRootProps: getListboxRootProps,
      contextValue: listContextValue,
      state: {
        open,
        highlightedValue: highlightedOption,
        selectedValues: selectedOptions
      },
      rootRef: mergedListRootRef
    } = useList(useListParameters);
    const createHandleButtonMouseDown = (externalEventHandlers) => (event) => {
      var _externalEventHandler;
      externalEventHandlers == null || (_externalEventHandler = externalEventHandlers.onMouseDown) == null || _externalEventHandler.call(externalEventHandlers, event);
      if (!event.defaultMuiPrevented) {
        const action = {
          type: SelectActionTypes.buttonClick,
          event
        };
        dispatch(action);
      }
    };
    (0, import_utils83.unstable_useEnhancedEffect)(() => {
      if (highlightedOption != null) {
        var _getOptionByValue;
        const optionRef = (_getOptionByValue = getOptionByValue(highlightedOption)) == null ? void 0 : _getOptionByValue.ref;
        if (!listboxRef.current || !(optionRef != null && optionRef.current)) {
          return;
        }
        const listboxClientRect = listboxRef.current.getBoundingClientRect();
        const optionClientRect = optionRef.current.getBoundingClientRect();
        if (optionClientRect.top < listboxClientRect.top) {
          listboxRef.current.scrollTop -= listboxClientRect.top - optionClientRect.top;
        } else if (optionClientRect.bottom > listboxClientRect.bottom) {
          listboxRef.current.scrollTop += optionClientRect.bottom - listboxClientRect.bottom;
        }
      }
    }, [highlightedOption, getOptionByValue]);
    const getOptionMetadata = React79.useCallback((optionValue) => getOptionByValue(optionValue), [getOptionByValue]);
    const getSelectTriggerProps = (otherHandlers = {}) => {
      return _extends({}, otherHandlers, {
        onMouseDown: createHandleButtonMouseDown(otherHandlers),
        ref: mergedListRootRef,
        role: "combobox",
        "aria-expanded": open,
        "aria-controls": listboxId
      });
    };
    const getButtonProps = (externalProps = {}) => {
      const externalEventHandlers = extractEventHandlers(externalProps);
      const listboxAndButtonProps = combineHooksSlotProps(getButtonRootProps, getListboxRootProps);
      const combinedProps = combineHooksSlotProps(listboxAndButtonProps, getSelectTriggerProps);
      return _extends({}, externalProps, combinedProps(externalEventHandlers));
    };
    const getListboxProps = (externalProps = {}) => {
      return _extends({}, externalProps, {
        id: listboxId,
        role: "listbox",
        "aria-multiselectable": multiple ? "true" : void 0,
        ref: handleListboxRef,
        onMouseDown: preventDefault
        // to prevent the button from losing focus when interacting with the listbox
      });
    };
    React79.useDebugValue({
      selectedOptions,
      highlightedOption,
      open
    });
    const contextValue = React79.useMemo(() => _extends({}, listContextValue, compoundComponentContextValue), [listContextValue, compoundComponentContextValue]);
    let selectValue;
    if (props.multiple) {
      selectValue = selectedOptions;
    } else {
      selectValue = selectedOptions.length > 0 ? selectedOptions[0] : null;
    }
    let selectedOptionsMetadata;
    if (multiple) {
      selectedOptionsMetadata = selectValue.map((v) => getOptionMetadata(v)).filter((o) => o !== void 0);
    } else {
      var _getOptionMetadata;
      selectedOptionsMetadata = (_getOptionMetadata = getOptionMetadata(selectValue)) != null ? _getOptionMetadata : null;
    }
    const getHiddenInputProps = (externalProps = {}) => {
      return _extends({
        name,
        tabIndex: -1,
        "aria-hidden": true,
        required: required ? true : void 0,
        value: getSerializedValue(selectedOptionsMetadata),
        onChange: noop2,
        style: visuallyHiddenStyle
      }, externalProps);
    };
    return {
      buttonActive,
      buttonFocusVisible,
      buttonRef: mergedButtonRef,
      contextValue,
      disabled,
      dispatch,
      getButtonProps,
      getHiddenInputProps,
      getListboxProps,
      getOptionMetadata,
      listboxRef: mergedListRootRef,
      open,
      options: optionValues,
      value: selectValue,
      highlightedOption
    };
  }

  // node_modules/@mui/base/useSelect/SelectProvider.js
  var React80 = __toESM(require_react());
  var import_jsx_runtime53 = __toESM(require_jsx_runtime());
  function SelectProvider(props) {
    const {
      value,
      children
    } = props;
    const {
      dispatch,
      getItemIndex,
      getItemState,
      registerHighlightChangeHandler,
      registerSelectionChangeHandler,
      registerItem,
      totalSubitemCount
    } = value;
    const listContextValue = React80.useMemo(() => ({
      dispatch,
      getItemState,
      getItemIndex,
      registerHighlightChangeHandler,
      registerSelectionChangeHandler
    }), [dispatch, getItemIndex, getItemState, registerHighlightChangeHandler, registerSelectionChangeHandler]);
    const compoundComponentContextValue = React80.useMemo(() => ({
      getItemIndex,
      registerItem,
      totalSubitemCount
    }), [registerItem, getItemIndex, totalSubitemCount]);
    return /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(CompoundComponentContext.Provider, {
      value: compoundComponentContextValue,
      children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(ListContext.Provider, {
        value: listContextValue,
        children
      })
    });
  }

  // node_modules/@mui/base/Select/Select.js
  var import_composeClasses26 = __toESM(require_composeClasses3());

  // node_modules/@mui/base/Select/selectClasses.js
  function getSelectUtilityClass(slot) {
    return (0, import_utils43.unstable_generateUtilityClass)("MuiSelect", slot);
  }
  var selectClasses = (0, import_utils42.unstable_generateUtilityClasses)("MuiSelect", ["root", "button", "listbox", "popper", "active", "expanded", "disabled", "focusVisible"]);

  // node_modules/@mui/base/Select/Select.js
  var import_jsx_runtime54 = __toESM(require_jsx_runtime());
  var import_jsx_runtime55 = __toESM(require_jsx_runtime());
  var _span;
  var _excluded41 = ["areOptionsEqual", "autoFocus", "children", "defaultValue", "defaultListboxOpen", "disabled", "getSerializedValue", "listboxId", "listboxOpen", "multiple", "name", "required", "onChange", "onListboxOpenChange", "getOptionAsString", "renderValue", "placeholder", "slotProps", "slots", "value"];
  function defaultRenderValue(selectedOptions) {
    var _selectedOptions$labe;
    if (Array.isArray(selectedOptions)) {
      return /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(React81.Fragment, {
        children: selectedOptions.map((o) => o.label).join(", ")
      });
    }
    return (_selectedOptions$labe = selectedOptions == null ? void 0 : selectedOptions.label) != null ? _selectedOptions$labe : null;
  }
  function useUtilityClasses26(ownerState) {
    const {
      active,
      disabled,
      open,
      focusVisible
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", focusVisible && "focusVisible", active && "active", open && "expanded"],
      listbox: ["listbox", disabled && "disabled"],
      popper: ["popper"]
    };
    return (0, import_composeClasses26.unstable_composeClasses)(slots, useClassNamesOverride(getSelectUtilityClass));
  }
  var Select = /* @__PURE__ */ React81.forwardRef(function Select2(props, forwardedRef) {
    var _slots$root, _slots$listbox, _slots$popper, _ref, _renderValue;
    const {
      areOptionsEqual,
      autoFocus,
      children,
      defaultValue,
      defaultListboxOpen = false,
      disabled: disabledProp,
      getSerializedValue,
      listboxId,
      listboxOpen: listboxOpenProp,
      multiple = false,
      name,
      required = false,
      onChange,
      onListboxOpenChange,
      getOptionAsString = defaultOptionStringifier,
      renderValue: renderValueProp,
      placeholder,
      slotProps = {},
      slots = {},
      value: valueProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded41);
    const renderValue = renderValueProp != null ? renderValueProp : defaultRenderValue;
    const [buttonDefined, setButtonDefined] = React81.useState(false);
    const buttonRef = React81.useRef(null);
    const listboxRef = React81.useRef(null);
    const Button5 = (_slots$root = slots.root) != null ? _slots$root : "button";
    const ListboxRoot = (_slots$listbox = slots.listbox) != null ? _slots$listbox : "ul";
    const PopperComponent = (_slots$popper = slots.popper) != null ? _slots$popper : Popper;
    const handleButtonRefChange = React81.useCallback((element) => {
      setButtonDefined(element != null);
    }, []);
    const handleButtonRef = (0, import_utils84.unstable_useForkRef)(forwardedRef, buttonRef, handleButtonRefChange);
    React81.useEffect(() => {
      if (autoFocus) {
        buttonRef.current.focus();
      }
    }, [autoFocus]);
    const {
      buttonActive,
      buttonFocusVisible,
      contextValue,
      disabled,
      getButtonProps,
      getListboxProps,
      getHiddenInputProps,
      getOptionMetadata,
      value,
      open
    } = useSelect({
      name,
      required,
      getSerializedValue,
      areOptionsEqual,
      buttonRef: handleButtonRef,
      defaultOpen: defaultListboxOpen,
      defaultValue,
      disabled: disabledProp,
      listboxId,
      multiple,
      open: listboxOpenProp,
      onChange,
      onOpenChange: onListboxOpenChange,
      getOptionAsString,
      value: valueProp
    });
    const ownerState = _extends({}, props, {
      active: buttonActive,
      defaultListboxOpen,
      disabled,
      focusVisible: buttonFocusVisible,
      open,
      multiple,
      renderValue,
      value
    });
    const classes = useUtilityClasses26(ownerState);
    const buttonProps = useSlotProps({
      elementType: Button5,
      getSlotProps: getButtonProps,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      ownerState,
      className: classes.root
    });
    const listboxProps = useSlotProps({
      elementType: ListboxRoot,
      getSlotProps: getListboxProps,
      externalSlotProps: slotProps.listbox,
      additionalProps: {
        ref: listboxRef
      },
      ownerState,
      className: classes.listbox
    });
    const popperProps = useSlotProps({
      elementType: PopperComponent,
      externalSlotProps: slotProps.popper,
      additionalProps: {
        anchorEl: buttonRef.current,
        keepMounted: true,
        open,
        placement: "bottom-start",
        role: void 0
      },
      ownerState,
      className: classes.popper
    });
    let selectedOptionsMetadata;
    if (multiple) {
      selectedOptionsMetadata = value.map((v) => getOptionMetadata(v)).filter((o) => o !== void 0);
    } else {
      var _getOptionMetadata;
      selectedOptionsMetadata = (_getOptionMetadata = getOptionMetadata(value)) != null ? _getOptionMetadata : null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)(React81.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime54.jsx)(Button5, _extends({}, buttonProps, {
        children: (_ref = (_renderValue = renderValue(selectedOptionsMetadata)) != null ? _renderValue : placeholder) != null ? _ref : (
          // fall back to a zero-width space to prevent layout shift
          // from https://github.com/mui/material-ui/pull/24563
          _span || (_span = /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("span", {
            className: "notranslate",
            children: "\u200B"
          }))
        )
      })), buttonDefined && /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(PopperComponent, _extends({}, popperProps, {
        children: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(ListboxRoot, _extends({}, listboxProps, {
          children: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(SelectProvider, {
            value: contextValue,
            children
          })
        }))
      })), /* @__PURE__ */ (0, import_jsx_runtime54.jsx)("input", _extends({}, getHiddenInputProps()))]
    });
  });
  true ? Select.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * A function used to determine if two options' values are equal.
     * By default, reference equality is used.
     *
     * There is a performance impact when using the `areOptionsEqual` prop (proportional to the number of options).
     * Therefore, it's recommented to use the default reference equality comparison whenever possible.
     */
    areOptionsEqual: import_prop_types38.default.func,
    /**
     * If `true`, the select element is focused during the first mount
     * @default false
     */
    autoFocus: import_prop_types38.default.bool,
    /**
     * @ignore
     */
    children: import_prop_types38.default.node,
    /**
     * @ignore
     */
    className: import_prop_types38.default.string,
    /**
     * If `true`, the select will be initially open.
     * @default false
     */
    defaultListboxOpen: import_prop_types38.default.bool,
    /**
     * The default selected value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types38.default.any,
    /**
     * If `true`, the select is disabled.
     * @default false
     */
    disabled: import_prop_types38.default.bool,
    /**
     * A function used to convert the option label to a string.
     * It's useful when labels are elements and need to be converted to plain text
     * to enable navigation using character keys on a keyboard.
     *
     * @default defaultOptionStringifier
     */
    getOptionAsString: import_prop_types38.default.func,
    /**
     * A function to convert the currently selected value to a string.
     * Used to set a value of a hidden input associated with the select,
     * so that the selected value can be posted with a form.
     */
    getSerializedValue: import_prop_types38.default.func,
    /**
     * `id` attribute of the listbox element.
     */
    listboxId: import_prop_types38.default.string,
    /**
     * Controls the open state of the select's listbox.
     * @default undefined
     */
    listboxOpen: import_prop_types38.default.bool,
    /**
     * If `true`, selecting multiple values is allowed.
     * This affects the type of the `value`, `defaultValue`, and `onChange` props.
     *
     * @default false
     */
    multiple: import_prop_types38.default.bool,
    /**
     * Name of the element. For example used by the server to identify the fields in form submits.
     * If the name is provided, the component will render a hidden input element that can be submitted to a server.
     */
    name: import_prop_types38.default.string,
    /**
     * Callback fired when an option is selected.
     */
    onChange: import_prop_types38.default.func,
    /**
     * Callback fired when the component requests to be opened.
     * Use in controlled mode (see listboxOpen).
     */
    onListboxOpenChange: import_prop_types38.default.func,
    /**
     * Text to show when there is no selected value.
     */
    placeholder: import_prop_types38.default.node,
    /**
     * Function that customizes the rendering of the selected value.
     */
    renderValue: import_prop_types38.default.func,
    /**
     * If `true`, the Select cannot be empty when submitting form.
     * @default false
     */
    required: import_prop_types38.default.bool,
    /**
     * The props used for each slot inside the Input.
     * @default {}
     */
    slotProps: import_prop_types38.default.shape({
      listbox: import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object]),
      popper: import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object]),
      root: import_prop_types38.default.oneOfType([import_prop_types38.default.func, import_prop_types38.default.object])
    }),
    /**
     * The components used for each slot inside the Select.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types38.default.shape({
      listbox: import_prop_types38.default.elementType,
      popper: import_prop_types38.default.elementType,
      root: import_prop_types38.default.elementType
    }),
    /**
     * The selected value.
     * Set to `null` to deselect all options.
     */
    value: import_prop_types38.default.any
  } : void 0;

  // node_modules/@mui/base/Slider/Slider.js
  init_extends();
  var React83 = __toESM(require_react());
  var import_prop_types39 = __toESM(require_prop_types());
  var import_utils88 = __toESM(require_utils());
  var import_composeClasses27 = __toESM(require_composeClasses3());

  // node_modules/@mui/base/Slider/sliderClasses.js
  function getSliderUtilityClass(slot) {
    return (0, import_utils43.unstable_generateUtilityClass)("MuiSlider", slot);
  }
  var sliderClasses = (0, import_utils42.unstable_generateUtilityClasses)("MuiSlider", ["root", "active", "focusVisible", "disabled", "dragging", "marked", "vertical", "trackInverted", "trackFalse", "rail", "track", "mark", "markActive", "markLabel", "markLabelActive", "thumb"]);

  // node_modules/@mui/base/useSlider/useSlider.js
  init_extends();
  var React82 = __toESM(require_react());
  var import_utils86 = __toESM(require_utils());
  var INTENTIONAL_DRAG_COUNT_THRESHOLD = 2;
  function asc(a, b) {
    return a - b;
  }
  function clamp3(value, min3, max3) {
    if (value == null) {
      return min3;
    }
    return Math.min(Math.max(min3, value), max3);
  }
  function findClosest(values2, currentValue) {
    var _values$reduce;
    const {
      index: closestIndex
    } = (_values$reduce = values2.reduce((acc, value, index3) => {
      const distance = Math.abs(currentValue - value);
      if (acc === null || distance < acc.distance || distance === acc.distance) {
        return {
          distance,
          index: index3
        };
      }
      return acc;
    }, null)) != null ? _values$reduce : {};
    return closestIndex;
  }
  function trackFinger(event, touchId) {
    if (touchId.current !== void 0 && event.changedTouches) {
      const touchEvent = event;
      for (let i = 0; i < touchEvent.changedTouches.length; i += 1) {
        const touch = touchEvent.changedTouches[i];
        if (touch.identifier === touchId.current) {
          return {
            x: touch.clientX,
            y: touch.clientY
          };
        }
      }
      return false;
    }
    return {
      x: event.clientX,
      y: event.clientY
    };
  }
  function valueToPercent(value, min3, max3) {
    return (value - min3) * 100 / (max3 - min3);
  }
  function percentToValue(percent2, min3, max3) {
    return (max3 - min3) * percent2 + min3;
  }
  function getDecimalPrecision(num) {
    if (Math.abs(num) < 1) {
      const parts = num.toExponential().split("e-");
      const matissaDecimalPart = parts[0].split(".")[1];
      return (matissaDecimalPart ? matissaDecimalPart.length : 0) + parseInt(parts[1], 10);
    }
    const decimalPart = num.toString().split(".")[1];
    return decimalPart ? decimalPart.length : 0;
  }
  function roundValueToStep(value, step, min3) {
    const nearest = Math.round((value - min3) / step) * step + min3;
    return Number(nearest.toFixed(getDecimalPrecision(step)));
  }
  function setValueIndex({
    values: values2,
    newValue,
    index: index3
  }) {
    const output = values2.slice();
    output[index3] = newValue;
    return output.sort(asc);
  }
  function focusThumb({
    sliderRef,
    activeIndex,
    setActive
  }) {
    var _sliderRef$current, _doc$activeElement;
    const doc = (0, import_utils86.unstable_ownerDocument)(sliderRef.current);
    if (!((_sliderRef$current = sliderRef.current) != null && _sliderRef$current.contains(doc.activeElement)) || Number(doc == null || (_doc$activeElement = doc.activeElement) == null ? void 0 : _doc$activeElement.getAttribute("data-index")) !== activeIndex) {
      var _sliderRef$current2;
      (_sliderRef$current2 = sliderRef.current) == null || _sliderRef$current2.querySelector(`[type="range"][data-index="${activeIndex}"]`).focus();
    }
    if (setActive) {
      setActive(activeIndex);
    }
  }
  function areValuesEqual(newValue, oldValue) {
    if (typeof newValue === "number" && typeof oldValue === "number") {
      return newValue === oldValue;
    }
    if (typeof newValue === "object" && typeof oldValue === "object") {
      return areArraysEqual(newValue, oldValue);
    }
    return false;
  }
  var axisProps = {
    horizontal: {
      offset: (percent2) => ({
        left: `${percent2}%`
      }),
      leap: (percent2) => ({
        width: `${percent2}%`
      })
    },
    "horizontal-reverse": {
      offset: (percent2) => ({
        right: `${percent2}%`
      }),
      leap: (percent2) => ({
        width: `${percent2}%`
      })
    },
    vertical: {
      offset: (percent2) => ({
        bottom: `${percent2}%`
      }),
      leap: (percent2) => ({
        height: `${percent2}%`
      })
    }
  };
  var Identity = (x) => x;
  var cachedSupportsTouchActionNone;
  function doesSupportTouchActionNone() {
    if (cachedSupportsTouchActionNone === void 0) {
      if (typeof CSS !== "undefined" && typeof CSS.supports === "function") {
        cachedSupportsTouchActionNone = CSS.supports("touch-action", "none");
      } else {
        cachedSupportsTouchActionNone = true;
      }
    }
    return cachedSupportsTouchActionNone;
  }
  function useSlider(parameters) {
    const {
      "aria-labelledby": ariaLabelledby,
      defaultValue,
      disabled = false,
      disableSwap = false,
      isRtl = false,
      marks: marksProp = false,
      max: max3 = 100,
      min: min3 = 0,
      name,
      onChange,
      onChangeCommitted,
      orientation = "horizontal",
      rootRef: ref,
      scale = Identity,
      step = 1,
      tabIndex,
      value: valueProp
    } = parameters;
    const touchId = React82.useRef();
    const [active, setActive] = React82.useState(-1);
    const [open, setOpen] = React82.useState(-1);
    const [dragging, setDragging] = React82.useState(false);
    const moveCount = React82.useRef(0);
    const [valueDerived, setValueState] = (0, import_utils86.unstable_useControlled)({
      controlled: valueProp,
      default: defaultValue != null ? defaultValue : min3,
      name: "Slider"
    });
    const handleChange = onChange && ((event, value, thumbIndex) => {
      const nativeEvent = event.nativeEvent || event;
      const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
      Object.defineProperty(clonedEvent, "target", {
        writable: true,
        value: {
          value,
          name
        }
      });
      onChange(clonedEvent, value, thumbIndex);
    });
    const range = Array.isArray(valueDerived);
    let values2 = range ? valueDerived.slice().sort(asc) : [valueDerived];
    values2 = values2.map((value) => clamp3(value, min3, max3));
    const marks = marksProp === true && step !== null ? [...Array(Math.floor((max3 - min3) / step) + 1)].map((_5, index3) => ({
      value: min3 + step * index3
    })) : marksProp || [];
    const marksValues = marks.map((mark) => mark.value);
    const {
      isFocusVisibleRef,
      onBlur: handleBlurVisible,
      onFocus: handleFocusVisible,
      ref: focusVisibleRef
    } = (0, import_utils86.unstable_useIsFocusVisible)();
    const [focusedThumbIndex, setFocusedThumbIndex] = React82.useState(-1);
    const sliderRef = React82.useRef();
    const handleFocusRef = (0, import_utils86.unstable_useForkRef)(focusVisibleRef, sliderRef);
    const handleRef = (0, import_utils86.unstable_useForkRef)(ref, handleFocusRef);
    const createHandleHiddenInputFocus = (otherHandlers) => (event) => {
      var _otherHandlers$onFocu;
      const index3 = Number(event.currentTarget.getAttribute("data-index"));
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        setFocusedThumbIndex(index3);
      }
      setOpen(index3);
      otherHandlers == null || (_otherHandlers$onFocu = otherHandlers.onFocus) == null || _otherHandlers$onFocu.call(otherHandlers, event);
    };
    const createHandleHiddenInputBlur = (otherHandlers) => (event) => {
      var _otherHandlers$onBlur;
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setFocusedThumbIndex(-1);
      }
      setOpen(-1);
      otherHandlers == null || (_otherHandlers$onBlur = otherHandlers.onBlur) == null || _otherHandlers$onBlur.call(otherHandlers, event);
    };
    (0, import_utils86.unstable_useEnhancedEffect)(() => {
      if (disabled && sliderRef.current.contains(document.activeElement)) {
        var _document$activeEleme;
        (_document$activeEleme = document.activeElement) == null || _document$activeEleme.blur();
      }
    }, [disabled]);
    if (disabled && active !== -1) {
      setActive(-1);
    }
    if (disabled && focusedThumbIndex !== -1) {
      setFocusedThumbIndex(-1);
    }
    const createHandleHiddenInputChange = (otherHandlers) => (event) => {
      var _otherHandlers$onChan;
      (_otherHandlers$onChan = otherHandlers.onChange) == null || _otherHandlers$onChan.call(otherHandlers, event);
      const index3 = Number(event.currentTarget.getAttribute("data-index"));
      const value = values2[index3];
      const marksIndex = marksValues.indexOf(value);
      let newValue = event.target.valueAsNumber;
      if (marks && step == null) {
        const maxMarksValue = marksValues[marksValues.length - 1];
        if (newValue > maxMarksValue) {
          newValue = maxMarksValue;
        } else if (newValue < marksValues[0]) {
          newValue = marksValues[0];
        } else {
          newValue = newValue < value ? marksValues[marksIndex - 1] : marksValues[marksIndex + 1];
        }
      }
      newValue = clamp3(newValue, min3, max3);
      if (range) {
        if (disableSwap) {
          newValue = clamp3(newValue, values2[index3 - 1] || -Infinity, values2[index3 + 1] || Infinity);
        }
        const previousValue = newValue;
        newValue = setValueIndex({
          values: values2,
          newValue,
          index: index3
        });
        let activeIndex = index3;
        if (!disableSwap) {
          activeIndex = newValue.indexOf(previousValue);
        }
        focusThumb({
          sliderRef,
          activeIndex
        });
      }
      setValueState(newValue);
      setFocusedThumbIndex(index3);
      if (handleChange && !areValuesEqual(newValue, valueDerived)) {
        handleChange(event, newValue, index3);
      }
      if (onChangeCommitted) {
        onChangeCommitted(event, newValue);
      }
    };
    const previousIndex = React82.useRef();
    let axis = orientation;
    if (isRtl && orientation === "horizontal") {
      axis += "-reverse";
    }
    const getFingerNewValue = ({
      finger,
      move = false
    }) => {
      const {
        current: slider
      } = sliderRef;
      const {
        width,
        height,
        bottom: bottom2,
        left: left2
      } = slider.getBoundingClientRect();
      let percent2;
      if (axis.indexOf("vertical") === 0) {
        percent2 = (bottom2 - finger.y) / height;
      } else {
        percent2 = (finger.x - left2) / width;
      }
      if (axis.indexOf("-reverse") !== -1) {
        percent2 = 1 - percent2;
      }
      let newValue;
      newValue = percentToValue(percent2, min3, max3);
      if (step) {
        newValue = roundValueToStep(newValue, step, min3);
      } else {
        const closestIndex = findClosest(marksValues, newValue);
        newValue = marksValues[closestIndex];
      }
      newValue = clamp3(newValue, min3, max3);
      let activeIndex = 0;
      if (range) {
        if (!move) {
          activeIndex = findClosest(values2, newValue);
        } else {
          activeIndex = previousIndex.current;
        }
        if (disableSwap) {
          newValue = clamp3(newValue, values2[activeIndex - 1] || -Infinity, values2[activeIndex + 1] || Infinity);
        }
        const previousValue = newValue;
        newValue = setValueIndex({
          values: values2,
          newValue,
          index: activeIndex
        });
        if (!(disableSwap && move)) {
          activeIndex = newValue.indexOf(previousValue);
          previousIndex.current = activeIndex;
        }
      }
      return {
        newValue,
        activeIndex
      };
    };
    const handleTouchMove = (0, import_utils86.unstable_useEventCallback)((nativeEvent) => {
      const finger = trackFinger(nativeEvent, touchId);
      if (!finger) {
        return;
      }
      moveCount.current += 1;
      if (nativeEvent.type === "mousemove" && nativeEvent.buttons === 0) {
        handleTouchEnd(nativeEvent);
        return;
      }
      const {
        newValue,
        activeIndex
      } = getFingerNewValue({
        finger,
        move: true
      });
      focusThumb({
        sliderRef,
        activeIndex,
        setActive
      });
      setValueState(newValue);
      if (!dragging && moveCount.current > INTENTIONAL_DRAG_COUNT_THRESHOLD) {
        setDragging(true);
      }
      if (handleChange && !areValuesEqual(newValue, valueDerived)) {
        handleChange(nativeEvent, newValue, activeIndex);
      }
    });
    const handleTouchEnd = (0, import_utils86.unstable_useEventCallback)((nativeEvent) => {
      const finger = trackFinger(nativeEvent, touchId);
      setDragging(false);
      if (!finger) {
        return;
      }
      const {
        newValue
      } = getFingerNewValue({
        finger,
        move: true
      });
      setActive(-1);
      if (nativeEvent.type === "touchend") {
        setOpen(-1);
      }
      if (onChangeCommitted) {
        onChangeCommitted(nativeEvent, newValue);
      }
      touchId.current = void 0;
      stopListening();
    });
    const handleTouchStart = (0, import_utils86.unstable_useEventCallback)((nativeEvent) => {
      if (disabled) {
        return;
      }
      if (!doesSupportTouchActionNone()) {
        nativeEvent.preventDefault();
      }
      const touch = nativeEvent.changedTouches[0];
      if (touch != null) {
        touchId.current = touch.identifier;
      }
      const finger = trackFinger(nativeEvent, touchId);
      if (finger !== false) {
        const {
          newValue,
          activeIndex
        } = getFingerNewValue({
          finger
        });
        focusThumb({
          sliderRef,
          activeIndex,
          setActive
        });
        setValueState(newValue);
        if (handleChange && !areValuesEqual(newValue, valueDerived)) {
          handleChange(nativeEvent, newValue, activeIndex);
        }
      }
      moveCount.current = 0;
      const doc = (0, import_utils86.unstable_ownerDocument)(sliderRef.current);
      doc.addEventListener("touchmove", handleTouchMove);
      doc.addEventListener("touchend", handleTouchEnd);
    });
    const stopListening = React82.useCallback(() => {
      const doc = (0, import_utils86.unstable_ownerDocument)(sliderRef.current);
      doc.removeEventListener("mousemove", handleTouchMove);
      doc.removeEventListener("mouseup", handleTouchEnd);
      doc.removeEventListener("touchmove", handleTouchMove);
      doc.removeEventListener("touchend", handleTouchEnd);
    }, [handleTouchEnd, handleTouchMove]);
    React82.useEffect(() => {
      const {
        current: slider
      } = sliderRef;
      slider.addEventListener("touchstart", handleTouchStart, {
        passive: doesSupportTouchActionNone()
      });
      return () => {
        slider.removeEventListener("touchstart", handleTouchStart, {
          passive: doesSupportTouchActionNone()
        });
        stopListening();
      };
    }, [stopListening, handleTouchStart]);
    React82.useEffect(() => {
      if (disabled) {
        stopListening();
      }
    }, [disabled, stopListening]);
    const createHandleMouseDown = (otherHandlers) => (event) => {
      var _otherHandlers$onMous;
      (_otherHandlers$onMous = otherHandlers.onMouseDown) == null || _otherHandlers$onMous.call(otherHandlers, event);
      if (disabled) {
        return;
      }
      if (event.defaultPrevented) {
        return;
      }
      if (event.button !== 0) {
        return;
      }
      event.preventDefault();
      const finger = trackFinger(event, touchId);
      if (finger !== false) {
        const {
          newValue,
          activeIndex
        } = getFingerNewValue({
          finger
        });
        focusThumb({
          sliderRef,
          activeIndex,
          setActive
        });
        setValueState(newValue);
        if (handleChange && !areValuesEqual(newValue, valueDerived)) {
          handleChange(event, newValue, activeIndex);
        }
      }
      moveCount.current = 0;
      const doc = (0, import_utils86.unstable_ownerDocument)(sliderRef.current);
      doc.addEventListener("mousemove", handleTouchMove);
      doc.addEventListener("mouseup", handleTouchEnd);
    };
    const trackOffset = valueToPercent(range ? values2[0] : min3, min3, max3);
    const trackLeap = valueToPercent(values2[values2.length - 1], min3, max3) - trackOffset;
    const getRootProps = (otherHandlers = {}) => {
      const ownEventHandlers = {
        onMouseDown: createHandleMouseDown(otherHandlers || {})
      };
      const mergedEventHandlers = _extends({}, otherHandlers, ownEventHandlers);
      return _extends({
        ref: handleRef
      }, mergedEventHandlers);
    };
    const createHandleMouseOver = (otherHandlers) => (event) => {
      var _otherHandlers$onMous2;
      (_otherHandlers$onMous2 = otherHandlers.onMouseOver) == null || _otherHandlers$onMous2.call(otherHandlers, event);
      const index3 = Number(event.currentTarget.getAttribute("data-index"));
      setOpen(index3);
    };
    const createHandleMouseLeave = (otherHandlers) => (event) => {
      var _otherHandlers$onMous3;
      (_otherHandlers$onMous3 = otherHandlers.onMouseLeave) == null || _otherHandlers$onMous3.call(otherHandlers, event);
      setOpen(-1);
    };
    const getThumbProps = (otherHandlers = {}) => {
      const ownEventHandlers = {
        onMouseOver: createHandleMouseOver(otherHandlers || {}),
        onMouseLeave: createHandleMouseLeave(otherHandlers || {})
      };
      return _extends({}, otherHandlers, ownEventHandlers);
    };
    const getThumbStyle = (index3) => {
      return {
        // So the non active thumb doesn't show its label on hover.
        pointerEvents: active !== -1 && active !== index3 ? "none" : void 0
      };
    };
    const getHiddenInputProps = (otherHandlers = {}) => {
      var _parameters$step;
      const ownEventHandlers = {
        onChange: createHandleHiddenInputChange(otherHandlers || {}),
        onFocus: createHandleHiddenInputFocus(otherHandlers || {}),
        onBlur: createHandleHiddenInputBlur(otherHandlers || {})
      };
      const mergedEventHandlers = _extends({}, otherHandlers, ownEventHandlers);
      return _extends({
        tabIndex,
        "aria-labelledby": ariaLabelledby,
        "aria-orientation": orientation,
        "aria-valuemax": scale(max3),
        "aria-valuemin": scale(min3),
        name,
        type: "range",
        min: parameters.min,
        max: parameters.max,
        step: parameters.step === null && parameters.marks ? "any" : (_parameters$step = parameters.step) != null ? _parameters$step : void 0,
        disabled
      }, mergedEventHandlers, {
        style: _extends({}, import_utils86.visuallyHidden, {
          direction: isRtl ? "rtl" : "ltr",
          // So that VoiceOver's focus indicator matches the thumb's dimensions
          width: "100%",
          height: "100%"
        })
      });
    };
    return {
      active,
      axis,
      axisProps,
      dragging,
      focusedThumbIndex,
      getHiddenInputProps,
      getRootProps,
      getThumbProps,
      marks,
      open,
      range,
      rootRef: handleRef,
      trackLeap,
      trackOffset,
      values: values2,
      getThumbStyle
    };
  }

  // node_modules/@mui/base/Slider/Slider.js
  var import_jsx_runtime56 = __toESM(require_jsx_runtime());
  var import_jsx_runtime57 = __toESM(require_jsx_runtime());
  var _excluded42 = ["aria-label", "aria-valuetext", "aria-labelledby", "className", "disableSwap", "disabled", "getAriaLabel", "getAriaValueText", "marks", "max", "min", "name", "onChange", "onChangeCommitted", "orientation", "scale", "step", "tabIndex", "track", "value", "valueLabelFormat", "isRtl", "defaultValue", "slotProps", "slots"];
  function Identity2(x) {
    return x;
  }
  var useUtilityClasses27 = (ownerState) => {
    const {
      disabled,
      dragging,
      marked,
      orientation,
      track
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", dragging && "dragging", marked && "marked", orientation === "vertical" && "vertical", track === "inverted" && "trackInverted", track === false && "trackFalse"],
      rail: ["rail"],
      track: ["track"],
      mark: ["mark"],
      markActive: ["markActive"],
      markLabel: ["markLabel"],
      markLabelActive: ["markLabelActive"],
      valueLabel: ["valueLabel"],
      thumb: ["thumb", disabled && "disabled"],
      active: ["active"],
      disabled: ["disabled"],
      focusVisible: ["focusVisible"]
    };
    return (0, import_composeClasses27.unstable_composeClasses)(slots, useClassNamesOverride(getSliderUtilityClass));
  };
  var Slider = /* @__PURE__ */ React83.forwardRef(function Slider2(props, forwardedRef) {
    var _slots$root, _slots$rail, _slots$track, _slots$thumb, _slots$mark, _slots$markLabel;
    const {
      "aria-label": ariaLabel,
      "aria-valuetext": ariaValuetext,
      "aria-labelledby": ariaLabelledby,
      className,
      disableSwap = false,
      disabled = false,
      getAriaLabel,
      getAriaValueText,
      marks: marksProp = false,
      max: max3 = 100,
      min: min3 = 0,
      orientation = "horizontal",
      scale = Identity2,
      step = 1,
      track = "normal",
      valueLabelFormat = Identity2,
      isRtl = false,
      defaultValue,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded42);
    const partialOwnerState = _extends({}, props, {
      marks: marksProp,
      disabled,
      disableSwap,
      isRtl,
      defaultValue,
      max: max3,
      min: min3,
      orientation,
      scale,
      step,
      track,
      valueLabelFormat
    });
    const {
      axisProps: axisProps2,
      getRootProps,
      getHiddenInputProps,
      getThumbProps,
      active,
      axis,
      range,
      focusedThumbIndex,
      dragging,
      marks,
      values: values2,
      trackOffset,
      trackLeap,
      getThumbStyle
    } = useSlider(_extends({}, partialOwnerState, {
      rootRef: forwardedRef
    }));
    const ownerState = _extends({}, partialOwnerState, {
      marked: marks.length > 0 && marks.some((mark) => mark.label),
      dragging,
      focusedThumbIndex,
      activeThumbIndex: active
    });
    const classes = useUtilityClasses27(ownerState);
    const Root = (_slots$root = slots.root) != null ? _slots$root : "span";
    const rootProps = useSlotProps({
      elementType: Root,
      getSlotProps: getRootProps,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      ownerState,
      className: [classes.root, className]
    });
    const Rail = (_slots$rail = slots.rail) != null ? _slots$rail : "span";
    const railProps = useSlotProps({
      elementType: Rail,
      externalSlotProps: slotProps.rail,
      ownerState,
      className: classes.rail
    });
    const Track = (_slots$track = slots.track) != null ? _slots$track : "span";
    const trackProps = useSlotProps({
      elementType: Track,
      externalSlotProps: slotProps.track,
      additionalProps: {
        style: _extends({}, axisProps2[axis].offset(trackOffset), axisProps2[axis].leap(trackLeap))
      },
      ownerState,
      className: classes.track
    });
    const Thumb = (_slots$thumb = slots.thumb) != null ? _slots$thumb : "span";
    const thumbProps = useSlotProps({
      elementType: Thumb,
      getSlotProps: getThumbProps,
      externalSlotProps: slotProps.thumb,
      ownerState,
      skipResolvingSlotProps: true
    });
    const ValueLabel = slots.valueLabel;
    const valueLabelProps = useSlotProps({
      elementType: ValueLabel,
      externalSlotProps: slotProps.valueLabel,
      ownerState
    });
    const Mark = (_slots$mark = slots.mark) != null ? _slots$mark : "span";
    const markProps = useSlotProps({
      elementType: Mark,
      externalSlotProps: slotProps.mark,
      ownerState,
      className: classes.mark
    });
    const MarkLabel = (_slots$markLabel = slots.markLabel) != null ? _slots$markLabel : "span";
    const markLabelProps = useSlotProps({
      elementType: MarkLabel,
      externalSlotProps: slotProps.markLabel,
      ownerState
    });
    const Input5 = slots.input || "input";
    const inputProps = useSlotProps({
      elementType: Input5,
      getSlotProps: getHiddenInputProps,
      externalSlotProps: slotProps.input,
      ownerState
    });
    return /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)(Root, _extends({}, rootProps, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime56.jsx)(Rail, _extends({}, railProps)), /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(Track, _extends({}, trackProps)), marks.filter((mark) => mark.value >= min3 && mark.value <= max3).map((mark, index3) => {
        const percent2 = valueToPercent(mark.value, min3, max3);
        const style = axisProps2[axis].offset(percent2);
        let markActive;
        if (track === false) {
          markActive = values2.indexOf(mark.value) !== -1;
        } else {
          markActive = track === "normal" && (range ? mark.value >= values2[0] && mark.value <= values2[values2.length - 1] : mark.value <= values2[0]) || track === "inverted" && (range ? mark.value <= values2[0] || mark.value >= values2[values2.length - 1] : mark.value >= values2[0]);
        }
        return /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)(React83.Fragment, {
          children: [/* @__PURE__ */ (0, import_jsx_runtime56.jsx)(Mark, _extends({
            "data-index": index3
          }, markProps, !isHostComponent(Mark) && {
            markActive
          }, {
            style: _extends({}, style, markProps.style),
            className: clsx_default(markProps.className, markActive && classes.markActive)
          })), mark.label != null ? /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(MarkLabel, _extends({
            "aria-hidden": true,
            "data-index": index3
          }, markLabelProps, !isHostComponent(MarkLabel) && {
            markLabelActive: markActive
          }, {
            style: _extends({}, style, markLabelProps.style),
            className: clsx_default(classes.markLabel, markLabelProps.className, markActive && classes.markLabelActive),
            children: mark.label
          })) : null]
        }, index3);
      }), values2.map((value, index3) => {
        const percent2 = valueToPercent(value, min3, max3);
        const style = axisProps2[axis].offset(percent2);
        const resolvedSlotProps = resolveComponentProps(slotProps.thumb, ownerState, {
          index: index3,
          focused: focusedThumbIndex === index3,
          active: active === index3
        });
        return /* @__PURE__ */ (0, import_jsx_runtime57.jsxs)(Thumb, _extends({
          "data-index": index3
        }, thumbProps, resolvedSlotProps, {
          className: clsx_default(classes.thumb, thumbProps.className, resolvedSlotProps == null ? void 0 : resolvedSlotProps.className, active === index3 && classes.active, focusedThumbIndex === index3 && classes.focusVisible),
          style: _extends({}, style, getThumbStyle(index3), thumbProps.style, resolvedSlotProps == null ? void 0 : resolvedSlotProps.style),
          children: [/* @__PURE__ */ (0, import_jsx_runtime56.jsx)(Input5, _extends({
            "data-index": index3,
            "aria-label": getAriaLabel ? getAriaLabel(index3) : ariaLabel,
            "aria-valuenow": scale(value),
            "aria-labelledby": ariaLabelledby,
            "aria-valuetext": getAriaValueText ? getAriaValueText(scale(value), index3) : ariaValuetext,
            value: values2[index3]
          }, inputProps)), ValueLabel ? /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(ValueLabel, _extends({}, !isHostComponent(ValueLabel) && {
            valueLabelFormat,
            index: index3,
            disabled
          }, valueLabelProps, {
            children: typeof valueLabelFormat === "function" ? valueLabelFormat(scale(value), index3) : valueLabelFormat
          })) : null]
        }), index3);
      })]
    }));
  });
  true ? Slider.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The label of the slider.
     */
    "aria-label": (0, import_utils88.chainPropTypes)(import_prop_types39.default.string, (props) => {
      const range = Array.isArray(props.value || props.defaultValue);
      if (range && props["aria-label"] != null) {
        return new Error("MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.");
      }
      return null;
    }),
    /**
     * The id of the element containing a label for the slider.
     */
    "aria-labelledby": import_prop_types39.default.string,
    /**
     * A string value that provides a user-friendly name for the current value of the slider.
     */
    "aria-valuetext": (0, import_utils88.chainPropTypes)(import_prop_types39.default.string, (props) => {
      const range = Array.isArray(props.value || props.defaultValue);
      if (range && props["aria-valuetext"] != null) {
        return new Error("MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.");
      }
      return null;
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types39.default.oneOfType([import_prop_types39.default.arrayOf(import_prop_types39.default.number), import_prop_types39.default.number]),
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types39.default.bool,
    /**
     * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.
     * @default false
     */
    disableSwap: import_prop_types39.default.bool,
    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.
     * This is important for screen reader users.
     * @param {number} index The thumb label's index to format.
     * @returns {string}
     */
    getAriaLabel: import_prop_types39.default.func,
    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.
     * This is important for screen reader users.
     * @param {number} value The thumb label's value to format.
     * @param {number} index The thumb label's index to format.
     * @returns {string}
     */
    getAriaValueText: import_prop_types39.default.func,
    /**
     * If `true` the Slider will be rendered right-to-left (with the lowest value on the right-hand side).
     * @default false
     */
    isRtl: import_prop_types39.default.bool,
    /**
     * Marks indicate predetermined values to which the user can move the slider.
     * If `true` the marks are spaced according the value of the `step` prop.
     * If an array, it should contain objects with `value` and an optional `label` keys.
     * @default false
     */
    marks: import_prop_types39.default.oneOfType([import_prop_types39.default.arrayOf(import_prop_types39.default.shape({
      label: import_prop_types39.default.node,
      value: import_prop_types39.default.number.isRequired
    })), import_prop_types39.default.bool]),
    /**
     * The maximum allowed value of the slider.
     * Should not be equal to min.
     * @default 100
     */
    max: import_prop_types39.default.number,
    /**
     * The minimum allowed value of the slider.
     * Should not be equal to max.
     * @default 0
     */
    min: import_prop_types39.default.number,
    /**
     * Name attribute of the hidden `input` element.
     */
    name: import_prop_types39.default.string,
    /**
     * Callback function that is fired when the slider's value changed.
     *
     * @param {Event} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (any).
     * **Warning**: This is a generic event not a change event.
     * @param {number | number[]} value The new value.
     * @param {number} activeThumb Index of the currently moved thumb.
     */
    onChange: import_prop_types39.default.func,
    /**
     * Callback function that is fired when the `mouseup` is triggered.
     *
     * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.
     * @param {number | number[]} value The new value.
     */
    onChangeCommitted: import_prop_types39.default.func,
    /**
     * The component orientation.
     * @default 'horizontal'
     */
    orientation: import_prop_types39.default.oneOf(["horizontal", "vertical"]),
    /**
     * A transformation function, to change the scale of the slider.
     * @param {any} x
     * @returns {any}
     * @default function Identity(x) {
     *   return x;
     * }
     */
    scale: import_prop_types39.default.func,
    /**
     * The props used for each slot inside the Slider.
     * @default {}
     */
    slotProps: import_prop_types39.default.shape({
      input: import_prop_types39.default.oneOfType([import_prop_types39.default.func, import_prop_types39.default.object]),
      mark: import_prop_types39.default.oneOfType([import_prop_types39.default.func, import_prop_types39.default.object]),
      markLabel: import_prop_types39.default.oneOfType([import_prop_types39.default.func, import_prop_types39.default.object]),
      rail: import_prop_types39.default.oneOfType([import_prop_types39.default.func, import_prop_types39.default.object]),
      root: import_prop_types39.default.oneOfType([import_prop_types39.default.func, import_prop_types39.default.object]),
      thumb: import_prop_types39.default.oneOfType([import_prop_types39.default.func, import_prop_types39.default.object]),
      track: import_prop_types39.default.oneOfType([import_prop_types39.default.func, import_prop_types39.default.object]),
      valueLabel: import_prop_types39.default.oneOfType([import_prop_types39.default.any, import_prop_types39.default.func])
    }),
    /**
     * The components used for each slot inside the Slider.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types39.default.shape({
      input: import_prop_types39.default.elementType,
      mark: import_prop_types39.default.elementType,
      markLabel: import_prop_types39.default.elementType,
      rail: import_prop_types39.default.elementType,
      root: import_prop_types39.default.elementType,
      thumb: import_prop_types39.default.elementType,
      track: import_prop_types39.default.elementType,
      valueLabel: import_prop_types39.default.elementType
    }),
    /**
     * The granularity with which the slider can step through values. (A "discrete" slider.)
     * The `min` prop serves as the origin for the valid values.
     * We recommend (max - min) to be evenly divisible by the step.
     *
     * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.
     * @default 1
     */
    step: import_prop_types39.default.number,
    /**
     * Tab index attribute of the hidden `input` element.
     */
    tabIndex: import_prop_types39.default.number,
    /**
     * The track presentation:
     *
     * - `normal` the track will render a bar representing the slider value.
     * - `inverted` the track will render a bar representing the remaining slider value.
     * - `false` the track will render without a bar.
     * @default 'normal'
     */
    track: import_prop_types39.default.oneOf(["inverted", "normal", false]),
    /**
     * The value of the slider.
     * For ranged sliders, provide an array with two values.
     */
    value: import_prop_types39.default.oneOfType([import_prop_types39.default.arrayOf(import_prop_types39.default.number), import_prop_types39.default.number]),
    /**
     * The format function the value label's value.
     *
     * When a function is provided, it should have the following signature:
     *
     * - {number} value The value label's value to format
     * - {number} index The value label's index to format
     * @param {any} x
     * @returns {any}
     * @default function Identity(x) {
     *   return x;
     * }
     */
    valueLabelFormat: import_prop_types39.default.oneOfType([import_prop_types39.default.func, import_prop_types39.default.string])
  } : void 0;

  // node_modules/@mui/base/Snackbar/Snackbar.js
  init_extends();
  var React85 = __toESM(require_react());
  var import_prop_types40 = __toESM(require_prop_types());
  var import_composeClasses28 = __toESM(require_composeClasses3());

  // node_modules/@mui/base/Snackbar/snackbarClasses.js
  function getSnackbarUtilityClass(slot) {
    return (0, import_utils43.unstable_generateUtilityClass)("MuiSnackbar", slot);
  }
  var snackbarClasses = (0, import_utils42.unstable_generateUtilityClasses)("MuiSnackbar", ["root"]);

  // node_modules/@mui/base/useSnackbar/useSnackbar.js
  init_extends();
  var React84 = __toESM(require_react());
  var import_utils89 = __toESM(require_utils());
  function useSnackbar(parameters = {}) {
    const {
      autoHideDuration = null,
      disableWindowBlurListener = false,
      onClose,
      open,
      resumeHideDuration
    } = parameters;
    const timerAutoHide = React84.useRef();
    React84.useEffect(() => {
      if (!open) {
        return void 0;
      }
      function handleKeyDown2(nativeEvent) {
        if (!nativeEvent.defaultPrevented) {
          if (nativeEvent.key === "Escape" || nativeEvent.key === "Esc") {
            onClose == null || onClose(nativeEvent, "escapeKeyDown");
          }
        }
      }
      document.addEventListener("keydown", handleKeyDown2);
      return () => {
        document.removeEventListener("keydown", handleKeyDown2);
      };
    }, [open, onClose]);
    const handleClose = (0, import_utils89.unstable_useEventCallback)((event, reason) => {
      onClose == null || onClose(event, reason);
    });
    const setAutoHideTimer = (0, import_utils89.unstable_useEventCallback)((autoHideDurationParam) => {
      if (!onClose || autoHideDurationParam == null) {
        return;
      }
      clearTimeout(timerAutoHide.current);
      timerAutoHide.current = setTimeout(() => {
        handleClose(null, "timeout");
      }, autoHideDurationParam);
    });
    React84.useEffect(() => {
      if (open) {
        setAutoHideTimer(autoHideDuration);
      }
      return () => {
        clearTimeout(timerAutoHide.current);
      };
    }, [open, autoHideDuration, setAutoHideTimer]);
    const handleClickAway = (event) => {
      onClose == null || onClose(event, "clickaway");
    };
    const handlePause = () => {
      clearTimeout(timerAutoHide.current);
    };
    const handleResume = React84.useCallback(() => {
      if (autoHideDuration != null) {
        setAutoHideTimer(resumeHideDuration != null ? resumeHideDuration : autoHideDuration * 0.5);
      }
    }, [autoHideDuration, resumeHideDuration, setAutoHideTimer]);
    const createHandleBlur = (otherHandlers) => (event) => {
      const onBlurCallback = otherHandlers.onBlur;
      onBlurCallback == null || onBlurCallback(event);
      handleResume();
    };
    const createHandleFocus = (otherHandlers) => (event) => {
      const onFocusCallback = otherHandlers.onFocus;
      onFocusCallback == null || onFocusCallback(event);
      handlePause();
    };
    const createMouseEnter = (otherHandlers) => (event) => {
      const onMouseEnterCallback = otherHandlers.onMouseEnter;
      onMouseEnterCallback == null || onMouseEnterCallback(event);
      handlePause();
    };
    const createMouseLeave = (otherHandlers) => (event) => {
      const onMouseLeaveCallback = otherHandlers.onMouseLeave;
      onMouseLeaveCallback == null || onMouseLeaveCallback(event);
      handleResume();
    };
    React84.useEffect(() => {
      if (!disableWindowBlurListener && open) {
        window.addEventListener("focus", handleResume);
        window.addEventListener("blur", handlePause);
        return () => {
          window.removeEventListener("focus", handleResume);
          window.removeEventListener("blur", handlePause);
        };
      }
      return void 0;
    }, [disableWindowBlurListener, handleResume, open]);
    const getRootProps = (externalProps = {}) => {
      const externalEventHandlers = _extends({}, extractEventHandlers(parameters), extractEventHandlers(externalProps));
      return _extends({
        // ClickAwayListener adds an `onClick` prop which results in the alert not being announced.
        // See https://github.com/mui/material-ui/issues/29080
        role: "presentation"
      }, externalProps, externalEventHandlers, {
        onBlur: createHandleBlur(externalEventHandlers),
        onFocus: createHandleFocus(externalEventHandlers),
        onMouseEnter: createMouseEnter(externalEventHandlers),
        onMouseLeave: createMouseLeave(externalEventHandlers)
      });
    };
    return {
      getRootProps,
      onClickAway: handleClickAway
    };
  }

  // node_modules/@mui/base/Snackbar/Snackbar.js
  var import_jsx_runtime58 = __toESM(require_jsx_runtime());
  var _excluded43 = ["autoHideDuration", "children", "disableWindowBlurListener", "exited", "onBlur", "onClose", "onFocus", "onMouseEnter", "onMouseLeave", "open", "resumeHideDuration", "slotProps", "slots"];
  var useUtilityClasses28 = () => {
    const slots = {
      root: ["root"]
    };
    return (0, import_composeClasses28.unstable_composeClasses)(slots, useClassNamesOverride(getSnackbarUtilityClass));
  };
  var Snackbar = /* @__PURE__ */ React85.forwardRef(function Snackbar2(props, forwardedRef) {
    const {
      autoHideDuration = null,
      children,
      disableWindowBlurListener = false,
      exited = true,
      onClose,
      open,
      resumeHideDuration,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded43);
    const classes = useUtilityClasses28();
    const {
      getRootProps,
      onClickAway
    } = useSnackbar(_extends({}, props, {
      autoHideDuration,
      disableWindowBlurListener,
      onClose,
      open,
      resumeHideDuration
    }));
    const ownerState = props;
    const Root = slots.root || "div";
    const rootProps = useSlotProps({
      elementType: Root,
      getSlotProps: getRootProps,
      externalForwardedProps: other,
      externalSlotProps: slotProps.root,
      additionalProps: {
        ref: forwardedRef
      },
      ownerState,
      className: classes.root
    });
    const clickAwayListenerProps = useSlotProps({
      elementType: ClickAwayListener,
      externalSlotProps: slotProps.clickAwayListener,
      additionalProps: {
        onClickAway
      },
      ownerState
    });
    delete clickAwayListenerProps.ownerState;
    if (!open && exited) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(ClickAwayListener, _extends({}, clickAwayListenerProps, {
      children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(Root, _extends({}, rootProps, {
        children
      }))
    }));
  });
  true ? Snackbar.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The number of milliseconds to wait before automatically calling the
     * `onClose` function. `onClose` should then set the state of the `open`
     * prop to hide the Snackbar. This behavior is disabled by default with
     * the `null` value.
     * @default null
     */
    autoHideDuration: import_prop_types40.default.number,
    /**
     * @ignore
     */
    children: import_prop_types40.default.node,
    /**
     * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.
     * @default false
     */
    disableWindowBlurListener: import_prop_types40.default.bool,
    /**
     * The prop used to handle exited transition and unmount the component.
     * @default true
     */
    exited: import_prop_types40.default.bool,
    /**
     * Callback fired when the component requests to be closed.
     * Typically `onClose` is used to set state in the parent component,
     * which is used to control the `Snackbar` `open` prop.
     * The `reason` parameter can optionally be used to control the response to `onClose`,
     * for example ignoring `clickaway`.
     *
     * @param {React.SyntheticEvent<any> | Event} event The event source of the callback.
     * @param {string} reason Can be: `"timeout"` (`autoHideDuration` expired), `"clickaway"`, or `"escapeKeyDown"`.
     */
    onClose: import_prop_types40.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types40.default.bool,
    /**
     * The number of milliseconds to wait before dismissing after user interaction.
     * If `autoHideDuration` prop isn't specified, it does nothing.
     * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,
     * we default to `autoHideDuration / 2` ms.
     */
    resumeHideDuration: import_prop_types40.default.number,
    /**
     * The props used for each slot inside the Snackbar.
     * @default {}
     */
    slotProps: import_prop_types40.default.shape({
      clickAwayListener: import_prop_types40.default.oneOfType([import_prop_types40.default.func, import_prop_types40.default.shape({
        children: import_prop_types40.default.element.isRequired,
        disableReactTree: import_prop_types40.default.bool,
        mouseEvent: import_prop_types40.default.oneOf(["onClick", "onMouseDown", "onMouseUp", "onPointerDown", "onPointerUp", false]),
        onClickAway: import_prop_types40.default.func,
        touchEvent: import_prop_types40.default.oneOf(["onTouchEnd", "onTouchStart", false])
      })]),
      root: import_prop_types40.default.oneOfType([import_prop_types40.default.func, import_prop_types40.default.object])
    }),
    /**
     * The components used for each slot inside the Snackbar.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types40.default.shape({
      root: import_prop_types40.default.elementType
    })
  } : void 0;

  // node_modules/@mui/base/Switch/Switch.js
  init_extends();
  var React87 = __toESM(require_react());
  var import_prop_types41 = __toESM(require_prop_types());
  var import_composeClasses29 = __toESM(require_composeClasses3());

  // node_modules/@mui/base/useSwitch/useSwitch.js
  init_extends();
  var React86 = __toESM(require_react());
  var import_utils91 = __toESM(require_utils());
  function useSwitch(props) {
    const {
      checked: checkedProp,
      defaultChecked,
      disabled,
      onBlur,
      onChange,
      onFocus,
      onFocusVisible,
      readOnly,
      required
    } = props;
    const [checked, setCheckedState] = (0, import_utils91.unstable_useControlled)({
      controlled: checkedProp,
      default: Boolean(defaultChecked),
      name: "Switch",
      state: "checked"
    });
    const createHandleInputChange = (otherProps) => (event) => {
      var _otherProps$onChange;
      if (event.nativeEvent.defaultPrevented) {
        return;
      }
      setCheckedState(event.target.checked);
      onChange == null || onChange(event);
      (_otherProps$onChange = otherProps.onChange) == null || _otherProps$onChange.call(otherProps, event);
    };
    const {
      isFocusVisibleRef,
      onBlur: handleBlurVisible,
      onFocus: handleFocusVisible,
      ref: focusVisibleRef
    } = (0, import_utils91.unstable_useIsFocusVisible)();
    const [focusVisible, setFocusVisible] = React86.useState(false);
    if (disabled && focusVisible) {
      setFocusVisible(false);
    }
    React86.useEffect(() => {
      isFocusVisibleRef.current = focusVisible;
    }, [focusVisible, isFocusVisibleRef]);
    const inputRef = React86.useRef(null);
    const createHandleFocus = (otherProps) => (event) => {
      var _otherProps$onFocus;
      if (!inputRef.current) {
        inputRef.current = event.currentTarget;
      }
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        setFocusVisible(true);
        onFocusVisible == null || onFocusVisible(event);
      }
      onFocus == null || onFocus(event);
      (_otherProps$onFocus = otherProps.onFocus) == null || _otherProps$onFocus.call(otherProps, event);
    };
    const createHandleBlur = (otherProps) => (event) => {
      var _otherProps$onBlur;
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setFocusVisible(false);
      }
      onBlur == null || onBlur(event);
      (_otherProps$onBlur = otherProps.onBlur) == null || _otherProps$onBlur.call(otherProps, event);
    };
    const handleInputRef = (0, import_utils91.unstable_useForkRef)(focusVisibleRef, inputRef);
    const getInputProps = (otherProps = {}) => _extends({
      checked: checkedProp,
      defaultChecked,
      disabled,
      readOnly,
      ref: handleInputRef,
      required,
      type: "checkbox"
    }, otherProps, {
      onChange: createHandleInputChange(otherProps),
      onFocus: createHandleFocus(otherProps),
      onBlur: createHandleBlur(otherProps)
    });
    return {
      checked,
      disabled: Boolean(disabled),
      focusVisible,
      getInputProps,
      inputRef: handleInputRef,
      readOnly: Boolean(readOnly)
    };
  }

  // node_modules/@mui/base/Switch/switchClasses.js
  function getSwitchUtilityClass(slot) {
    return (0, import_utils43.unstable_generateUtilityClass)("MuiSwitch", slot);
  }
  var switchClasses = (0, import_utils42.unstable_generateUtilityClasses)("MuiSwitch", ["root", "input", "track", "thumb", "checked", "disabled", "focusVisible", "readOnly"]);

  // node_modules/@mui/base/Switch/Switch.js
  var import_jsx_runtime59 = __toESM(require_jsx_runtime());
  var import_jsx_runtime60 = __toESM(require_jsx_runtime());
  var _excluded44 = ["checked", "defaultChecked", "disabled", "onBlur", "onChange", "onFocus", "onFocusVisible", "readOnly", "required", "slotProps", "slots"];
  var useUtilityClasses29 = (ownerState) => {
    const {
      checked,
      disabled,
      focusVisible,
      readOnly
    } = ownerState;
    const slots = {
      root: ["root", checked && "checked", disabled && "disabled", focusVisible && "focusVisible", readOnly && "readOnly"],
      thumb: ["thumb"],
      input: ["input"],
      track: ["track"]
    };
    return (0, import_composeClasses29.unstable_composeClasses)(slots, useClassNamesOverride(getSwitchUtilityClass));
  };
  var Switch = /* @__PURE__ */ React87.forwardRef(function Switch2(props, forwardedRef) {
    var _slots$root, _slots$thumb, _slots$input, _slots$track;
    const {
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded44);
    const {
      getInputProps,
      checked,
      disabled,
      focusVisible,
      readOnly
    } = useSwitch(props);
    const ownerState = _extends({}, props, {
      checked,
      disabled,
      focusVisible,
      readOnly
    });
    const classes = useUtilityClasses29(ownerState);
    const Root = (_slots$root = slots.root) != null ? _slots$root : "span";
    const rootProps = useSlotProps({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        ref: forwardedRef
      },
      ownerState,
      className: classes.root
    });
    const Thumb = (_slots$thumb = slots.thumb) != null ? _slots$thumb : "span";
    const thumbProps = useSlotProps({
      elementType: Thumb,
      externalSlotProps: slotProps.thumb,
      ownerState,
      className: classes.thumb
    });
    const Input5 = (_slots$input = slots.input) != null ? _slots$input : "input";
    const inputProps = useSlotProps({
      elementType: Input5,
      getSlotProps: getInputProps,
      externalSlotProps: slotProps.input,
      ownerState,
      className: classes.input
    });
    const Track = slots.track === null ? () => null : (_slots$track = slots.track) != null ? _slots$track : "span";
    const trackProps = useSlotProps({
      elementType: Track,
      externalSlotProps: slotProps.track,
      ownerState,
      className: classes.track
    });
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsxs)(Root, _extends({}, rootProps, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime59.jsx)(Track, _extends({}, trackProps)), /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(Thumb, _extends({}, thumbProps)), /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(Input5, _extends({}, inputProps))]
    }));
  });
  true ? Switch.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * If `true`, the component is checked.
     */
    checked: import_prop_types41.default.bool,
    /**
     * Class name applied to the root element.
     */
    className: import_prop_types41.default.string,
    /**
     * The default checked state. Use when the component is not controlled.
     */
    defaultChecked: import_prop_types41.default.bool,
    /**
     * If `true`, the component is disabled.
     */
    disabled: import_prop_types41.default.bool,
    /**
     * @ignore
     */
    onBlur: import_prop_types41.default.func,
    /**
     * Callback fired when the state is changed.
     *
     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: import_prop_types41.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types41.default.func,
    /**
     * @ignore
     */
    onFocusVisible: import_prop_types41.default.func,
    /**
     * If `true`, the component is read only.
     */
    readOnly: import_prop_types41.default.bool,
    /**
     * If `true`, the `input` element is required.
     */
    required: import_prop_types41.default.bool,
    /**
     * The props used for each slot inside the Switch.
     * @default {}
     */
    slotProps: import_prop_types41.default.shape({
      input: import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object]),
      root: import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object]),
      thumb: import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object]),
      track: import_prop_types41.default.oneOfType([import_prop_types41.default.func, import_prop_types41.default.object])
    }),
    /**
     * The components used for each slot inside the Switch.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types41.default.shape({
      input: import_prop_types41.default.elementType,
      root: import_prop_types41.default.elementType,
      thumb: import_prop_types41.default.elementType,
      track: import_prop_types41.default.oneOfType([import_prop_types41.default.elementType, import_prop_types41.default.oneOf([null])])
    })
  } : void 0;

  // node_modules/@mui/base/TablePagination/TablePagination.js
  init_extends();
  var React89 = __toESM(require_react());
  var import_prop_types42 = __toESM(require_prop_types());
  var import_utils94 = __toESM(require_utils());
  var import_composeClasses30 = __toESM(require_composeClasses3());

  // node_modules/@mui/base/TablePagination/TablePaginationActions.js
  init_extends();
  var React88 = __toESM(require_react());
  var import_jsx_runtime61 = __toESM(require_jsx_runtime());
  var import_jsx_runtime62 = __toESM(require_jsx_runtime());
  var _excluded45 = ["count", "getItemAriaLabel", "onPageChange", "page", "rowsPerPage", "showFirstButton", "showLastButton", "direction", "ownerState", "slotProps", "slots"];
  var _span2;
  var _span22;
  var _span3;
  var _span4;
  function LastPageIconDefault() {
    return _span2 || (_span2 = /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("span", {
      children: "\u21FE|"
    }));
  }
  function FirstPageIconDefault() {
    return _span22 || (_span22 = /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("span", {
      children: "|\u21FD"
    }));
  }
  function NextPageIconDefault() {
    return _span3 || (_span3 = /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("span", {
      children: "\u21FE"
    }));
  }
  function BackPageIconDefault() {
    return _span4 || (_span4 = /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("span", {
      children: "\u21FD"
    }));
  }
  function defaultGetAriaLabel(type) {
    return `Go to ${type} page`;
  }
  var TablePaginationActions = /* @__PURE__ */ React88.forwardRef(function TablePaginationActions2(props, forwardedRef) {
    var _slots$root, _slots$firstButton, _slots$lastButton, _slots$nextButton, _slots$backButton, _slots$lastPageIcon, _slots$firstPageIcon, _slots$nextPageIcon, _slots$backPageIcon;
    const {
      count,
      getItemAriaLabel = defaultGetAriaLabel,
      onPageChange,
      page,
      rowsPerPage,
      showFirstButton = false,
      showLastButton = false,
      direction,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded45);
    const ownerState = props;
    const handleFirstPageButtonClick = (event) => {
      onPageChange(event, 0);
    };
    const handleBackButtonClick = (event) => {
      onPageChange(event, page - 1);
    };
    const handleNextButtonClick = (event) => {
      onPageChange(event, page + 1);
    };
    const handleLastPageButtonClick = (event) => {
      onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));
    };
    const Root = (_slots$root = slots.root) != null ? _slots$root : "div";
    const rootProps = useSlotProps({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        ref: forwardedRef
      },
      ownerState
    });
    const FirstButton = (_slots$firstButton = slots.firstButton) != null ? _slots$firstButton : "button";
    const firstButtonProps = useSlotProps({
      elementType: FirstButton,
      externalSlotProps: slotProps.firstButton,
      additionalProps: {
        onClick: handleFirstPageButtonClick,
        disabled: page === 0,
        "aria-label": getItemAriaLabel("first", page),
        title: getItemAriaLabel("first", page)
      },
      ownerState
    });
    const LastButton = (_slots$lastButton = slots.lastButton) != null ? _slots$lastButton : "button";
    const lastButtonProps = useSlotProps({
      elementType: LastButton,
      externalSlotProps: slotProps.lastButton,
      additionalProps: {
        onClick: handleLastPageButtonClick,
        disabled: page >= Math.ceil(count / rowsPerPage) - 1,
        "aria-label": getItemAriaLabel("last", page),
        title: getItemAriaLabel("last", page)
      },
      ownerState
    });
    const NextButton = (_slots$nextButton = slots.nextButton) != null ? _slots$nextButton : "button";
    const nextButtonProps = useSlotProps({
      elementType: NextButton,
      externalSlotProps: slotProps.nextButton,
      additionalProps: {
        onClick: handleNextButtonClick,
        disabled: count !== -1 ? page >= Math.ceil(count / rowsPerPage) - 1 : false,
        "aria-label": getItemAriaLabel("next", page),
        title: getItemAriaLabel("next", page)
      },
      ownerState
    });
    const BackButton = (_slots$backButton = slots.backButton) != null ? _slots$backButton : "button";
    const backButtonProps = useSlotProps({
      elementType: BackButton,
      externalSlotProps: slotProps.backButton,
      additionalProps: {
        onClick: handleBackButtonClick,
        disabled: page === 0,
        "aria-label": getItemAriaLabel("previous", page),
        title: getItemAriaLabel("previous", page)
      },
      ownerState
    });
    const LastPageIcon = (_slots$lastPageIcon = slots.lastPageIcon) != null ? _slots$lastPageIcon : LastPageIconDefault;
    const FirstPageIcon = (_slots$firstPageIcon = slots.firstPageIcon) != null ? _slots$firstPageIcon : FirstPageIconDefault;
    const NextPageIcon = (_slots$nextPageIcon = slots.nextPageIcon) != null ? _slots$nextPageIcon : NextPageIconDefault;
    const BackPageIcon = (_slots$backPageIcon = slots.backPageIcon) != null ? _slots$backPageIcon : BackPageIconDefault;
    return /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)(Root, _extends({}, rootProps, {
      children: [showFirstButton && /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(FirstButton, _extends({}, firstButtonProps, {
        children: direction === "rtl" ? /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(LastPageIcon, {}) : /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(FirstPageIcon, {})
      })), /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(BackButton, _extends({}, backButtonProps, {
        children: direction === "rtl" ? /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(NextPageIcon, {}) : /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(BackPageIcon, {})
      })), /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(NextButton, _extends({}, nextButtonProps, {
        children: direction === "rtl" ? /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(BackPageIcon, {}) : /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(NextPageIcon, {})
      })), showLastButton && /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(LastButton, _extends({}, lastButtonProps, {
        children: direction === "rtl" ? /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(FirstPageIcon, {}) : /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(LastPageIcon, {})
      }))]
    }));
  });

  // node_modules/@mui/base/TablePagination/tablePaginationClasses.js
  function getTablePaginationUtilityClass(slot) {
    return (0, import_utils43.unstable_generateUtilityClass)("MuiTablePagination", slot);
  }
  var tablePaginationClasses = (0, import_utils42.unstable_generateUtilityClasses)("MuiTablePagination", ["root", "toolbar", "spacer", "selectLabel", "selectRoot", "select", "selectIcon", "input", "menuItem", "displayedRows", "actions"]);

  // node_modules/@mui/base/TablePagination/TablePagination.js
  var import_jsx_runtime63 = __toESM(require_jsx_runtime());
  var import_react9 = __toESM(require_react());
  var import_jsx_runtime64 = __toESM(require_jsx_runtime());
  var _excluded46 = ["colSpan", "count", "getItemAriaLabel", "labelDisplayedRows", "labelId", "labelRowsPerPage", "onPageChange", "onRowsPerPageChange", "page", "rowsPerPage", "rowsPerPageOptions", "selectId", "slotProps", "slots"];
  function defaultLabelDisplayedRows({
    from: from2,
    to,
    count
  }) {
    return `${from2}\u2013${to} of ${count !== -1 ? count : `more than ${to}`}`;
  }
  function defaultGetAriaLabel2(type) {
    return `Go to ${type} page`;
  }
  var useUtilityClasses30 = () => {
    const slots = {
      root: ["root"],
      toolbar: ["toolbar"],
      spacer: ["spacer"],
      selectLabel: ["selectLabel"],
      select: ["select"],
      input: ["input"],
      selectIcon: ["selectIcon"],
      menuItem: ["menuItem"],
      displayedRows: ["displayedRows"],
      actions: ["actions"]
    };
    return (0, import_composeClasses30.unstable_composeClasses)(slots, useClassNamesOverride(getTablePaginationUtilityClass));
  };
  var TablePagination = /* @__PURE__ */ React89.forwardRef(function TablePagination2(props, forwardedRef) {
    var _slots$root, _slots$select, _slots$actions, _slots$menuItem, _slots$selectLabel, _slots$displayedRows, _slots$toolbar, _slots$spacer;
    const {
      colSpan: colSpanProp,
      count,
      getItemAriaLabel = defaultGetAriaLabel2,
      labelDisplayedRows = defaultLabelDisplayedRows,
      labelId: labelIdProp,
      labelRowsPerPage = "Rows per page:",
      onPageChange,
      onRowsPerPageChange,
      page,
      rowsPerPage,
      rowsPerPageOptions = [10, 25, 50, 100],
      selectId: selectIdProp,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded46);
    const ownerState = props;
    const classes = useUtilityClasses30();
    let colSpan;
    const Root = (_slots$root = slots.root) != null ? _slots$root : "td";
    if (Root === "td" || !isHostComponent(Root)) {
      colSpan = colSpanProp || 1e3;
    }
    const getLabelDisplayedRowsTo = () => {
      if (count === -1) {
        return (page + 1) * rowsPerPage;
      }
      return rowsPerPage === -1 ? count : Math.min(count, (page + 1) * rowsPerPage);
    };
    const selectId = (0, import_utils94.unstable_useId)(selectIdProp);
    const labelId = (0, import_utils94.unstable_useId)(labelIdProp);
    const rootProps = useSlotProps({
      elementType: Root,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        colSpan,
        ref: forwardedRef
      },
      ownerState,
      className: classes.root
    });
    const Select5 = (_slots$select = slots.select) != null ? _slots$select : "select";
    const selectProps = useSlotProps({
      elementType: Select5,
      externalSlotProps: slotProps.select,
      additionalProps: {
        value: rowsPerPage,
        id: selectId,
        onChange: (event) => onRowsPerPageChange && onRowsPerPageChange(event),
        "aria-label": rowsPerPage.toString(),
        "aria-labelledby": [labelId, selectId].filter(Boolean).join(" ") || void 0
      },
      ownerState,
      className: classes.select
    });
    const Actions = (_slots$actions = slots.actions) != null ? _slots$actions : TablePaginationActions;
    const actionsProps = useSlotProps({
      elementType: Actions,
      externalSlotProps: slotProps.actions,
      additionalProps: {
        page,
        rowsPerPage,
        count,
        onPageChange,
        getItemAriaLabel
      },
      ownerState,
      className: classes.actions
    });
    const MenuItem5 = (_slots$menuItem = slots.menuItem) != null ? _slots$menuItem : "option";
    const menuItemProps = useSlotProps({
      elementType: MenuItem5,
      externalSlotProps: slotProps.menuItem,
      additionalProps: {
        value: void 0
      },
      ownerState,
      className: classes.menuItem
    });
    const SelectLabel = (_slots$selectLabel = slots.selectLabel) != null ? _slots$selectLabel : "p";
    const selectLabelProps = useSlotProps({
      elementType: SelectLabel,
      externalSlotProps: slotProps.selectLabel,
      additionalProps: {
        id: labelId
      },
      ownerState,
      className: classes.selectLabel
    });
    const DisplayedRows = (_slots$displayedRows = slots.displayedRows) != null ? _slots$displayedRows : "p";
    const displayedRowsProps = useSlotProps({
      elementType: DisplayedRows,
      externalSlotProps: slotProps.displayedRows,
      ownerState,
      className: classes.displayedRows
    });
    const Toolbar3 = (_slots$toolbar = slots.toolbar) != null ? _slots$toolbar : "div";
    const toolbarProps = useSlotProps({
      elementType: Toolbar3,
      externalSlotProps: slotProps.toolbar,
      ownerState,
      className: classes.toolbar
    });
    const Spacer = (_slots$spacer = slots.spacer) != null ? _slots$spacer : "div";
    const spacerProps = useSlotProps({
      elementType: Spacer,
      externalSlotProps: slotProps.spacer,
      ownerState,
      className: classes.spacer
    });
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Root, _extends({}, rootProps, {
      children: /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)(Toolbar3, _extends({}, toolbarProps, {
        children: [/* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Spacer, _extends({}, spacerProps)), rowsPerPageOptions.length > 1 && /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(SelectLabel, _extends({}, selectLabelProps, {
          children: labelRowsPerPage
        })), rowsPerPageOptions.length > 1 && /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Select5, _extends({}, selectProps, {
          children: rowsPerPageOptions.map((rowsPerPageOption) => /* @__PURE__ */ (0, import_react9.createElement)(MenuItem5, _extends({}, menuItemProps, {
            key: typeof rowsPerPageOption !== "number" && rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption,
            value: typeof rowsPerPageOption !== "number" && rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption
          }), typeof rowsPerPageOption !== "number" && rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption))
        })), /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(DisplayedRows, _extends({}, displayedRowsProps, {
          children: labelDisplayedRows({
            from: count === 0 ? 0 : page * rowsPerPage + 1,
            to: getLabelDisplayedRowsTo(),
            count: count === -1 ? -1 : count,
            page
          })
        })), /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(Actions, _extends({}, actionsProps))]
      }))
    }));
  });
  true ? TablePagination.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    colSpan: import_prop_types42.default.number,
    /**
     * The total number of rows.
     *
     * To enable server side pagination for an unknown number of items, provide -1.
     */
    count: import_prop_types42.default.number.isRequired,
    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the current page.
     * This is important for screen reader users.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @param {string} type The link or button type to format ('first' | 'last' | 'next' | 'previous').
     * @returns {string}
     * @default function defaultGetAriaLabel(type: ItemAriaLabelType) {
     *   return `Go to ${type} page`;
     * }
     */
    getItemAriaLabel: import_prop_types42.default.func,
    /**
     * Customize the displayed rows label. Invoked with a `{ from, to, count, page }`
     * object.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default function defaultLabelDisplayedRows({ from, to, count }: LabelDisplayedRowsArgs) {
     *   return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;
     * }
     */
    labelDisplayedRows: import_prop_types42.default.func,
    /**
     * Id of the label element within the pagination.
     */
    labelId: import_prop_types42.default.string,
    /**
     * Customize the rows per page label.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'Rows per page:'
     */
    labelRowsPerPage: import_prop_types42.default.node,
    /**
     * Callback fired when the page is changed.
     *
     * @param {React.MouseEvent<HTMLButtonElement> | null} event The event source of the callback.
     * @param {number} page The page selected.
     */
    onPageChange: import_prop_types42.default.func.isRequired,
    /**
     * Callback fired when the number of rows per page is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     */
    onRowsPerPageChange: import_prop_types42.default.func,
    /**
     * The zero-based index of the current page.
     */
    page: (0, import_utils94.chainPropTypes)(import_utils94.integerPropType.isRequired, (props) => {
      const {
        count,
        page,
        rowsPerPage
      } = props;
      if (count === -1) {
        return null;
      }
      const newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);
      if (page < 0 || page > newLastPage) {
        return new Error(`MUI: The page prop of a TablePagination is out of range (0 to ${newLastPage}, but page is ${page}).`);
      }
      return null;
    }),
    /**
     * The number of rows per page.
     *
     * Set -1 to display all the rows.
     */
    rowsPerPage: import_utils94.integerPropType.isRequired,
    /**
     * Customizes the options of the rows per page select field. If less than two options are
     * available, no select field will be displayed.
     * Use -1 for the value with a custom label to show all the rows.
     * @default [10, 25, 50, 100]
     */
    rowsPerPageOptions: import_prop_types42.default.arrayOf(import_prop_types42.default.oneOfType([import_prop_types42.default.number, import_prop_types42.default.shape({
      label: import_prop_types42.default.string.isRequired,
      value: import_prop_types42.default.number.isRequired
    })]).isRequired),
    /**
     * Id of the select element within the pagination.
     */
    selectId: import_prop_types42.default.string,
    /**
     * The props used for each slot inside the TablePagination.
     * @default {}
     */
    slotProps: import_prop_types42.default.shape({
      actions: import_prop_types42.default.oneOfType([import_prop_types42.default.func, import_prop_types42.default.object]),
      displayedRows: import_prop_types42.default.oneOfType([import_prop_types42.default.func, import_prop_types42.default.object]),
      menuItem: import_prop_types42.default.oneOfType([import_prop_types42.default.func, import_prop_types42.default.object]),
      root: import_prop_types42.default.oneOfType([import_prop_types42.default.func, import_prop_types42.default.object]),
      select: import_prop_types42.default.oneOfType([import_prop_types42.default.func, import_prop_types42.default.object]),
      selectLabel: import_prop_types42.default.oneOfType([import_prop_types42.default.func, import_prop_types42.default.object]),
      spacer: import_prop_types42.default.oneOfType([import_prop_types42.default.func, import_prop_types42.default.object]),
      toolbar: import_prop_types42.default.oneOfType([import_prop_types42.default.func, import_prop_types42.default.object])
    }),
    /**
     * The components used for each slot inside the TablePagination.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types42.default.shape({
      actions: import_prop_types42.default.elementType,
      displayedRows: import_prop_types42.default.elementType,
      menuItem: import_prop_types42.default.elementType,
      root: import_prop_types42.default.elementType,
      select: import_prop_types42.default.elementType,
      selectLabel: import_prop_types42.default.elementType,
      spacer: import_prop_types42.default.elementType,
      toolbar: import_prop_types42.default.elementType
    })
  } : void 0;

  // node_modules/@mui/base/TabPanel/TabPanel.js
  init_extends();
  var React95 = __toESM(require_react());
  var import_prop_types44 = __toESM(require_prop_types());
  var import_composeClasses32 = __toESM(require_composeClasses3());

  // node_modules/@mui/base/TabPanel/tabPanelClasses.js
  function getTabPanelUtilityClass(slot) {
    return (0, import_utils43.unstable_generateUtilityClass)("MuiTabPanel", slot);
  }
  var tabPanelClasses = (0, import_utils42.unstable_generateUtilityClasses)("MuiTabPanel", ["root", "hidden"]);

  // node_modules/@mui/base/useTabPanel/useTabPanel.js
  var React94 = __toESM(require_react());
  var import_utils98 = __toESM(require_utils());

  // node_modules/@mui/base/Tabs/Tabs.js
  init_extends();
  var React93 = __toESM(require_react());
  var import_prop_types43 = __toESM(require_prop_types());
  var import_composeClasses31 = __toESM(require_composeClasses3());

  // node_modules/@mui/base/Tabs/tabsClasses.js
  function getTabsUtilityClass(slot) {
    return (0, import_utils43.unstable_generateUtilityClass)("MuiTabs", slot);
  }
  var tabsClasses = (0, import_utils42.unstable_generateUtilityClasses)("MuiTabs", ["root", "horizontal", "vertical"]);

  // node_modules/@mui/base/useTabs/useTabs.js
  init_extends();
  var React90 = __toESM(require_react());
  var import_utils96 = __toESM(require_utils());
  function useTabs(parameters) {
    const {
      value: valueProp,
      defaultValue,
      onChange,
      orientation,
      direction,
      selectionFollowsFocus
    } = parameters;
    const [value, setValue] = (0, import_utils96.unstable_useControlled)({
      controlled: valueProp,
      default: defaultValue,
      name: "Tabs",
      state: "value"
    });
    const onSelected = React90.useCallback((event, newValue) => {
      setValue(newValue);
      onChange == null || onChange(event, newValue);
    }, [onChange, setValue]);
    const {
      subitems: tabPanels,
      contextValue: compoundComponentContextValue
    } = useCompoundParent();
    const tabIdLookup = React90.useRef(() => void 0);
    const getTabPanelId = React90.useCallback((tabValue) => {
      var _tabPanels$get;
      return (_tabPanels$get = tabPanels.get(tabValue)) == null ? void 0 : _tabPanels$get.id;
    }, [tabPanels]);
    const getTabId = React90.useCallback((tabPanelId) => {
      return tabIdLookup.current(tabPanelId);
    }, []);
    const registerTabIdLookup = React90.useCallback((lookupFunction) => {
      tabIdLookup.current = lookupFunction;
    }, []);
    return {
      contextValue: _extends({
        direction,
        getTabId,
        getTabPanelId,
        onSelected,
        orientation,
        registerTabIdLookup,
        selectionFollowsFocus,
        value
      }, compoundComponentContextValue)
    };
  }

  // node_modules/@mui/base/useTabs/TabsProvider.js
  var React92 = __toESM(require_react());

  // node_modules/@mui/base/Tabs/TabsContext.js
  var React91 = __toESM(require_react());
  var TabsContext = /* @__PURE__ */ React91.createContext(null);
  if (true) {
    TabsContext.displayName = "TabsContext";
  }
  function useTabsContext() {
    const context = React91.useContext(TabsContext);
    if (context == null) {
      throw new Error("No TabsContext provided");
    }
    return context;
  }

  // node_modules/@mui/base/useTabs/TabsProvider.js
  var import_jsx_runtime65 = __toESM(require_jsx_runtime());
  function TabsProvider(props) {
    const {
      value: valueProp,
      children
    } = props;
    const {
      direction,
      getItemIndex,
      onSelected,
      orientation,
      registerItem,
      registerTabIdLookup,
      selectionFollowsFocus,
      totalSubitemCount,
      value,
      getTabId,
      getTabPanelId
    } = valueProp;
    const compoundComponentContextValue = React92.useMemo(() => ({
      getItemIndex,
      registerItem,
      totalSubitemCount
    }), [registerItem, getItemIndex, totalSubitemCount]);
    const tabsContextValue = React92.useMemo(() => ({
      direction,
      getTabId,
      getTabPanelId,
      onSelected,
      orientation,
      registerTabIdLookup,
      selectionFollowsFocus,
      value
    }), [direction, getTabId, getTabPanelId, onSelected, orientation, registerTabIdLookup, selectionFollowsFocus, value]);
    return /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(CompoundComponentContext.Provider, {
      value: compoundComponentContextValue,
      children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(TabsContext.Provider, {
        value: tabsContextValue,
        children
      })
    });
  }

  // node_modules/@mui/base/Tabs/Tabs.js
  var import_jsx_runtime66 = __toESM(require_jsx_runtime());
  var _excluded47 = ["children", "value", "defaultValue", "orientation", "direction", "onChange", "selectionFollowsFocus", "slotProps", "slots"];
  var useUtilityClasses31 = (ownerState) => {
    const {
      orientation
    } = ownerState;
    const slots = {
      root: ["root", orientation]
    };
    return (0, import_composeClasses31.unstable_composeClasses)(slots, useClassNamesOverride(getTabsUtilityClass));
  };
  var Tabs = /* @__PURE__ */ React93.forwardRef(function Tabs2(props, forwardedRef) {
    var _slots$root;
    const {
      children,
      orientation = "horizontal",
      direction = "ltr",
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded47);
    const {
      contextValue
    } = useTabs(props);
    const ownerState = _extends({}, props, {
      orientation,
      direction
    });
    const classes = useUtilityClasses31(ownerState);
    const TabsRoot2 = (_slots$root = slots.root) != null ? _slots$root : "div";
    const tabsRootProps = useSlotProps({
      elementType: TabsRoot2,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        ref: forwardedRef
      },
      ownerState,
      className: classes.root
    });
    return /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(TabsRoot2, _extends({}, tabsRootProps, {
      children: /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(TabsProvider, {
        value: contextValue,
        children
      })
    }));
  });
  true ? Tabs.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types43.default.node,
    /**
     * @ignore
     */
    className: import_prop_types43.default.string,
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types43.default.oneOfType([import_prop_types43.default.number, import_prop_types43.default.string]),
    /**
     * The direction of the text.
     * @default 'ltr'
     */
    direction: import_prop_types43.default.oneOf(["ltr", "rtl"]),
    /**
     * Callback invoked when new value is being set.
     */
    onChange: import_prop_types43.default.func,
    /**
     * The component orientation (layout flow direction).
     * @default 'horizontal'
     */
    orientation: import_prop_types43.default.oneOf(["horizontal", "vertical"]),
    /**
     * If `true` the selected tab changes on focus. Otherwise it only
     * changes on activation.
     */
    selectionFollowsFocus: import_prop_types43.default.bool,
    /**
     * The props used for each slot inside the Tabs.
     * @default {}
     */
    slotProps: import_prop_types43.default.shape({
      root: import_prop_types43.default.oneOfType([import_prop_types43.default.func, import_prop_types43.default.object])
    }),
    /**
     * The components used for each slot inside the Tabs.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types43.default.shape({
      root: import_prop_types43.default.elementType
    }),
    /**
     * The value of the currently selected `Tab`.
     * If you don't want any selected `Tab`, you can set this prop to `null`.
     */
    value: import_prop_types43.default.oneOfType([import_prop_types43.default.number, import_prop_types43.default.string])
  } : void 0;

  // node_modules/@mui/base/useTabPanel/useTabPanel.js
  function tabPanelValueGenerator(otherTabPanelValues) {
    return otherTabPanelValues.size;
  }
  function useTabPanel(parameters) {
    const {
      value: valueParam,
      id: idParam,
      rootRef: externalRef
    } = parameters;
    const context = useTabsContext();
    if (context === null) {
      throw new Error("No TabContext provided");
    }
    const {
      value: selectedTabValue,
      getTabId
    } = context;
    const id = (0, import_utils98.unstable_useId)(idParam);
    const ref = React94.useRef(null);
    const handleRef = (0, import_utils98.unstable_useForkRef)(ref, externalRef);
    const metadata = React94.useMemo(() => ({
      id,
      ref
    }), [id]);
    const {
      id: value
    } = useCompoundItem(valueParam != null ? valueParam : tabPanelValueGenerator, metadata);
    const hidden = value !== selectedTabValue;
    const correspondingTabId = value !== void 0 ? getTabId(value) : void 0;
    const getRootProps = () => {
      return {
        "aria-labelledby": correspondingTabId != null ? correspondingTabId : void 0,
        hidden,
        id: id != null ? id : void 0,
        ref: handleRef
      };
    };
    return {
      hidden,
      getRootProps,
      rootRef: handleRef
    };
  }

  // node_modules/@mui/base/TabPanel/TabPanel.js
  var import_jsx_runtime67 = __toESM(require_jsx_runtime());
  var _excluded48 = ["children", "value", "slotProps", "slots"];
  var useUtilityClasses32 = (ownerState) => {
    const {
      hidden
    } = ownerState;
    const slots = {
      root: ["root", hidden && "hidden"]
    };
    return (0, import_composeClasses32.unstable_composeClasses)(slots, useClassNamesOverride(getTabPanelUtilityClass));
  };
  var TabPanel = /* @__PURE__ */ React95.forwardRef(function TabPanel2(props, forwardedRef) {
    var _slots$root;
    const {
      children,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded48);
    const {
      hidden,
      getRootProps
    } = useTabPanel(props);
    const ownerState = _extends({}, props, {
      hidden
    });
    const classes = useUtilityClasses32(ownerState);
    const TabPanelRoot = (_slots$root = slots.root) != null ? _slots$root : "div";
    const tabPanelRootProps = useSlotProps({
      elementType: TabPanelRoot,
      getSlotProps: getRootProps,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        role: "tabpanel",
        ref: forwardedRef
      },
      ownerState,
      className: classes.root
    });
    return /* @__PURE__ */ (0, import_jsx_runtime67.jsx)(TabPanelRoot, _extends({}, tabPanelRootProps, {
      children: !hidden && children
    }));
  });
  true ? TabPanel.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types44.default.node,
    /**
     * @ignore
     */
    className: import_prop_types44.default.string,
    /**
     * The props used for each slot inside the TabPanel.
     * @default {}
     */
    slotProps: import_prop_types44.default.shape({
      root: import_prop_types44.default.oneOfType([import_prop_types44.default.func, import_prop_types44.default.object])
    }),
    /**
     * The components used for each slot inside the TabPanel.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types44.default.shape({
      root: import_prop_types44.default.elementType
    }),
    /**
     * The value of the TabPanel. It will be shown when the Tab with the corresponding value is selected.
     * If not provided, it will fall back to the index of the panel.
     * It is recommended to explicitly provide it, as it's required for the tab panel to be rendered on the server.
     */
    value: import_prop_types44.default.oneOfType([import_prop_types44.default.number, import_prop_types44.default.string])
  } : void 0;

  // node_modules/@mui/base/TabsList/TabsList.js
  init_extends();
  var React98 = __toESM(require_react());
  var import_prop_types45 = __toESM(require_prop_types());
  var import_composeClasses33 = __toESM(require_composeClasses3());

  // node_modules/@mui/base/TabsList/tabsListClasses.js
  function getTabsListUtilityClass(slot) {
    return (0, import_utils43.unstable_generateUtilityClass)("MuiTabsList", slot);
  }
  var tabsListClasses = (0, import_utils42.unstable_generateUtilityClasses)("MuiTabsList", ["root", "horizontal", "vertical"]);

  // node_modules/@mui/base/useTabsList/useTabsList.js
  init_extends();
  var React96 = __toESM(require_react());

  // node_modules/@mui/base/useTabsList/useTabsList.types.js
  var TabsListActionTypes = {
    valueChange: "valueChange"
  };

  // node_modules/@mui/base/useTabsList/tabsListReducer.js
  init_extends();
  function tabsListReducer(state, action) {
    if (action.type === TabsListActionTypes.valueChange) {
      return _extends({}, state, {
        highlightedValue: action.value
      });
    }
    const newState = listReducer(state, action);
    const {
      context: {
        selectionFollowsFocus
      }
    } = action;
    if (action.type === ListActionTypes.itemsChange) {
      if (newState.selectedValues.length > 0) {
        return _extends({}, newState, {
          highlightedValue: newState.selectedValues[0]
        });
      }
      moveHighlight(null, "reset", action.context);
    }
    if (selectionFollowsFocus && newState.highlightedValue != null) {
      return _extends({}, newState, {
        selectedValues: [newState.highlightedValue]
      });
    }
    return newState;
  }

  // node_modules/@mui/base/useTabsList/useTabsList.js
  function useTabsList(parameters) {
    var _selectedValues$;
    const {
      rootRef: externalRef
    } = parameters;
    const {
      direction = "ltr",
      onSelected,
      orientation = "horizontal",
      value,
      registerTabIdLookup,
      selectionFollowsFocus
    } = useTabsContext();
    const {
      subitems,
      contextValue: compoundComponentContextValue
    } = useCompoundParent();
    const tabIdLookup = React96.useCallback((tabValue) => {
      var _subitems$get;
      return (_subitems$get = subitems.get(tabValue)) == null ? void 0 : _subitems$get.id;
    }, [subitems]);
    registerTabIdLookup(tabIdLookup);
    const subitemKeys = React96.useMemo(() => Array.from(subitems.keys()), [subitems]);
    const getTabElement = React96.useCallback((tabValue) => {
      var _subitems$get$ref$cur, _subitems$get2;
      if (tabValue == null) {
        return null;
      }
      return (_subitems$get$ref$cur = (_subitems$get2 = subitems.get(tabValue)) == null ? void 0 : _subitems$get2.ref.current) != null ? _subitems$get$ref$cur : null;
    }, [subitems]);
    const isRtl = direction === "rtl";
    let listOrientation;
    if (orientation === "vertical") {
      listOrientation = "vertical";
    } else {
      listOrientation = isRtl ? "horizontal-rtl" : "horizontal-ltr";
    }
    const handleChange = React96.useCallback((event, newValue) => {
      var _newValue$;
      onSelected(event, (_newValue$ = newValue[0]) != null ? _newValue$ : null);
    }, [onSelected]);
    const controlledProps = React96.useMemo(() => {
      if (value === void 0) {
        return {};
      }
      return value != null ? {
        selectedValues: [value]
      } : {
        selectedValues: []
      };
    }, [value]);
    const isItemDisabled = React96.useCallback((item) => {
      var _subitems$get$disable, _subitems$get3;
      return (_subitems$get$disable = (_subitems$get3 = subitems.get(item)) == null ? void 0 : _subitems$get3.disabled) != null ? _subitems$get$disable : false;
    }, [subitems]);
    const {
      contextValue: listContextValue,
      dispatch,
      getRootProps: getListboxRootProps,
      state: {
        highlightedValue,
        selectedValues
      },
      rootRef: mergedRootRef
    } = useList({
      controlledProps,
      disabledItemsFocusable: !selectionFollowsFocus,
      focusManagement: "DOM",
      getItemDomElement: getTabElement,
      isItemDisabled,
      items: subitemKeys,
      rootRef: externalRef,
      onChange: handleChange,
      orientation: listOrientation,
      reducerActionContext: React96.useMemo(() => ({
        selectionFollowsFocus: selectionFollowsFocus || false
      }), [selectionFollowsFocus]),
      selectionMode: "single",
      stateReducer: tabsListReducer
    });
    React96.useEffect(() => {
      if (value === void 0) {
        return;
      }
      if (value != null) {
        dispatch({
          type: TabsListActionTypes.valueChange,
          value
        });
      }
    }, [dispatch, value]);
    const getRootProps = (otherHandlers = {}) => {
      return _extends({}, otherHandlers, getListboxRootProps(otherHandlers), {
        "aria-orientation": orientation === "vertical" ? "vertical" : void 0,
        role: "tablist"
      });
    };
    const contextValue = React96.useMemo(() => _extends({}, compoundComponentContextValue, listContextValue), [compoundComponentContextValue, listContextValue]);
    return {
      contextValue,
      dispatch,
      getRootProps,
      highlightedValue,
      isRtl,
      orientation,
      rootRef: mergedRootRef,
      selectedValue: (_selectedValues$ = selectedValues[0]) != null ? _selectedValues$ : null
    };
  }

  // node_modules/@mui/base/useTabsList/TabsListProvider.js
  var React97 = __toESM(require_react());
  var import_jsx_runtime68 = __toESM(require_jsx_runtime());
  function TabsListProvider(props) {
    const {
      value,
      children
    } = props;
    const {
      dispatch,
      getItemIndex,
      getItemState,
      registerHighlightChangeHandler,
      registerSelectionChangeHandler,
      registerItem,
      totalSubitemCount
    } = value;
    const listContextValue = React97.useMemo(() => ({
      dispatch,
      getItemState,
      getItemIndex,
      registerHighlightChangeHandler,
      registerSelectionChangeHandler
    }), [dispatch, getItemIndex, getItemState, registerHighlightChangeHandler, registerSelectionChangeHandler]);
    const compoundComponentContextValue = React97.useMemo(() => ({
      getItemIndex,
      registerItem,
      totalSubitemCount
    }), [registerItem, getItemIndex, totalSubitemCount]);
    return /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(CompoundComponentContext.Provider, {
      value: compoundComponentContextValue,
      children: /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(ListContext.Provider, {
        value: listContextValue,
        children
      })
    });
  }

  // node_modules/@mui/base/TabsList/TabsList.js
  var import_jsx_runtime69 = __toESM(require_jsx_runtime());
  var _excluded49 = ["children", "slotProps", "slots"];
  var useUtilityClasses33 = (ownerState) => {
    const {
      orientation
    } = ownerState;
    const slots = {
      root: ["root", orientation]
    };
    return (0, import_composeClasses33.unstable_composeClasses)(slots, useClassNamesOverride(getTabsListUtilityClass));
  };
  var TabsList = /* @__PURE__ */ React98.forwardRef(function TabsList2(props, forwardedRef) {
    var _slots$root;
    const {
      children,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded49);
    const {
      isRtl,
      orientation,
      getRootProps,
      contextValue
    } = useTabsList({
      rootRef: forwardedRef
    });
    const ownerState = _extends({}, props, {
      isRtl,
      orientation
    });
    const classes = useUtilityClasses33(ownerState);
    const TabsListRoot = (_slots$root = slots.root) != null ? _slots$root : "div";
    const tabsListRootProps = useSlotProps({
      elementType: TabsListRoot,
      getSlotProps: getRootProps,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      ownerState,
      className: classes.root
    });
    return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(TabsListProvider, {
      value: contextValue,
      children: /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(TabsListRoot, _extends({}, tabsListRootProps, {
        children
      }))
    });
  });
  true ? TabsList.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types45.default.node,
    /**
     * @ignore
     */
    className: import_prop_types45.default.string,
    /**
     * The props used for each slot inside the TabsList.
     * @default {}
     */
    slotProps: import_prop_types45.default.shape({
      root: import_prop_types45.default.oneOfType([import_prop_types45.default.func, import_prop_types45.default.object])
    }),
    /**
     * The components used for each slot inside the TabsList.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types45.default.shape({
      root: import_prop_types45.default.elementType
    })
  } : void 0;

  // node_modules/@mui/base/Tab/Tab.js
  init_extends();
  var React100 = __toESM(require_react());
  var import_prop_types46 = __toESM(require_prop_types());
  var import_utils102 = __toESM(require_utils());
  var import_composeClasses34 = __toESM(require_composeClasses3());

  // node_modules/@mui/base/Tab/tabClasses.js
  function getTabUtilityClass(slot) {
    return (0, import_utils43.unstable_generateUtilityClass)("MuiTab", slot);
  }
  var tabClasses = (0, import_utils42.unstable_generateUtilityClasses)("MuiTab", ["root", "selected", "disabled"]);

  // node_modules/@mui/base/useTab/useTab.js
  init_extends();
  var React99 = __toESM(require_react());
  var import_utils101 = __toESM(require_utils());
  function tabValueGenerator(otherTabValues) {
    return otherTabValues.size;
  }
  function useTab(parameters) {
    const {
      value: valueParam,
      rootRef: externalRef,
      disabled = false,
      id: idParam
    } = parameters;
    const tabRef = React99.useRef(null);
    const id = (0, import_utils101.unstable_useId)(idParam);
    const {
      value: selectedValue,
      selectionFollowsFocus,
      getTabPanelId
    } = useTabsContext();
    const tabMetadata = React99.useMemo(() => ({
      disabled,
      ref: tabRef,
      id
    }), [disabled, tabRef, id]);
    const {
      id: value,
      index: index3,
      totalItemCount: totalTabsCount
    } = useCompoundItem(valueParam != null ? valueParam : tabValueGenerator, tabMetadata);
    const {
      getRootProps: getTabProps,
      rootRef: listItemRefHandler,
      highlighted,
      selected
    } = useListItem({
      item: value
    });
    const {
      getRootProps: getButtonProps,
      rootRef: buttonRefHandler,
      active,
      focusVisible,
      setFocusVisible
    } = useButton({
      disabled,
      focusableWhenDisabled: !selectionFollowsFocus,
      type: "button"
    });
    const handleRef = (0, import_utils101.unstable_useForkRef)(tabRef, externalRef, listItemRefHandler, buttonRefHandler);
    const tabPanelId = value !== void 0 ? getTabPanelId(value) : void 0;
    const getRootProps = (otherHandlers = {}) => {
      const resolvedTabProps = _extends({}, otherHandlers, getTabProps(otherHandlers));
      const resolvedButtonProps = _extends({}, resolvedTabProps, getButtonProps(resolvedTabProps));
      return _extends({}, resolvedButtonProps, {
        role: "tab",
        "aria-controls": tabPanelId,
        "aria-selected": selected,
        id,
        ref: handleRef
      });
    };
    return {
      getRootProps,
      active,
      focusVisible,
      highlighted,
      index: index3,
      rootRef: handleRef,
      // the `selected` state isn't set on the server (it relies on effects to be calculated),
      // so we fall back to checking the `value` prop with the selectedValue from the TabsContext
      selected: selected || value === selectedValue,
      setFocusVisible,
      totalTabsCount
    };
  }

  // node_modules/@mui/base/Tab/Tab.js
  var import_jsx_runtime70 = __toESM(require_jsx_runtime());
  var _excluded50 = ["action", "children", "value", "disabled", "onChange", "onClick", "onFocus", "slotProps", "slots"];
  var useUtilityClasses34 = (ownerState) => {
    const {
      selected,
      disabled
    } = ownerState;
    const slots = {
      root: ["root", selected && "selected", disabled && "disabled"]
    };
    return (0, import_composeClasses34.unstable_composeClasses)(slots, useClassNamesOverride(getTabUtilityClass));
  };
  var Tab = /* @__PURE__ */ React100.forwardRef(function Tab2(props, forwardedRef) {
    var _slots$root;
    const {
      children,
      disabled = false,
      slotProps = {},
      slots = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded50);
    const tabRef = React100.useRef();
    const handleRef = (0, import_utils102.unstable_useForkRef)(tabRef, forwardedRef);
    const {
      active,
      highlighted,
      selected,
      getRootProps
    } = useTab(_extends({}, props, {
      rootRef: handleRef
    }));
    const ownerState = _extends({}, props, {
      active,
      disabled,
      highlighted,
      selected
    });
    const classes = useUtilityClasses34(ownerState);
    const TabRoot2 = (_slots$root = slots.root) != null ? _slots$root : "button";
    const tabRootProps = useSlotProps({
      elementType: TabRoot2,
      getSlotProps: getRootProps,
      externalSlotProps: slotProps.root,
      externalForwardedProps: other,
      additionalProps: {
        ref: forwardedRef
      },
      ownerState,
      className: classes.root
    });
    return /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(TabRoot2, _extends({}, tabRootProps, {
      children
    }));
  });
  true ? Tab.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * A ref for imperative actions. It currently only supports `focusVisible()` action.
     */
    action: import_prop_types46.default.oneOfType([import_prop_types46.default.func, import_prop_types46.default.shape({
      current: import_prop_types46.default.shape({
        focusVisible: import_prop_types46.default.func.isRequired
      })
    })]),
    /**
     * @ignore
     */
    children: import_prop_types46.default.node,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types46.default.bool,
    /**
     * Callback invoked when new value is being set.
     */
    onChange: import_prop_types46.default.func,
    /**
     * The props used for each slot inside the Tab.
     * @default {}
     */
    slotProps: import_prop_types46.default.shape({
      root: import_prop_types46.default.oneOfType([import_prop_types46.default.func, import_prop_types46.default.object])
    }),
    /**
     * The components used for each slot inside the Tab.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types46.default.shape({
      root: import_prop_types46.default.elementType
    }),
    /**
     * You can provide your own value. Otherwise, it falls back to the child position index.
     */
    value: import_prop_types46.default.oneOfType([import_prop_types46.default.number, import_prop_types46.default.string])
  } : void 0;

  // node_modules/@mui/base/TextareaAutosize/TextareaAutosize.js
  init_extends();
  var React101 = __toESM(require_react());
  var import_prop_types47 = __toESM(require_prop_types());
  var ReactDOM4 = __toESM(require_react_dom());
  var import_utils104 = __toESM(require_utils());
  var import_jsx_runtime71 = __toESM(require_jsx_runtime());
  var import_jsx_runtime72 = __toESM(require_jsx_runtime());
  var _excluded51 = ["onChange", "maxRows", "minRows", "style", "value"];
  function getStyleValue(value) {
    return parseInt(value, 10) || 0;
  }
  var styles = {
    shadow: {
      // Visibility needed to hide the extra text area on iPads
      visibility: "hidden",
      // Remove from the content flow
      position: "absolute",
      // Ignore the scrollbar width
      overflow: "hidden",
      height: 0,
      top: 0,
      left: 0,
      // Create a new layer, increase the isolation of the computed values
      transform: "translateZ(0)"
    }
  };
  function isEmpty2(obj) {
    return obj === void 0 || obj === null || Object.keys(obj).length === 0 || obj.outerHeightStyle === 0 && !obj.overflow;
  }
  var TextareaAutosize = /* @__PURE__ */ React101.forwardRef(function TextareaAutosize2(props, forwardedRef) {
    const {
      onChange,
      maxRows,
      minRows = 1,
      style,
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded51);
    const {
      current: isControlled
    } = React101.useRef(value != null);
    const inputRef = React101.useRef(null);
    const handleRef = (0, import_utils104.unstable_useForkRef)(forwardedRef, inputRef);
    const shadowRef = React101.useRef(null);
    const renders = React101.useRef(0);
    const [state, setState] = React101.useState({
      outerHeightStyle: 0
    });
    const getUpdatedState = React101.useCallback(() => {
      const input = inputRef.current;
      const containerWindow = (0, import_utils104.unstable_ownerWindow)(input);
      const computedStyle = containerWindow.getComputedStyle(input);
      if (computedStyle.width === "0px") {
        return {
          outerHeightStyle: 0
        };
      }
      const inputShallow = shadowRef.current;
      inputShallow.style.width = computedStyle.width;
      inputShallow.value = input.value || props.placeholder || "x";
      if (inputShallow.value.slice(-1) === "\n") {
        inputShallow.value += " ";
      }
      const boxSizing = computedStyle.boxSizing;
      const padding = getStyleValue(computedStyle.paddingBottom) + getStyleValue(computedStyle.paddingTop);
      const border = getStyleValue(computedStyle.borderBottomWidth) + getStyleValue(computedStyle.borderTopWidth);
      const innerHeight = inputShallow.scrollHeight;
      inputShallow.value = "x";
      const singleRowHeight = inputShallow.scrollHeight;
      let outerHeight = innerHeight;
      if (minRows) {
        outerHeight = Math.max(Number(minRows) * singleRowHeight, outerHeight);
      }
      if (maxRows) {
        outerHeight = Math.min(Number(maxRows) * singleRowHeight, outerHeight);
      }
      outerHeight = Math.max(outerHeight, singleRowHeight);
      const outerHeightStyle = outerHeight + (boxSizing === "border-box" ? padding + border : 0);
      const overflow = Math.abs(outerHeight - innerHeight) <= 1;
      return {
        outerHeightStyle,
        overflow
      };
    }, [maxRows, minRows, props.placeholder]);
    const updateState = (prevState, newState) => {
      const {
        outerHeightStyle,
        overflow
      } = newState;
      if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {
        renders.current += 1;
        return {
          overflow,
          outerHeightStyle
        };
      }
      if (true) {
        if (renders.current === 20) {
          console.error(["MUI: Too many re-renders. The layout is unstable.", "TextareaAutosize limits the number of renders to prevent an infinite loop."].join("\n"));
        }
      }
      return prevState;
    };
    const syncHeight = React101.useCallback(() => {
      const newState = getUpdatedState();
      if (isEmpty2(newState)) {
        return;
      }
      setState((prevState) => updateState(prevState, newState));
    }, [getUpdatedState]);
    (0, import_utils104.unstable_useEnhancedEffect)(() => {
      const syncHeightWithFlushSync = () => {
        const newState = getUpdatedState();
        if (isEmpty2(newState)) {
          return;
        }
        ReactDOM4.flushSync(() => {
          setState((prevState) => updateState(prevState, newState));
        });
      };
      const handleResize = () => {
        renders.current = 0;
        syncHeightWithFlushSync();
      };
      let rAF;
      const rAFHandleResize = () => {
        cancelAnimationFrame(rAF);
        rAF = requestAnimationFrame(() => {
          handleResize();
        });
      };
      const debounceHandleResize = (0, import_utils104.unstable_debounce)(handleResize);
      const input = inputRef.current;
      const containerWindow = (0, import_utils104.unstable_ownerWindow)(input);
      containerWindow.addEventListener("resize", debounceHandleResize);
      let resizeObserver;
      if (typeof ResizeObserver !== "undefined") {
        resizeObserver = new ResizeObserver(false ? rAFHandleResize : handleResize);
        resizeObserver.observe(input);
      }
      return () => {
        debounceHandleResize.clear();
        cancelAnimationFrame(rAF);
        containerWindow.removeEventListener("resize", debounceHandleResize);
        if (resizeObserver) {
          resizeObserver.disconnect();
        }
      };
    }, [getUpdatedState]);
    (0, import_utils104.unstable_useEnhancedEffect)(() => {
      syncHeight();
    });
    React101.useEffect(() => {
      renders.current = 0;
    }, [value]);
    const handleChange = (event) => {
      renders.current = 0;
      if (!isControlled) {
        syncHeight();
      }
      if (onChange) {
        onChange(event);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)(React101.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime71.jsx)("textarea", _extends({
        value,
        onChange: handleChange,
        ref: handleRef,
        rows: minRows,
        style: _extends({
          height: state.outerHeightStyle,
          // Need a large enough difference to allow scrolling.
          // This prevents infinite rendering loop.
          overflow: state.overflow ? "hidden" : void 0
        }, style)
      }, other)), /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("textarea", {
        "aria-hidden": true,
        className: props.className,
        readOnly: true,
        ref: shadowRef,
        tabIndex: -1,
        style: _extends({}, styles.shadow, style, {
          paddingTop: 0,
          paddingBottom: 0
        })
      })]
    });
  });
  true ? TextareaAutosize.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    className: import_prop_types47.default.string,
    /**
     * Maximum number of rows to display.
     */
    maxRows: import_prop_types47.default.oneOfType([import_prop_types47.default.number, import_prop_types47.default.string]),
    /**
     * Minimum number of rows to display.
     * @default 1
     */
    minRows: import_prop_types47.default.oneOfType([import_prop_types47.default.number, import_prop_types47.default.string]),
    /**
     * @ignore
     */
    onChange: import_prop_types47.default.func,
    /**
     * @ignore
     */
    placeholder: import_prop_types47.default.string,
    /**
     * @ignore
     */
    style: import_prop_types47.default.object,
    /**
     * @ignore
     */
    value: import_prop_types47.default.oneOfType([import_prop_types47.default.arrayOf(import_prop_types47.default.string), import_prop_types47.default.number, import_prop_types47.default.string])
  } : void 0;

  // node_modules/@mui/base/useAutocomplete/useAutocomplete.js
  init_extends();
  var React102 = __toESM(require_react());
  var import_utils105 = __toESM(require_utils());
  function stripDiacritics(string) {
    return typeof string.normalize !== "undefined" ? string.normalize("NFD").replace(/[\u0300-\u036f]/g, "") : string;
  }
  function createFilterOptions(config2 = {}) {
    const {
      ignoreAccents = true,
      ignoreCase = true,
      limit,
      matchFrom = "any",
      stringify: stringify2,
      trim: trim3 = false
    } = config2;
    return (options, {
      inputValue,
      getOptionLabel
    }) => {
      let input = trim3 ? inputValue.trim() : inputValue;
      if (ignoreCase) {
        input = input.toLowerCase();
      }
      if (ignoreAccents) {
        input = stripDiacritics(input);
      }
      const filteredOptions = !input ? options : options.filter((option) => {
        let candidate = (stringify2 || getOptionLabel)(option);
        if (ignoreCase) {
          candidate = candidate.toLowerCase();
        }
        if (ignoreAccents) {
          candidate = stripDiacritics(candidate);
        }
        return matchFrom === "start" ? candidate.indexOf(input) === 0 : candidate.indexOf(input) > -1;
      });
      return typeof limit === "number" ? filteredOptions.slice(0, limit) : filteredOptions;
    };
  }
  function findIndex(array, comp) {
    for (let i = 0; i < array.length; i += 1) {
      if (comp(array[i])) {
        return i;
      }
    }
    return -1;
  }
  var defaultFilterOptions = createFilterOptions();
  var pageSize = 5;
  var defaultIsActiveElementInListbox = (listboxRef) => {
    var _listboxRef$current$p;
    return listboxRef.current !== null && ((_listboxRef$current$p = listboxRef.current.parentElement) == null ? void 0 : _listboxRef$current$p.contains(document.activeElement));
  };
  function useAutocomplete(props) {
    const {
      // eslint-disable-next-line @typescript-eslint/naming-convention
      unstable_isActiveElementInListbox = defaultIsActiveElementInListbox,
      // eslint-disable-next-line @typescript-eslint/naming-convention
      unstable_classNamePrefix = "Mui",
      autoComplete = false,
      autoHighlight = false,
      autoSelect = false,
      blurOnSelect = false,
      clearOnBlur = !props.freeSolo,
      clearOnEscape = false,
      componentName = "useAutocomplete",
      defaultValue = props.multiple ? [] : null,
      disableClearable = false,
      disableCloseOnSelect = false,
      disabled: disabledProp,
      disabledItemsFocusable = false,
      disableListWrap = false,
      filterOptions = defaultFilterOptions,
      filterSelectedOptions = false,
      freeSolo = false,
      getOptionDisabled,
      getOptionLabel: getOptionLabelProp = (option) => {
        var _option$label;
        return (_option$label = option.label) != null ? _option$label : option;
      },
      groupBy,
      handleHomeEndKeys = !props.freeSolo,
      id: idProp,
      includeInputInList = false,
      inputValue: inputValueProp,
      isOptionEqualToValue = (option, value2) => option === value2,
      multiple = false,
      onChange,
      onClose,
      onHighlightChange,
      onInputChange,
      onOpen,
      open: openProp,
      openOnFocus = false,
      options,
      readOnly = false,
      selectOnFocus = !props.freeSolo,
      value: valueProp
    } = props;
    const id = (0, import_utils105.unstable_useId)(idProp);
    let getOptionLabel = getOptionLabelProp;
    getOptionLabel = (option) => {
      const optionLabel = getOptionLabelProp(option);
      if (typeof optionLabel !== "string") {
        if (true) {
          const erroneousReturn = optionLabel === void 0 ? "undefined" : `${typeof optionLabel} (${optionLabel})`;
          console.error(`MUI: The \`getOptionLabel\` method of ${componentName} returned ${erroneousReturn} instead of a string for ${JSON.stringify(option)}.`);
        }
        return String(optionLabel);
      }
      return optionLabel;
    };
    const ignoreFocus = React102.useRef(false);
    const firstFocus = React102.useRef(true);
    const inputRef = React102.useRef(null);
    const listboxRef = React102.useRef(null);
    const [anchorEl, setAnchorEl] = React102.useState(null);
    const [focusedTag, setFocusedTag] = React102.useState(-1);
    const defaultHighlighted = autoHighlight ? 0 : -1;
    const highlightedIndexRef = React102.useRef(defaultHighlighted);
    const [value, setValueState] = (0, import_utils105.unstable_useControlled)({
      controlled: valueProp,
      default: defaultValue,
      name: componentName
    });
    const [inputValue, setInputValueState] = (0, import_utils105.unstable_useControlled)({
      controlled: inputValueProp,
      default: "",
      name: componentName,
      state: "inputValue"
    });
    const [focused, setFocused] = React102.useState(false);
    const resetInputValue = React102.useCallback((event, newValue) => {
      const isOptionSelected = multiple ? value.length < newValue.length : newValue !== null;
      if (!isOptionSelected && !clearOnBlur) {
        return;
      }
      let newInputValue;
      if (multiple) {
        newInputValue = "";
      } else if (newValue == null) {
        newInputValue = "";
      } else {
        const optionLabel = getOptionLabel(newValue);
        newInputValue = typeof optionLabel === "string" ? optionLabel : "";
      }
      if (inputValue === newInputValue) {
        return;
      }
      setInputValueState(newInputValue);
      if (onInputChange) {
        onInputChange(event, newInputValue, "reset");
      }
    }, [getOptionLabel, inputValue, multiple, onInputChange, setInputValueState, clearOnBlur, value]);
    const [open, setOpenState] = (0, import_utils105.unstable_useControlled)({
      controlled: openProp,
      default: false,
      name: componentName,
      state: "open"
    });
    const [inputPristine, setInputPristine] = React102.useState(true);
    const inputValueIsSelectedValue = !multiple && value != null && inputValue === getOptionLabel(value);
    const popupOpen = open && !readOnly;
    const filteredOptions = popupOpen ? filterOptions(
      options.filter((option) => {
        if (filterSelectedOptions && (multiple ? value : [value]).some((value2) => value2 !== null && isOptionEqualToValue(option, value2))) {
          return false;
        }
        return true;
      }),
      // we use the empty string to manipulate `filterOptions` to not filter any options
      // i.e. the filter predicate always returns true
      {
        inputValue: inputValueIsSelectedValue && inputPristine ? "" : inputValue,
        getOptionLabel
      }
    ) : [];
    const previousProps = (0, import_utils105.usePreviousProps)({
      filteredOptions,
      value,
      inputValue
    });
    React102.useEffect(() => {
      const valueChange = value !== previousProps.value;
      if (focused && !valueChange) {
        return;
      }
      if (freeSolo && !valueChange) {
        return;
      }
      resetInputValue(null, value);
    }, [value, resetInputValue, focused, previousProps.value, freeSolo]);
    const listboxAvailable = open && filteredOptions.length > 0 && !readOnly;
    if (true) {
      if (value !== null && !freeSolo && options.length > 0) {
        const missingValue = (multiple ? value : [value]).filter((value2) => !options.some((option) => isOptionEqualToValue(option, value2)));
        if (missingValue.length > 0) {
          console.warn([`MUI: The value provided to ${componentName} is invalid.`, `None of the options match with \`${missingValue.length > 1 ? JSON.stringify(missingValue) : JSON.stringify(missingValue[0])}\`.`, "You can use the `isOptionEqualToValue` prop to customize the equality test."].join("\n"));
        }
      }
    }
    const focusTag = (0, import_utils105.unstable_useEventCallback)((tagToFocus) => {
      if (tagToFocus === -1) {
        inputRef.current.focus();
      } else {
        anchorEl.querySelector(`[data-tag-index="${tagToFocus}"]`).focus();
      }
    });
    React102.useEffect(() => {
      if (multiple && focusedTag > value.length - 1) {
        setFocusedTag(-1);
        focusTag(-1);
      }
    }, [value, multiple, focusedTag, focusTag]);
    function validOptionIndex(index3, direction) {
      if (!listboxRef.current || index3 === -1) {
        return -1;
      }
      let nextFocus = index3;
      while (true) {
        if (direction === "next" && nextFocus === filteredOptions.length || direction === "previous" && nextFocus === -1) {
          return -1;
        }
        const option = listboxRef.current.querySelector(`[data-option-index="${nextFocus}"]`);
        const nextFocusDisabled = disabledItemsFocusable ? false : !option || option.disabled || option.getAttribute("aria-disabled") === "true";
        if (option && !option.hasAttribute("tabindex") || nextFocusDisabled) {
          nextFocus += direction === "next" ? 1 : -1;
        } else {
          return nextFocus;
        }
      }
    }
    const setHighlightedIndex = (0, import_utils105.unstable_useEventCallback)(({
      event,
      index: index3,
      reason = "auto"
    }) => {
      highlightedIndexRef.current = index3;
      if (index3 === -1) {
        inputRef.current.removeAttribute("aria-activedescendant");
      } else {
        inputRef.current.setAttribute("aria-activedescendant", `${id}-option-${index3}`);
      }
      if (onHighlightChange) {
        onHighlightChange(event, index3 === -1 ? null : filteredOptions[index3], reason);
      }
      if (!listboxRef.current) {
        return;
      }
      const prev2 = listboxRef.current.querySelector(`[role="option"].${unstable_classNamePrefix}-focused`);
      if (prev2) {
        prev2.classList.remove(`${unstable_classNamePrefix}-focused`);
        prev2.classList.remove(`${unstable_classNamePrefix}-focusVisible`);
      }
      let listboxNode = listboxRef.current;
      if (listboxRef.current.getAttribute("role") !== "listbox") {
        listboxNode = listboxRef.current.parentElement.querySelector('[role="listbox"]');
      }
      if (!listboxNode) {
        return;
      }
      if (index3 === -1) {
        listboxNode.scrollTop = 0;
        return;
      }
      const option = listboxRef.current.querySelector(`[data-option-index="${index3}"]`);
      if (!option) {
        return;
      }
      option.classList.add(`${unstable_classNamePrefix}-focused`);
      if (reason === "keyboard") {
        option.classList.add(`${unstable_classNamePrefix}-focusVisible`);
      }
      if (listboxNode.scrollHeight > listboxNode.clientHeight && reason !== "mouse" && reason !== "touch") {
        const element = option;
        const scrollBottom = listboxNode.clientHeight + listboxNode.scrollTop;
        const elementBottom = element.offsetTop + element.offsetHeight;
        if (elementBottom > scrollBottom) {
          listboxNode.scrollTop = elementBottom - listboxNode.clientHeight;
        } else if (element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0) < listboxNode.scrollTop) {
          listboxNode.scrollTop = element.offsetTop - element.offsetHeight * (groupBy ? 1.3 : 0);
        }
      }
    });
    const changeHighlightedIndex = (0, import_utils105.unstable_useEventCallback)(({
      event,
      diff,
      direction = "next",
      reason = "auto"
    }) => {
      if (!popupOpen) {
        return;
      }
      const getNextIndex = () => {
        const maxIndex = filteredOptions.length - 1;
        if (diff === "reset") {
          return defaultHighlighted;
        }
        if (diff === "start") {
          return 0;
        }
        if (diff === "end") {
          return maxIndex;
        }
        const newIndex = highlightedIndexRef.current + diff;
        if (newIndex < 0) {
          if (newIndex === -1 && includeInputInList) {
            return -1;
          }
          if (disableListWrap && highlightedIndexRef.current !== -1 || Math.abs(diff) > 1) {
            return 0;
          }
          return maxIndex;
        }
        if (newIndex > maxIndex) {
          if (newIndex === maxIndex + 1 && includeInputInList) {
            return -1;
          }
          if (disableListWrap || Math.abs(diff) > 1) {
            return maxIndex;
          }
          return 0;
        }
        return newIndex;
      };
      const nextIndex = validOptionIndex(getNextIndex(), direction);
      setHighlightedIndex({
        index: nextIndex,
        reason,
        event
      });
      if (autoComplete && diff !== "reset") {
        if (nextIndex === -1) {
          inputRef.current.value = inputValue;
        } else {
          const option = getOptionLabel(filteredOptions[nextIndex]);
          inputRef.current.value = option;
          const index3 = option.toLowerCase().indexOf(inputValue.toLowerCase());
          if (index3 === 0 && inputValue.length > 0) {
            inputRef.current.setSelectionRange(inputValue.length, option.length);
          }
        }
      }
    });
    const checkHighlightedOptionExists = () => {
      const isSameValue = (value1, value2) => {
        const label1 = value1 ? getOptionLabel(value1) : "";
        const label2 = value2 ? getOptionLabel(value2) : "";
        return label1 === label2;
      };
      if (highlightedIndexRef.current !== -1 && previousProps.filteredOptions && previousProps.filteredOptions.length !== filteredOptions.length && previousProps.inputValue === inputValue && (multiple ? value.length === previousProps.value.length && previousProps.value.every((val, i) => getOptionLabel(value[i]) === getOptionLabel(val)) : isSameValue(previousProps.value, value))) {
        const previousHighlightedOption = previousProps.filteredOptions[highlightedIndexRef.current];
        if (previousHighlightedOption) {
          const previousHighlightedOptionExists = filteredOptions.some((option) => {
            return getOptionLabel(option) === getOptionLabel(previousHighlightedOption);
          });
          if (previousHighlightedOptionExists) {
            return true;
          }
        }
      }
      return false;
    };
    const syncHighlightedIndex = React102.useCallback(() => {
      if (!popupOpen) {
        return;
      }
      if (checkHighlightedOptionExists()) {
        return;
      }
      const valueItem = multiple ? value[0] : value;
      if (filteredOptions.length === 0 || valueItem == null) {
        changeHighlightedIndex({
          diff: "reset"
        });
        return;
      }
      if (!listboxRef.current) {
        return;
      }
      if (valueItem != null) {
        const currentOption = filteredOptions[highlightedIndexRef.current];
        if (multiple && currentOption && findIndex(value, (val) => isOptionEqualToValue(currentOption, val)) !== -1) {
          return;
        }
        const itemIndex = findIndex(filteredOptions, (optionItem) => isOptionEqualToValue(optionItem, valueItem));
        if (itemIndex === -1) {
          changeHighlightedIndex({
            diff: "reset"
          });
        } else {
          setHighlightedIndex({
            index: itemIndex
          });
        }
        return;
      }
      if (highlightedIndexRef.current >= filteredOptions.length - 1) {
        setHighlightedIndex({
          index: filteredOptions.length - 1
        });
        return;
      }
      setHighlightedIndex({
        index: highlightedIndexRef.current
      });
    }, [
      // Only sync the highlighted index when the option switch between empty and not
      filteredOptions.length,
      // Don't sync the highlighted index with the value when multiple
      // eslint-disable-next-line react-hooks/exhaustive-deps
      multiple ? false : value,
      filterSelectedOptions,
      changeHighlightedIndex,
      setHighlightedIndex,
      popupOpen,
      inputValue,
      multiple
    ]);
    const handleListboxRef = (0, import_utils105.unstable_useEventCallback)((node2) => {
      (0, import_utils105.unstable_setRef)(listboxRef, node2);
      if (!node2) {
        return;
      }
      syncHighlightedIndex();
    });
    if (true) {
      React102.useEffect(() => {
        if (!inputRef.current || inputRef.current.nodeName !== "INPUT") {
          if (inputRef.current && inputRef.current.nodeName === "TEXTAREA") {
            console.warn([`A textarea element was provided to ${componentName} where input was expected.`, `This is not a supported scenario but it may work under certain conditions.`, `A textarea keyboard navigation may conflict with Autocomplete controls (e.g. enter and arrow keys).`, `Make sure to test keyboard navigation and add custom event handlers if necessary.`].join("\n"));
          } else {
            console.error([`MUI: Unable to find the input element. It was resolved to ${inputRef.current} while an HTMLInputElement was expected.`, `Instead, ${componentName} expects an input element.`, "", componentName === "useAutocomplete" ? "Make sure you have bound getInputProps correctly and that the normal ref/effect resolutions order is guaranteed." : "Make sure you have customized the input component correctly."].join("\n"));
          }
        }
      }, [componentName]);
    }
    React102.useEffect(() => {
      syncHighlightedIndex();
    }, [syncHighlightedIndex]);
    const handleOpen = (event) => {
      if (open) {
        return;
      }
      setOpenState(true);
      setInputPristine(true);
      if (onOpen) {
        onOpen(event);
      }
    };
    const handleClose = (event, reason) => {
      if (!open) {
        return;
      }
      setOpenState(false);
      if (onClose) {
        onClose(event, reason);
      }
    };
    const handleValue = (event, newValue, reason, details) => {
      if (multiple) {
        if (value.length === newValue.length && value.every((val, i) => val === newValue[i])) {
          return;
        }
      } else if (value === newValue) {
        return;
      }
      if (onChange) {
        onChange(event, newValue, reason, details);
      }
      setValueState(newValue);
    };
    const isTouch2 = React102.useRef(false);
    const selectNewValue = (event, option, reasonProp = "selectOption", origin = "options") => {
      let reason = reasonProp;
      let newValue = option;
      if (multiple) {
        newValue = Array.isArray(value) ? value.slice() : [];
        if (true) {
          const matches = newValue.filter((val) => isOptionEqualToValue(option, val));
          if (matches.length > 1) {
            console.error([`MUI: The \`isOptionEqualToValue\` method of ${componentName} does not handle the arguments correctly.`, `The component expects a single value to match a given option but found ${matches.length} matches.`].join("\n"));
          }
        }
        const itemIndex = findIndex(newValue, (valueItem) => isOptionEqualToValue(option, valueItem));
        if (itemIndex === -1) {
          newValue.push(option);
        } else if (origin !== "freeSolo") {
          newValue.splice(itemIndex, 1);
          reason = "removeOption";
        }
      }
      resetInputValue(event, newValue);
      handleValue(event, newValue, reason, {
        option
      });
      if (!disableCloseOnSelect && (!event || !event.ctrlKey && !event.metaKey)) {
        handleClose(event, reason);
      }
      if (blurOnSelect === true || blurOnSelect === "touch" && isTouch2.current || blurOnSelect === "mouse" && !isTouch2.current) {
        inputRef.current.blur();
      }
    };
    function validTagIndex(index3, direction) {
      if (index3 === -1) {
        return -1;
      }
      let nextFocus = index3;
      while (true) {
        if (direction === "next" && nextFocus === value.length || direction === "previous" && nextFocus === -1) {
          return -1;
        }
        const option = anchorEl.querySelector(`[data-tag-index="${nextFocus}"]`);
        if (!option || !option.hasAttribute("tabindex") || option.disabled || option.getAttribute("aria-disabled") === "true") {
          nextFocus += direction === "next" ? 1 : -1;
        } else {
          return nextFocus;
        }
      }
    }
    const handleFocusTag = (event, direction) => {
      if (!multiple) {
        return;
      }
      if (inputValue === "") {
        handleClose(event, "toggleInput");
      }
      let nextTag = focusedTag;
      if (focusedTag === -1) {
        if (inputValue === "" && direction === "previous") {
          nextTag = value.length - 1;
        }
      } else {
        nextTag += direction === "next" ? 1 : -1;
        if (nextTag < 0) {
          nextTag = 0;
        }
        if (nextTag === value.length) {
          nextTag = -1;
        }
      }
      nextTag = validTagIndex(nextTag, direction);
      setFocusedTag(nextTag);
      focusTag(nextTag);
    };
    const handleClear = (event) => {
      ignoreFocus.current = true;
      setInputValueState("");
      if (onInputChange) {
        onInputChange(event, "", "clear");
      }
      handleValue(event, multiple ? [] : null, "clear");
    };
    const handleKeyDown2 = (other) => (event) => {
      if (other.onKeyDown) {
        other.onKeyDown(event);
      }
      if (event.defaultMuiPrevented) {
        return;
      }
      if (focusedTag !== -1 && ["ArrowLeft", "ArrowRight"].indexOf(event.key) === -1) {
        setFocusedTag(-1);
        focusTag(-1);
      }
      if (event.which !== 229) {
        switch (event.key) {
          case "Home":
            if (popupOpen && handleHomeEndKeys) {
              event.preventDefault();
              changeHighlightedIndex({
                diff: "start",
                direction: "next",
                reason: "keyboard",
                event
              });
            }
            break;
          case "End":
            if (popupOpen && handleHomeEndKeys) {
              event.preventDefault();
              changeHighlightedIndex({
                diff: "end",
                direction: "previous",
                reason: "keyboard",
                event
              });
            }
            break;
          case "PageUp":
            event.preventDefault();
            changeHighlightedIndex({
              diff: -pageSize,
              direction: "previous",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "PageDown":
            event.preventDefault();
            changeHighlightedIndex({
              diff: pageSize,
              direction: "next",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "ArrowDown":
            event.preventDefault();
            changeHighlightedIndex({
              diff: 1,
              direction: "next",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "ArrowUp":
            event.preventDefault();
            changeHighlightedIndex({
              diff: -1,
              direction: "previous",
              reason: "keyboard",
              event
            });
            handleOpen(event);
            break;
          case "ArrowLeft":
            handleFocusTag(event, "previous");
            break;
          case "ArrowRight":
            handleFocusTag(event, "next");
            break;
          case "Enter":
            if (highlightedIndexRef.current !== -1 && popupOpen) {
              const option = filteredOptions[highlightedIndexRef.current];
              const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
              event.preventDefault();
              if (disabled) {
                return;
              }
              selectNewValue(event, option, "selectOption");
              if (autoComplete) {
                inputRef.current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);
              }
            } else if (freeSolo && inputValue !== "" && inputValueIsSelectedValue === false) {
              if (multiple) {
                event.preventDefault();
              }
              selectNewValue(event, inputValue, "createOption", "freeSolo");
            }
            break;
          case "Escape":
            if (popupOpen) {
              event.preventDefault();
              event.stopPropagation();
              handleClose(event, "escape");
            } else if (clearOnEscape && (inputValue !== "" || multiple && value.length > 0)) {
              event.preventDefault();
              event.stopPropagation();
              handleClear(event);
            }
            break;
          case "Backspace":
            if (multiple && !readOnly && inputValue === "" && value.length > 0) {
              const index3 = focusedTag === -1 ? value.length - 1 : focusedTag;
              const newValue = value.slice();
              newValue.splice(index3, 1);
              handleValue(event, newValue, "removeOption", {
                option: value[index3]
              });
            }
            break;
          case "Delete":
            if (multiple && !readOnly && inputValue === "" && value.length > 0 && focusedTag !== -1) {
              const index3 = focusedTag;
              const newValue = value.slice();
              newValue.splice(index3, 1);
              handleValue(event, newValue, "removeOption", {
                option: value[index3]
              });
            }
            break;
          default:
        }
      }
    };
    const handleFocus = (event) => {
      setFocused(true);
      if (openOnFocus && !ignoreFocus.current) {
        handleOpen(event);
      }
    };
    const handleBlur2 = (event) => {
      if (unstable_isActiveElementInListbox(listboxRef)) {
        inputRef.current.focus();
        return;
      }
      setFocused(false);
      firstFocus.current = true;
      ignoreFocus.current = false;
      if (autoSelect && highlightedIndexRef.current !== -1 && popupOpen) {
        selectNewValue(event, filteredOptions[highlightedIndexRef.current], "blur");
      } else if (autoSelect && freeSolo && inputValue !== "") {
        selectNewValue(event, inputValue, "blur", "freeSolo");
      } else if (clearOnBlur) {
        resetInputValue(event, value);
      }
      handleClose(event, "blur");
    };
    const handleInputChange = (event) => {
      const newValue = event.target.value;
      if (inputValue !== newValue) {
        setInputValueState(newValue);
        setInputPristine(false);
        if (onInputChange) {
          onInputChange(event, newValue, "input");
        }
      }
      if (newValue === "") {
        if (!disableClearable && !multiple) {
          handleValue(event, null, "clear");
        }
      } else {
        handleOpen(event);
      }
    };
    const handleOptionMouseMove = (event) => {
      const index3 = Number(event.currentTarget.getAttribute("data-option-index"));
      if (highlightedIndexRef.current !== index3) {
        setHighlightedIndex({
          event,
          index: index3,
          reason: "mouse"
        });
      }
    };
    const handleOptionTouchStart = (event) => {
      setHighlightedIndex({
        event,
        index: Number(event.currentTarget.getAttribute("data-option-index")),
        reason: "touch"
      });
      isTouch2.current = true;
    };
    const handleOptionClick = (event) => {
      const index3 = Number(event.currentTarget.getAttribute("data-option-index"));
      selectNewValue(event, filteredOptions[index3], "selectOption");
      isTouch2.current = false;
    };
    const handleTagDelete = (index3) => (event) => {
      const newValue = value.slice();
      newValue.splice(index3, 1);
      handleValue(event, newValue, "removeOption", {
        option: value[index3]
      });
    };
    const handlePopupIndicator = (event) => {
      if (open) {
        handleClose(event, "toggleInput");
      } else {
        handleOpen(event);
      }
    };
    const handleMouseDown = (event) => {
      if (!event.currentTarget.contains(event.target)) {
        return;
      }
      if (event.target.getAttribute("id") !== id) {
        event.preventDefault();
      }
    };
    const handleClick = (event) => {
      if (!event.currentTarget.contains(event.target)) {
        return;
      }
      inputRef.current.focus();
      if (selectOnFocus && firstFocus.current && inputRef.current.selectionEnd - inputRef.current.selectionStart === 0) {
        inputRef.current.select();
      }
      firstFocus.current = false;
    };
    const handleInputMouseDown = (event) => {
      if (!disabledProp && (inputValue === "" || !open)) {
        handlePopupIndicator(event);
      }
    };
    let dirty = freeSolo && inputValue.length > 0;
    dirty = dirty || (multiple ? value.length > 0 : value !== null);
    let groupedOptions = filteredOptions;
    if (groupBy) {
      const indexBy = /* @__PURE__ */ new Map();
      let warn = false;
      groupedOptions = filteredOptions.reduce((acc, option, index3) => {
        const group = groupBy(option);
        if (acc.length > 0 && acc[acc.length - 1].group === group) {
          acc[acc.length - 1].options.push(option);
        } else {
          if (true) {
            if (indexBy.get(group) && !warn) {
              console.warn(`MUI: The options provided combined with the \`groupBy\` method of ${componentName} returns duplicated headers.`, "You can solve the issue by sorting the options with the output of `groupBy`.");
              warn = true;
            }
            indexBy.set(group, true);
          }
          acc.push({
            key: index3,
            index: index3,
            group,
            options: [option]
          });
        }
        return acc;
      }, []);
    }
    if (disabledProp && focused) {
      handleBlur2();
    }
    return {
      getRootProps: (other = {}) => _extends({
        "aria-owns": listboxAvailable ? `${id}-listbox` : null
      }, other, {
        onKeyDown: handleKeyDown2(other),
        onMouseDown: handleMouseDown,
        onClick: handleClick
      }),
      getInputLabelProps: () => ({
        id: `${id}-label`,
        htmlFor: id
      }),
      getInputProps: () => ({
        id,
        value: inputValue,
        onBlur: handleBlur2,
        onFocus: handleFocus,
        onChange: handleInputChange,
        onMouseDown: handleInputMouseDown,
        // if open then this is handled imperatively so don't let react override
        // only have an opinion about this when closed
        "aria-activedescendant": popupOpen ? "" : null,
        "aria-autocomplete": autoComplete ? "both" : "list",
        "aria-controls": listboxAvailable ? `${id}-listbox` : void 0,
        "aria-expanded": listboxAvailable,
        // Disable browser's suggestion that might overlap with the popup.
        // Handle autocomplete but not autofill.
        autoComplete: "off",
        ref: inputRef,
        autoCapitalize: "none",
        spellCheck: "false",
        role: "combobox",
        disabled: disabledProp
      }),
      getClearProps: () => ({
        tabIndex: -1,
        onClick: handleClear
      }),
      getPopupIndicatorProps: () => ({
        tabIndex: -1,
        onClick: handlePopupIndicator
      }),
      getTagProps: ({
        index: index3
      }) => _extends({
        key: index3,
        "data-tag-index": index3,
        tabIndex: -1
      }, !readOnly && {
        onDelete: handleTagDelete(index3)
      }),
      getListboxProps: () => ({
        role: "listbox",
        id: `${id}-listbox`,
        "aria-labelledby": `${id}-label`,
        ref: handleListboxRef,
        onMouseDown: (event) => {
          event.preventDefault();
        }
      }),
      getOptionProps: ({
        index: index3,
        option
      }) => {
        const selected = (multiple ? value : [value]).some((value2) => value2 != null && isOptionEqualToValue(option, value2));
        const disabled = getOptionDisabled ? getOptionDisabled(option) : false;
        return {
          key: getOptionLabel(option),
          tabIndex: -1,
          role: "option",
          id: `${id}-option-${index3}`,
          onMouseMove: handleOptionMouseMove,
          onClick: handleOptionClick,
          onTouchStart: handleOptionTouchStart,
          "data-option-index": index3,
          "aria-disabled": disabled,
          "aria-selected": selected
        };
      },
      id,
      inputValue,
      value,
      dirty,
      expanded: popupOpen && anchorEl,
      popupOpen,
      focused: focused || focusedTag !== -1,
      anchorEl,
      setAnchorEl,
      focusedTag,
      groupedOptions
    };
  }

  // node_modules/@mui/material/Autocomplete/Autocomplete.js
  var import_system20 = __toESM(require_system());

  // node_modules/@mui/material/Popper/Popper.js
  init_extends();
  var import_system17 = __toESM(require_system());
  var import_utils106 = __toESM(require_utils());
  var import_prop_types48 = __toESM(require_prop_types());
  var React103 = __toESM(require_react());
  var import_jsx_runtime73 = __toESM(require_jsx_runtime());
  var _excluded52 = ["anchorEl", "component", "components", "componentsProps", "container", "disablePortal", "keepMounted", "modifiers", "open", "placement", "popperOptions", "popperRef", "transition", "slots", "slotProps"];
  var PopperRoot = styled_default(Popper, {
    name: "MuiPopper",
    slot: "Root",
    overridesResolver: (props, styles7) => styles7.root
  })({});
  var Popper3 = /* @__PURE__ */ React103.forwardRef(function Popper4(inProps, ref) {
    var _slots$root;
    const theme = (0, import_system17.useThemeWithoutDefault)();
    const props = useThemeProps({
      props: inProps,
      name: "MuiPopper"
    });
    const {
      anchorEl,
      component,
      components,
      componentsProps,
      container,
      disablePortal,
      keepMounted,
      modifiers,
      open,
      placement,
      popperOptions,
      popperRef,
      transition: transition2,
      slots,
      slotProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded52);
    const RootComponent = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components == null ? void 0 : components.Root;
    const otherProps = _extends({
      anchorEl,
      container,
      disablePortal,
      keepMounted,
      modifiers,
      open,
      placement,
      popperOptions,
      popperRef,
      transition: transition2
    }, other);
    return /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(PopperRoot, _extends({
      as: component,
      direction: theme == null ? void 0 : theme.direction,
      slots: {
        root: RootComponent
      },
      slotProps: slotProps != null ? slotProps : componentsProps
    }, otherProps, {
      ref
    }));
  });
  true ? Popper3.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * An HTML element, [virtualElement](https://popper.js.org/docs/v2/virtual-elements/),
     * or a function that returns either.
     * It's used to set the position of the popper.
     * The return value will passed as the reference object of the Popper instance.
     */
    anchorEl: import_prop_types48.default.oneOfType([import_utils106.HTMLElementType, import_prop_types48.default.object, import_prop_types48.default.func]),
    /**
     * Popper render function or node.
     */
    children: import_prop_types48.default.oneOfType([import_prop_types48.default.node, import_prop_types48.default.func]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types48.default.elementType,
    /**
     * The components used for each slot inside the Popper.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    components: import_prop_types48.default.shape({
      Root: import_prop_types48.default.elementType
    }),
    /**
     * The props used for each slot inside the Popper.
     * @default {}
     */
    componentsProps: import_prop_types48.default.shape({
      root: import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object])
    }),
    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: import_prop_types48.default.oneOfType([import_utils106.HTMLElementType, import_prop_types48.default.func]),
    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: import_prop_types48.default.bool,
    /**
     * Always keep the children in the DOM.
     * This prop can be useful in SEO situation or
     * when you want to maximize the responsiveness of the Popper.
     * @default false
     */
    keepMounted: import_prop_types48.default.bool,
    /**
     * Popper.js is based on a "plugin-like" architecture,
     * most of its features are fully encapsulated "modifiers".
     *
     * A modifier is a function that is called each time Popper.js needs to
     * compute the position of the popper.
     * For this reason, modifiers should be very performant to avoid bottlenecks.
     * To learn how to create a modifier, [read the modifiers documentation](https://popper.js.org/docs/v2/modifiers/).
     */
    modifiers: import_prop_types48.default.arrayOf(import_prop_types48.default.shape({
      data: import_prop_types48.default.object,
      effect: import_prop_types48.default.func,
      enabled: import_prop_types48.default.bool,
      fn: import_prop_types48.default.func,
      name: import_prop_types48.default.any,
      options: import_prop_types48.default.object,
      phase: import_prop_types48.default.oneOf(["afterMain", "afterRead", "afterWrite", "beforeMain", "beforeRead", "beforeWrite", "main", "read", "write"]),
      requires: import_prop_types48.default.arrayOf(import_prop_types48.default.string),
      requiresIfExists: import_prop_types48.default.arrayOf(import_prop_types48.default.string)
    })),
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types48.default.bool.isRequired,
    /**
     * Popper placement.
     * @default 'bottom'
     */
    placement: import_prop_types48.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    /**
     * Options provided to the [`Popper.js`](https://popper.js.org/docs/v2/constructors/#options) instance.
     * @default {}
     */
    popperOptions: import_prop_types48.default.shape({
      modifiers: import_prop_types48.default.array,
      onFirstUpdate: import_prop_types48.default.func,
      placement: import_prop_types48.default.oneOf(["auto-end", "auto-start", "auto", "bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
      strategy: import_prop_types48.default.oneOf(["absolute", "fixed"])
    }),
    /**
     * A ref that points to the used popper instance.
     */
    popperRef: import_utils106.refType,
    /**
     * The props used for each slot inside the Popper.
     * @default {}
     */
    slotProps: import_prop_types48.default.shape({
      root: import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object])
    }),
    /**
     * The components used for each slot inside the Popper.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types48.default.shape({
      root: import_prop_types48.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types48.default.oneOfType([import_prop_types48.default.arrayOf(import_prop_types48.default.oneOfType([import_prop_types48.default.func, import_prop_types48.default.object, import_prop_types48.default.bool])), import_prop_types48.default.func, import_prop_types48.default.object]),
    /**
     * Help supporting a react-transition-group/Transition component.
     * @default false
     */
    transition: import_prop_types48.default.bool
  } : void 0;
  var Popper_default = Popper3;

  // node_modules/@mui/material/ListSubheader/ListSubheader.js
  init_extends();
  var React104 = __toESM(require_react());
  var import_prop_types49 = __toESM(require_prop_types());
  var import_composeClasses35 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/ListSubheader/listSubheaderClasses.js
  var import_generateUtilityClasses23 = __toESM(require_generateUtilityClasses2());
  var import_generateUtilityClass37 = __toESM(require_generateUtilityClass3());
  function getListSubheaderUtilityClass(slot) {
    return (0, import_generateUtilityClass37.default)("MuiListSubheader", slot);
  }
  var listSubheaderClasses = (0, import_generateUtilityClasses23.default)("MuiListSubheader", ["root", "colorPrimary", "colorInherit", "gutters", "inset", "sticky"]);
  var listSubheaderClasses_default = listSubheaderClasses;

  // node_modules/@mui/material/ListSubheader/ListSubheader.js
  var import_jsx_runtime74 = __toESM(require_jsx_runtime());
  var _excluded53 = ["className", "color", "component", "disableGutters", "disableSticky", "inset"];
  var useUtilityClasses35 = (ownerState) => {
    const {
      classes,
      color,
      disableGutters,
      inset,
      disableSticky
    } = ownerState;
    const slots = {
      root: ["root", color !== "default" && `color${capitalize_default(color)}`, !disableGutters && "gutters", inset && "inset", !disableSticky && "sticky"]
    };
    return (0, import_composeClasses35.unstable_composeClasses)(slots, getListSubheaderUtilityClass, classes);
  };
  var ListSubheaderRoot = styled_default("li", {
    name: "MuiListSubheader",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, ownerState.color !== "default" && styles7[`color${capitalize_default(ownerState.color)}`], !ownerState.disableGutters && styles7.gutters, ownerState.inset && styles7.inset, !ownerState.disableSticky && styles7.sticky];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    boxSizing: "border-box",
    lineHeight: "48px",
    listStyle: "none",
    color: (theme.vars || theme).palette.text.secondary,
    fontFamily: theme.typography.fontFamily,
    fontWeight: theme.typography.fontWeightMedium,
    fontSize: theme.typography.pxToRem(14)
  }, ownerState.color === "primary" && {
    color: (theme.vars || theme).palette.primary.main
  }, ownerState.color === "inherit" && {
    color: "inherit"
  }, !ownerState.disableGutters && {
    paddingLeft: 16,
    paddingRight: 16
  }, ownerState.inset && {
    paddingLeft: 72
  }, !ownerState.disableSticky && {
    position: "sticky",
    top: 0,
    zIndex: 1,
    backgroundColor: (theme.vars || theme).palette.background.paper
  }));
  var ListSubheader = /* @__PURE__ */ React104.forwardRef(function ListSubheader2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiListSubheader"
    });
    const {
      className,
      color = "default",
      component = "li",
      disableGutters = false,
      disableSticky = false,
      inset = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded53);
    const ownerState = _extends({}, props, {
      color,
      component,
      disableGutters,
      disableSticky,
      inset
    });
    const classes = useUtilityClasses35(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(ListSubheaderRoot, _extends({
      as: component,
      className: clsx_default(classes.root, className),
      ref,
      ownerState
    }, other));
  });
  ListSubheader.muiSkipListHighlight = true;
  true ? ListSubheader.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types49.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types49.default.object,
    /**
     * @ignore
     */
    className: import_prop_types49.default.string,
    /**
     * The color of the component. It supports those theme colors that make sense for this component.
     * @default 'default'
     */
    color: import_prop_types49.default.oneOf(["default", "inherit", "primary"]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types49.default.elementType,
    /**
     * If `true`, the List Subheader will not have gutters.
     * @default false
     */
    disableGutters: import_prop_types49.default.bool,
    /**
     * If `true`, the List Subheader will not stick to the top during scroll.
     * @default false
     */
    disableSticky: import_prop_types49.default.bool,
    /**
     * If `true`, the List Subheader is indented.
     * @default false
     */
    inset: import_prop_types49.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types49.default.oneOfType([import_prop_types49.default.arrayOf(import_prop_types49.default.oneOfType([import_prop_types49.default.func, import_prop_types49.default.object, import_prop_types49.default.bool])), import_prop_types49.default.func, import_prop_types49.default.object])
  } : void 0;
  var ListSubheader_default = ListSubheader;

  // node_modules/@mui/material/Chip/Chip.js
  init_extends();
  var React106 = __toESM(require_react());
  var import_prop_types50 = __toESM(require_prop_types());
  var import_composeClasses36 = __toESM(require_composeClasses3());
  var import_system18 = __toESM(require_system());

  // node_modules/@mui/material/internal/svg-icons/Cancel.js
  var React105 = __toESM(require_react());
  var import_jsx_runtime75 = __toESM(require_jsx_runtime());
  var Cancel_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime75.jsx)("path", {
    d: "M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z"
  }), "Cancel");

  // node_modules/@mui/material/utils/unsupportedProp.js
  var import_utils107 = __toESM(require_utils());
  var unsupportedProp_default = import_utils107.unstable_unsupportedProp;

  // node_modules/@mui/material/Chip/chipClasses.js
  var import_utils108 = __toESM(require_utils());
  var import_generateUtilityClass38 = __toESM(require_generateUtilityClass3());
  function getChipUtilityClass(slot) {
    return (0, import_generateUtilityClass38.default)("MuiChip", slot);
  }
  var chipClasses = (0, import_utils108.unstable_generateUtilityClasses)("MuiChip", ["root", "sizeSmall", "sizeMedium", "colorError", "colorInfo", "colorPrimary", "colorSecondary", "colorSuccess", "colorWarning", "disabled", "clickable", "clickableColorPrimary", "clickableColorSecondary", "deletable", "deletableColorPrimary", "deletableColorSecondary", "outlined", "filled", "outlinedPrimary", "outlinedSecondary", "filledPrimary", "filledSecondary", "avatar", "avatarSmall", "avatarMedium", "avatarColorPrimary", "avatarColorSecondary", "icon", "iconSmall", "iconMedium", "iconColorPrimary", "iconColorSecondary", "label", "labelSmall", "labelMedium", "deleteIcon", "deleteIconSmall", "deleteIconMedium", "deleteIconColorPrimary", "deleteIconColorSecondary", "deleteIconOutlinedColorPrimary", "deleteIconOutlinedColorSecondary", "deleteIconFilledColorPrimary", "deleteIconFilledColorSecondary", "focusVisible"]);
  var chipClasses_default = chipClasses;

  // node_modules/@mui/material/Chip/Chip.js
  var import_jsx_runtime76 = __toESM(require_jsx_runtime());
  var import_jsx_runtime77 = __toESM(require_jsx_runtime());
  var _excluded54 = ["avatar", "className", "clickable", "color", "component", "deleteIcon", "disabled", "icon", "label", "onClick", "onDelete", "onKeyDown", "onKeyUp", "size", "variant", "tabIndex", "skipFocusWhenDisabled"];
  var useUtilityClasses36 = (ownerState) => {
    const {
      classes,
      disabled,
      size: size2,
      color,
      iconColor,
      onDelete,
      clickable,
      variant
    } = ownerState;
    const slots = {
      root: ["root", variant, disabled && "disabled", `size${capitalize_default(size2)}`, `color${capitalize_default(color)}`, clickable && "clickable", clickable && `clickableColor${capitalize_default(color)}`, onDelete && "deletable", onDelete && `deletableColor${capitalize_default(color)}`, `${variant}${capitalize_default(color)}`],
      label: ["label", `label${capitalize_default(size2)}`],
      avatar: ["avatar", `avatar${capitalize_default(size2)}`, `avatarColor${capitalize_default(color)}`],
      icon: ["icon", `icon${capitalize_default(size2)}`, `iconColor${capitalize_default(iconColor)}`],
      deleteIcon: ["deleteIcon", `deleteIcon${capitalize_default(size2)}`, `deleteIconColor${capitalize_default(color)}`, `deleteIcon${capitalize_default(variant)}Color${capitalize_default(color)}`]
    };
    return (0, import_composeClasses36.unstable_composeClasses)(slots, getChipUtilityClass, classes);
  };
  var ChipRoot = styled_default("div", {
    name: "MuiChip",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      const {
        color,
        iconColor,
        clickable,
        onDelete,
        size: size2,
        variant
      } = ownerState;
      return [{
        [`& .${chipClasses_default.avatar}`]: styles7.avatar
      }, {
        [`& .${chipClasses_default.avatar}`]: styles7[`avatar${capitalize_default(size2)}`]
      }, {
        [`& .${chipClasses_default.avatar}`]: styles7[`avatarColor${capitalize_default(color)}`]
      }, {
        [`& .${chipClasses_default.icon}`]: styles7.icon
      }, {
        [`& .${chipClasses_default.icon}`]: styles7[`icon${capitalize_default(size2)}`]
      }, {
        [`& .${chipClasses_default.icon}`]: styles7[`iconColor${capitalize_default(iconColor)}`]
      }, {
        [`& .${chipClasses_default.deleteIcon}`]: styles7.deleteIcon
      }, {
        [`& .${chipClasses_default.deleteIcon}`]: styles7[`deleteIcon${capitalize_default(size2)}`]
      }, {
        [`& .${chipClasses_default.deleteIcon}`]: styles7[`deleteIconColor${capitalize_default(color)}`]
      }, {
        [`& .${chipClasses_default.deleteIcon}`]: styles7[`deleteIcon${capitalize_default(variant)}Color${capitalize_default(color)}`]
      }, styles7.root, styles7[`size${capitalize_default(size2)}`], styles7[`color${capitalize_default(color)}`], clickable && styles7.clickable, clickable && color !== "default" && styles7[`clickableColor${capitalize_default(color)})`], onDelete && styles7.deletable, onDelete && color !== "default" && styles7[`deletableColor${capitalize_default(color)}`], styles7[variant], styles7[`${variant}${capitalize_default(color)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    const textColor = theme.palette.mode === "light" ? theme.palette.grey[700] : theme.palette.grey[300];
    return _extends({
      maxWidth: "100%",
      fontFamily: theme.typography.fontFamily,
      fontSize: theme.typography.pxToRem(13),
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      height: 32,
      color: (theme.vars || theme).palette.text.primary,
      backgroundColor: (theme.vars || theme).palette.action.selected,
      borderRadius: 32 / 2,
      whiteSpace: "nowrap",
      transition: theme.transitions.create(["background-color", "box-shadow"]),
      // reset cursor explicitly in case ButtonBase is used
      cursor: "unset",
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 0,
      textDecoration: "none",
      border: 0,
      // Remove `button` border
      padding: 0,
      // Remove `button` padding
      verticalAlign: "middle",
      boxSizing: "border-box",
      [`&.${chipClasses_default.disabled}`]: {
        opacity: (theme.vars || theme).palette.action.disabledOpacity,
        pointerEvents: "none"
      },
      [`& .${chipClasses_default.avatar}`]: {
        marginLeft: 5,
        marginRight: -6,
        width: 24,
        height: 24,
        color: theme.vars ? theme.vars.palette.Chip.defaultAvatarColor : textColor,
        fontSize: theme.typography.pxToRem(12)
      },
      [`& .${chipClasses_default.avatarColorPrimary}`]: {
        color: (theme.vars || theme).palette.primary.contrastText,
        backgroundColor: (theme.vars || theme).palette.primary.dark
      },
      [`& .${chipClasses_default.avatarColorSecondary}`]: {
        color: (theme.vars || theme).palette.secondary.contrastText,
        backgroundColor: (theme.vars || theme).palette.secondary.dark
      },
      [`& .${chipClasses_default.avatarSmall}`]: {
        marginLeft: 4,
        marginRight: -4,
        width: 18,
        height: 18,
        fontSize: theme.typography.pxToRem(10)
      },
      [`& .${chipClasses_default.icon}`]: _extends({
        marginLeft: 5,
        marginRight: -6
      }, ownerState.size === "small" && {
        fontSize: 18,
        marginLeft: 4,
        marginRight: -4
      }, ownerState.iconColor === ownerState.color && _extends({
        color: theme.vars ? theme.vars.palette.Chip.defaultIconColor : textColor
      }, ownerState.color !== "default" && {
        color: "inherit"
      })),
      [`& .${chipClasses_default.deleteIcon}`]: _extends({
        WebkitTapHighlightColor: "transparent",
        color: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.26)` : (0, import_system18.alpha)(theme.palette.text.primary, 0.26),
        fontSize: 22,
        cursor: "pointer",
        margin: "0 5px 0 -6px",
        "&:hover": {
          color: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / 0.4)` : (0, import_system18.alpha)(theme.palette.text.primary, 0.4)
        }
      }, ownerState.size === "small" && {
        fontSize: 16,
        marginRight: 4,
        marginLeft: -4
      }, ownerState.color !== "default" && {
        color: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].contrastTextChannel} / 0.7)` : (0, import_system18.alpha)(theme.palette[ownerState.color].contrastText, 0.7),
        "&:hover, &:active": {
          color: (theme.vars || theme).palette[ownerState.color].contrastText
        }
      })
    }, ownerState.size === "small" && {
      height: 24
    }, ownerState.color !== "default" && {
      backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
      color: (theme.vars || theme).palette[ownerState.color].contrastText
    }, ownerState.onDelete && {
      [`&.${chipClasses_default.focusVisible}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, import_system18.alpha)(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
      }
    }, ownerState.onDelete && ownerState.color !== "default" && {
      [`&.${chipClasses_default.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
      }
    });
  }, ({
    theme,
    ownerState
  }) => _extends({}, ownerState.clickable && {
    userSelect: "none",
    WebkitTapHighlightColor: "transparent",
    cursor: "pointer",
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : (0, import_system18.alpha)(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity)
    },
    [`&.${chipClasses_default.focusVisible}`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selectedChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, import_system18.alpha)(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
    },
    "&:active": {
      boxShadow: (theme.vars || theme).shadows[1]
    }
  }, ownerState.clickable && ownerState.color !== "default" && {
    [`&:hover, &.${chipClasses_default.focusVisible}`]: {
      backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
    }
  }), ({
    theme,
    ownerState
  }) => _extends({}, ownerState.variant === "outlined" && {
    backgroundColor: "transparent",
    border: theme.vars ? `1px solid ${theme.vars.palette.Chip.defaultBorder}` : `1px solid ${theme.palette.mode === "light" ? theme.palette.grey[400] : theme.palette.grey[700]}`,
    [`&.${chipClasses_default.clickable}:hover`]: {
      backgroundColor: (theme.vars || theme).palette.action.hover
    },
    [`&.${chipClasses_default.focusVisible}`]: {
      backgroundColor: (theme.vars || theme).palette.action.focus
    },
    [`& .${chipClasses_default.avatar}`]: {
      marginLeft: 4
    },
    [`& .${chipClasses_default.avatarSmall}`]: {
      marginLeft: 2
    },
    [`& .${chipClasses_default.icon}`]: {
      marginLeft: 4
    },
    [`& .${chipClasses_default.iconSmall}`]: {
      marginLeft: 2
    },
    [`& .${chipClasses_default.deleteIcon}`]: {
      marginRight: 5
    },
    [`& .${chipClasses_default.deleteIconSmall}`]: {
      marginRight: 3
    }
  }, ownerState.variant === "outlined" && ownerState.color !== "default" && {
    color: (theme.vars || theme).palette[ownerState.color].main,
    border: `1px solid ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.7)` : (0, import_system18.alpha)(theme.palette[ownerState.color].main, 0.7)}`,
    [`&.${chipClasses_default.clickable}:hover`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_system18.alpha)(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity)
    },
    [`&.${chipClasses_default.focusVisible}`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.focusOpacity})` : (0, import_system18.alpha)(theme.palette[ownerState.color].main, theme.palette.action.focusOpacity)
    },
    [`& .${chipClasses_default.deleteIcon}`]: {
      color: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.7)` : (0, import_system18.alpha)(theme.palette[ownerState.color].main, 0.7),
      "&:hover, &:active": {
        color: (theme.vars || theme).palette[ownerState.color].main
      }
    }
  }));
  var ChipLabel = styled_default("span", {
    name: "MuiChip",
    slot: "Label",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      const {
        size: size2
      } = ownerState;
      return [styles7.label, styles7[`label${capitalize_default(size2)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    overflow: "hidden",
    textOverflow: "ellipsis",
    paddingLeft: 12,
    paddingRight: 12,
    whiteSpace: "nowrap"
  }, ownerState.size === "small" && {
    paddingLeft: 8,
    paddingRight: 8
  }));
  function isDeleteKeyboardEvent(keyboardEvent) {
    return keyboardEvent.key === "Backspace" || keyboardEvent.key === "Delete";
  }
  var Chip = /* @__PURE__ */ React106.forwardRef(function Chip2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiChip"
    });
    const {
      avatar: avatarProp,
      className,
      clickable: clickableProp,
      color = "default",
      component: ComponentProp,
      deleteIcon: deleteIconProp,
      disabled = false,
      icon: iconProp,
      label,
      onClick,
      onDelete,
      onKeyDown,
      onKeyUp,
      size: size2 = "medium",
      variant = "filled",
      tabIndex,
      skipFocusWhenDisabled = false
      // TODO v6: Rename to `focusableWhenDisabled`.
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded54);
    const chipRef = React106.useRef(null);
    const handleRef = useForkRef_default(chipRef, ref);
    const handleDeleteIconClick = (event) => {
      event.stopPropagation();
      if (onDelete) {
        onDelete(event);
      }
    };
    const handleKeyDown2 = (event) => {
      if (event.currentTarget === event.target && isDeleteKeyboardEvent(event)) {
        event.preventDefault();
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
    };
    const handleKeyUp = (event) => {
      if (event.currentTarget === event.target) {
        if (onDelete && isDeleteKeyboardEvent(event)) {
          onDelete(event);
        } else if (event.key === "Escape" && chipRef.current) {
          chipRef.current.blur();
        }
      }
      if (onKeyUp) {
        onKeyUp(event);
      }
    };
    const clickable = clickableProp !== false && onClick ? true : clickableProp;
    const component = clickable || onDelete ? ButtonBase_default : ComponentProp || "div";
    const ownerState = _extends({}, props, {
      component,
      disabled,
      size: size2,
      color,
      iconColor: /* @__PURE__ */ React106.isValidElement(iconProp) ? iconProp.props.color || color : color,
      onDelete: !!onDelete,
      clickable,
      variant
    });
    const classes = useUtilityClasses36(ownerState);
    const moreProps = component === ButtonBase_default ? _extends({
      component: ComponentProp || "div",
      focusVisibleClassName: classes.focusVisible
    }, onDelete && {
      disableRipple: true
    }) : {};
    let deleteIcon = null;
    if (onDelete) {
      deleteIcon = deleteIconProp && /* @__PURE__ */ React106.isValidElement(deleteIconProp) ? /* @__PURE__ */ React106.cloneElement(deleteIconProp, {
        className: clsx_default(deleteIconProp.props.className, classes.deleteIcon),
        onClick: handleDeleteIconClick
      }) : /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(Cancel_default, {
        className: clsx_default(classes.deleteIcon),
        onClick: handleDeleteIconClick
      });
    }
    let avatar = null;
    if (avatarProp && /* @__PURE__ */ React106.isValidElement(avatarProp)) {
      avatar = /* @__PURE__ */ React106.cloneElement(avatarProp, {
        className: clsx_default(classes.avatar, avatarProp.props.className)
      });
    }
    let icon = null;
    if (iconProp && /* @__PURE__ */ React106.isValidElement(iconProp)) {
      icon = /* @__PURE__ */ React106.cloneElement(iconProp, {
        className: clsx_default(classes.icon, iconProp.props.className)
      });
    }
    if (true) {
      if (avatar && icon) {
        console.error("MUI: The Chip component can not handle the avatar and the icon prop at the same time. Pick one.");
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime77.jsxs)(ChipRoot, _extends({
      as: component,
      className: clsx_default(classes.root, className),
      disabled: clickable && disabled ? true : void 0,
      onClick,
      onKeyDown: handleKeyDown2,
      onKeyUp: handleKeyUp,
      ref: handleRef,
      tabIndex: skipFocusWhenDisabled && disabled ? -1 : tabIndex,
      ownerState
    }, moreProps, other, {
      children: [avatar || icon, /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(ChipLabel, {
        className: clsx_default(classes.label),
        ownerState,
        children: label
      }), deleteIcon]
    }));
  });
  true ? Chip.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The Avatar element to display.
     */
    avatar: import_prop_types50.default.element,
    /**
     * This prop isn't supported.
     * Use the `component` prop if you need to change the children structure.
     */
    children: unsupportedProp_default,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types50.default.object,
    /**
     * @ignore
     */
    className: import_prop_types50.default.string,
    /**
     * If `true`, the chip will appear clickable, and will raise when pressed,
     * even if the onClick prop is not defined.
     * If `false`, the chip will not appear clickable, even if onClick prop is defined.
     * This can be used, for example,
     * along with the component prop to indicate an anchor Chip is clickable.
     * Note: this controls the UI and does not affect the onClick event.
     */
    clickable: import_prop_types50.default.bool,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'default'
     */
    color: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types50.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types50.default.elementType,
    /**
     * Override the default delete icon element. Shown only if `onDelete` is set.
     */
    deleteIcon: import_prop_types50.default.element,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types50.default.bool,
    /**
     * Icon element.
     */
    icon: import_prop_types50.default.element,
    /**
     * The content of the component.
     */
    label: import_prop_types50.default.node,
    /**
     * @ignore
     */
    onClick: import_prop_types50.default.func,
    /**
     * Callback fired when the delete icon is clicked.
     * If set, the delete icon will be shown.
     */
    onDelete: import_prop_types50.default.func,
    /**
     * @ignore
     */
    onKeyDown: import_prop_types50.default.func,
    /**
     * @ignore
     */
    onKeyUp: import_prop_types50.default.func,
    /**
     * The size of the component.
     * @default 'medium'
     */
    size: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["medium", "small"]), import_prop_types50.default.string]),
    /**
     * If `true`, allows the disabled chip to escape focus.
     * If `false`, allows the disabled chip to receive focus.
     * @default false
     */
    skipFocusWhenDisabled: import_prop_types50.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types50.default.oneOfType([import_prop_types50.default.arrayOf(import_prop_types50.default.oneOfType([import_prop_types50.default.func, import_prop_types50.default.object, import_prop_types50.default.bool])), import_prop_types50.default.func, import_prop_types50.default.object]),
    /**
     * @ignore
     */
    tabIndex: import_prop_types50.default.number,
    /**
     * The variant to use.
     * @default 'filled'
     */
    variant: import_prop_types50.default.oneOfType([import_prop_types50.default.oneOf(["filled", "outlined"]), import_prop_types50.default.string])
  } : void 0;
  var Chip_default = Chip;

  // node_modules/@mui/material/Input/inputClasses.js
  init_extends();
  var import_utils113 = __toESM(require_utils());
  var import_generateUtilityClass40 = __toESM(require_generateUtilityClass3());

  // node_modules/@mui/material/InputBase/InputBase.js
  init_extends();
  var React110 = __toESM(require_react());
  var import_prop_types52 = __toESM(require_prop_types());
  var import_utils111 = __toESM(require_utils());

  // node_modules/@mui/material/FormControl/formControlState.js
  function formControlState({
    props,
    states,
    muiFormControl
  }) {
    return states.reduce((acc, state) => {
      acc[state] = props[state];
      if (muiFormControl) {
        if (typeof props[state] === "undefined") {
          acc[state] = muiFormControl[state];
        }
      }
      return acc;
    }, {});
  }

  // node_modules/@mui/material/FormControl/FormControlContext.js
  var React107 = __toESM(require_react());
  var FormControlContext2 = /* @__PURE__ */ React107.createContext(void 0);
  if (true) {
    FormControlContext2.displayName = "FormControlContext";
  }
  var FormControlContext_default = FormControlContext2;

  // node_modules/@mui/material/FormControl/useFormControl.js
  var React108 = __toESM(require_react());
  function useFormControl() {
    return React108.useContext(FormControlContext_default);
  }

  // node_modules/@mui/material/utils/useEnhancedEffect.js
  var import_utils109 = __toESM(require_utils());
  var useEnhancedEffect_default = import_utils109.unstable_useEnhancedEffect;

  // node_modules/@mui/material/GlobalStyles/GlobalStyles.js
  init_extends();
  var React109 = __toESM(require_react());
  var import_prop_types51 = __toESM(require_prop_types());
  var import_system19 = __toESM(require_system());
  var import_jsx_runtime78 = __toESM(require_jsx_runtime());
  function GlobalStyles(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(import_system19.GlobalStyles, _extends({}, props, {
      defaultTheme: defaultTheme_default,
      themeId: identifier_default
    }));
  }
  true ? GlobalStyles.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The styles you want to apply globally.
     */
    styles: import_prop_types51.default.oneOfType([import_prop_types51.default.array, import_prop_types51.default.func, import_prop_types51.default.number, import_prop_types51.default.object, import_prop_types51.default.string, import_prop_types51.default.bool])
  } : void 0;
  var GlobalStyles_default = GlobalStyles;

  // node_modules/@mui/material/InputBase/utils.js
  function hasValue2(value) {
    return value != null && !(Array.isArray(value) && value.length === 0);
  }
  function isFilled(obj, SSR = false) {
    return obj && (hasValue2(obj.value) && obj.value !== "" || SSR && hasValue2(obj.defaultValue) && obj.defaultValue !== "");
  }
  function isAdornedStart(obj) {
    return obj.startAdornment;
  }

  // node_modules/@mui/material/InputBase/inputBaseClasses.js
  var import_utils110 = __toESM(require_utils());
  var import_generateUtilityClass39 = __toESM(require_generateUtilityClass3());
  function getInputBaseUtilityClass(slot) {
    return (0, import_generateUtilityClass39.default)("MuiInputBase", slot);
  }
  var inputBaseClasses = (0, import_utils110.unstable_generateUtilityClasses)("MuiInputBase", ["root", "formControl", "focused", "disabled", "adornedStart", "adornedEnd", "error", "sizeSmall", "multiline", "colorSecondary", "fullWidth", "hiddenLabel", "readOnly", "input", "inputSizeSmall", "inputMultiline", "inputTypeSearch", "inputAdornedStart", "inputAdornedEnd", "inputHiddenLabel"]);
  var inputBaseClasses_default = inputBaseClasses;

  // node_modules/@mui/material/InputBase/InputBase.js
  var import_jsx_runtime79 = __toESM(require_jsx_runtime());
  var import_jsx_runtime80 = __toESM(require_jsx_runtime());
  var _excluded55 = ["aria-describedby", "autoComplete", "autoFocus", "className", "color", "components", "componentsProps", "defaultValue", "disabled", "disableInjectingGlobalStyles", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderSuffix", "rows", "size", "slotProps", "slots", "startAdornment", "type", "value"];
  var rootOverridesResolver = (props, styles7) => {
    const {
      ownerState
    } = props;
    return [styles7.root, ownerState.formControl && styles7.formControl, ownerState.startAdornment && styles7.adornedStart, ownerState.endAdornment && styles7.adornedEnd, ownerState.error && styles7.error, ownerState.size === "small" && styles7.sizeSmall, ownerState.multiline && styles7.multiline, ownerState.color && styles7[`color${capitalize_default(ownerState.color)}`], ownerState.fullWidth && styles7.fullWidth, ownerState.hiddenLabel && styles7.hiddenLabel];
  };
  var inputOverridesResolver = (props, styles7) => {
    const {
      ownerState
    } = props;
    return [styles7.input, ownerState.size === "small" && styles7.inputSizeSmall, ownerState.multiline && styles7.inputMultiline, ownerState.type === "search" && styles7.inputTypeSearch, ownerState.startAdornment && styles7.inputAdornedStart, ownerState.endAdornment && styles7.inputAdornedEnd, ownerState.hiddenLabel && styles7.inputHiddenLabel];
  };
  var useUtilityClasses37 = (ownerState) => {
    const {
      classes,
      color,
      disabled,
      error,
      endAdornment,
      focused,
      formControl,
      fullWidth,
      hiddenLabel,
      multiline,
      readOnly,
      size: size2,
      startAdornment,
      type
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color)}`, disabled && "disabled", error && "error", fullWidth && "fullWidth", focused && "focused", formControl && "formControl", size2 && size2 !== "medium" && `size${capitalize_default(size2)}`, multiline && "multiline", startAdornment && "adornedStart", endAdornment && "adornedEnd", hiddenLabel && "hiddenLabel", readOnly && "readOnly"],
      input: ["input", disabled && "disabled", type === "search" && "inputTypeSearch", multiline && "inputMultiline", size2 === "small" && "inputSizeSmall", hiddenLabel && "inputHiddenLabel", startAdornment && "inputAdornedStart", endAdornment && "inputAdornedEnd", readOnly && "readOnly"]
    };
    return (0, base_exports.unstable_composeClasses)(slots, getInputBaseUtilityClass, classes);
  };
  var InputBaseRoot = styled_default("div", {
    name: "MuiInputBase",
    slot: "Root",
    overridesResolver: rootOverridesResolver
  })(({
    theme,
    ownerState
  }) => _extends({}, theme.typography.body1, {
    color: (theme.vars || theme).palette.text.primary,
    lineHeight: "1.4375em",
    // 23px
    boxSizing: "border-box",
    // Prevent padding issue with fullWidth.
    position: "relative",
    cursor: "text",
    display: "inline-flex",
    alignItems: "center",
    [`&.${inputBaseClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.text.disabled,
      cursor: "default"
    }
  }, ownerState.multiline && _extends({
    padding: "4px 0 5px"
  }, ownerState.size === "small" && {
    paddingTop: 1
  }), ownerState.fullWidth && {
    width: "100%"
  }));
  var InputBaseComponent = styled_default("input", {
    name: "MuiInputBase",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(({
    theme,
    ownerState
  }) => {
    const light2 = theme.palette.mode === "light";
    const placeholder = _extends({
      color: "currentColor"
    }, theme.vars ? {
      opacity: theme.vars.opacity.inputPlaceholder
    } : {
      opacity: light2 ? 0.42 : 0.5
    }, {
      transition: theme.transitions.create("opacity", {
        duration: theme.transitions.duration.shorter
      })
    });
    const placeholderHidden = {
      opacity: "0 !important"
    };
    const placeholderVisible = theme.vars ? {
      opacity: theme.vars.opacity.inputPlaceholder
    } : {
      opacity: light2 ? 0.42 : 0.5
    };
    return _extends({
      font: "inherit",
      letterSpacing: "inherit",
      color: "currentColor",
      padding: "4px 0 5px",
      border: 0,
      boxSizing: "content-box",
      background: "none",
      height: "1.4375em",
      // Reset 23pxthe native input line-height
      margin: 0,
      // Reset for Safari
      WebkitTapHighlightColor: "transparent",
      display: "block",
      // Make the flex item shrink with Firefox
      minWidth: 0,
      width: "100%",
      // Fix IE11 width issue
      animationName: "mui-auto-fill-cancel",
      animationDuration: "10ms",
      "&::-webkit-input-placeholder": placeholder,
      "&::-moz-placeholder": placeholder,
      // Firefox 19+
      "&:-ms-input-placeholder": placeholder,
      // IE11
      "&::-ms-input-placeholder": placeholder,
      // Edge
      "&:focus": {
        outline: 0
      },
      // Reset Firefox invalid required input style
      "&:invalid": {
        boxShadow: "none"
      },
      "&::-webkit-search-decoration": {
        // Remove the padding when type=search.
        WebkitAppearance: "none"
      },
      // Show and hide the placeholder logic
      [`label[data-shrink=false] + .${inputBaseClasses_default.formControl} &`]: {
        "&::-webkit-input-placeholder": placeholderHidden,
        "&::-moz-placeholder": placeholderHidden,
        // Firefox 19+
        "&:-ms-input-placeholder": placeholderHidden,
        // IE11
        "&::-ms-input-placeholder": placeholderHidden,
        // Edge
        "&:focus::-webkit-input-placeholder": placeholderVisible,
        "&:focus::-moz-placeholder": placeholderVisible,
        // Firefox 19+
        "&:focus:-ms-input-placeholder": placeholderVisible,
        // IE11
        "&:focus::-ms-input-placeholder": placeholderVisible
        // Edge
      },
      [`&.${inputBaseClasses_default.disabled}`]: {
        opacity: 1,
        // Reset iOS opacity
        WebkitTextFillColor: (theme.vars || theme).palette.text.disabled
        // Fix opacity Safari bug
      },
      "&:-webkit-autofill": {
        animationDuration: "5000s",
        animationName: "mui-auto-fill"
      }
    }, ownerState.size === "small" && {
      paddingTop: 1
    }, ownerState.multiline && {
      height: "auto",
      resize: "none",
      padding: 0,
      paddingTop: 0
    }, ownerState.type === "search" && {
      // Improve type search style.
      MozAppearance: "textfield"
    });
  });
  var inputGlobalStyles = /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(GlobalStyles_default, {
    styles: {
      "@keyframes mui-auto-fill": {
        from: {
          display: "block"
        }
      },
      "@keyframes mui-auto-fill-cancel": {
        from: {
          display: "block"
        }
      }
    }
  });
  var InputBase = /* @__PURE__ */ React110.forwardRef(function InputBase2(inProps, ref) {
    var _slotProps$input;
    const props = useThemeProps({
      props: inProps,
      name: "MuiInputBase"
    });
    const {
      "aria-describedby": ariaDescribedby,
      autoComplete,
      autoFocus,
      className,
      components = {},
      componentsProps = {},
      defaultValue,
      disabled,
      disableInjectingGlobalStyles,
      endAdornment,
      fullWidth = false,
      id,
      inputComponent = "input",
      inputProps: inputPropsProp = {},
      inputRef: inputRefProp,
      maxRows,
      minRows,
      multiline = false,
      name,
      onBlur,
      onChange,
      onClick,
      onFocus,
      onKeyDown,
      onKeyUp,
      placeholder,
      readOnly,
      renderSuffix,
      rows,
      slotProps = {},
      slots = {},
      startAdornment,
      type = "text",
      value: valueProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded55);
    const value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;
    const {
      current: isControlled
    } = React110.useRef(value != null);
    const inputRef = React110.useRef();
    const handleInputRefWarning = React110.useCallback((instance) => {
      if (true) {
        if (instance && instance.nodeName !== "INPUT" && !instance.focus) {
          console.error(["MUI: You have provided a `inputComponent` to the input component", "that does not correctly handle the `ref` prop.", "Make sure the `ref` prop is called with a HTMLInputElement."].join("\n"));
        }
      }
    }, []);
    const handleInputRef = useForkRef_default(inputRef, inputRefProp, inputPropsProp.ref, handleInputRefWarning);
    const [focused, setFocused] = React110.useState(false);
    const muiFormControl = useFormControl();
    if (true) {
      React110.useEffect(() => {
        if (muiFormControl) {
          return muiFormControl.registerEffect();
        }
        return void 0;
      }, [muiFormControl]);
    }
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "disabled", "error", "hiddenLabel", "size", "required", "filled"]
    });
    fcs.focused = muiFormControl ? muiFormControl.focused : focused;
    React110.useEffect(() => {
      if (!muiFormControl && disabled && focused) {
        setFocused(false);
        if (onBlur) {
          onBlur();
        }
      }
    }, [muiFormControl, disabled, focused, onBlur]);
    const onFilled = muiFormControl && muiFormControl.onFilled;
    const onEmpty = muiFormControl && muiFormControl.onEmpty;
    const checkDirty = React110.useCallback((obj) => {
      if (isFilled(obj)) {
        if (onFilled) {
          onFilled();
        }
      } else if (onEmpty) {
        onEmpty();
      }
    }, [onFilled, onEmpty]);
    useEnhancedEffect_default(() => {
      if (isControlled) {
        checkDirty({
          value
        });
      }
    }, [value, checkDirty, isControlled]);
    const handleFocus = (event) => {
      if (fcs.disabled) {
        event.stopPropagation();
        return;
      }
      if (onFocus) {
        onFocus(event);
      }
      if (inputPropsProp.onFocus) {
        inputPropsProp.onFocus(event);
      }
      if (muiFormControl && muiFormControl.onFocus) {
        muiFormControl.onFocus(event);
      } else {
        setFocused(true);
      }
    };
    const handleBlur2 = (event) => {
      if (onBlur) {
        onBlur(event);
      }
      if (inputPropsProp.onBlur) {
        inputPropsProp.onBlur(event);
      }
      if (muiFormControl && muiFormControl.onBlur) {
        muiFormControl.onBlur(event);
      } else {
        setFocused(false);
      }
    };
    const handleChange = (event, ...args) => {
      if (!isControlled) {
        const element = event.target || inputRef.current;
        if (element == null) {
          throw new Error(true ? `MUI: Expected valid input target. Did you use a custom \`inputComponent\` and forget to forward refs? See https://mui.com/r/input-component-ref-interface for more info.` : (0, import_utils.formatMuiErrorMessage)(1));
        }
        checkDirty({
          value: element.value
        });
      }
      if (inputPropsProp.onChange) {
        inputPropsProp.onChange(event, ...args);
      }
      if (onChange) {
        onChange(event, ...args);
      }
    };
    React110.useEffect(() => {
      checkDirty(inputRef.current);
    }, []);
    const handleClick = (event) => {
      if (inputRef.current && event.currentTarget === event.target) {
        inputRef.current.focus();
      }
      if (onClick) {
        onClick(event);
      }
    };
    let InputComponent = inputComponent;
    let inputProps = inputPropsProp;
    if (multiline && InputComponent === "input") {
      if (rows) {
        if (true) {
          if (minRows || maxRows) {
            console.warn("MUI: You can not use the `minRows` or `maxRows` props when the input `rows` prop is set.");
          }
        }
        inputProps = _extends({
          type: void 0,
          minRows: rows,
          maxRows: rows
        }, inputProps);
      } else {
        inputProps = _extends({
          type: void 0,
          maxRows,
          minRows
        }, inputProps);
      }
      InputComponent = TextareaAutosize;
    }
    const handleAutoFill = (event) => {
      checkDirty(event.animationName === "mui-auto-fill-cancel" ? inputRef.current : {
        value: "x"
      });
    };
    React110.useEffect(() => {
      if (muiFormControl) {
        muiFormControl.setAdornedStart(Boolean(startAdornment));
      }
    }, [muiFormControl, startAdornment]);
    const ownerState = _extends({}, props, {
      color: fcs.color || "primary",
      disabled: fcs.disabled,
      endAdornment,
      error: fcs.error,
      focused: fcs.focused,
      formControl: muiFormControl,
      fullWidth,
      hiddenLabel: fcs.hiddenLabel,
      multiline,
      size: fcs.size,
      startAdornment,
      type
    });
    const classes = useUtilityClasses37(ownerState);
    const Root = slots.root || components.Root || InputBaseRoot;
    const rootProps = slotProps.root || componentsProps.root || {};
    const Input5 = slots.input || components.Input || InputBaseComponent;
    inputProps = _extends({}, inputProps, (_slotProps$input = slotProps.input) != null ? _slotProps$input : componentsProps.input);
    return /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)(React110.Fragment, {
      children: [!disableInjectingGlobalStyles && inputGlobalStyles, /* @__PURE__ */ (0, import_jsx_runtime80.jsxs)(Root, _extends({}, rootProps, !isHostComponent(Root) && {
        ownerState: _extends({}, ownerState, rootProps.ownerState)
      }, {
        ref,
        onClick: handleClick
      }, other, {
        className: clsx_default(classes.root, rootProps.className, className, readOnly && "MuiInputBase-readOnly"),
        children: [startAdornment, /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(FormControlContext_default.Provider, {
          value: null,
          children: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(Input5, _extends({
            ownerState,
            "aria-invalid": fcs.error,
            "aria-describedby": ariaDescribedby,
            autoComplete,
            autoFocus,
            defaultValue,
            disabled: fcs.disabled,
            id,
            onAnimationStart: handleAutoFill,
            name,
            placeholder,
            readOnly,
            required: fcs.required,
            rows,
            value,
            onKeyDown,
            onKeyUp,
            type
          }, inputProps, !isHostComponent(Input5) && {
            as: InputComponent,
            ownerState: _extends({}, ownerState, inputProps.ownerState)
          }, {
            ref: handleInputRef,
            className: clsx_default(classes.input, inputProps.className, readOnly && "MuiInputBase-readOnly"),
            onBlur: handleBlur2,
            onChange: handleChange,
            onFocus: handleFocus
          }))
        }), endAdornment, renderSuffix ? renderSuffix(_extends({}, fcs, {
          startAdornment
        })) : null]
      }))]
    });
  });
  true ? InputBase.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    "aria-describedby": import_prop_types52.default.string,
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: import_prop_types52.default.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: import_prop_types52.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types52.default.object,
    /**
     * @ignore
     */
    className: import_prop_types52.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: import_prop_types52.default.oneOfType([import_prop_types52.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), import_prop_types52.default.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types52.default.shape({
      Input: import_prop_types52.default.elementType,
      Root: import_prop_types52.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types52.default.shape({
      input: import_prop_types52.default.object,
      root: import_prop_types52.default.object
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types52.default.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: import_prop_types52.default.bool,
    /**
     * If `true`, GlobalStyles for the auto-fill keyframes will not be injected/removed on mount/unmount. Make sure to inject them at the top of your application.
     * This option is intended to help with boosting the initial rendering performance if you are loading a big amount of Input components at once.
     * @default false
     */
    disableInjectingGlobalStyles: import_prop_types52.default.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: import_prop_types52.default.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: import_prop_types52.default.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types52.default.bool,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types52.default.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: import_utils111.elementTypeAcceptingRef,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: import_prop_types52.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: import_utils111.refType,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: import_prop_types52.default.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: import_prop_types52.default.oneOfType([import_prop_types52.default.number, import_prop_types52.default.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: import_prop_types52.default.oneOfType([import_prop_types52.default.number, import_prop_types52.default.string]),
    /**
     * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: import_prop_types52.default.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types52.default.string,
    /**
     * Callback fired when the `input` is blurred.
     *
     * Notice that the first argument (event) might be undefined.
     */
    onBlur: import_prop_types52.default.func,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types52.default.func,
    /**
     * @ignore
     */
    onClick: import_prop_types52.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types52.default.func,
    /**
     * Callback fired when the `input` doesn't satisfy its constraints.
     */
    onInvalid: import_prop_types52.default.func,
    /**
     * @ignore
     */
    onKeyDown: import_prop_types52.default.func,
    /**
     * @ignore
     */
    onKeyUp: import_prop_types52.default.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: import_prop_types52.default.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: import_prop_types52.default.bool,
    /**
     * @ignore
     */
    renderSuffix: import_prop_types52.default.func,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: import_prop_types52.default.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: import_prop_types52.default.oneOfType([import_prop_types52.default.number, import_prop_types52.default.string]),
    /**
     * The size of the component.
     */
    size: import_prop_types52.default.oneOfType([import_prop_types52.default.oneOf(["medium", "small"]), import_prop_types52.default.string]),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types52.default.shape({
      input: import_prop_types52.default.object,
      root: import_prop_types52.default.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types52.default.shape({
      input: import_prop_types52.default.elementType,
      root: import_prop_types52.default.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: import_prop_types52.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types52.default.oneOfType([import_prop_types52.default.arrayOf(import_prop_types52.default.oneOfType([import_prop_types52.default.func, import_prop_types52.default.object, import_prop_types52.default.bool])), import_prop_types52.default.func, import_prop_types52.default.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: import_prop_types52.default.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: import_prop_types52.default.any
  } : void 0;
  var InputBase_default = InputBase;

  // node_modules/@mui/material/Input/inputClasses.js
  function getInputUtilityClass2(slot) {
    return (0, import_generateUtilityClass40.default)("MuiInput", slot);
  }
  var inputClasses2 = _extends({}, inputBaseClasses_default, (0, import_utils113.unstable_generateUtilityClasses)("MuiInput", ["root", "underline", "input"]));
  var inputClasses_default = inputClasses2;

  // node_modules/@mui/material/OutlinedInput/outlinedInputClasses.js
  init_extends();
  var import_utils114 = __toESM(require_utils());
  var import_generateUtilityClass41 = __toESM(require_generateUtilityClass3());
  function getOutlinedInputUtilityClass(slot) {
    return (0, import_generateUtilityClass41.default)("MuiOutlinedInput", slot);
  }
  var outlinedInputClasses = _extends({}, inputBaseClasses_default, (0, import_utils114.unstable_generateUtilityClasses)("MuiOutlinedInput", ["root", "notchedOutline", "input"]));
  var outlinedInputClasses_default = outlinedInputClasses;

  // node_modules/@mui/material/FilledInput/filledInputClasses.js
  init_extends();
  var import_utils115 = __toESM(require_utils());
  var import_generateUtilityClass42 = __toESM(require_generateUtilityClass3());
  function getFilledInputUtilityClass(slot) {
    return (0, import_generateUtilityClass42.default)("MuiFilledInput", slot);
  }
  var filledInputClasses = _extends({}, inputBaseClasses_default, (0, import_utils115.unstable_generateUtilityClasses)("MuiFilledInput", ["root", "underline", "input"]));
  var filledInputClasses_default = filledInputClasses;

  // node_modules/@mui/material/internal/svg-icons/ArrowDropDown.js
  var React111 = __toESM(require_react());
  var import_jsx_runtime81 = __toESM(require_jsx_runtime());
  var ArrowDropDown_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime81.jsx)("path", {
    d: "M7 10l5 5 5-5z"
  }), "ArrowDropDown");

  // node_modules/@mui/material/Autocomplete/autocompleteClasses.js
  var import_utils116 = __toESM(require_utils());
  var import_generateUtilityClass43 = __toESM(require_generateUtilityClass3());
  function getAutocompleteUtilityClass(slot) {
    return (0, import_generateUtilityClass43.default)("MuiAutocomplete", slot);
  }
  var autocompleteClasses = (0, import_utils116.unstable_generateUtilityClasses)("MuiAutocomplete", ["root", "expanded", "fullWidth", "focused", "focusVisible", "tag", "tagSizeSmall", "tagSizeMedium", "hasPopupIcon", "hasClearIcon", "inputRoot", "input", "inputFocused", "endAdornment", "clearIndicator", "popupIndicator", "popupIndicatorOpen", "popper", "popperDisablePortal", "paper", "listbox", "loading", "noOptions", "option", "groupLabel", "groupUl"]);
  var autocompleteClasses_default = autocompleteClasses;

  // node_modules/@mui/material/Autocomplete/Autocomplete.js
  var import_jsx_runtime82 = __toESM(require_jsx_runtime());
  var import_jsx_runtime83 = __toESM(require_jsx_runtime());
  var _ClearIcon;
  var _ArrowDropDownIcon;
  var _excluded56 = ["autoComplete", "autoHighlight", "autoSelect", "blurOnSelect", "ChipProps", "className", "clearIcon", "clearOnBlur", "clearOnEscape", "clearText", "closeText", "componentsProps", "defaultValue", "disableClearable", "disableCloseOnSelect", "disabled", "disabledItemsFocusable", "disableListWrap", "disablePortal", "filterOptions", "filterSelectedOptions", "forcePopupIcon", "freeSolo", "fullWidth", "getLimitTagsText", "getOptionDisabled", "getOptionLabel", "isOptionEqualToValue", "groupBy", "handleHomeEndKeys", "id", "includeInputInList", "inputValue", "limitTags", "ListboxComponent", "ListboxProps", "loading", "loadingText", "multiple", "noOptionsText", "onChange", "onClose", "onHighlightChange", "onInputChange", "onOpen", "open", "openOnFocus", "openText", "options", "PaperComponent", "PopperComponent", "popupIcon", "readOnly", "renderGroup", "renderInput", "renderOption", "renderTags", "selectOnFocus", "size", "slotProps", "value"];
  var _excluded211 = ["ref"];
  var useUtilityClasses38 = (ownerState) => {
    const {
      classes,
      disablePortal,
      expanded,
      focused,
      fullWidth,
      hasClearIcon,
      hasPopupIcon,
      inputFocused,
      popupOpen,
      size: size2
    } = ownerState;
    const slots = {
      root: ["root", expanded && "expanded", focused && "focused", fullWidth && "fullWidth", hasClearIcon && "hasClearIcon", hasPopupIcon && "hasPopupIcon"],
      inputRoot: ["inputRoot"],
      input: ["input", inputFocused && "inputFocused"],
      tag: ["tag", `tagSize${capitalize_default(size2)}`],
      endAdornment: ["endAdornment"],
      clearIndicator: ["clearIndicator"],
      popupIndicator: ["popupIndicator", popupOpen && "popupIndicatorOpen"],
      popper: ["popper", disablePortal && "popperDisablePortal"],
      paper: ["paper"],
      listbox: ["listbox"],
      loading: ["loading"],
      noOptions: ["noOptions"],
      option: ["option"],
      groupLabel: ["groupLabel"],
      groupUl: ["groupUl"]
    };
    return (0, base_exports.unstable_composeClasses)(slots, getAutocompleteUtilityClass, classes);
  };
  var AutocompleteRoot = styled_default("div", {
    name: "MuiAutocomplete",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      const {
        fullWidth,
        hasClearIcon,
        hasPopupIcon,
        inputFocused,
        size: size2
      } = ownerState;
      return [{
        [`& .${autocompleteClasses_default.tag}`]: styles7.tag
      }, {
        [`& .${autocompleteClasses_default.tag}`]: styles7[`tagSize${capitalize_default(size2)}`]
      }, {
        [`& .${autocompleteClasses_default.inputRoot}`]: styles7.inputRoot
      }, {
        [`& .${autocompleteClasses_default.input}`]: styles7.input
      }, {
        [`& .${autocompleteClasses_default.input}`]: inputFocused && styles7.inputFocused
      }, styles7.root, fullWidth && styles7.fullWidth, hasPopupIcon && styles7.hasPopupIcon, hasClearIcon && styles7.hasClearIcon];
    }
  })(({
    ownerState
  }) => _extends({
    [`&.${autocompleteClasses_default.focused} .${autocompleteClasses_default.clearIndicator}`]: {
      visibility: "visible"
    },
    /* Avoid double tap issue on iOS */
    "@media (pointer: fine)": {
      [`&:hover .${autocompleteClasses_default.clearIndicator}`]: {
        visibility: "visible"
      }
    }
  }, ownerState.fullWidth && {
    width: "100%"
  }, {
    [`& .${autocompleteClasses_default.tag}`]: _extends({
      margin: 3,
      maxWidth: "calc(100% - 6px)"
    }, ownerState.size === "small" && {
      margin: 2,
      maxWidth: "calc(100% - 4px)"
    }),
    [`& .${autocompleteClasses_default.inputRoot}`]: {
      flexWrap: "wrap",
      [`.${autocompleteClasses_default.hasPopupIcon}&, .${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 26 + 4
      },
      [`.${autocompleteClasses_default.hasPopupIcon}.${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 52 + 4
      },
      [`& .${autocompleteClasses_default.input}`]: {
        width: 0,
        minWidth: 30
      }
    },
    [`& .${inputClasses_default.root}`]: {
      paddingBottom: 1,
      "& .MuiInput-input": {
        padding: "4px 4px 4px 0px"
      }
    },
    [`& .${inputClasses_default.root}.${inputBaseClasses_default.sizeSmall}`]: {
      [`& .${inputClasses_default.input}`]: {
        padding: "2px 4px 3px 0"
      }
    },
    [`& .${outlinedInputClasses_default.root}`]: {
      padding: 9,
      [`.${autocompleteClasses_default.hasPopupIcon}&, .${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 26 + 4 + 9
      },
      [`.${autocompleteClasses_default.hasPopupIcon}.${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 52 + 4 + 9
      },
      [`& .${autocompleteClasses_default.input}`]: {
        padding: "7.5px 4px 7.5px 5px"
      },
      [`& .${autocompleteClasses_default.endAdornment}`]: {
        right: 9
      }
    },
    [`& .${outlinedInputClasses_default.root}.${inputBaseClasses_default.sizeSmall}`]: {
      // Don't specify paddingRight, as it overrides the default value set when there is only
      // one of the popup or clear icon as the specificity is equal so the latter one wins
      paddingTop: 6,
      paddingBottom: 6,
      paddingLeft: 6,
      [`& .${autocompleteClasses_default.input}`]: {
        padding: "2.5px 4px 2.5px 8px"
      }
    },
    [`& .${filledInputClasses_default.root}`]: {
      paddingTop: 19,
      paddingLeft: 8,
      [`.${autocompleteClasses_default.hasPopupIcon}&, .${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 26 + 4 + 9
      },
      [`.${autocompleteClasses_default.hasPopupIcon}.${autocompleteClasses_default.hasClearIcon}&`]: {
        paddingRight: 52 + 4 + 9
      },
      [`& .${filledInputClasses_default.input}`]: {
        padding: "7px 4px"
      },
      [`& .${autocompleteClasses_default.endAdornment}`]: {
        right: 9
      }
    },
    [`& .${filledInputClasses_default.root}.${inputBaseClasses_default.sizeSmall}`]: {
      paddingBottom: 1,
      [`& .${filledInputClasses_default.input}`]: {
        padding: "2.5px 4px"
      }
    },
    [`& .${inputBaseClasses_default.hiddenLabel}`]: {
      paddingTop: 8
    },
    [`& .${filledInputClasses_default.root}.${inputBaseClasses_default.hiddenLabel}`]: {
      paddingTop: 0,
      paddingBottom: 0,
      [`& .${autocompleteClasses_default.input}`]: {
        paddingTop: 16,
        paddingBottom: 17
      }
    },
    [`& .${filledInputClasses_default.root}.${inputBaseClasses_default.hiddenLabel}.${inputBaseClasses_default.sizeSmall}`]: {
      [`& .${autocompleteClasses_default.input}`]: {
        paddingTop: 8,
        paddingBottom: 9
      }
    },
    [`& .${autocompleteClasses_default.input}`]: _extends({
      flexGrow: 1,
      textOverflow: "ellipsis",
      opacity: 0
    }, ownerState.inputFocused && {
      opacity: 1
    })
  }));
  var AutocompleteEndAdornment = styled_default("div", {
    name: "MuiAutocomplete",
    slot: "EndAdornment",
    overridesResolver: (props, styles7) => styles7.endAdornment
  })({
    // We use a position absolute to support wrapping tags.
    position: "absolute",
    right: 0,
    top: "calc(50% - 14px)"
    // Center vertically
  });
  var AutocompleteClearIndicator = styled_default(IconButton_default, {
    name: "MuiAutocomplete",
    slot: "ClearIndicator",
    overridesResolver: (props, styles7) => styles7.clearIndicator
  })({
    marginRight: -2,
    padding: 4,
    visibility: "hidden"
  });
  var AutocompletePopupIndicator = styled_default(IconButton_default, {
    name: "MuiAutocomplete",
    slot: "PopupIndicator",
    overridesResolver: ({
      ownerState
    }, styles7) => _extends({}, styles7.popupIndicator, ownerState.popupOpen && styles7.popupIndicatorOpen)
  })(({
    ownerState
  }) => _extends({
    padding: 2,
    marginRight: -2
  }, ownerState.popupOpen && {
    transform: "rotate(180deg)"
  }));
  var AutocompletePopper = styled_default(Popper_default, {
    name: "MuiAutocomplete",
    slot: "Popper",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${autocompleteClasses_default.option}`]: styles7.option
      }, styles7.popper, ownerState.disablePortal && styles7.popperDisablePortal];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    zIndex: (theme.vars || theme).zIndex.modal
  }, ownerState.disablePortal && {
    position: "absolute"
  }));
  var AutocompletePaper = styled_default(Paper_default, {
    name: "MuiAutocomplete",
    slot: "Paper",
    overridesResolver: (props, styles7) => styles7.paper
  })(({
    theme
  }) => _extends({}, theme.typography.body1, {
    overflow: "auto"
  }));
  var AutocompleteLoading = styled_default("div", {
    name: "MuiAutocomplete",
    slot: "Loading",
    overridesResolver: (props, styles7) => styles7.loading
  })(({
    theme
  }) => ({
    color: (theme.vars || theme).palette.text.secondary,
    padding: "14px 16px"
  }));
  var AutocompleteNoOptions = styled_default("div", {
    name: "MuiAutocomplete",
    slot: "NoOptions",
    overridesResolver: (props, styles7) => styles7.noOptions
  })(({
    theme
  }) => ({
    color: (theme.vars || theme).palette.text.secondary,
    padding: "14px 16px"
  }));
  var AutocompleteListbox = styled_default("div", {
    name: "MuiAutocomplete",
    slot: "Listbox",
    overridesResolver: (props, styles7) => styles7.listbox
  })(({
    theme
  }) => ({
    listStyle: "none",
    margin: 0,
    padding: "8px 0",
    maxHeight: "40vh",
    overflow: "auto",
    position: "relative",
    [`& .${autocompleteClasses_default.option}`]: {
      minHeight: 48,
      display: "flex",
      overflow: "hidden",
      justifyContent: "flex-start",
      alignItems: "center",
      cursor: "pointer",
      paddingTop: 6,
      boxSizing: "border-box",
      outline: "0",
      WebkitTapHighlightColor: "transparent",
      paddingBottom: 6,
      paddingLeft: 16,
      paddingRight: 16,
      [theme.breakpoints.up("sm")]: {
        minHeight: "auto"
      },
      [`&.${autocompleteClasses_default.focused}`]: {
        backgroundColor: (theme.vars || theme).palette.action.hover,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      },
      '&[aria-disabled="true"]': {
        opacity: (theme.vars || theme).palette.action.disabledOpacity,
        pointerEvents: "none"
      },
      [`&.${autocompleteClasses_default.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette.action.focus
      },
      '&[aria-selected="true"]': {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, import_system20.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity),
        [`&.${autocompleteClasses_default.focused}`]: {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : (0, import_system20.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: (theme.vars || theme).palette.action.selected
          }
        },
        [`&.${autocompleteClasses_default.focusVisible}`]: {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, import_system20.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
        }
      }
    }
  }));
  var AutocompleteGroupLabel = styled_default(ListSubheader_default, {
    name: "MuiAutocomplete",
    slot: "GroupLabel",
    overridesResolver: (props, styles7) => styles7.groupLabel
  })(({
    theme
  }) => ({
    backgroundColor: (theme.vars || theme).palette.background.paper,
    top: -8
  }));
  var AutocompleteGroupUl = styled_default("ul", {
    name: "MuiAutocomplete",
    slot: "GroupUl",
    overridesResolver: (props, styles7) => styles7.groupUl
  })({
    padding: 0,
    [`& .${autocompleteClasses_default.option}`]: {
      paddingLeft: 24
    }
  });
  var Autocomplete = /* @__PURE__ */ React112.forwardRef(function Autocomplete2(inProps, ref) {
    var _slotProps$clearIndic, _slotProps$paper, _slotProps$popper, _slotProps$popupIndic;
    const props = useThemeProps({
      props: inProps,
      name: "MuiAutocomplete"
    });
    const {
      autoComplete = false,
      autoHighlight = false,
      autoSelect = false,
      blurOnSelect = false,
      ChipProps,
      className,
      clearIcon = _ClearIcon || (_ClearIcon = /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(Close_default, {
        fontSize: "small"
      })),
      clearOnBlur = !props.freeSolo,
      clearOnEscape = false,
      clearText = "Clear",
      closeText = "Close",
      componentsProps = {},
      defaultValue = props.multiple ? [] : null,
      disableClearable = false,
      disableCloseOnSelect = false,
      disabled = false,
      disabledItemsFocusable = false,
      disableListWrap = false,
      disablePortal = false,
      filterSelectedOptions = false,
      forcePopupIcon = "auto",
      freeSolo = false,
      fullWidth = false,
      getLimitTagsText = (more) => `+${more}`,
      getOptionLabel: getOptionLabelProp,
      groupBy,
      handleHomeEndKeys = !props.freeSolo,
      includeInputInList = false,
      limitTags = -1,
      ListboxComponent = "ul",
      ListboxProps,
      loading = false,
      loadingText = "Loading\u2026",
      multiple = false,
      noOptionsText = "No options",
      openOnFocus = false,
      openText = "Open",
      PaperComponent = Paper_default,
      PopperComponent = Popper_default,
      popupIcon = _ArrowDropDownIcon || (_ArrowDropDownIcon = /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(ArrowDropDown_default, {})),
      readOnly = false,
      renderGroup: renderGroupProp,
      renderInput,
      renderOption: renderOptionProp,
      renderTags,
      selectOnFocus = !props.freeSolo,
      size: size2 = "medium",
      slotProps = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded56);
    const {
      getRootProps,
      getInputProps,
      getInputLabelProps,
      getPopupIndicatorProps,
      getClearProps,
      getTagProps,
      getListboxProps,
      getOptionProps,
      value,
      dirty,
      expanded,
      id,
      popupOpen,
      focused,
      focusedTag,
      anchorEl,
      setAnchorEl,
      inputValue,
      groupedOptions
    } = useAutocomplete(_extends({}, props, {
      componentName: "Autocomplete"
    }));
    const hasClearIcon = !disableClearable && !disabled && dirty && !readOnly;
    const hasPopupIcon = (!freeSolo || forcePopupIcon === true) && forcePopupIcon !== false;
    const {
      onMouseDown: handleInputMouseDown
    } = getInputProps();
    const {
      ref: externalListboxRef
    } = ListboxProps != null ? ListboxProps : {};
    const _getListboxProps = getListboxProps(), {
      ref: listboxRef
    } = _getListboxProps, otherListboxProps = _objectWithoutPropertiesLoose(_getListboxProps, _excluded211);
    const combinedListboxRef = useForkRef_default(listboxRef, externalListboxRef);
    const defaultGetOptionLabel = (option) => {
      var _option$label;
      return (_option$label = option.label) != null ? _option$label : option;
    };
    const getOptionLabel = getOptionLabelProp || defaultGetOptionLabel;
    const ownerState = _extends({}, props, {
      disablePortal,
      expanded,
      focused,
      fullWidth,
      getOptionLabel,
      hasClearIcon,
      hasPopupIcon,
      inputFocused: focusedTag === -1,
      popupOpen,
      size: size2
    });
    const classes = useUtilityClasses38(ownerState);
    let startAdornment;
    if (multiple && value.length > 0) {
      const getCustomizedTagProps = (params) => _extends({
        className: classes.tag,
        disabled
      }, getTagProps(params));
      if (renderTags) {
        startAdornment = renderTags(value, getCustomizedTagProps, ownerState);
      } else {
        startAdornment = value.map((option, index3) => /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(Chip_default, _extends({
          label: getOptionLabel(option),
          size: size2
        }, getCustomizedTagProps({
          index: index3
        }), ChipProps)));
      }
    }
    if (limitTags > -1 && Array.isArray(startAdornment)) {
      const more = startAdornment.length - limitTags;
      if (!focused && more > 0) {
        startAdornment = startAdornment.splice(0, limitTags);
        startAdornment.push(/* @__PURE__ */ (0, import_jsx_runtime82.jsx)("span", {
          className: classes.tag,
          children: getLimitTagsText(more)
        }, startAdornment.length));
      }
    }
    const defaultRenderGroup = (params) => /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)("li", {
      children: [/* @__PURE__ */ (0, import_jsx_runtime82.jsx)(AutocompleteGroupLabel, {
        className: classes.groupLabel,
        ownerState,
        component: "div",
        children: params.group
      }), /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(AutocompleteGroupUl, {
        className: classes.groupUl,
        ownerState,
        children: params.children
      })]
    }, params.key);
    const renderGroup = renderGroupProp || defaultRenderGroup;
    const defaultRenderOption = (props2, option) => /* @__PURE__ */ (0, import_jsx_runtime82.jsx)("li", _extends({}, props2, {
      children: getOptionLabel(option)
    }));
    const renderOption = renderOptionProp || defaultRenderOption;
    const renderListOption = (option, index3) => {
      const optionProps = getOptionProps({
        option,
        index: index3
      });
      return renderOption(_extends({}, optionProps, {
        className: classes.option
      }), option, {
        selected: optionProps["aria-selected"],
        index: index3,
        inputValue
      }, ownerState);
    };
    const clearIndicatorSlotProps = (_slotProps$clearIndic = slotProps.clearIndicator) != null ? _slotProps$clearIndic : componentsProps.clearIndicator;
    const paperSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : componentsProps.paper;
    const popperSlotProps = (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper;
    const popupIndicatorSlotProps = (_slotProps$popupIndic = slotProps.popupIndicator) != null ? _slotProps$popupIndic : componentsProps.popupIndicator;
    return /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)(React112.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime82.jsx)(AutocompleteRoot, _extends({
        ref,
        className: clsx_default(classes.root, className),
        ownerState
      }, getRootProps(other), {
        children: renderInput({
          id,
          disabled,
          fullWidth: true,
          size: size2 === "small" ? "small" : void 0,
          InputLabelProps: getInputLabelProps(),
          InputProps: _extends({
            ref: setAnchorEl,
            className: classes.inputRoot,
            startAdornment,
            onClick: (event) => {
              if (event.target === event.currentTarget) {
                handleInputMouseDown(event);
              }
            }
          }, (hasClearIcon || hasPopupIcon) && {
            endAdornment: /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)(AutocompleteEndAdornment, {
              className: classes.endAdornment,
              ownerState,
              children: [hasClearIcon ? /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(AutocompleteClearIndicator, _extends({}, getClearProps(), {
                "aria-label": clearText,
                title: clearText,
                ownerState
              }, clearIndicatorSlotProps, {
                className: clsx_default(classes.clearIndicator, clearIndicatorSlotProps == null ? void 0 : clearIndicatorSlotProps.className),
                children: clearIcon
              })) : null, hasPopupIcon ? /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(AutocompletePopupIndicator, _extends({}, getPopupIndicatorProps(), {
                disabled,
                "aria-label": popupOpen ? closeText : openText,
                title: popupOpen ? closeText : openText,
                ownerState
              }, popupIndicatorSlotProps, {
                className: clsx_default(classes.popupIndicator, popupIndicatorSlotProps == null ? void 0 : popupIndicatorSlotProps.className),
                children: popupIcon
              })) : null]
            })
          }),
          inputProps: _extends({
            className: classes.input,
            disabled,
            readOnly
          }, getInputProps())
        })
      })), anchorEl ? /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(AutocompletePopper, _extends({
        as: PopperComponent,
        disablePortal,
        style: {
          width: anchorEl ? anchorEl.clientWidth : null
        },
        ownerState,
        role: "presentation",
        anchorEl,
        open: popupOpen
      }, popperSlotProps, {
        className: clsx_default(classes.popper, popperSlotProps == null ? void 0 : popperSlotProps.className),
        children: /* @__PURE__ */ (0, import_jsx_runtime83.jsxs)(AutocompletePaper, _extends({
          ownerState,
          as: PaperComponent
        }, paperSlotProps, {
          className: clsx_default(classes.paper, paperSlotProps == null ? void 0 : paperSlotProps.className),
          children: [loading && groupedOptions.length === 0 ? /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(AutocompleteLoading, {
            className: classes.loading,
            ownerState,
            children: loadingText
          }) : null, groupedOptions.length === 0 && !freeSolo && !loading ? /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(AutocompleteNoOptions, {
            className: classes.noOptions,
            ownerState,
            role: "presentation",
            onMouseDown: (event) => {
              event.preventDefault();
            },
            children: noOptionsText
          }) : null, groupedOptions.length > 0 ? /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(AutocompleteListbox, _extends({
            as: ListboxComponent,
            className: classes.listbox,
            ownerState
          }, otherListboxProps, ListboxProps, {
            ref: combinedListboxRef,
            children: groupedOptions.map((option, index3) => {
              if (groupBy) {
                return renderGroup({
                  key: option.key,
                  group: option.group,
                  children: option.options.map((option2, index22) => renderListOption(option2, option.index + index22))
                });
              }
              return renderListOption(option, index3);
            })
          })) : null]
        }))
      })) : null]
    });
  });
  true ? Autocomplete.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * If `true`, the portion of the selected suggestion that has not been typed by the user,
     * known as the completion string, appears inline after the input cursor in the textbox.
     * The inline completion string is visually highlighted and has a selected state.
     * @default false
     */
    autoComplete: import_prop_types53.default.bool,
    /**
     * If `true`, the first option is automatically highlighted.
     * @default false
     */
    autoHighlight: import_prop_types53.default.bool,
    /**
     * If `true`, the selected option becomes the value of the input
     * when the Autocomplete loses focus unless the user chooses
     * a different option or changes the character string in the input.
     *
     * When using `freeSolo` mode, the typed value will be the input value
     * if the Autocomplete loses focus without highlighting an option.
     * @default false
     */
    autoSelect: import_prop_types53.default.bool,
    /**
     * Control if the input should be blurred when an option is selected:
     *
     * - `false` the input is not blurred.
     * - `true` the input is always blurred.
     * - `touch` the input is blurred after a touch event.
     * - `mouse` the input is blurred after a mouse event.
     * @default false
     */
    blurOnSelect: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["mouse", "touch"]), import_prop_types53.default.bool]),
    /**
     * Props applied to the [`Chip`](/material-ui/api/chip/) element.
     */
    ChipProps: import_prop_types53.default.object,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types53.default.object,
    /**
     * @ignore
     */
    className: import_prop_types53.default.string,
    /**
     * The icon to display in place of the default clear icon.
     * @default <ClearIcon fontSize="small" />
     */
    clearIcon: import_prop_types53.default.node,
    /**
     * If `true`, the input's text is cleared on blur if no value is selected.
     *
     * Set to `true` if you want to help the user enter a new value.
     * Set to `false` if you want to help the user resume their search.
     * @default !props.freeSolo
     */
    clearOnBlur: import_prop_types53.default.bool,
    /**
     * If `true`, clear all values when the user presses escape and the popup is closed.
     * @default false
     */
    clearOnEscape: import_prop_types53.default.bool,
    /**
     * Override the default text for the *clear* icon button.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'Clear'
     */
    clearText: import_prop_types53.default.string,
    /**
     * Override the default text for the *close popup* icon button.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'Close'
     */
    closeText: import_prop_types53.default.string,
    /**
     * The props used for each slot inside.
     * @default {}
     */
    componentsProps: import_prop_types53.default.shape({
      clearIndicator: import_prop_types53.default.object,
      paper: import_prop_types53.default.object,
      popper: import_prop_types53.default.object,
      popupIndicator: import_prop_types53.default.object
    }),
    /**
     * The default value. Use when the component is not controlled.
     * @default props.multiple ? [] : null
     */
    defaultValue: (0, import_utils117.chainPropTypes)(import_prop_types53.default.any, (props) => {
      if (props.multiple && props.defaultValue !== void 0 && !Array.isArray(props.defaultValue)) {
        return new Error(["MUI: The Autocomplete expects the `defaultValue` prop to be an array when `multiple={true}` or undefined.", `However, ${props.defaultValue} was provided.`].join("\n"));
      }
      return null;
    }),
    /**
     * If `true`, the input can't be cleared.
     * @default false
     */
    disableClearable: import_prop_types53.default.bool,
    /**
     * If `true`, the popup won't close when a value is selected.
     * @default false
     */
    disableCloseOnSelect: import_prop_types53.default.bool,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types53.default.bool,
    /**
     * If `true`, will allow focus on disabled items.
     * @default false
     */
    disabledItemsFocusable: import_prop_types53.default.bool,
    /**
     * If `true`, the list box in the popup will not wrap focus.
     * @default false
     */
    disableListWrap: import_prop_types53.default.bool,
    /**
     * If `true`, the `Popper` content will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: import_prop_types53.default.bool,
    /**
     * A function that determines the filtered options to be rendered on search.
     *
     * @default createFilterOptions()
     * @param {Value[]} options The options to render.
     * @param {object} state The state of the component.
     * @returns {Value[]}
     */
    filterOptions: import_prop_types53.default.func,
    /**
     * If `true`, hide the selected options from the list box.
     * @default false
     */
    filterSelectedOptions: import_prop_types53.default.bool,
    /**
     * Force the visibility display of the popup icon.
     * @default 'auto'
     */
    forcePopupIcon: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["auto"]), import_prop_types53.default.bool]),
    /**
     * If `true`, the Autocomplete is free solo, meaning that the user input is not bound to provided options.
     * @default false
     */
    freeSolo: import_prop_types53.default.bool,
    /**
     * If `true`, the input will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types53.default.bool,
    /**
     * The label to display when the tags are truncated (`limitTags`).
     *
     * @param {number} more The number of truncated tags.
     * @returns {ReactNode}
     * @default (more) => `+${more}`
     */
    getLimitTagsText: import_prop_types53.default.func,
    /**
     * Used to determine the disabled state for a given option.
     *
     * @param {Value} option The option to test.
     * @returns {boolean}
     */
    getOptionDisabled: import_prop_types53.default.func,
    /**
     * Used to determine the string value for a given option.
     * It's used to fill the input (and the list box options if `renderOption` is not provided).
     *
     * If used in free solo mode, it must accept both the type of the options and a string.
     *
     * @param {Value} option
     * @returns {string}
     * @default (option) => option.label ?? option
     */
    getOptionLabel: import_prop_types53.default.func,
    /**
     * If provided, the options will be grouped under the returned string.
     * The groupBy value is also used as the text for group headings when `renderGroup` is not provided.
     *
     * @param {Value} options The options to group.
     * @returns {string}
     */
    groupBy: import_prop_types53.default.func,
    /**
     * If `true`, the component handles the "Home" and "End" keys when the popup is open.
     * It should move focus to the first option and last option, respectively.
     * @default !props.freeSolo
     */
    handleHomeEndKeys: import_prop_types53.default.bool,
    /**
     * This prop is used to help implement the accessibility logic.
     * If you don't provide an id it will fall back to a randomly generated one.
     */
    id: import_prop_types53.default.string,
    /**
     * If `true`, the highlight can move to the input.
     * @default false
     */
    includeInputInList: import_prop_types53.default.bool,
    /**
     * The input value.
     */
    inputValue: import_prop_types53.default.string,
    /**
     * Used to determine if the option represents the given value.
     * Uses strict equality by default.
     * ⚠️ Both arguments need to be handled, an option can only match with one value.
     *
     * @param {Value} option The option to test.
     * @param {Value} value The value to test against.
     * @returns {boolean}
     */
    isOptionEqualToValue: import_prop_types53.default.func,
    /**
     * The maximum number of tags that will be visible when not focused.
     * Set `-1` to disable the limit.
     * @default -1
     */
    limitTags: import_utils117.integerPropType,
    /**
     * The component used to render the listbox.
     * @default 'ul'
     */
    ListboxComponent: import_prop_types53.default.elementType,
    /**
     * Props applied to the Listbox element.
     */
    ListboxProps: import_prop_types53.default.object,
    /**
     * If `true`, the component is in a loading state.
     * This shows the `loadingText` in place of suggestions (only if there are no suggestions to show, e.g. `options` are empty).
     * @default false
     */
    loading: import_prop_types53.default.bool,
    /**
     * Text to display when in a loading state.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'Loading…'
     */
    loadingText: import_prop_types53.default.node,
    /**
     * If `true`, `value` must be an array and the menu will support multiple selections.
     * @default false
     */
    multiple: import_prop_types53.default.bool,
    /**
     * Text to display when there are no options.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'No options'
     */
    noOptionsText: import_prop_types53.default.node,
    /**
     * Callback fired when the value changes.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     * @param {Value|Value[]} value The new value of the component.
     * @param {string} reason One of "createOption", "selectOption", "removeOption", "blur" or "clear".
     * @param {string} [details]
     */
    onChange: import_prop_types53.default.func,
    /**
     * Callback fired when the popup requests to be closed.
     * Use in controlled mode (see open).
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     * @param {string} reason Can be: `"toggleInput"`, `"escape"`, `"selectOption"`, `"removeOption"`, `"blur"`.
     */
    onClose: import_prop_types53.default.func,
    /**
     * Callback fired when the highlight option changes.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     * @param {Value} option The highlighted option.
     * @param {string} reason Can be: `"keyboard"`, `"auto"`, `"mouse"`, `"touch"`.
     */
    onHighlightChange: import_prop_types53.default.func,
    /**
     * Callback fired when the input value changes.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     * @param {string} value The new value of the text input.
     * @param {string} reason Can be: `"input"` (user input), `"reset"` (programmatic change), `"clear"`.
     */
    onInputChange: import_prop_types53.default.func,
    /**
     * Callback fired when the popup requests to be opened.
     * Use in controlled mode (see open).
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     */
    onOpen: import_prop_types53.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types53.default.bool,
    /**
     * If `true`, the popup will open on input focus.
     * @default false
     */
    openOnFocus: import_prop_types53.default.bool,
    /**
     * Override the default text for the *open popup* icon button.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'Open'
     */
    openText: import_prop_types53.default.string,
    /**
     * Array of options.
     */
    options: import_prop_types53.default.array.isRequired,
    /**
     * The component used to render the body of the popup.
     * @default Paper
     */
    PaperComponent: import_prop_types53.default.elementType,
    /**
     * The component used to position the popup.
     * @default Popper
     */
    PopperComponent: import_prop_types53.default.elementType,
    /**
     * The icon to display in place of the default popup icon.
     * @default <ArrowDropDownIcon />
     */
    popupIcon: import_prop_types53.default.node,
    /**
     * If `true`, the component becomes readonly. It is also supported for multiple tags where the tag cannot be deleted.
     * @default false
     */
    readOnly: import_prop_types53.default.bool,
    /**
     * Render the group.
     *
     * @param {AutocompleteRenderGroupParams} params The group to render.
     * @returns {ReactNode}
     */
    renderGroup: import_prop_types53.default.func,
    /**
     * Render the input.
     *
     * @param {object} params
     * @returns {ReactNode}
     */
    renderInput: import_prop_types53.default.func.isRequired,
    /**
     * Render the option, use `getOptionLabel` by default.
     *
     * @param {object} props The props to apply on the li element.
     * @param {Value} option The option to render.
     * @param {object} state The state of each option.
     * @param {object} ownerState The state of the Autocomplete component.
     * @returns {ReactNode}
     */
    renderOption: import_prop_types53.default.func,
    /**
     * Render the selected value.
     *
     * @param {Value[]} value The `value` provided to the component.
     * @param {function} getTagProps A tag props getter.
     * @param {object} ownerState The state of the Autocomplete component.
     * @returns {ReactNode}
     */
    renderTags: import_prop_types53.default.func,
    /**
     * If `true`, the input's text is selected on focus.
     * It helps the user clear the selected value.
     * @default !props.freeSolo
     */
    selectOnFocus: import_prop_types53.default.bool,
    /**
     * The size of the component.
     * @default 'medium'
     */
    size: import_prop_types53.default.oneOfType([import_prop_types53.default.oneOf(["small", "medium"]), import_prop_types53.default.string]),
    /**
     * The props used for each slot inside.
     * @default {}
     */
    slotProps: import_prop_types53.default.shape({
      clearIndicator: import_prop_types53.default.object,
      paper: import_prop_types53.default.object,
      popper: import_prop_types53.default.object,
      popupIndicator: import_prop_types53.default.object
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types53.default.oneOfType([import_prop_types53.default.arrayOf(import_prop_types53.default.oneOfType([import_prop_types53.default.func, import_prop_types53.default.object, import_prop_types53.default.bool])), import_prop_types53.default.func, import_prop_types53.default.object]),
    /**
     * The value of the autocomplete.
     *
     * The value must have reference equality with the option in order to be selected.
     * You can customize the equality behavior with the `isOptionEqualToValue` prop.
     */
    value: (0, import_utils117.chainPropTypes)(import_prop_types53.default.any, (props) => {
      if (props.multiple && props.value !== void 0 && !Array.isArray(props.value)) {
        return new Error(["MUI: The Autocomplete expects the `value` prop to be an array when `multiple={true}` or undefined.", `However, ${props.value} was provided.`].join("\n"));
      }
      return null;
    })
  } : void 0;
  var Autocomplete_default = Autocomplete;

  // node_modules/@mui/material/Avatar/Avatar.js
  init_extends();
  var React114 = __toESM(require_react());
  var import_prop_types54 = __toESM(require_prop_types());
  var import_composeClasses37 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/internal/svg-icons/Person.js
  var React113 = __toESM(require_react());
  var import_jsx_runtime84 = __toESM(require_jsx_runtime());
  var Person_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime84.jsx)("path", {
    d: "M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
  }), "Person");

  // node_modules/@mui/material/Avatar/avatarClasses.js
  var import_utils118 = __toESM(require_utils());
  var import_generateUtilityClass44 = __toESM(require_generateUtilityClass3());
  function getAvatarUtilityClass(slot) {
    return (0, import_generateUtilityClass44.default)("MuiAvatar", slot);
  }
  var avatarClasses = (0, import_utils118.unstable_generateUtilityClasses)("MuiAvatar", ["root", "colorDefault", "circular", "rounded", "square", "img", "fallback"]);
  var avatarClasses_default = avatarClasses;

  // node_modules/@mui/material/Avatar/Avatar.js
  var import_jsx_runtime85 = __toESM(require_jsx_runtime());
  var _excluded57 = ["alt", "children", "className", "component", "imgProps", "sizes", "src", "srcSet", "variant"];
  var useUtilityClasses39 = (ownerState) => {
    const {
      classes,
      variant,
      colorDefault
    } = ownerState;
    const slots = {
      root: ["root", variant, colorDefault && "colorDefault"],
      img: ["img"],
      fallback: ["fallback"]
    };
    return (0, import_composeClasses37.unstable_composeClasses)(slots, getAvatarUtilityClass, classes);
  };
  var AvatarRoot = styled_default("div", {
    name: "MuiAvatar",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, styles7[ownerState.variant], ownerState.colorDefault && styles7.colorDefault];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    position: "relative",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    flexShrink: 0,
    width: 40,
    height: 40,
    fontFamily: theme.typography.fontFamily,
    fontSize: theme.typography.pxToRem(20),
    lineHeight: 1,
    borderRadius: "50%",
    overflow: "hidden",
    userSelect: "none"
  }, ownerState.variant === "rounded" && {
    borderRadius: (theme.vars || theme).shape.borderRadius
  }, ownerState.variant === "square" && {
    borderRadius: 0
  }, ownerState.colorDefault && _extends({
    color: (theme.vars || theme).palette.background.default
  }, theme.vars ? {
    backgroundColor: theme.vars.palette.Avatar.defaultBg
  } : {
    backgroundColor: theme.palette.mode === "light" ? theme.palette.grey[400] : theme.palette.grey[600]
  })));
  var AvatarImg = styled_default("img", {
    name: "MuiAvatar",
    slot: "Img",
    overridesResolver: (props, styles7) => styles7.img
  })({
    width: "100%",
    height: "100%",
    textAlign: "center",
    // Handle non-square image. The property isn't supported by IE11.
    objectFit: "cover",
    // Hide alt text.
    color: "transparent",
    // Hide the image broken icon, only works on Chrome.
    textIndent: 1e4
  });
  var AvatarFallback = styled_default(Person_default, {
    name: "MuiAvatar",
    slot: "Fallback",
    overridesResolver: (props, styles7) => styles7.fallback
  })({
    width: "75%",
    height: "75%"
  });
  function useLoaded({
    crossOrigin,
    referrerPolicy,
    src,
    srcSet
  }) {
    const [loaded, setLoaded] = React114.useState(false);
    React114.useEffect(() => {
      if (!src && !srcSet) {
        return void 0;
      }
      setLoaded(false);
      let active = true;
      const image = new Image();
      image.onload = () => {
        if (!active) {
          return;
        }
        setLoaded("loaded");
      };
      image.onerror = () => {
        if (!active) {
          return;
        }
        setLoaded("error");
      };
      image.crossOrigin = crossOrigin;
      image.referrerPolicy = referrerPolicy;
      image.src = src;
      if (srcSet) {
        image.srcset = srcSet;
      }
      return () => {
        active = false;
      };
    }, [crossOrigin, referrerPolicy, src, srcSet]);
    return loaded;
  }
  var Avatar = /* @__PURE__ */ React114.forwardRef(function Avatar2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiAvatar"
    });
    const {
      alt,
      children: childrenProp,
      className,
      component = "div",
      imgProps,
      sizes,
      src,
      srcSet,
      variant = "circular"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded57);
    let children = null;
    const loaded = useLoaded(_extends({}, imgProps, {
      src,
      srcSet
    }));
    const hasImg = src || srcSet;
    const hasImgNotFailing = hasImg && loaded !== "error";
    const ownerState = _extends({}, props, {
      colorDefault: !hasImgNotFailing,
      component,
      variant
    });
    const classes = useUtilityClasses39(ownerState);
    if (hasImgNotFailing) {
      children = /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(AvatarImg, _extends({
        alt,
        srcSet,
        src,
        sizes,
        ownerState,
        className: classes.img
      }, imgProps));
    } else if (childrenProp != null) {
      children = childrenProp;
    } else if (hasImg && alt) {
      children = alt[0];
    } else {
      children = /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(AvatarFallback, {
        ownerState,
        className: classes.fallback
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(AvatarRoot, _extends({
      as: component,
      ownerState,
      className: clsx_default(classes.root, className),
      ref
    }, other, {
      children
    }));
  });
  true ? Avatar.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Used in combination with `src` or `srcSet` to
     * provide an alt attribute for the rendered `img` element.
     */
    alt: import_prop_types54.default.string,
    /**
     * Used to render icon or text elements inside the Avatar if `src` is not set.
     * This can be an element, or just a string.
     */
    children: import_prop_types54.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types54.default.object,
    /**
     * @ignore
     */
    className: import_prop_types54.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types54.default.elementType,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attributes) applied to the `img` element if the component is used to display an image.
     * It can be used to listen for the loading error event.
     */
    imgProps: import_prop_types54.default.object,
    /**
     * The `sizes` attribute for the `img` element.
     */
    sizes: import_prop_types54.default.string,
    /**
     * The `src` attribute for the `img` element.
     */
    src: import_prop_types54.default.string,
    /**
     * The `srcSet` attribute for the `img` element.
     * Use this attribute for responsive image display.
     */
    srcSet: import_prop_types54.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types54.default.oneOfType([import_prop_types54.default.arrayOf(import_prop_types54.default.oneOfType([import_prop_types54.default.func, import_prop_types54.default.object, import_prop_types54.default.bool])), import_prop_types54.default.func, import_prop_types54.default.object]),
    /**
     * The shape of the avatar.
     * @default 'circular'
     */
    variant: import_prop_types54.default.oneOfType([import_prop_types54.default.oneOf(["circular", "rounded", "square"]), import_prop_types54.default.string])
  } : void 0;
  var Avatar_default = Avatar;

  // node_modules/@mui/material/AvatarGroup/AvatarGroup.js
  init_extends();
  var React115 = __toESM(require_react());
  var import_prop_types55 = __toESM(require_prop_types());
  var import_react_is2 = __toESM(require_react_is3());
  var import_utils120 = __toESM(require_utils());
  var import_composeClasses38 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/AvatarGroup/avatarGroupClasses.js
  var import_utils119 = __toESM(require_utils());
  var import_generateUtilityClass45 = __toESM(require_generateUtilityClass3());
  function getAvatarGroupUtilityClass(slot) {
    return (0, import_generateUtilityClass45.default)("MuiAvatarGroup", slot);
  }
  var avatarGroupClasses = (0, import_utils119.unstable_generateUtilityClasses)("MuiAvatarGroup", ["root", "avatar"]);
  var avatarGroupClasses_default = avatarGroupClasses;

  // node_modules/@mui/material/AvatarGroup/AvatarGroup.js
  var import_jsx_runtime86 = __toESM(require_jsx_runtime());
  var _excluded58 = ["children", "className", "component", "componentsProps", "max", "slotProps", "spacing", "total", "variant"];
  var SPACINGS = {
    small: -16,
    medium: null
  };
  var useUtilityClasses40 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      avatar: ["avatar"]
    };
    return (0, import_composeClasses38.unstable_composeClasses)(slots, getAvatarGroupUtilityClass, classes);
  };
  var AvatarGroupRoot = styled_default("div", {
    name: "MuiAvatarGroup",
    slot: "Root",
    overridesResolver: (props, styles7) => _extends({
      [`& .${avatarGroupClasses_default.avatar}`]: styles7.avatar
    }, styles7.root)
  })(({
    theme
  }) => ({
    [`& .${avatarClasses_default.root}`]: {
      border: `2px solid ${(theme.vars || theme).palette.background.default}`,
      boxSizing: "content-box",
      marginLeft: -8,
      "&:last-child": {
        marginLeft: 0
      }
    },
    display: "flex",
    flexDirection: "row-reverse"
  }));
  var AvatarGroupAvatar = styled_default(Avatar_default, {
    name: "MuiAvatarGroup",
    slot: "Avatar",
    overridesResolver: (props, styles7) => styles7.avatar
  })(({
    theme
  }) => ({
    border: `2px solid ${(theme.vars || theme).palette.background.default}`,
    boxSizing: "content-box",
    marginLeft: -8,
    "&:last-child": {
      marginLeft: 0
    }
  }));
  var AvatarGroup = /* @__PURE__ */ React115.forwardRef(function AvatarGroup2(inProps, ref) {
    var _slotProps$additional;
    const props = useThemeProps({
      props: inProps,
      name: "MuiAvatarGroup"
    });
    const {
      children: childrenProp,
      className,
      component = "div",
      componentsProps = {},
      max: max3 = 5,
      slotProps = {},
      spacing = "medium",
      total,
      variant = "circular"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded58);
    let clampedMax = max3 < 2 ? 2 : max3;
    const ownerState = _extends({}, props, {
      max: max3,
      spacing,
      component,
      variant
    });
    const classes = useUtilityClasses40(ownerState);
    const children = React115.Children.toArray(childrenProp).filter((child) => {
      if (true) {
        if ((0, import_react_is2.isFragment)(child)) {
          console.error(["MUI: The AvatarGroup component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      return /* @__PURE__ */ React115.isValidElement(child);
    });
    const totalAvatars = total || children.length;
    if (totalAvatars === clampedMax) {
      clampedMax += 1;
    }
    clampedMax = Math.min(totalAvatars + 1, clampedMax);
    const maxAvatars = Math.min(children.length, clampedMax - 1);
    const extraAvatars = Math.max(totalAvatars - clampedMax, totalAvatars - maxAvatars, 0);
    const marginLeft = spacing && SPACINGS[spacing] !== void 0 ? SPACINGS[spacing] : -spacing;
    const additionalAvatarSlotProps = (_slotProps$additional = slotProps.additionalAvatar) != null ? _slotProps$additional : componentsProps.additionalAvatar;
    return /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)(AvatarGroupRoot, _extends({
      as: component,
      ownerState,
      className: clsx_default(classes.root, className),
      ref
    }, other, {
      children: [extraAvatars ? /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)(AvatarGroupAvatar, _extends({
        ownerState,
        variant
      }, additionalAvatarSlotProps, {
        className: clsx_default(classes.avatar, additionalAvatarSlotProps == null ? void 0 : additionalAvatarSlotProps.className),
        style: _extends({
          marginLeft
        }, additionalAvatarSlotProps == null ? void 0 : additionalAvatarSlotProps.style),
        children: ["+", extraAvatars]
      })) : null, children.slice(0, maxAvatars).reverse().map((child, index3) => {
        return /* @__PURE__ */ React115.cloneElement(child, {
          className: clsx_default(child.props.className, classes.avatar),
          style: _extends({
            // Consistent with "&:last-child" styling for the default spacing,
            // we do not apply custom marginLeft spacing on the last child
            marginLeft: index3 === maxAvatars - 1 ? void 0 : marginLeft
          }, child.props.style),
          variant: child.props.variant || variant
        });
      })]
    }));
  });
  true ? AvatarGroup.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The avatars to stack.
     */
    children: import_prop_types55.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types55.default.object,
    /**
     * @ignore
     */
    className: import_prop_types55.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types55.default.elementType,
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types55.default.shape({
      additionalAvatar: import_prop_types55.default.object
    }),
    /**
     * Max avatars to show before +x.
     * @default 5
     */
    max: (0, import_utils120.chainPropTypes)(import_prop_types55.default.number, (props) => {
      if (props.max < 2) {
        return new Error(["MUI: The prop `max` should be equal to 2 or above.", "A value below is clamped to 2."].join("\n"));
      }
      return null;
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types55.default.shape({
      additionalAvatar: import_prop_types55.default.object
    }),
    /**
     * Spacing between avatars.
     * @default 'medium'
     */
    spacing: import_prop_types55.default.oneOfType([import_prop_types55.default.oneOf(["medium", "small"]), import_prop_types55.default.number]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types55.default.oneOfType([import_prop_types55.default.arrayOf(import_prop_types55.default.oneOfType([import_prop_types55.default.func, import_prop_types55.default.object, import_prop_types55.default.bool])), import_prop_types55.default.func, import_prop_types55.default.object]),
    /**
     * The total number of avatars. Used for calculating the number of extra avatars.
     * @default children.length
     */
    total: import_prop_types55.default.number,
    /**
     * The variant to use.
     * @default 'circular'
     */
    variant: import_prop_types55.default.oneOfType([import_prop_types55.default.oneOf(["circular", "rounded", "square"]), import_prop_types55.default.string])
  } : void 0;
  var AvatarGroup_default = AvatarGroup;

  // node_modules/@mui/material/Backdrop/Backdrop.js
  init_extends();
  var React117 = __toESM(require_react());
  var import_prop_types57 = __toESM(require_prop_types());
  var import_composeClasses39 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/Fade/Fade.js
  init_extends();
  var React116 = __toESM(require_react());
  var import_prop_types56 = __toESM(require_prop_types());
  var import_utils121 = __toESM(require_utils());
  var import_jsx_runtime87 = __toESM(require_jsx_runtime());
  var _excluded59 = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  var styles2 = {
    entering: {
      opacity: 1
    },
    entered: {
      opacity: 1
    }
  };
  var Fade = /* @__PURE__ */ React116.forwardRef(function Fade2(props, ref) {
    const theme = useTheme4();
    const defaultTimeout = {
      enter: theme.transitions.duration.enteringScreen,
      exit: theme.transitions.duration.leavingScreen
    };
    const {
      addEndListener,
      appear = true,
      children,
      easing: easing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style,
      timeout: timeout2 = defaultTimeout,
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition_default
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded59);
    const enableStrictModeCompat = true;
    const nodeRef = React116.useRef(null);
    const handleRef = useForkRef_default(nodeRef, children.ref, ref);
    const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
      if (callback) {
        const node2 = nodeRef.current;
        if (maybeIsAppearing === void 0) {
          callback(node2);
        } else {
          callback(node2, maybeIsAppearing);
        }
      }
    };
    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      reflow(node2);
      const transitionProps = getTransitionProps({
        style,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "enter"
      });
      node2.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
      node2.style.transition = theme.transitions.create("opacity", transitionProps);
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node2) => {
      const transitionProps = getTransitionProps({
        style,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "exit"
      });
      node2.style.webkitTransition = theme.transitions.create("opacity", transitionProps);
      node2.style.transition = theme.transitions.create("opacity", transitionProps);
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleAddEndListener = (next2) => {
      if (addEndListener) {
        addEndListener(nodeRef.current, next2);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(TransitionComponent, _extends({
      appear,
      in: inProp,
      nodeRef: enableStrictModeCompat ? nodeRef : void 0,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      timeout: timeout2
    }, other, {
      children: (state, childProps) => {
        return /* @__PURE__ */ React116.cloneElement(children, _extends({
          style: _extends({
            opacity: 0,
            visibility: state === "exited" && !inProp ? "hidden" : void 0
          }, styles2[state], style, children.props.style),
          ref: handleRef
        }, childProps));
      }
    }));
  });
  true ? Fade.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: import_prop_types56.default.func,
    /**
     * Perform the enter transition when it first mounts if `in` is also `true`.
     * Set this to `false` to disable this behavior.
     * @default true
     */
    appear: import_prop_types56.default.bool,
    /**
     * A single child content element.
     */
    children: import_utils121.elementAcceptingRef.isRequired,
    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     */
    easing: import_prop_types56.default.oneOfType([import_prop_types56.default.shape({
      enter: import_prop_types56.default.string,
      exit: import_prop_types56.default.string
    }), import_prop_types56.default.string]),
    /**
     * If `true`, the component will transition in.
     */
    in: import_prop_types56.default.bool,
    /**
     * @ignore
     */
    onEnter: import_prop_types56.default.func,
    /**
     * @ignore
     */
    onEntered: import_prop_types56.default.func,
    /**
     * @ignore
     */
    onEntering: import_prop_types56.default.func,
    /**
     * @ignore
     */
    onExit: import_prop_types56.default.func,
    /**
     * @ignore
     */
    onExited: import_prop_types56.default.func,
    /**
     * @ignore
     */
    onExiting: import_prop_types56.default.func,
    /**
     * @ignore
     */
    style: import_prop_types56.default.object,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: theme.transitions.duration.enteringScreen,
     *   exit: theme.transitions.duration.leavingScreen,
     * }
     */
    timeout: import_prop_types56.default.oneOfType([import_prop_types56.default.number, import_prop_types56.default.shape({
      appear: import_prop_types56.default.number,
      enter: import_prop_types56.default.number,
      exit: import_prop_types56.default.number
    })])
  } : void 0;
  var Fade_default = Fade;

  // node_modules/@mui/material/Backdrop/backdropClasses.js
  var import_utils123 = __toESM(require_utils());
  var import_generateUtilityClass46 = __toESM(require_generateUtilityClass3());
  function getBackdropUtilityClass(slot) {
    return (0, import_generateUtilityClass46.default)("MuiBackdrop", slot);
  }
  var backdropClasses = (0, import_utils123.unstable_generateUtilityClasses)("MuiBackdrop", ["root", "invisible"]);
  var backdropClasses_default = backdropClasses;

  // node_modules/@mui/material/Backdrop/Backdrop.js
  var import_jsx_runtime88 = __toESM(require_jsx_runtime());
  var _excluded60 = ["children", "className", "component", "components", "componentsProps", "invisible", "open", "slotProps", "slots", "TransitionComponent", "transitionDuration"];
  var useUtilityClasses41 = (ownerState) => {
    const {
      classes,
      invisible
    } = ownerState;
    const slots = {
      root: ["root", invisible && "invisible"]
    };
    return (0, import_composeClasses39.unstable_composeClasses)(slots, getBackdropUtilityClass, classes);
  };
  var BackdropRoot = styled_default("div", {
    name: "MuiBackdrop",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, ownerState.invisible && styles7.invisible];
    }
  })(({
    ownerState
  }) => _extends({
    position: "fixed",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    right: 0,
    bottom: 0,
    top: 0,
    left: 0,
    backgroundColor: "rgba(0, 0, 0, 0.5)",
    WebkitTapHighlightColor: "transparent"
  }, ownerState.invisible && {
    backgroundColor: "transparent"
  }));
  var Backdrop = /* @__PURE__ */ React117.forwardRef(function Backdrop2(inProps, ref) {
    var _slotProps$root, _ref, _slots$root;
    const props = useThemeProps({
      props: inProps,
      name: "MuiBackdrop"
    });
    const {
      children,
      className,
      component = "div",
      components = {},
      componentsProps = {},
      invisible = false,
      open,
      slotProps = {},
      slots = {},
      TransitionComponent = Fade_default,
      transitionDuration
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded60);
    const ownerState = _extends({}, props, {
      component,
      invisible
    });
    const classes = useUtilityClasses41(ownerState);
    const rootSlotProps = (_slotProps$root = slotProps.root) != null ? _slotProps$root : componentsProps.root;
    return /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(TransitionComponent, _extends({
      in: open,
      timeout: transitionDuration
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(BackdropRoot, _extends({
        "aria-hidden": true
      }, rootSlotProps, {
        as: (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : component,
        className: clsx_default(classes.root, className, rootSlotProps == null ? void 0 : rootSlotProps.className),
        ownerState: _extends({}, ownerState, rootSlotProps == null ? void 0 : rootSlotProps.ownerState),
        classes,
        ref,
        children
      }))
    }));
  });
  true ? Backdrop.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types57.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types57.default.object,
    /**
     * @ignore
     */
    className: import_prop_types57.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types57.default.elementType,
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types57.default.shape({
      Root: import_prop_types57.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types57.default.shape({
      root: import_prop_types57.default.object
    }),
    /**
     * If `true`, the backdrop is invisible.
     * It can be used when rendering a popover or a custom select component.
     * @default false
     */
    invisible: import_prop_types57.default.bool,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types57.default.bool.isRequired,
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types57.default.shape({
      root: import_prop_types57.default.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types57.default.shape({
      root: import_prop_types57.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types57.default.oneOfType([import_prop_types57.default.arrayOf(import_prop_types57.default.oneOfType([import_prop_types57.default.func, import_prop_types57.default.object, import_prop_types57.default.bool])), import_prop_types57.default.func, import_prop_types57.default.object]),
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Fade
     */
    TransitionComponent: import_prop_types57.default.elementType,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     */
    transitionDuration: import_prop_types57.default.oneOfType([import_prop_types57.default.number, import_prop_types57.default.shape({
      appear: import_prop_types57.default.number,
      enter: import_prop_types57.default.number,
      exit: import_prop_types57.default.number
    })])
  } : void 0;
  var Backdrop_default = Backdrop;

  // node_modules/@mui/material/Badge/Badge.js
  init_extends();
  var React118 = __toESM(require_react());
  var import_prop_types58 = __toESM(require_prop_types());
  var import_utils125 = __toESM(require_utils());
  var import_composeClasses40 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/Badge/badgeClasses.js
  var import_utils124 = __toESM(require_utils());
  var import_generateUtilityClass47 = __toESM(require_generateUtilityClass3());
  function getBadgeUtilityClass2(slot) {
    return (0, import_generateUtilityClass47.default)("MuiBadge", slot);
  }
  var badgeClasses2 = (0, import_utils124.unstable_generateUtilityClasses)("MuiBadge", [
    "root",
    "badge",
    "dot",
    "standard",
    "anchorOriginTopRight",
    "anchorOriginBottomRight",
    "anchorOriginTopLeft",
    "anchorOriginBottomLeft",
    "invisible",
    "colorError",
    "colorInfo",
    "colorPrimary",
    "colorSecondary",
    "colorSuccess",
    "colorWarning",
    "overlapRectangular",
    "overlapCircular",
    // TODO: v6 remove the overlap value from these class keys
    "anchorOriginTopLeftCircular",
    "anchorOriginTopLeftRectangular",
    "anchorOriginTopRightCircular",
    "anchorOriginTopRightRectangular",
    "anchorOriginBottomLeftCircular",
    "anchorOriginBottomLeftRectangular",
    "anchorOriginBottomRightCircular",
    "anchorOriginBottomRightRectangular"
  ]);
  var badgeClasses_default = badgeClasses2;

  // node_modules/@mui/material/Badge/Badge.js
  var import_jsx_runtime89 = __toESM(require_jsx_runtime());
  var import_jsx_runtime90 = __toESM(require_jsx_runtime());
  var _excluded61 = ["anchorOrigin", "className", "classes", "component", "components", "componentsProps", "children", "overlap", "color", "invisible", "max", "badgeContent", "slots", "slotProps", "showZero", "variant"];
  var RADIUS_STANDARD = 10;
  var RADIUS_DOT = 4;
  var useUtilityClasses42 = (ownerState) => {
    const {
      color,
      anchorOrigin,
      invisible,
      overlap,
      variant,
      classes = {}
    } = ownerState;
    const slots = {
      root: ["root"],
      badge: ["badge", variant, invisible && "invisible", `anchorOrigin${capitalize_default(anchorOrigin.vertical)}${capitalize_default(anchorOrigin.horizontal)}`, `anchorOrigin${capitalize_default(anchorOrigin.vertical)}${capitalize_default(anchorOrigin.horizontal)}${capitalize_default(overlap)}`, `overlap${capitalize_default(overlap)}`, color !== "default" && `color${capitalize_default(color)}`]
    };
    return (0, import_composeClasses40.unstable_composeClasses)(slots, getBadgeUtilityClass2, classes);
  };
  var BadgeRoot = styled_default("span", {
    name: "MuiBadge",
    slot: "Root",
    overridesResolver: (props, styles7) => styles7.root
  })({
    position: "relative",
    display: "inline-flex",
    // For correct alignment with the text.
    verticalAlign: "middle",
    flexShrink: 0
  });
  var BadgeBadge = styled_default("span", {
    name: "MuiBadge",
    slot: "Badge",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.badge, styles7[ownerState.variant], styles7[`anchorOrigin${capitalize_default(ownerState.anchorOrigin.vertical)}${capitalize_default(ownerState.anchorOrigin.horizontal)}${capitalize_default(ownerState.overlap)}`], ownerState.color !== "default" && styles7[`color${capitalize_default(ownerState.color)}`], ownerState.invisible && styles7.invisible];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "flex",
    flexDirection: "row",
    flexWrap: "wrap",
    justifyContent: "center",
    alignContent: "center",
    alignItems: "center",
    position: "absolute",
    boxSizing: "border-box",
    fontFamily: theme.typography.fontFamily,
    fontWeight: theme.typography.fontWeightMedium,
    fontSize: theme.typography.pxToRem(12),
    minWidth: RADIUS_STANDARD * 2,
    lineHeight: 1,
    padding: "0 6px",
    height: RADIUS_STANDARD * 2,
    borderRadius: RADIUS_STANDARD,
    zIndex: 1,
    // Render the badge on top of potential ripples.
    transition: theme.transitions.create("transform", {
      easing: theme.transitions.easing.easeInOut,
      duration: theme.transitions.duration.enteringScreen
    })
  }, ownerState.color !== "default" && {
    backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
    color: (theme.vars || theme).palette[ownerState.color].contrastText
  }, ownerState.variant === "dot" && {
    borderRadius: RADIUS_DOT,
    height: RADIUS_DOT * 2,
    minWidth: RADIUS_DOT * 2,
    padding: 0
  }, ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "rectangular" && {
    top: 0,
    right: 0,
    transform: "scale(1) translate(50%, -50%)",
    transformOrigin: "100% 0%",
    [`&.${badgeClasses_default.invisible}`]: {
      transform: "scale(0) translate(50%, -50%)"
    }
  }, ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "rectangular" && {
    bottom: 0,
    right: 0,
    transform: "scale(1) translate(50%, 50%)",
    transformOrigin: "100% 100%",
    [`&.${badgeClasses_default.invisible}`]: {
      transform: "scale(0) translate(50%, 50%)"
    }
  }, ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "rectangular" && {
    top: 0,
    left: 0,
    transform: "scale(1) translate(-50%, -50%)",
    transformOrigin: "0% 0%",
    [`&.${badgeClasses_default.invisible}`]: {
      transform: "scale(0) translate(-50%, -50%)"
    }
  }, ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "rectangular" && {
    bottom: 0,
    left: 0,
    transform: "scale(1) translate(-50%, 50%)",
    transformOrigin: "0% 100%",
    [`&.${badgeClasses_default.invisible}`]: {
      transform: "scale(0) translate(-50%, 50%)"
    }
  }, ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "circular" && {
    top: "14%",
    right: "14%",
    transform: "scale(1) translate(50%, -50%)",
    transformOrigin: "100% 0%",
    [`&.${badgeClasses_default.invisible}`]: {
      transform: "scale(0) translate(50%, -50%)"
    }
  }, ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "right" && ownerState.overlap === "circular" && {
    bottom: "14%",
    right: "14%",
    transform: "scale(1) translate(50%, 50%)",
    transformOrigin: "100% 100%",
    [`&.${badgeClasses_default.invisible}`]: {
      transform: "scale(0) translate(50%, 50%)"
    }
  }, ownerState.anchorOrigin.vertical === "top" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "circular" && {
    top: "14%",
    left: "14%",
    transform: "scale(1) translate(-50%, -50%)",
    transformOrigin: "0% 0%",
    [`&.${badgeClasses_default.invisible}`]: {
      transform: "scale(0) translate(-50%, -50%)"
    }
  }, ownerState.anchorOrigin.vertical === "bottom" && ownerState.anchorOrigin.horizontal === "left" && ownerState.overlap === "circular" && {
    bottom: "14%",
    left: "14%",
    transform: "scale(1) translate(-50%, 50%)",
    transformOrigin: "0% 100%",
    [`&.${badgeClasses_default.invisible}`]: {
      transform: "scale(0) translate(-50%, 50%)"
    }
  }, ownerState.invisible && {
    transition: theme.transitions.create("transform", {
      easing: theme.transitions.easing.easeInOut,
      duration: theme.transitions.duration.leavingScreen
    })
  }));
  var Badge3 = /* @__PURE__ */ React118.forwardRef(function Badge4(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$badge, _slotProps$root, _slotProps$badge;
    const props = useThemeProps({
      props: inProps,
      name: "MuiBadge"
    });
    const {
      anchorOrigin: anchorOriginProp = {
        vertical: "top",
        horizontal: "right"
      },
      className,
      component,
      components = {},
      componentsProps = {},
      children,
      overlap: overlapProp = "rectangular",
      color: colorProp = "default",
      invisible: invisibleProp = false,
      max: maxProp = 99,
      badgeContent: badgeContentProp,
      slots,
      slotProps,
      showZero = false,
      variant: variantProp = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded61);
    const {
      badgeContent,
      invisible: invisibleFromHook,
      max: max3,
      displayValue: displayValueFromHook
    } = useBadge({
      max: maxProp,
      invisible: invisibleProp,
      badgeContent: badgeContentProp,
      showZero
    });
    const prevProps = (0, import_utils125.usePreviousProps)({
      anchorOrigin: anchorOriginProp,
      color: colorProp,
      overlap: overlapProp,
      variant: variantProp,
      badgeContent: badgeContentProp
    });
    const invisible = invisibleFromHook || badgeContent == null && variantProp !== "dot";
    const {
      color = colorProp,
      overlap = overlapProp,
      anchorOrigin = anchorOriginProp,
      variant = variantProp
    } = invisible ? prevProps : props;
    const displayValue = variant !== "dot" ? displayValueFromHook : void 0;
    const ownerState = _extends({}, props, {
      badgeContent,
      invisible,
      max: max3,
      displayValue,
      showZero,
      anchorOrigin,
      color,
      overlap,
      variant
    });
    const classes = useUtilityClasses42(ownerState);
    const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : BadgeRoot;
    const BadgeSlot = (_ref2 = (_slots$badge = slots == null ? void 0 : slots.badge) != null ? _slots$badge : components.Badge) != null ? _ref2 : BadgeBadge;
    const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
    const badgeSlotProps = (_slotProps$badge = slotProps == null ? void 0 : slotProps.badge) != null ? _slotProps$badge : componentsProps.badge;
    const rootProps = useSlotProps({
      elementType: RootSlot,
      externalSlotProps: rootSlotProps,
      externalForwardedProps: other,
      additionalProps: {
        ref,
        as: component
      },
      ownerState,
      className: clsx_default(rootSlotProps == null ? void 0 : rootSlotProps.className, classes.root, className)
    });
    const badgeProps = useSlotProps({
      elementType: BadgeSlot,
      externalSlotProps: badgeSlotProps,
      ownerState,
      className: clsx_default(classes.badge, badgeSlotProps == null ? void 0 : badgeSlotProps.className)
    });
    return /* @__PURE__ */ (0, import_jsx_runtime90.jsxs)(RootSlot, _extends({}, rootProps, {
      children: [children, /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(BadgeSlot, _extends({}, badgeProps, {
        children: displayValue
      }))]
    }));
  });
  true ? Badge3.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The anchor of the badge.
     * @default {
     *   vertical: 'top',
     *   horizontal: 'right',
     * }
     */
    anchorOrigin: import_prop_types58.default.shape({
      horizontal: import_prop_types58.default.oneOf(["left", "right"]).isRequired,
      vertical: import_prop_types58.default.oneOf(["bottom", "top"]).isRequired
    }),
    /**
     * The content rendered within the badge.
     */
    badgeContent: import_prop_types58.default.node,
    /**
     * The badge will be added relative to this node.
     */
    children: import_prop_types58.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types58.default.object,
    /**
     * @ignore
     */
    className: import_prop_types58.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'default'
     */
    color: import_prop_types58.default.oneOfType([import_prop_types58.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types58.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types58.default.elementType,
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types58.default.shape({
      Badge: import_prop_types58.default.elementType,
      Root: import_prop_types58.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types58.default.shape({
      badge: import_prop_types58.default.oneOfType([import_prop_types58.default.func, import_prop_types58.default.object]),
      root: import_prop_types58.default.oneOfType([import_prop_types58.default.func, import_prop_types58.default.object])
    }),
    /**
     * If `true`, the badge is invisible.
     * @default false
     */
    invisible: import_prop_types58.default.bool,
    /**
     * Max count to show.
     * @default 99
     */
    max: import_prop_types58.default.number,
    /**
     * Wrapped shape the badge should overlap.
     * @default 'rectangular'
     */
    overlap: import_prop_types58.default.oneOf(["circular", "rectangular"]),
    /**
     * Controls whether the badge is hidden when `badgeContent` is zero.
     * @default false
     */
    showZero: import_prop_types58.default.bool,
    /**
     * The props used for each slot inside the Badge.
     * @default {}
     */
    slotProps: import_prop_types58.default.shape({
      badge: import_prop_types58.default.oneOfType([import_prop_types58.default.func, import_prop_types58.default.object]),
      root: import_prop_types58.default.oneOfType([import_prop_types58.default.func, import_prop_types58.default.object])
    }),
    /**
     * The components used for each slot inside the Badge.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types58.default.shape({
      badge: import_prop_types58.default.elementType,
      root: import_prop_types58.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types58.default.oneOfType([import_prop_types58.default.arrayOf(import_prop_types58.default.oneOfType([import_prop_types58.default.func, import_prop_types58.default.object, import_prop_types58.default.bool])), import_prop_types58.default.func, import_prop_types58.default.object]),
    /**
     * The variant to use.
     * @default 'standard'
     */
    variant: import_prop_types58.default.oneOfType([import_prop_types58.default.oneOf(["dot", "standard"]), import_prop_types58.default.string])
  } : void 0;
  var Badge_default = Badge3;

  // node_modules/@mui/material/BottomNavigation/BottomNavigation.js
  init_extends();
  var React119 = __toESM(require_react());
  var import_react_is3 = __toESM(require_react_is3());
  var import_prop_types59 = __toESM(require_prop_types());
  var import_composeClasses41 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/BottomNavigation/bottomNavigationClasses.js
  var import_utils126 = __toESM(require_utils());
  var import_generateUtilityClass48 = __toESM(require_generateUtilityClass3());
  function getBottomNavigationUtilityClass(slot) {
    return (0, import_generateUtilityClass48.default)("MuiBottomNavigation", slot);
  }
  var bottomNavigationClasses = (0, import_utils126.unstable_generateUtilityClasses)("MuiBottomNavigation", ["root"]);
  var bottomNavigationClasses_default = bottomNavigationClasses;

  // node_modules/@mui/material/BottomNavigation/BottomNavigation.js
  var import_jsx_runtime91 = __toESM(require_jsx_runtime());
  var _excluded62 = ["children", "className", "component", "onChange", "showLabels", "value"];
  var useUtilityClasses43 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return (0, import_composeClasses41.unstable_composeClasses)(slots, getBottomNavigationUtilityClass, classes);
  };
  var BottomNavigationRoot = styled_default("div", {
    name: "MuiBottomNavigation",
    slot: "Root",
    overridesResolver: (props, styles7) => styles7.root
  })(({
    theme
  }) => ({
    display: "flex",
    justifyContent: "center",
    height: 56,
    backgroundColor: (theme.vars || theme).palette.background.paper
  }));
  var BottomNavigation = /* @__PURE__ */ React119.forwardRef(function BottomNavigation2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiBottomNavigation"
    });
    const {
      children,
      className,
      component = "div",
      onChange,
      showLabels = false,
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded62);
    const ownerState = _extends({}, props, {
      component,
      showLabels
    });
    const classes = useUtilityClasses43(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(BottomNavigationRoot, _extends({
      as: component,
      className: clsx_default(classes.root, className),
      ref,
      ownerState
    }, other, {
      children: React119.Children.map(children, (child, childIndex) => {
        if (!/* @__PURE__ */ React119.isValidElement(child)) {
          return null;
        }
        if (true) {
          if ((0, import_react_is3.isFragment)(child)) {
            console.error(["MUI: The BottomNavigation component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
          }
        }
        const childValue = child.props.value === void 0 ? childIndex : child.props.value;
        return /* @__PURE__ */ React119.cloneElement(child, {
          selected: childValue === value,
          showLabel: child.props.showLabel !== void 0 ? child.props.showLabel : showLabels,
          value: childValue,
          onChange
        });
      })
    }));
  });
  true ? BottomNavigation.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types59.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types59.default.object,
    /**
     * @ignore
     */
    className: import_prop_types59.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types59.default.elementType,
    /**
     * Callback fired when the value changes.
     *
     * @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.
     * @param {any} value We default to the index of the child.
     */
    onChange: import_prop_types59.default.func,
    /**
     * If `true`, all `BottomNavigationAction`s will show their labels.
     * By default, only the selected `BottomNavigationAction` will show its label.
     * @default false
     */
    showLabels: import_prop_types59.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types59.default.oneOfType([import_prop_types59.default.arrayOf(import_prop_types59.default.oneOfType([import_prop_types59.default.func, import_prop_types59.default.object, import_prop_types59.default.bool])), import_prop_types59.default.func, import_prop_types59.default.object]),
    /**
     * The value of the currently selected `BottomNavigationAction`.
     */
    value: import_prop_types59.default.any
  } : void 0;
  var BottomNavigation_default = BottomNavigation;

  // node_modules/@mui/material/BottomNavigationAction/BottomNavigationAction.js
  init_extends();
  var React120 = __toESM(require_react());
  var import_prop_types60 = __toESM(require_prop_types());
  var import_composeClasses42 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/BottomNavigationAction/bottomNavigationActionClasses.js
  var import_utils127 = __toESM(require_utils());
  var import_generateUtilityClass49 = __toESM(require_generateUtilityClass3());
  function getBottomNavigationActionUtilityClass(slot) {
    return (0, import_generateUtilityClass49.default)("MuiBottomNavigationAction", slot);
  }
  var bottomNavigationActionClasses = (0, import_utils127.unstable_generateUtilityClasses)("MuiBottomNavigationAction", ["root", "iconOnly", "selected", "label"]);
  var bottomNavigationActionClasses_default = bottomNavigationActionClasses;

  // node_modules/@mui/material/BottomNavigationAction/BottomNavigationAction.js
  var import_jsx_runtime92 = __toESM(require_jsx_runtime());
  var import_jsx_runtime93 = __toESM(require_jsx_runtime());
  var _excluded63 = ["className", "icon", "label", "onChange", "onClick", "selected", "showLabel", "value"];
  var useUtilityClasses44 = (ownerState) => {
    const {
      classes,
      showLabel,
      selected
    } = ownerState;
    const slots = {
      root: ["root", !showLabel && !selected && "iconOnly", selected && "selected"],
      label: ["label", !showLabel && !selected && "iconOnly", selected && "selected"]
    };
    return (0, import_composeClasses42.unstable_composeClasses)(slots, getBottomNavigationActionUtilityClass, classes);
  };
  var BottomNavigationActionRoot = styled_default(ButtonBase_default, {
    name: "MuiBottomNavigationAction",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, !ownerState.showLabel && !ownerState.selected && styles7.iconOnly];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    transition: theme.transitions.create(["color", "padding-top"], {
      duration: theme.transitions.duration.short
    }),
    padding: "0px 12px",
    minWidth: 80,
    maxWidth: 168,
    color: (theme.vars || theme).palette.text.secondary,
    flexDirection: "column",
    flex: "1"
  }, !ownerState.showLabel && !ownerState.selected && {
    paddingTop: 14
  }, !ownerState.showLabel && !ownerState.selected && !ownerState.label && {
    paddingTop: 0
  }, {
    [`&.${bottomNavigationActionClasses_default.selected}`]: {
      color: (theme.vars || theme).palette.primary.main
    }
  }));
  var BottomNavigationActionLabel = styled_default("span", {
    name: "MuiBottomNavigationAction",
    slot: "Label",
    overridesResolver: (props, styles7) => styles7.label
  })(({
    theme,
    ownerState
  }) => _extends({
    fontFamily: theme.typography.fontFamily,
    fontSize: theme.typography.pxToRem(12),
    opacity: 1,
    transition: "font-size 0.2s, opacity 0.2s",
    transitionDelay: "0.1s"
  }, !ownerState.showLabel && !ownerState.selected && {
    opacity: 0,
    transitionDelay: "0s"
  }, {
    [`&.${bottomNavigationActionClasses_default.selected}`]: {
      fontSize: theme.typography.pxToRem(14)
    }
  }));
  var BottomNavigationAction = /* @__PURE__ */ React120.forwardRef(function BottomNavigationAction2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiBottomNavigationAction"
    });
    const {
      className,
      icon,
      label,
      onChange,
      onClick,
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded63);
    const ownerState = props;
    const classes = useUtilityClasses44(ownerState);
    const handleChange = (event) => {
      if (onChange) {
        onChange(event, value);
      }
      if (onClick) {
        onClick(event);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime93.jsxs)(BottomNavigationActionRoot, _extends({
      ref,
      className: clsx_default(classes.root, className),
      focusRipple: true,
      onClick: handleChange,
      ownerState
    }, other, {
      children: [icon, /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(BottomNavigationActionLabel, {
        className: classes.label,
        ownerState,
        children: label
      })]
    }));
  });
  true ? BottomNavigationAction.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * This prop isn't supported.
     * Use the `component` prop if you need to change the children structure.
     */
    children: unsupportedProp_default,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types60.default.object,
    /**
     * @ignore
     */
    className: import_prop_types60.default.string,
    /**
     * The icon to display.
     */
    icon: import_prop_types60.default.node,
    /**
     * The label element.
     */
    label: import_prop_types60.default.node,
    /**
     * @ignore
     */
    onChange: import_prop_types60.default.func,
    /**
     * @ignore
     */
    onClick: import_prop_types60.default.func,
    /**
     * If `true`, the `BottomNavigationAction` will show its label.
     * By default, only the selected `BottomNavigationAction`
     * inside `BottomNavigation` will show its label.
     *
     * The prop defaults to the value (`false`) inherited from the parent BottomNavigation component.
     */
    showLabel: import_prop_types60.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types60.default.oneOfType([import_prop_types60.default.arrayOf(import_prop_types60.default.oneOfType([import_prop_types60.default.func, import_prop_types60.default.object, import_prop_types60.default.bool])), import_prop_types60.default.func, import_prop_types60.default.object]),
    /**
     * You can provide your own value. Otherwise, we fallback to the child position index.
     */
    value: import_prop_types60.default.any
  } : void 0;
  var BottomNavigationAction_default = BottomNavigationAction;

  // node_modules/@mui/material/Box/Box.js
  var import_system21 = __toESM(require_system());
  var import_prop_types61 = __toESM(require_prop_types());

  // node_modules/@mui/material/className/index.js
  var import_utils128 = __toESM(require_utils());

  // node_modules/@mui/material/Box/Box.js
  var defaultTheme3 = createTheme_default();
  var Box = (0, import_system21.createBox)({
    themeId: identifier_default,
    defaultTheme: defaultTheme3,
    defaultClassName: "MuiBox-root",
    generateClassName: import_utils128.unstable_ClassNameGenerator.generate
  });
  true ? Box.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: import_prop_types61.default.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types61.default.elementType,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types61.default.oneOfType([import_prop_types61.default.arrayOf(import_prop_types61.default.oneOfType([import_prop_types61.default.func, import_prop_types61.default.object, import_prop_types61.default.bool])), import_prop_types61.default.func, import_prop_types61.default.object])
  } : void 0;
  var Box_default = Box;

  // node_modules/@mui/material/Breadcrumbs/Breadcrumbs.js
  init_extends();
  var React123 = __toESM(require_react());
  var import_react_is4 = __toESM(require_react_is3());
  var import_prop_types63 = __toESM(require_prop_types());
  var import_utils130 = __toESM(require_utils());

  // node_modules/@mui/material/Breadcrumbs/BreadcrumbCollapsed.js
  init_extends();
  var React122 = __toESM(require_react());
  var import_prop_types62 = __toESM(require_prop_types());
  var import_system22 = __toESM(require_system());

  // node_modules/@mui/material/internal/svg-icons/MoreHoriz.js
  var React121 = __toESM(require_react());
  var import_jsx_runtime94 = __toESM(require_jsx_runtime());
  var MoreHoriz_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime94.jsx)("path", {
    d: "M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"
  }), "MoreHoriz");

  // node_modules/@mui/material/Breadcrumbs/BreadcrumbCollapsed.js
  var import_jsx_runtime95 = __toESM(require_jsx_runtime());
  var _excluded64 = ["slots", "slotProps"];
  var BreadcrumbCollapsedButton = styled_default(ButtonBase_default)(({
    theme
  }) => _extends({
    display: "flex",
    marginLeft: `calc(${theme.spacing(1)} * 0.5)`,
    marginRight: `calc(${theme.spacing(1)} * 0.5)`
  }, theme.palette.mode === "light" ? {
    backgroundColor: theme.palette.grey[100],
    color: theme.palette.grey[700]
  } : {
    backgroundColor: theme.palette.grey[700],
    color: theme.palette.grey[100]
  }, {
    borderRadius: 2,
    "&:hover, &:focus": _extends({}, theme.palette.mode === "light" ? {
      backgroundColor: theme.palette.grey[200]
    } : {
      backgroundColor: theme.palette.grey[600]
    }),
    "&:active": _extends({
      boxShadow: theme.shadows[0]
    }, theme.palette.mode === "light" ? {
      backgroundColor: (0, import_system22.emphasize)(theme.palette.grey[200], 0.12)
    } : {
      backgroundColor: (0, import_system22.emphasize)(theme.palette.grey[600], 0.12)
    })
  }));
  var BreadcrumbCollapsedIcon = styled_default(MoreHoriz_default)({
    width: 24,
    height: 16
  });
  function BreadcrumbCollapsed(props) {
    const {
      slots = {},
      slotProps = {}
    } = props, otherProps = _objectWithoutPropertiesLoose(props, _excluded64);
    const ownerState = props;
    return /* @__PURE__ */ (0, import_jsx_runtime95.jsx)("li", {
      children: /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(BreadcrumbCollapsedButton, _extends({
        focusRipple: true
      }, otherProps, {
        ownerState,
        children: /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(BreadcrumbCollapsedIcon, _extends({
          as: slots.CollapsedIcon,
          ownerState
        }, slotProps.collapsedIcon))
      }))
    });
  }
  true ? BreadcrumbCollapsed.propTypes = {
    /**
     * The props used for the CollapsedIcon slot.
     * @default {}
     */
    slotProps: import_prop_types62.default.shape({
      collapsedIcon: import_prop_types62.default.oneOfType([import_prop_types62.default.func, import_prop_types62.default.object])
    }),
    /**
     * The components used for each slot inside the BreadcumbCollapsed.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types62.default.shape({
      CollapsedIcon: import_prop_types62.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types62.default.object
  } : void 0;
  var BreadcrumbCollapsed_default = BreadcrumbCollapsed;

  // node_modules/@mui/material/Breadcrumbs/breadcrumbsClasses.js
  var import_utils129 = __toESM(require_utils());
  var import_generateUtilityClass50 = __toESM(require_generateUtilityClass3());
  function getBreadcrumbsUtilityClass(slot) {
    return (0, import_generateUtilityClass50.default)("MuiBreadcrumbs", slot);
  }
  var breadcrumbsClasses = (0, import_utils129.unstable_generateUtilityClasses)("MuiBreadcrumbs", ["root", "ol", "li", "separator"]);
  var breadcrumbsClasses_default = breadcrumbsClasses;

  // node_modules/@mui/material/Breadcrumbs/Breadcrumbs.js
  var import_jsx_runtime96 = __toESM(require_jsx_runtime());
  var _excluded65 = ["children", "className", "component", "slots", "slotProps", "expandText", "itemsAfterCollapse", "itemsBeforeCollapse", "maxItems", "separator"];
  var useUtilityClasses45 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      li: ["li"],
      ol: ["ol"],
      separator: ["separator"]
    };
    return (0, base_exports.unstable_composeClasses)(slots, getBreadcrumbsUtilityClass, classes);
  };
  var BreadcrumbsRoot = styled_default(Typography_default, {
    name: "MuiBreadcrumbs",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      return [{
        [`& .${breadcrumbsClasses_default.li}`]: styles7.li
      }, styles7.root];
    }
  })({});
  var BreadcrumbsOl = styled_default("ol", {
    name: "MuiBreadcrumbs",
    slot: "Ol",
    overridesResolver: (props, styles7) => styles7.ol
  })({
    display: "flex",
    flexWrap: "wrap",
    alignItems: "center",
    padding: 0,
    margin: 0,
    listStyle: "none"
  });
  var BreadcrumbsSeparator = styled_default("li", {
    name: "MuiBreadcrumbs",
    slot: "Separator",
    overridesResolver: (props, styles7) => styles7.separator
  })({
    display: "flex",
    userSelect: "none",
    marginLeft: 8,
    marginRight: 8
  });
  function insertSeparators(items, className, separator, ownerState) {
    return items.reduce((acc, current, index3) => {
      if (index3 < items.length - 1) {
        acc = acc.concat(current, /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(BreadcrumbsSeparator, {
          "aria-hidden": true,
          className,
          ownerState,
          children: separator
        }, `separator-${index3}`));
      } else {
        acc.push(current);
      }
      return acc;
    }, []);
  }
  var Breadcrumbs = /* @__PURE__ */ React123.forwardRef(function Breadcrumbs2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiBreadcrumbs"
    });
    const {
      children,
      className,
      component = "nav",
      slots = {},
      slotProps = {},
      expandText = "Show path",
      itemsAfterCollapse = 1,
      itemsBeforeCollapse = 1,
      maxItems = 8,
      separator = "/"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded65);
    const [expanded, setExpanded] = React123.useState(false);
    const ownerState = _extends({}, props, {
      component,
      expanded,
      expandText,
      itemsAfterCollapse,
      itemsBeforeCollapse,
      maxItems,
      separator
    });
    const classes = useUtilityClasses45(ownerState);
    const collapsedIconSlotProps = useSlotProps({
      elementType: slots.CollapsedIcon,
      externalSlotProps: slotProps.collapsedIcon,
      ownerState
    });
    const listRef = React123.useRef(null);
    const renderItemsBeforeAndAfter = (allItems2) => {
      const handleClickExpand = () => {
        setExpanded(true);
        const focusable = listRef.current.querySelector("a[href],button,[tabindex]");
        if (focusable) {
          focusable.focus();
        }
      };
      if (itemsBeforeCollapse + itemsAfterCollapse >= allItems2.length) {
        if (true) {
          console.error(["MUI: You have provided an invalid combination of props to the Breadcrumbs.", `itemsAfterCollapse={${itemsAfterCollapse}} + itemsBeforeCollapse={${itemsBeforeCollapse}} >= maxItems={${maxItems}}`].join("\n"));
        }
        return allItems2;
      }
      return [...allItems2.slice(0, itemsBeforeCollapse), /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(BreadcrumbCollapsed_default, {
        "aria-label": expandText,
        slots: {
          CollapsedIcon: slots.CollapsedIcon
        },
        slotProps: {
          collapsedIcon: collapsedIconSlotProps
        },
        onClick: handleClickExpand
      }, "ellipsis"), ...allItems2.slice(allItems2.length - itemsAfterCollapse, allItems2.length)];
    };
    const allItems = React123.Children.toArray(children).filter((child) => {
      if (true) {
        if ((0, import_react_is4.isFragment)(child)) {
          console.error(["MUI: The Breadcrumbs component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      return /* @__PURE__ */ React123.isValidElement(child);
    }).map((child, index3) => /* @__PURE__ */ (0, import_jsx_runtime96.jsx)("li", {
      className: classes.li,
      children: child
    }, `child-${index3}`));
    return /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(BreadcrumbsRoot, _extends({
      ref,
      component,
      color: "text.secondary",
      className: clsx_default(classes.root, className),
      ownerState
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(BreadcrumbsOl, {
        className: classes.ol,
        ref: listRef,
        ownerState,
        children: insertSeparators(expanded || maxItems && allItems.length <= maxItems ? allItems : renderItemsBeforeAndAfter(allItems), classes.separator, separator, ownerState)
      })
    }));
  });
  true ? Breadcrumbs.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types63.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types63.default.object,
    /**
     * @ignore
     */
    className: import_prop_types63.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types63.default.elementType,
    /**
     * Override the default label for the expand button.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'Show path'
     */
    expandText: import_prop_types63.default.string,
    /**
     * If max items is exceeded, the number of items to show after the ellipsis.
     * @default 1
     */
    itemsAfterCollapse: import_utils130.integerPropType,
    /**
     * If max items is exceeded, the number of items to show before the ellipsis.
     * @default 1
     */
    itemsBeforeCollapse: import_utils130.integerPropType,
    /**
     * Specifies the maximum number of breadcrumbs to display. When there are more
     * than the maximum number, only the first `itemsBeforeCollapse` and last `itemsAfterCollapse`
     * will be shown, with an ellipsis in between.
     * @default 8
     */
    maxItems: import_utils130.integerPropType,
    /**
     * Custom separator node.
     * @default '/'
     */
    separator: import_prop_types63.default.node,
    /**
     * The props used for each slot inside the Breadcumb.
     * @default {}
     */
    slotProps: import_prop_types63.default.shape({
      collapsedIcon: import_prop_types63.default.oneOfType([import_prop_types63.default.func, import_prop_types63.default.object])
    }),
    /**
     * The components used for each slot inside the Breadcumb.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types63.default.shape({
      CollapsedIcon: import_prop_types63.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types63.default.oneOfType([import_prop_types63.default.arrayOf(import_prop_types63.default.oneOfType([import_prop_types63.default.func, import_prop_types63.default.object, import_prop_types63.default.bool])), import_prop_types63.default.func, import_prop_types63.default.object])
  } : void 0;
  var Breadcrumbs_default = Breadcrumbs;

  // node_modules/@mui/material/Button/Button.js
  init_extends();
  var React126 = __toESM(require_react());
  var import_prop_types64 = __toESM(require_prop_types());
  var import_utils132 = __toESM(require_utils());
  var import_composeClasses43 = __toESM(require_composeClasses3());
  var import_system23 = __toESM(require_system());

  // node_modules/@mui/material/Button/buttonClasses.js
  var import_utils131 = __toESM(require_utils());
  var import_generateUtilityClass51 = __toESM(require_generateUtilityClass3());
  function getButtonUtilityClass2(slot) {
    return (0, import_generateUtilityClass51.default)("MuiButton", slot);
  }
  var buttonClasses2 = (0, import_utils131.unstable_generateUtilityClasses)("MuiButton", ["root", "text", "textInherit", "textPrimary", "textSecondary", "textSuccess", "textError", "textInfo", "textWarning", "outlined", "outlinedInherit", "outlinedPrimary", "outlinedSecondary", "outlinedSuccess", "outlinedError", "outlinedInfo", "outlinedWarning", "contained", "containedInherit", "containedPrimary", "containedSecondary", "containedSuccess", "containedError", "containedInfo", "containedWarning", "disableElevation", "focusVisible", "disabled", "colorInherit", "textSizeSmall", "textSizeMedium", "textSizeLarge", "outlinedSizeSmall", "outlinedSizeMedium", "outlinedSizeLarge", "containedSizeSmall", "containedSizeMedium", "containedSizeLarge", "sizeMedium", "sizeSmall", "sizeLarge", "fullWidth", "startIcon", "endIcon", "iconSizeSmall", "iconSizeMedium", "iconSizeLarge"]);
  var buttonClasses_default = buttonClasses2;

  // node_modules/@mui/material/ButtonGroup/ButtonGroupContext.js
  var React124 = __toESM(require_react());
  var ButtonGroupContext = /* @__PURE__ */ React124.createContext({});
  if (true) {
    ButtonGroupContext.displayName = "ButtonGroupContext";
  }
  var ButtonGroupContext_default = ButtonGroupContext;

  // node_modules/@mui/material/ButtonGroup/ButtonGroupButtonContext.js
  var React125 = __toESM(require_react());
  var ButtonGroupButtonContext = /* @__PURE__ */ React125.createContext(void 0);
  if (true) {
    ButtonGroupButtonContext.displayName = "ButtonGroupButtonContext";
  }
  var ButtonGroupButtonContext_default = ButtonGroupButtonContext;

  // node_modules/@mui/material/Button/Button.js
  var import_jsx_runtime97 = __toESM(require_jsx_runtime());
  var import_jsx_runtime98 = __toESM(require_jsx_runtime());
  var _excluded66 = ["children", "color", "component", "className", "disabled", "disableElevation", "disableFocusRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"];
  var useUtilityClasses46 = (ownerState) => {
    const {
      color,
      disableElevation,
      fullWidth,
      size: size2,
      variant,
      classes
    } = ownerState;
    const slots = {
      root: ["root", variant, `${variant}${capitalize_default(color)}`, `size${capitalize_default(size2)}`, `${variant}Size${capitalize_default(size2)}`, color === "inherit" && "colorInherit", disableElevation && "disableElevation", fullWidth && "fullWidth"],
      label: ["label"],
      startIcon: ["startIcon", `iconSize${capitalize_default(size2)}`],
      endIcon: ["endIcon", `iconSize${capitalize_default(size2)}`]
    };
    const composedClasses = (0, import_composeClasses43.unstable_composeClasses)(slots, getButtonUtilityClass2, classes);
    return _extends({}, classes, composedClasses);
  };
  var commonIconStyles = (ownerState) => _extends({}, ownerState.size === "small" && {
    "& > *:nth-of-type(1)": {
      fontSize: 18
    }
  }, ownerState.size === "medium" && {
    "& > *:nth-of-type(1)": {
      fontSize: 20
    }
  }, ownerState.size === "large" && {
    "& > *:nth-of-type(1)": {
      fontSize: 22
    }
  });
  var ButtonRoot = styled_default(ButtonBase_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiButton",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, styles7[ownerState.variant], styles7[`${ownerState.variant}${capitalize_default(ownerState.color)}`], styles7[`size${capitalize_default(ownerState.size)}`], styles7[`${ownerState.variant}Size${capitalize_default(ownerState.size)}`], ownerState.color === "inherit" && styles7.colorInherit, ownerState.disableElevation && styles7.disableElevation, ownerState.fullWidth && styles7.fullWidth];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _theme$palette$getCon, _theme$palette;
    const inheritContainedBackgroundColor = theme.palette.mode === "light" ? theme.palette.grey[300] : theme.palette.grey[800];
    const inheritContainedHoverBackgroundColor = theme.palette.mode === "light" ? theme.palette.grey.A100 : theme.palette.grey[700];
    return _extends({}, theme.typography.button, {
      minWidth: 64,
      padding: "6px 16px",
      borderRadius: (theme.vars || theme).shape.borderRadius,
      transition: theme.transitions.create(["background-color", "box-shadow", "border-color", "color"], {
        duration: theme.transitions.duration.short
      }),
      "&:hover": _extends({
        textDecoration: "none",
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_system23.alpha)(theme.palette.text.primary, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_system23.alpha)(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "outlined" && ownerState.color !== "inherit" && {
        border: `1px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_system23.alpha)(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      }, ownerState.variant === "contained" && {
        backgroundColor: theme.vars ? theme.vars.palette.Button.inheritContainedHoverBg : inheritContainedHoverBackgroundColor,
        boxShadow: (theme.vars || theme).shadows[4],
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          boxShadow: (theme.vars || theme).shadows[2],
          backgroundColor: (theme.vars || theme).palette.grey[300]
        }
      }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].dark,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: (theme.vars || theme).palette[ownerState.color].main
        }
      }),
      "&:active": _extends({}, ownerState.variant === "contained" && {
        boxShadow: (theme.vars || theme).shadows[8]
      }),
      [`&.${buttonClasses_default.focusVisible}`]: _extends({}, ownerState.variant === "contained" && {
        boxShadow: (theme.vars || theme).shadows[6]
      }),
      [`&.${buttonClasses_default.disabled}`]: _extends({
        color: (theme.vars || theme).palette.action.disabled
      }, ownerState.variant === "outlined" && {
        border: `1px solid ${(theme.vars || theme).palette.action.disabledBackground}`
      }, ownerState.variant === "contained" && {
        color: (theme.vars || theme).palette.action.disabled,
        boxShadow: (theme.vars || theme).shadows[0],
        backgroundColor: (theme.vars || theme).palette.action.disabledBackground
      })
    }, ownerState.variant === "text" && {
      padding: "6px 8px"
    }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
      color: (theme.vars || theme).palette[ownerState.color].main
    }, ownerState.variant === "outlined" && {
      padding: "5px 15px",
      border: "1px solid currentColor"
    }, ownerState.variant === "outlined" && ownerState.color !== "inherit" && {
      color: (theme.vars || theme).palette[ownerState.color].main,
      border: theme.vars ? `1px solid rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.5)` : `1px solid ${(0, import_system23.alpha)(theme.palette[ownerState.color].main, 0.5)}`
    }, ownerState.variant === "contained" && {
      color: theme.vars ? (
        // this is safe because grey does not change between default light/dark mode
        theme.vars.palette.text.primary
      ) : (_theme$palette$getCon = (_theme$palette = theme.palette).getContrastText) == null ? void 0 : _theme$palette$getCon.call(_theme$palette, theme.palette.grey[300]),
      backgroundColor: theme.vars ? theme.vars.palette.Button.inheritContainedBg : inheritContainedBackgroundColor,
      boxShadow: (theme.vars || theme).shadows[2]
    }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
      color: (theme.vars || theme).palette[ownerState.color].contrastText,
      backgroundColor: (theme.vars || theme).palette[ownerState.color].main
    }, ownerState.color === "inherit" && {
      color: "inherit",
      borderColor: "currentColor"
    }, ownerState.size === "small" && ownerState.variant === "text" && {
      padding: "4px 5px",
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "text" && {
      padding: "8px 11px",
      fontSize: theme.typography.pxToRem(15)
    }, ownerState.size === "small" && ownerState.variant === "outlined" && {
      padding: "3px 9px",
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "outlined" && {
      padding: "7px 21px",
      fontSize: theme.typography.pxToRem(15)
    }, ownerState.size === "small" && ownerState.variant === "contained" && {
      padding: "4px 10px",
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === "large" && ownerState.variant === "contained" && {
      padding: "8px 22px",
      fontSize: theme.typography.pxToRem(15)
    }, ownerState.fullWidth && {
      width: "100%"
    });
  }, ({
    ownerState
  }) => ownerState.disableElevation && {
    boxShadow: "none",
    "&:hover": {
      boxShadow: "none"
    },
    [`&.${buttonClasses_default.focusVisible}`]: {
      boxShadow: "none"
    },
    "&:active": {
      boxShadow: "none"
    },
    [`&.${buttonClasses_default.disabled}`]: {
      boxShadow: "none"
    }
  });
  var ButtonStartIcon = styled_default("span", {
    name: "MuiButton",
    slot: "StartIcon",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.startIcon, styles7[`iconSize${capitalize_default(ownerState.size)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    display: "inherit",
    marginRight: 8,
    marginLeft: -4
  }, ownerState.size === "small" && {
    marginLeft: -2
  }, commonIconStyles(ownerState)));
  var ButtonEndIcon = styled_default("span", {
    name: "MuiButton",
    slot: "EndIcon",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.endIcon, styles7[`iconSize${capitalize_default(ownerState.size)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    display: "inherit",
    marginRight: -4,
    marginLeft: 8
  }, ownerState.size === "small" && {
    marginRight: -2
  }, commonIconStyles(ownerState)));
  var Button3 = /* @__PURE__ */ React126.forwardRef(function Button4(inProps, ref) {
    const contextProps = React126.useContext(ButtonGroupContext_default);
    const buttonGroupButtonContextPositionClassName = React126.useContext(ButtonGroupButtonContext_default);
    const resolvedProps = (0, import_utils132.internal_resolveProps)(contextProps, inProps);
    const props = useThemeProps({
      props: resolvedProps,
      name: "MuiButton"
    });
    const {
      children,
      color = "primary",
      component = "button",
      className,
      disabled = false,
      disableElevation = false,
      disableFocusRipple = false,
      endIcon: endIconProp,
      focusVisibleClassName,
      fullWidth = false,
      size: size2 = "medium",
      startIcon: startIconProp,
      type,
      variant = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded66);
    const ownerState = _extends({}, props, {
      color,
      component,
      disabled,
      disableElevation,
      disableFocusRipple,
      fullWidth,
      size: size2,
      type,
      variant
    });
    const classes = useUtilityClasses46(ownerState);
    const startIcon = startIconProp && /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(ButtonStartIcon, {
      className: classes.startIcon,
      ownerState,
      children: startIconProp
    });
    const endIcon = endIconProp && /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(ButtonEndIcon, {
      className: classes.endIcon,
      ownerState,
      children: endIconProp
    });
    const positionClassName = buttonGroupButtonContextPositionClassName || "";
    return /* @__PURE__ */ (0, import_jsx_runtime98.jsxs)(ButtonRoot, _extends({
      ownerState,
      className: clsx_default(contextProps.className, classes.root, className, positionClassName),
      component,
      disabled,
      focusRipple: !disableFocusRipple,
      focusVisibleClassName: clsx_default(classes.focusVisible, focusVisibleClassName),
      ref,
      type
    }, other, {
      classes,
      children: [startIcon, children, endIcon]
    }));
  });
  true ? Button3.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types64.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types64.default.object,
    /**
     * @ignore
     */
    className: import_prop_types64.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'primary'
     */
    color: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["inherit", "primary", "secondary", "success", "error", "info", "warning"]), import_prop_types64.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types64.default.elementType,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types64.default.bool,
    /**
     * If `true`, no elevation is used.
     * @default false
     */
    disableElevation: import_prop_types64.default.bool,
    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: import_prop_types64.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: import_prop_types64.default.bool,
    /**
     * Element placed after the children.
     */
    endIcon: import_prop_types64.default.node,
    /**
     * @ignore
     */
    focusVisibleClassName: import_prop_types64.default.string,
    /**
     * If `true`, the button will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types64.default.bool,
    /**
     * The URL to link to when the button is clicked.
     * If defined, an `a` element will be used as the root node.
     */
    href: import_prop_types64.default.string,
    /**
     * The size of the component.
     * `small` is equivalent to the dense button styling.
     * @default 'medium'
     */
    size: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["small", "medium", "large"]), import_prop_types64.default.string]),
    /**
     * Element placed before the children.
     */
    startIcon: import_prop_types64.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types64.default.oneOfType([import_prop_types64.default.arrayOf(import_prop_types64.default.oneOfType([import_prop_types64.default.func, import_prop_types64.default.object, import_prop_types64.default.bool])), import_prop_types64.default.func, import_prop_types64.default.object]),
    /**
     * @ignore
     */
    type: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["button", "reset", "submit"]), import_prop_types64.default.string]),
    /**
     * The variant to use.
     * @default 'text'
     */
    variant: import_prop_types64.default.oneOfType([import_prop_types64.default.oneOf(["contained", "outlined", "text"]), import_prop_types64.default.string])
  } : void 0;
  var Button_default = Button3;

  // node_modules/@mui/material/ButtonGroup/ButtonGroup.js
  init_extends();
  var React127 = __toESM(require_react());
  var import_prop_types65 = __toESM(require_prop_types());
  var import_composeClasses44 = __toESM(require_composeClasses3());
  var import_system24 = __toESM(require_system());

  // node_modules/@mui/material/ButtonGroup/buttonGroupClasses.js
  var import_utils133 = __toESM(require_utils());
  var import_generateUtilityClass52 = __toESM(require_generateUtilityClass3());
  function getButtonGroupUtilityClass(slot) {
    return (0, import_generateUtilityClass52.default)("MuiButtonGroup", slot);
  }
  var buttonGroupClasses = (0, import_utils133.unstable_generateUtilityClasses)("MuiButtonGroup", ["root", "contained", "outlined", "text", "disableElevation", "disabled", "firstButton", "fullWidth", "vertical", "grouped", "groupedHorizontal", "groupedVertical", "groupedText", "groupedTextHorizontal", "groupedTextVertical", "groupedTextPrimary", "groupedTextSecondary", "groupedOutlined", "groupedOutlinedHorizontal", "groupedOutlinedVertical", "groupedOutlinedPrimary", "groupedOutlinedSecondary", "groupedContained", "groupedContainedHorizontal", "groupedContainedVertical", "groupedContainedPrimary", "groupedContainedSecondary", "lastButton", "middleButton"]);
  var buttonGroupClasses_default = buttonGroupClasses;

  // node_modules/@mui/material/ButtonGroup/ButtonGroup.js
  var import_jsx_runtime99 = __toESM(require_jsx_runtime());
  var _excluded67 = ["children", "className", "color", "component", "disabled", "disableElevation", "disableFocusRipple", "disableRipple", "fullWidth", "orientation", "size", "variant"];
  var overridesResolver = (props, styles7) => {
    const {
      ownerState
    } = props;
    return [{
      [`& .${buttonGroupClasses_default.grouped}`]: styles7.grouped
    }, {
      [`& .${buttonGroupClasses_default.grouped}`]: styles7[`grouped${capitalize_default(ownerState.orientation)}`]
    }, {
      [`& .${buttonGroupClasses_default.grouped}`]: styles7[`grouped${capitalize_default(ownerState.variant)}`]
    }, {
      [`& .${buttonGroupClasses_default.grouped}`]: styles7[`grouped${capitalize_default(ownerState.variant)}${capitalize_default(ownerState.orientation)}`]
    }, {
      [`& .${buttonGroupClasses_default.grouped}`]: styles7[`grouped${capitalize_default(ownerState.variant)}${capitalize_default(ownerState.color)}`]
    }, {
      [`& .${buttonGroupClasses_default.firstButton}`]: styles7.firstButton
    }, {
      [`& .${buttonGroupClasses_default.lastButton}`]: styles7.lastButton
    }, {
      [`& .${buttonGroupClasses_default.middleButton}`]: styles7.middleButton
    }, styles7.root, styles7[ownerState.variant], ownerState.disableElevation === true && styles7.disableElevation, ownerState.fullWidth && styles7.fullWidth, ownerState.orientation === "vertical" && styles7.vertical];
  };
  var useUtilityClasses47 = (ownerState) => {
    const {
      classes,
      color,
      disabled,
      disableElevation,
      fullWidth,
      orientation,
      variant
    } = ownerState;
    const slots = {
      root: ["root", variant, orientation === "vertical" && "vertical", fullWidth && "fullWidth", disableElevation && "disableElevation"],
      grouped: ["grouped", `grouped${capitalize_default(orientation)}`, `grouped${capitalize_default(variant)}`, `grouped${capitalize_default(variant)}${capitalize_default(orientation)}`, `grouped${capitalize_default(variant)}${capitalize_default(color)}`, disabled && "disabled"],
      firstButton: ["firstButton"],
      lastButton: ["lastButton"],
      middleButton: ["middleButton"]
    };
    return (0, import_composeClasses44.unstable_composeClasses)(slots, getButtonGroupUtilityClass, classes);
  };
  var ButtonGroupRoot = styled_default("div", {
    name: "MuiButtonGroup",
    slot: "Root",
    overridesResolver
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "inline-flex",
    borderRadius: (theme.vars || theme).shape.borderRadius
  }, ownerState.variant === "contained" && {
    boxShadow: (theme.vars || theme).shadows[2]
  }, ownerState.disableElevation && {
    boxShadow: "none"
  }, ownerState.fullWidth && {
    width: "100%"
  }, ownerState.orientation === "vertical" && {
    flexDirection: "column"
  }, {
    [`& .${buttonGroupClasses_default.grouped}`]: _extends({
      minWidth: 40,
      "&:hover": _extends({}, ownerState.variant === "contained" && {
        boxShadow: "none"
      })
    }, ownerState.variant === "contained" && {
      boxShadow: "none"
    }),
    [`& .${buttonGroupClasses_default.firstButton},& .${buttonGroupClasses_default.middleButton}`]: _extends({}, ownerState.orientation === "horizontal" && {
      borderTopRightRadius: 0,
      borderBottomRightRadius: 0
    }, ownerState.orientation === "vertical" && {
      borderBottomRightRadius: 0,
      borderBottomLeftRadius: 0
    }, ownerState.variant === "text" && ownerState.orientation === "horizontal" && {
      borderRight: theme.vars ? `1px solid rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : `1px solid ${theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)"}`,
      [`&.${buttonGroupClasses_default.disabled}`]: {
        borderRight: `1px solid ${(theme.vars || theme).palette.action.disabled}`
      }
    }, ownerState.variant === "text" && ownerState.orientation === "vertical" && {
      borderBottom: theme.vars ? `1px solid rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : `1px solid ${theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)"}`,
      [`&.${buttonGroupClasses_default.disabled}`]: {
        borderBottom: `1px solid ${(theme.vars || theme).palette.action.disabled}`
      }
    }, ownerState.variant === "text" && ownerState.color !== "inherit" && {
      borderColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.5)` : (0, import_system24.alpha)(theme.palette[ownerState.color].main, 0.5)
    }, ownerState.variant === "outlined" && ownerState.orientation === "horizontal" && {
      borderRightColor: "transparent"
    }, ownerState.variant === "outlined" && ownerState.orientation === "vertical" && {
      borderBottomColor: "transparent"
    }, ownerState.variant === "contained" && ownerState.orientation === "horizontal" && {
      borderRight: `1px solid ${(theme.vars || theme).palette.grey[400]}`,
      [`&.${buttonGroupClasses_default.disabled}`]: {
        borderRight: `1px solid ${(theme.vars || theme).palette.action.disabled}`
      }
    }, ownerState.variant === "contained" && ownerState.orientation === "vertical" && {
      borderBottom: `1px solid ${(theme.vars || theme).palette.grey[400]}`,
      [`&.${buttonGroupClasses_default.disabled}`]: {
        borderBottom: `1px solid ${(theme.vars || theme).palette.action.disabled}`
      }
    }, ownerState.variant === "contained" && ownerState.color !== "inherit" && {
      borderColor: (theme.vars || theme).palette[ownerState.color].dark
    }, {
      "&:hover": _extends({}, ownerState.variant === "outlined" && ownerState.orientation === "horizontal" && {
        borderRightColor: "currentColor"
      }, ownerState.variant === "outlined" && ownerState.orientation === "vertical" && {
        borderBottomColor: "currentColor"
      })
    }),
    [`& .${buttonGroupClasses_default.lastButton},& .${buttonGroupClasses_default.middleButton}`]: _extends({}, ownerState.orientation === "horizontal" && {
      borderTopLeftRadius: 0,
      borderBottomLeftRadius: 0
    }, ownerState.orientation === "vertical" && {
      borderTopRightRadius: 0,
      borderTopLeftRadius: 0
    }, ownerState.variant === "outlined" && ownerState.orientation === "horizontal" && {
      marginLeft: -1
    }, ownerState.variant === "outlined" && ownerState.orientation === "vertical" && {
      marginTop: -1
    })
  }));
  var ButtonGroup = /* @__PURE__ */ React127.forwardRef(function ButtonGroup2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiButtonGroup"
    });
    const {
      children,
      className,
      color = "primary",
      component = "div",
      disabled = false,
      disableElevation = false,
      disableFocusRipple = false,
      disableRipple = false,
      fullWidth = false,
      orientation = "horizontal",
      size: size2 = "medium",
      variant = "outlined"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded67);
    const ownerState = _extends({}, props, {
      color,
      component,
      disabled,
      disableElevation,
      disableFocusRipple,
      disableRipple,
      fullWidth,
      orientation,
      size: size2,
      variant
    });
    const classes = useUtilityClasses47(ownerState);
    const context = React127.useMemo(() => ({
      className: classes.grouped,
      color,
      disabled,
      disableElevation,
      disableFocusRipple,
      disableRipple,
      fullWidth,
      size: size2,
      variant
    }), [color, disabled, disableElevation, disableFocusRipple, disableRipple, fullWidth, size2, variant, classes.grouped]);
    const getButtonPositionClassName = (index3, childrenParam) => {
      const isFirstButton = index3 === 0;
      const isLastButton = index3 === React127.Children.count(childrenParam) - 1;
      if (isFirstButton && isLastButton) {
        return "";
      }
      if (isFirstButton) {
        return classes.firstButton;
      }
      if (isLastButton) {
        return classes.lastButton;
      }
      return classes.middleButton;
    };
    return /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(ButtonGroupRoot, _extends({
      as: component,
      role: "group",
      className: clsx_default(classes.root, className),
      ref,
      ownerState
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(ButtonGroupContext_default.Provider, {
        value: context,
        children: React127.Children.map(children, (child, index3) => {
          if (!/* @__PURE__ */ React127.isValidElement(child)) {
            return child;
          }
          return /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(ButtonGroupButtonContext_default.Provider, {
            value: getButtonPositionClassName(index3, children),
            children: child
          });
        })
      })
    }));
  });
  true ? ButtonGroup.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types65.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types65.default.object,
    /**
     * @ignore
     */
    className: import_prop_types65.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'primary'
     */
    color: import_prop_types65.default.oneOfType([import_prop_types65.default.oneOf(["inherit", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types65.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types65.default.elementType,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types65.default.bool,
    /**
     * If `true`, no elevation is used.
     * @default false
     */
    disableElevation: import_prop_types65.default.bool,
    /**
     * If `true`, the button keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: import_prop_types65.default.bool,
    /**
     * If `true`, the button ripple effect is disabled.
     * @default false
     */
    disableRipple: import_prop_types65.default.bool,
    /**
     * If `true`, the buttons will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types65.default.bool,
    /**
     * The component orientation (layout flow direction).
     * @default 'horizontal'
     */
    orientation: import_prop_types65.default.oneOf(["horizontal", "vertical"]),
    /**
     * The size of the component.
     * `small` is equivalent to the dense button styling.
     * @default 'medium'
     */
    size: import_prop_types65.default.oneOfType([import_prop_types65.default.oneOf(["small", "medium", "large"]), import_prop_types65.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types65.default.oneOfType([import_prop_types65.default.arrayOf(import_prop_types65.default.oneOfType([import_prop_types65.default.func, import_prop_types65.default.object, import_prop_types65.default.bool])), import_prop_types65.default.func, import_prop_types65.default.object]),
    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: import_prop_types65.default.oneOfType([import_prop_types65.default.oneOf(["contained", "outlined", "text"]), import_prop_types65.default.string])
  } : void 0;
  var ButtonGroup_default = ButtonGroup;

  // node_modules/@mui/material/Card/Card.js
  init_extends();
  var React128 = __toESM(require_react());
  var import_prop_types66 = __toESM(require_prop_types());
  var import_utils135 = __toESM(require_utils());
  var import_composeClasses45 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/Card/cardClasses.js
  var import_utils134 = __toESM(require_utils());
  var import_generateUtilityClass53 = __toESM(require_generateUtilityClass3());
  function getCardUtilityClass(slot) {
    return (0, import_generateUtilityClass53.default)("MuiCard", slot);
  }
  var cardClasses = (0, import_utils134.unstable_generateUtilityClasses)("MuiCard", ["root"]);
  var cardClasses_default = cardClasses;

  // node_modules/@mui/material/Card/Card.js
  var import_jsx_runtime100 = __toESM(require_jsx_runtime());
  var _excluded68 = ["className", "raised"];
  var useUtilityClasses48 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return (0, import_composeClasses45.unstable_composeClasses)(slots, getCardUtilityClass, classes);
  };
  var CardRoot = styled_default(Paper_default, {
    name: "MuiCard",
    slot: "Root",
    overridesResolver: (props, styles7) => styles7.root
  })(() => {
    return {
      overflow: "hidden"
    };
  });
  var Card = /* @__PURE__ */ React128.forwardRef(function Card2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiCard"
    });
    const {
      className,
      raised = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded68);
    const ownerState = _extends({}, props, {
      raised
    });
    const classes = useUtilityClasses48(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(CardRoot, _extends({
      className: clsx_default(classes.root, className),
      elevation: raised ? 8 : void 0,
      ref,
      ownerState
    }, other));
  });
  true ? Card.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types66.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types66.default.object,
    /**
     * @ignore
     */
    className: import_prop_types66.default.string,
    /**
     * If `true`, the card will use raised styling.
     * @default false
     */
    raised: (0, import_utils135.chainPropTypes)(import_prop_types66.default.bool, (props) => {
      if (props.raised && props.variant === "outlined") {
        return new Error('MUI: Combining `raised={true}` with `variant="outlined"` has no effect.');
      }
      return null;
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types66.default.oneOfType([import_prop_types66.default.arrayOf(import_prop_types66.default.oneOfType([import_prop_types66.default.func, import_prop_types66.default.object, import_prop_types66.default.bool])), import_prop_types66.default.func, import_prop_types66.default.object])
  } : void 0;
  var Card_default = Card;

  // node_modules/@mui/material/CardActionArea/CardActionArea.js
  init_extends();
  var React129 = __toESM(require_react());
  var import_prop_types67 = __toESM(require_prop_types());
  var import_composeClasses46 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/CardActionArea/cardActionAreaClasses.js
  var import_utils136 = __toESM(require_utils());
  var import_generateUtilityClass54 = __toESM(require_generateUtilityClass3());
  function getCardActionAreaUtilityClass(slot) {
    return (0, import_generateUtilityClass54.default)("MuiCardActionArea", slot);
  }
  var cardActionAreaClasses = (0, import_utils136.unstable_generateUtilityClasses)("MuiCardActionArea", ["root", "focusVisible", "focusHighlight"]);
  var cardActionAreaClasses_default = cardActionAreaClasses;

  // node_modules/@mui/material/CardActionArea/CardActionArea.js
  var import_jsx_runtime101 = __toESM(require_jsx_runtime());
  var import_jsx_runtime102 = __toESM(require_jsx_runtime());
  var _excluded69 = ["children", "className", "focusVisibleClassName"];
  var useUtilityClasses49 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      focusHighlight: ["focusHighlight"]
    };
    return (0, import_composeClasses46.unstable_composeClasses)(slots, getCardActionAreaUtilityClass, classes);
  };
  var CardActionAreaRoot = styled_default(ButtonBase_default, {
    name: "MuiCardActionArea",
    slot: "Root",
    overridesResolver: (props, styles7) => styles7.root
  })(({
    theme
  }) => ({
    display: "block",
    textAlign: "inherit",
    borderRadius: "inherit",
    // for Safari to work https://github.com/mui/material-ui/issues/36285.
    width: "100%",
    [`&:hover .${cardActionAreaClasses_default.focusHighlight}`]: {
      opacity: (theme.vars || theme).palette.action.hoverOpacity,
      "@media (hover: none)": {
        opacity: 0
      }
    },
    [`&.${cardActionAreaClasses_default.focusVisible} .${cardActionAreaClasses_default.focusHighlight}`]: {
      opacity: (theme.vars || theme).palette.action.focusOpacity
    }
  }));
  var CardActionAreaFocusHighlight = styled_default("span", {
    name: "MuiCardActionArea",
    slot: "FocusHighlight",
    overridesResolver: (props, styles7) => styles7.focusHighlight
  })(({
    theme
  }) => ({
    overflow: "hidden",
    pointerEvents: "none",
    position: "absolute",
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    borderRadius: "inherit",
    opacity: 0,
    backgroundColor: "currentcolor",
    transition: theme.transitions.create("opacity", {
      duration: theme.transitions.duration.short
    })
  }));
  var CardActionArea = /* @__PURE__ */ React129.forwardRef(function CardActionArea2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiCardActionArea"
    });
    const {
      children,
      className,
      focusVisibleClassName
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded69);
    const ownerState = props;
    const classes = useUtilityClasses49(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime102.jsxs)(CardActionAreaRoot, _extends({
      className: clsx_default(classes.root, className),
      focusVisibleClassName: clsx_default(focusVisibleClassName, classes.focusVisible),
      ref,
      ownerState
    }, other, {
      children: [children, /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(CardActionAreaFocusHighlight, {
        className: classes.focusHighlight,
        ownerState
      })]
    }));
  });
  true ? CardActionArea.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types67.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types67.default.object,
    /**
     * @ignore
     */
    className: import_prop_types67.default.string,
    /**
     * @ignore
     */
    focusVisibleClassName: import_prop_types67.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types67.default.oneOfType([import_prop_types67.default.arrayOf(import_prop_types67.default.oneOfType([import_prop_types67.default.func, import_prop_types67.default.object, import_prop_types67.default.bool])), import_prop_types67.default.func, import_prop_types67.default.object])
  } : void 0;
  var CardActionArea_default = CardActionArea;

  // node_modules/@mui/material/CardActions/CardActions.js
  init_extends();
  var React130 = __toESM(require_react());
  var import_prop_types68 = __toESM(require_prop_types());
  var import_composeClasses47 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/CardActions/cardActionsClasses.js
  var import_utils137 = __toESM(require_utils());
  var import_generateUtilityClass55 = __toESM(require_generateUtilityClass3());
  function getCardActionsUtilityClass(slot) {
    return (0, import_generateUtilityClass55.default)("MuiCardActions", slot);
  }
  var cardActionsClasses = (0, import_utils137.unstable_generateUtilityClasses)("MuiCardActions", ["root", "spacing"]);
  var cardActionsClasses_default = cardActionsClasses;

  // node_modules/@mui/material/CardActions/CardActions.js
  var import_jsx_runtime103 = __toESM(require_jsx_runtime());
  var _excluded70 = ["disableSpacing", "className"];
  var useUtilityClasses50 = (ownerState) => {
    const {
      classes,
      disableSpacing
    } = ownerState;
    const slots = {
      root: ["root", !disableSpacing && "spacing"]
    };
    return (0, import_composeClasses47.unstable_composeClasses)(slots, getCardActionsUtilityClass, classes);
  };
  var CardActionsRoot = styled_default("div", {
    name: "MuiCardActions",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, !ownerState.disableSpacing && styles7.spacing];
    }
  })(({
    ownerState
  }) => _extends({
    display: "flex",
    alignItems: "center",
    padding: 8
  }, !ownerState.disableSpacing && {
    "& > :not(:first-of-type)": {
      marginLeft: 8
    }
  }));
  var CardActions = /* @__PURE__ */ React130.forwardRef(function CardActions2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiCardActions"
    });
    const {
      disableSpacing = false,
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded70);
    const ownerState = _extends({}, props, {
      disableSpacing
    });
    const classes = useUtilityClasses50(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(CardActionsRoot, _extends({
      className: clsx_default(classes.root, className),
      ownerState,
      ref
    }, other));
  });
  true ? CardActions.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types68.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types68.default.object,
    /**
     * @ignore
     */
    className: import_prop_types68.default.string,
    /**
     * If `true`, the actions do not have additional margin.
     * @default false
     */
    disableSpacing: import_prop_types68.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types68.default.oneOfType([import_prop_types68.default.arrayOf(import_prop_types68.default.oneOfType([import_prop_types68.default.func, import_prop_types68.default.object, import_prop_types68.default.bool])), import_prop_types68.default.func, import_prop_types68.default.object])
  } : void 0;
  var CardActions_default = CardActions;

  // node_modules/@mui/material/CardContent/CardContent.js
  init_extends();
  var React131 = __toESM(require_react());
  var import_prop_types69 = __toESM(require_prop_types());
  var import_composeClasses48 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/CardContent/cardContentClasses.js
  var import_utils138 = __toESM(require_utils());
  var import_generateUtilityClass56 = __toESM(require_generateUtilityClass3());
  function getCardContentUtilityClass(slot) {
    return (0, import_generateUtilityClass56.default)("MuiCardContent", slot);
  }
  var cardContentClasses = (0, import_utils138.unstable_generateUtilityClasses)("MuiCardContent", ["root"]);
  var cardContentClasses_default = cardContentClasses;

  // node_modules/@mui/material/CardContent/CardContent.js
  var import_jsx_runtime104 = __toESM(require_jsx_runtime());
  var _excluded71 = ["className", "component"];
  var useUtilityClasses51 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return (0, import_composeClasses48.unstable_composeClasses)(slots, getCardContentUtilityClass, classes);
  };
  var CardContentRoot = styled_default("div", {
    name: "MuiCardContent",
    slot: "Root",
    overridesResolver: (props, styles7) => styles7.root
  })(() => {
    return {
      padding: 16,
      "&:last-child": {
        paddingBottom: 24
      }
    };
  });
  var CardContent = /* @__PURE__ */ React131.forwardRef(function CardContent2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiCardContent"
    });
    const {
      className,
      component = "div"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded71);
    const ownerState = _extends({}, props, {
      component
    });
    const classes = useUtilityClasses51(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(CardContentRoot, _extends({
      as: component,
      className: clsx_default(classes.root, className),
      ownerState,
      ref
    }, other));
  });
  true ? CardContent.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types69.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types69.default.object,
    /**
     * @ignore
     */
    className: import_prop_types69.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types69.default.elementType,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types69.default.oneOfType([import_prop_types69.default.arrayOf(import_prop_types69.default.oneOfType([import_prop_types69.default.func, import_prop_types69.default.object, import_prop_types69.default.bool])), import_prop_types69.default.func, import_prop_types69.default.object])
  } : void 0;
  var CardContent_default = CardContent;

  // node_modules/@mui/material/CardHeader/CardHeader.js
  init_extends();
  var React132 = __toESM(require_react());
  var import_prop_types70 = __toESM(require_prop_types());
  var import_composeClasses49 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/CardHeader/cardHeaderClasses.js
  var import_utils139 = __toESM(require_utils());
  var import_generateUtilityClass57 = __toESM(require_generateUtilityClass3());
  function getCardHeaderUtilityClass(slot) {
    return (0, import_generateUtilityClass57.default)("MuiCardHeader", slot);
  }
  var cardHeaderClasses = (0, import_utils139.unstable_generateUtilityClasses)("MuiCardHeader", ["root", "avatar", "action", "content", "title", "subheader"]);
  var cardHeaderClasses_default = cardHeaderClasses;

  // node_modules/@mui/material/CardHeader/CardHeader.js
  var import_jsx_runtime105 = __toESM(require_jsx_runtime());
  var import_jsx_runtime106 = __toESM(require_jsx_runtime());
  var _excluded72 = ["action", "avatar", "className", "component", "disableTypography", "subheader", "subheaderTypographyProps", "title", "titleTypographyProps"];
  var useUtilityClasses52 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      avatar: ["avatar"],
      action: ["action"],
      content: ["content"],
      title: ["title"],
      subheader: ["subheader"]
    };
    return (0, import_composeClasses49.unstable_composeClasses)(slots, getCardHeaderUtilityClass, classes);
  };
  var CardHeaderRoot = styled_default("div", {
    name: "MuiCardHeader",
    slot: "Root",
    overridesResolver: (props, styles7) => _extends({
      [`& .${cardHeaderClasses_default.title}`]: styles7.title,
      [`& .${cardHeaderClasses_default.subheader}`]: styles7.subheader
    }, styles7.root)
  })({
    display: "flex",
    alignItems: "center",
    padding: 16
  });
  var CardHeaderAvatar = styled_default("div", {
    name: "MuiCardHeader",
    slot: "Avatar",
    overridesResolver: (props, styles7) => styles7.avatar
  })({
    display: "flex",
    flex: "0 0 auto",
    marginRight: 16
  });
  var CardHeaderAction = styled_default("div", {
    name: "MuiCardHeader",
    slot: "Action",
    overridesResolver: (props, styles7) => styles7.action
  })({
    flex: "0 0 auto",
    alignSelf: "flex-start",
    marginTop: -4,
    marginRight: -8,
    marginBottom: -4
  });
  var CardHeaderContent = styled_default("div", {
    name: "MuiCardHeader",
    slot: "Content",
    overridesResolver: (props, styles7) => styles7.content
  })({
    flex: "1 1 auto"
  });
  var CardHeader = /* @__PURE__ */ React132.forwardRef(function CardHeader2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiCardHeader"
    });
    const {
      action,
      avatar,
      className,
      component = "div",
      disableTypography = false,
      subheader: subheaderProp,
      subheaderTypographyProps,
      title: titleProp,
      titleTypographyProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded72);
    const ownerState = _extends({}, props, {
      component,
      disableTypography
    });
    const classes = useUtilityClasses52(ownerState);
    let title = titleProp;
    if (title != null && title.type !== Typography_default && !disableTypography) {
      title = /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(Typography_default, _extends({
        variant: avatar ? "body2" : "h5",
        className: classes.title,
        component: "span",
        display: "block"
      }, titleTypographyProps, {
        children: title
      }));
    }
    let subheader = subheaderProp;
    if (subheader != null && subheader.type !== Typography_default && !disableTypography) {
      subheader = /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(Typography_default, _extends({
        variant: avatar ? "body2" : "body1",
        className: classes.subheader,
        color: "text.secondary",
        component: "span",
        display: "block"
      }, subheaderTypographyProps, {
        children: subheader
      }));
    }
    return /* @__PURE__ */ (0, import_jsx_runtime106.jsxs)(CardHeaderRoot, _extends({
      className: clsx_default(classes.root, className),
      as: component,
      ref,
      ownerState
    }, other, {
      children: [avatar && /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(CardHeaderAvatar, {
        className: classes.avatar,
        ownerState,
        children: avatar
      }), /* @__PURE__ */ (0, import_jsx_runtime106.jsxs)(CardHeaderContent, {
        className: classes.content,
        ownerState,
        children: [title, subheader]
      }), action && /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(CardHeaderAction, {
        className: classes.action,
        ownerState,
        children: action
      })]
    }));
  });
  true ? CardHeader.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The action to display in the card header.
     */
    action: import_prop_types70.default.node,
    /**
     * The Avatar element to display.
     */
    avatar: import_prop_types70.default.node,
    /**
     * @ignore
     */
    children: import_prop_types70.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types70.default.object,
    /**
     * @ignore
     */
    className: import_prop_types70.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types70.default.elementType,
    /**
     * If `true`, `subheader` and `title` won't be wrapped by a Typography component.
     * This can be useful to render an alternative Typography variant by wrapping
     * the `title` text, and optional `subheader` text
     * with the Typography component.
     * @default false
     */
    disableTypography: import_prop_types70.default.bool,
    /**
     * The content of the component.
     */
    subheader: import_prop_types70.default.node,
    /**
     * These props will be forwarded to the subheader
     * (as long as disableTypography is not `true`).
     */
    subheaderTypographyProps: import_prop_types70.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types70.default.oneOfType([import_prop_types70.default.arrayOf(import_prop_types70.default.oneOfType([import_prop_types70.default.func, import_prop_types70.default.object, import_prop_types70.default.bool])), import_prop_types70.default.func, import_prop_types70.default.object]),
    /**
     * The content of the component.
     */
    title: import_prop_types70.default.node,
    /**
     * These props will be forwarded to the title
     * (as long as disableTypography is not `true`).
     */
    titleTypographyProps: import_prop_types70.default.object
  } : void 0;
  var CardHeader_default = CardHeader;

  // node_modules/@mui/material/CardMedia/CardMedia.js
  init_extends();
  var React133 = __toESM(require_react());
  var import_prop_types71 = __toESM(require_prop_types());
  var import_utils141 = __toESM(require_utils());
  var import_composeClasses50 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/CardMedia/cardMediaClasses.js
  var import_utils140 = __toESM(require_utils());
  var import_generateUtilityClass58 = __toESM(require_generateUtilityClass3());
  function getCardMediaUtilityClass(slot) {
    return (0, import_generateUtilityClass58.default)("MuiCardMedia", slot);
  }
  var cardMediaClasses = (0, import_utils140.unstable_generateUtilityClasses)("MuiCardMedia", ["root", "media", "img"]);
  var cardMediaClasses_default = cardMediaClasses;

  // node_modules/@mui/material/CardMedia/CardMedia.js
  var import_jsx_runtime107 = __toESM(require_jsx_runtime());
  var _excluded73 = ["children", "className", "component", "image", "src", "style"];
  var useUtilityClasses53 = (ownerState) => {
    const {
      classes,
      isMediaComponent,
      isImageComponent
    } = ownerState;
    const slots = {
      root: ["root", isMediaComponent && "media", isImageComponent && "img"]
    };
    return (0, import_composeClasses50.unstable_composeClasses)(slots, getCardMediaUtilityClass, classes);
  };
  var CardMediaRoot = styled_default("div", {
    name: "MuiCardMedia",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      const {
        isMediaComponent,
        isImageComponent
      } = ownerState;
      return [styles7.root, isMediaComponent && styles7.media, isImageComponent && styles7.img];
    }
  })(({
    ownerState
  }) => _extends({
    display: "block",
    backgroundSize: "cover",
    backgroundRepeat: "no-repeat",
    backgroundPosition: "center"
  }, ownerState.isMediaComponent && {
    width: "100%"
  }, ownerState.isImageComponent && {
    // ⚠️ object-fit is not supported by IE11.
    objectFit: "cover"
  }));
  var MEDIA_COMPONENTS = ["video", "audio", "picture", "iframe", "img"];
  var IMAGE_COMPONENTS = ["picture", "img"];
  var CardMedia = /* @__PURE__ */ React133.forwardRef(function CardMedia2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiCardMedia"
    });
    const {
      children,
      className,
      component = "div",
      image,
      src,
      style
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded73);
    const isMediaComponent = MEDIA_COMPONENTS.indexOf(component) !== -1;
    const composedStyle = !isMediaComponent && image ? _extends({
      backgroundImage: `url("${image}")`
    }, style) : style;
    const ownerState = _extends({}, props, {
      component,
      isMediaComponent,
      isImageComponent: IMAGE_COMPONENTS.indexOf(component) !== -1
    });
    const classes = useUtilityClasses53(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(CardMediaRoot, _extends({
      className: clsx_default(classes.root, className),
      as: component,
      role: !isMediaComponent && image ? "img" : void 0,
      ref,
      style: composedStyle,
      ownerState,
      src: isMediaComponent ? image || src : void 0
    }, other, {
      children
    }));
  });
  true ? CardMedia.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: (0, import_utils141.chainPropTypes)(import_prop_types71.default.node, (props) => {
      if (!props.children && !props.image && !props.src && !props.component) {
        return new Error("MUI: Either `children`, `image`, `src` or `component` prop must be specified.");
      }
      return null;
    }),
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types71.default.object,
    /**
     * @ignore
     */
    className: import_prop_types71.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types71.default.elementType,
    /**
     * Image to be displayed as a background image.
     * Either `image` or `src` prop must be specified.
     * Note that caller must specify height otherwise the image will not be visible.
     */
    image: import_prop_types71.default.string,
    /**
     * An alias for `image` property.
     * Available only with media components.
     * Media components: `video`, `audio`, `picture`, `iframe`, `img`.
     */
    src: import_prop_types71.default.string,
    /**
     * @ignore
     */
    style: import_prop_types71.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types71.default.oneOfType([import_prop_types71.default.arrayOf(import_prop_types71.default.oneOfType([import_prop_types71.default.func, import_prop_types71.default.object, import_prop_types71.default.bool])), import_prop_types71.default.func, import_prop_types71.default.object])
  } : void 0;
  var CardMedia_default = CardMedia;

  // node_modules/@mui/material/Checkbox/Checkbox.js
  init_extends();
  var React138 = __toESM(require_react());
  var import_prop_types73 = __toESM(require_prop_types());
  var import_utils145 = __toESM(require_utils());
  var import_composeClasses52 = __toESM(require_composeClasses3());
  var import_system25 = __toESM(require_system());

  // node_modules/@mui/material/internal/SwitchBase.js
  init_extends();
  var React134 = __toESM(require_react());
  var import_prop_types72 = __toESM(require_prop_types());
  var import_utils143 = __toESM(require_utils());
  var import_composeClasses51 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/internal/switchBaseClasses.js
  var import_utils142 = __toESM(require_utils());
  var import_generateUtilityClass59 = __toESM(require_generateUtilityClass3());
  function getSwitchBaseUtilityClass(slot) {
    return (0, import_generateUtilityClass59.default)("PrivateSwitchBase", slot);
  }
  var switchBaseClasses = (0, import_utils142.unstable_generateUtilityClasses)("PrivateSwitchBase", ["root", "checked", "disabled", "input", "edgeStart", "edgeEnd"]);

  // node_modules/@mui/material/internal/SwitchBase.js
  var import_jsx_runtime108 = __toESM(require_jsx_runtime());
  var import_jsx_runtime109 = __toESM(require_jsx_runtime());
  var _excluded74 = ["autoFocus", "checked", "checkedIcon", "className", "defaultChecked", "disabled", "disableFocusRipple", "edge", "icon", "id", "inputProps", "inputRef", "name", "onBlur", "onChange", "onFocus", "readOnly", "required", "tabIndex", "type", "value"];
  var useUtilityClasses54 = (ownerState) => {
    const {
      classes,
      checked,
      disabled,
      edge
    } = ownerState;
    const slots = {
      root: ["root", checked && "checked", disabled && "disabled", edge && `edge${capitalize_default(edge)}`],
      input: ["input"]
    };
    return (0, import_composeClasses51.unstable_composeClasses)(slots, getSwitchBaseUtilityClass, classes);
  };
  var SwitchBaseRoot = styled_default(ButtonBase_default)(({
    ownerState
  }) => _extends({
    padding: 9,
    borderRadius: "50%"
  }, ownerState.edge === "start" && {
    marginLeft: ownerState.size === "small" ? -3 : -12
  }, ownerState.edge === "end" && {
    marginRight: ownerState.size === "small" ? -3 : -12
  }));
  var SwitchBaseInput = styled_default("input")({
    cursor: "inherit",
    position: "absolute",
    opacity: 0,
    width: "100%",
    height: "100%",
    top: 0,
    left: 0,
    margin: 0,
    padding: 0,
    zIndex: 1
  });
  var SwitchBase = /* @__PURE__ */ React134.forwardRef(function SwitchBase2(props, ref) {
    const {
      autoFocus,
      checked: checkedProp,
      checkedIcon,
      className,
      defaultChecked,
      disabled: disabledProp,
      disableFocusRipple = false,
      edge = false,
      icon,
      id,
      inputProps,
      inputRef,
      name,
      onBlur,
      onChange,
      onFocus,
      readOnly,
      required = false,
      tabIndex,
      type,
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded74);
    const [checked, setCheckedState] = useControlled_default({
      controlled: checkedProp,
      default: Boolean(defaultChecked),
      name: "SwitchBase",
      state: "checked"
    });
    const muiFormControl = useFormControl();
    const handleFocus = (event) => {
      if (onFocus) {
        onFocus(event);
      }
      if (muiFormControl && muiFormControl.onFocus) {
        muiFormControl.onFocus(event);
      }
    };
    const handleBlur2 = (event) => {
      if (onBlur) {
        onBlur(event);
      }
      if (muiFormControl && muiFormControl.onBlur) {
        muiFormControl.onBlur(event);
      }
    };
    const handleInputChange = (event) => {
      if (event.nativeEvent.defaultPrevented) {
        return;
      }
      const newChecked = event.target.checked;
      setCheckedState(newChecked);
      if (onChange) {
        onChange(event, newChecked);
      }
    };
    let disabled = disabledProp;
    if (muiFormControl) {
      if (typeof disabled === "undefined") {
        disabled = muiFormControl.disabled;
      }
    }
    const hasLabelFor = type === "checkbox" || type === "radio";
    const ownerState = _extends({}, props, {
      checked,
      disabled,
      disableFocusRipple,
      edge
    });
    const classes = useUtilityClasses54(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime109.jsxs)(SwitchBaseRoot, _extends({
      component: "span",
      className: clsx_default(classes.root, className),
      centerRipple: true,
      focusRipple: !disableFocusRipple,
      disabled,
      tabIndex: null,
      role: void 0,
      onFocus: handleFocus,
      onBlur: handleBlur2,
      ownerState,
      ref
    }, other, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime108.jsx)(SwitchBaseInput, _extends({
        autoFocus,
        checked: checkedProp,
        defaultChecked,
        className: classes.input,
        disabled,
        id: hasLabelFor ? id : void 0,
        name,
        onChange: handleInputChange,
        readOnly,
        ref: inputRef,
        required,
        ownerState,
        tabIndex,
        type
      }, type === "checkbox" && value === void 0 ? {} : {
        value
      }, inputProps)), checked ? checkedIcon : icon]
    }));
  });
  true ? SwitchBase.propTypes = {
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: import_prop_types72.default.bool,
    /**
     * If `true`, the component is checked.
     */
    checked: import_prop_types72.default.bool,
    /**
     * The icon to display when the component is checked.
     */
    checkedIcon: import_prop_types72.default.node.isRequired,
    /**
     * Override or extend the styles applied to the component.
     * See [CSS API](#css) below for more details.
     */
    classes: import_prop_types72.default.object,
    /**
     * @ignore
     */
    className: import_prop_types72.default.string,
    /**
     * @ignore
     */
    defaultChecked: import_prop_types72.default.bool,
    /**
     * If `true`, the component is disabled.
     */
    disabled: import_prop_types72.default.bool,
    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: import_prop_types72.default.bool,
    /**
     * If given, uses a negative margin to counteract the padding on one
     * side (this is often helpful for aligning the left or right
     * side of the icon with content above or below, without ruining the border
     * size and shape).
     * @default false
     */
    edge: import_prop_types72.default.oneOf(["end", "start", false]),
    /**
     * The icon to display when the component is unchecked.
     */
    icon: import_prop_types72.default.node.isRequired,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types72.default.string,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: import_prop_types72.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: import_utils143.refType,
    /*
     * @ignore
     */
    name: import_prop_types72.default.string,
    /**
     * @ignore
     */
    onBlur: import_prop_types72.default.func,
    /**
     * Callback fired when the state is changed.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: import_prop_types72.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types72.default.func,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: import_prop_types72.default.bool,
    /**
     * If `true`, the `input` element is required.
     */
    required: import_prop_types72.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types72.default.object,
    /**
     * @ignore
     */
    tabIndex: import_prop_types72.default.oneOfType([import_prop_types72.default.number, import_prop_types72.default.string]),
    /**
     * The input component prop `type`.
     */
    type: import_prop_types72.default.string.isRequired,
    /**
     * The value of the component.
     */
    value: import_prop_types72.default.any
  } : void 0;
  var SwitchBase_default = SwitchBase;

  // node_modules/@mui/material/internal/svg-icons/CheckBoxOutlineBlank.js
  var React135 = __toESM(require_react());
  var import_jsx_runtime110 = __toESM(require_jsx_runtime());
  var CheckBoxOutlineBlank_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime110.jsx)("path", {
    d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
  }), "CheckBoxOutlineBlank");

  // node_modules/@mui/material/internal/svg-icons/CheckBox.js
  var React136 = __toESM(require_react());
  var import_jsx_runtime111 = __toESM(require_jsx_runtime());
  var CheckBox_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime111.jsx)("path", {
    d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
  }), "CheckBox");

  // node_modules/@mui/material/internal/svg-icons/IndeterminateCheckBox.js
  var React137 = __toESM(require_react());
  var import_jsx_runtime112 = __toESM(require_jsx_runtime());
  var IndeterminateCheckBox_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime112.jsx)("path", {
    d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"
  }), "IndeterminateCheckBox");

  // node_modules/@mui/material/Checkbox/checkboxClasses.js
  var import_utils144 = __toESM(require_utils());
  var import_generateUtilityClass60 = __toESM(require_generateUtilityClass3());
  function getCheckboxUtilityClass(slot) {
    return (0, import_generateUtilityClass60.default)("MuiCheckbox", slot);
  }
  var checkboxClasses = (0, import_utils144.unstable_generateUtilityClasses)("MuiCheckbox", ["root", "checked", "disabled", "indeterminate", "colorPrimary", "colorSecondary", "sizeSmall", "sizeMedium"]);
  var checkboxClasses_default = checkboxClasses;

  // node_modules/@mui/material/Checkbox/Checkbox.js
  var import_jsx_runtime113 = __toESM(require_jsx_runtime());
  var _excluded75 = ["checkedIcon", "color", "icon", "indeterminate", "indeterminateIcon", "inputProps", "size", "className"];
  var useUtilityClasses55 = (ownerState) => {
    const {
      classes,
      indeterminate,
      color,
      size: size2
    } = ownerState;
    const slots = {
      root: ["root", indeterminate && "indeterminate", `color${capitalize_default(color)}`, `size${capitalize_default(size2)}`]
    };
    const composedClasses = (0, import_composeClasses52.unstable_composeClasses)(slots, getCheckboxUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var CheckboxRoot = styled_default(SwitchBase_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiCheckbox",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, ownerState.indeterminate && styles7.indeterminate, ownerState.color !== "default" && styles7[`color${capitalize_default(ownerState.color)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    color: (theme.vars || theme).palette.text.secondary
  }, !ownerState.disableRipple && {
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${ownerState.color === "default" ? theme.vars.palette.action.activeChannel : theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_system25.alpha)(ownerState.color === "default" ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    }
  }, ownerState.color !== "default" && {
    [`&.${checkboxClasses_default.checked}, &.${checkboxClasses_default.indeterminate}`]: {
      color: (theme.vars || theme).palette[ownerState.color].main
    },
    [`&.${checkboxClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.action.disabled
    }
  }));
  var defaultCheckedIcon = /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(CheckBox_default, {});
  var defaultIcon = /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(CheckBoxOutlineBlank_default, {});
  var defaultIndeterminateIcon = /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(IndeterminateCheckBox_default, {});
  var Checkbox = /* @__PURE__ */ React138.forwardRef(function Checkbox2(inProps, ref) {
    var _icon$props$fontSize, _indeterminateIcon$pr;
    const props = useThemeProps({
      props: inProps,
      name: "MuiCheckbox"
    });
    const {
      checkedIcon = defaultCheckedIcon,
      color = "primary",
      icon: iconProp = defaultIcon,
      indeterminate = false,
      indeterminateIcon: indeterminateIconProp = defaultIndeterminateIcon,
      inputProps,
      size: size2 = "medium",
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded75);
    const icon = indeterminate ? indeterminateIconProp : iconProp;
    const indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;
    const ownerState = _extends({}, props, {
      color,
      indeterminate,
      size: size2
    });
    const classes = useUtilityClasses55(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(CheckboxRoot, _extends({
      type: "checkbox",
      inputProps: _extends({
        "data-indeterminate": indeterminate
      }, inputProps),
      icon: /* @__PURE__ */ React138.cloneElement(icon, {
        fontSize: (_icon$props$fontSize = icon.props.fontSize) != null ? _icon$props$fontSize : size2
      }),
      checkedIcon: /* @__PURE__ */ React138.cloneElement(indeterminateIcon, {
        fontSize: (_indeterminateIcon$pr = indeterminateIcon.props.fontSize) != null ? _indeterminateIcon$pr : size2
      }),
      ownerState,
      ref,
      className: clsx_default(classes.root, className)
    }, other, {
      classes
    }));
  });
  true ? Checkbox.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * If `true`, the component is checked.
     */
    checked: import_prop_types73.default.bool,
    /**
     * The icon to display when the component is checked.
     * @default <CheckBoxIcon />
     */
    checkedIcon: import_prop_types73.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types73.default.object,
    /**
     * @ignore
     */
    className: import_prop_types73.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'primary'
     */
    color: import_prop_types73.default.oneOfType([import_prop_types73.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types73.default.string]),
    /**
     * The default checked state. Use when the component is not controlled.
     */
    defaultChecked: import_prop_types73.default.bool,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types73.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     * @default false
     */
    disableRipple: import_prop_types73.default.bool,
    /**
     * The icon to display when the component is unchecked.
     * @default <CheckBoxOutlineBlankIcon />
     */
    icon: import_prop_types73.default.node,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types73.default.string,
    /**
     * If `true`, the component appears indeterminate.
     * This does not set the native input element to indeterminate due
     * to inconsistent behavior across browsers.
     * However, we set a `data-indeterminate` attribute on the `input`.
     * @default false
     */
    indeterminate: import_prop_types73.default.bool,
    /**
     * The icon to display when the component is indeterminate.
     * @default <IndeterminateCheckBoxIcon />
     */
    indeterminateIcon: import_prop_types73.default.node,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: import_prop_types73.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: import_utils145.refType,
    /**
     * Callback fired when the state is changed.
     *
     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: import_prop_types73.default.func,
    /**
     * If `true`, the `input` element is required.
     * @default false
     */
    required: import_prop_types73.default.bool,
    /**
     * The size of the component.
     * `small` is equivalent to the dense checkbox styling.
     * @default 'medium'
     */
    size: import_prop_types73.default.oneOfType([import_prop_types73.default.oneOf(["medium", "small"]), import_prop_types73.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types73.default.oneOfType([import_prop_types73.default.arrayOf(import_prop_types73.default.oneOfType([import_prop_types73.default.func, import_prop_types73.default.object, import_prop_types73.default.bool])), import_prop_types73.default.func, import_prop_types73.default.object]),
    /**
     * The value of the component. The DOM API casts this to a string.
     * The browser uses "on" as the default value.
     */
    value: import_prop_types73.default.any
  } : void 0;
  var Checkbox_default = Checkbox;

  // node_modules/@mui/material/CircularProgress/CircularProgress.js
  init_extends();
  var React139 = __toESM(require_react());
  var import_prop_types74 = __toESM(require_prop_types());
  var import_utils147 = __toESM(require_utils());
  var import_composeClasses53 = __toESM(require_composeClasses3());
  var import_system26 = __toESM(require_system());

  // node_modules/@mui/material/CircularProgress/circularProgressClasses.js
  var import_utils146 = __toESM(require_utils());
  var import_generateUtilityClass61 = __toESM(require_generateUtilityClass3());
  function getCircularProgressUtilityClass(slot) {
    return (0, import_generateUtilityClass61.default)("MuiCircularProgress", slot);
  }
  var circularProgressClasses = (0, import_utils146.unstable_generateUtilityClasses)("MuiCircularProgress", ["root", "determinate", "indeterminate", "colorPrimary", "colorSecondary", "svg", "circle", "circleDeterminate", "circleIndeterminate", "circleDisableShrink"]);
  var circularProgressClasses_default = circularProgressClasses;

  // node_modules/@mui/material/CircularProgress/CircularProgress.js
  var import_jsx_runtime114 = __toESM(require_jsx_runtime());
  var _excluded76 = ["className", "color", "disableShrink", "size", "style", "thickness", "value", "variant"];
  var _2 = (t) => t;
  var _t5;
  var _t22;
  var _t32;
  var _t42;
  var SIZE = 44;
  var circularRotateKeyframe = (0, import_system26.keyframes)(_t5 || (_t5 = _2`
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
`));
  var circularDashKeyframe = (0, import_system26.keyframes)(_t22 || (_t22 = _2`
  0% {
    stroke-dasharray: 1px, 200px;
    stroke-dashoffset: 0;
  }

  50% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -15px;
  }

  100% {
    stroke-dasharray: 100px, 200px;
    stroke-dashoffset: -125px;
  }
`));
  var useUtilityClasses56 = (ownerState) => {
    const {
      classes,
      variant,
      color,
      disableShrink
    } = ownerState;
    const slots = {
      root: ["root", variant, `color${capitalize_default(color)}`],
      svg: ["svg"],
      circle: ["circle", `circle${capitalize_default(variant)}`, disableShrink && "circleDisableShrink"]
    };
    return (0, import_composeClasses53.unstable_composeClasses)(slots, getCircularProgressUtilityClass, classes);
  };
  var CircularProgressRoot = styled_default("span", {
    name: "MuiCircularProgress",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, styles7[ownerState.variant], styles7[`color${capitalize_default(ownerState.color)}`]];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    display: "inline-block"
  }, ownerState.variant === "determinate" && {
    transition: theme.transitions.create("transform")
  }, ownerState.color !== "inherit" && {
    color: (theme.vars || theme).palette[ownerState.color].main
  }), ({
    ownerState
  }) => ownerState.variant === "indeterminate" && (0, import_system26.css)(_t32 || (_t32 = _2`
      animation: ${0} 1.4s linear infinite;
    `), circularRotateKeyframe));
  var CircularProgressSVG = styled_default("svg", {
    name: "MuiCircularProgress",
    slot: "Svg",
    overridesResolver: (props, styles7) => styles7.svg
  })({
    display: "block"
    // Keeps the progress centered
  });
  var CircularProgressCircle = styled_default("circle", {
    name: "MuiCircularProgress",
    slot: "Circle",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.circle, styles7[`circle${capitalize_default(ownerState.variant)}`], ownerState.disableShrink && styles7.circleDisableShrink];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    stroke: "currentColor"
  }, ownerState.variant === "determinate" && {
    transition: theme.transitions.create("stroke-dashoffset")
  }, ownerState.variant === "indeterminate" && {
    // Some default value that looks fine waiting for the animation to kicks in.
    strokeDasharray: "80px, 200px",
    strokeDashoffset: 0
    // Add the unit to fix a Edge 16 and below bug.
  }), ({
    ownerState
  }) => ownerState.variant === "indeterminate" && !ownerState.disableShrink && (0, import_system26.css)(_t42 || (_t42 = _2`
      animation: ${0} 1.4s ease-in-out infinite;
    `), circularDashKeyframe));
  var CircularProgress = /* @__PURE__ */ React139.forwardRef(function CircularProgress2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiCircularProgress"
    });
    const {
      className,
      color = "primary",
      disableShrink = false,
      size: size2 = 40,
      style,
      thickness = 3.6,
      value = 0,
      variant = "indeterminate"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded76);
    const ownerState = _extends({}, props, {
      color,
      disableShrink,
      size: size2,
      thickness,
      value,
      variant
    });
    const classes = useUtilityClasses56(ownerState);
    const circleStyle = {};
    const rootStyle = {};
    const rootProps = {};
    if (variant === "determinate") {
      const circumference = 2 * Math.PI * ((SIZE - thickness) / 2);
      circleStyle.strokeDasharray = circumference.toFixed(3);
      rootProps["aria-valuenow"] = Math.round(value);
      circleStyle.strokeDashoffset = `${((100 - value) / 100 * circumference).toFixed(3)}px`;
      rootStyle.transform = "rotate(-90deg)";
    }
    return /* @__PURE__ */ (0, import_jsx_runtime114.jsx)(CircularProgressRoot, _extends({
      className: clsx_default(classes.root, className),
      style: _extends({
        width: size2,
        height: size2
      }, rootStyle, style),
      ownerState,
      ref,
      role: "progressbar"
    }, rootProps, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime114.jsx)(CircularProgressSVG, {
        className: classes.svg,
        ownerState,
        viewBox: `${SIZE / 2} ${SIZE / 2} ${SIZE} ${SIZE}`,
        children: /* @__PURE__ */ (0, import_jsx_runtime114.jsx)(CircularProgressCircle, {
          className: classes.circle,
          style: circleStyle,
          ownerState,
          cx: SIZE,
          cy: SIZE,
          r: (SIZE - thickness) / 2,
          fill: "none",
          strokeWidth: thickness
        })
      })
    }));
  });
  true ? CircularProgress.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types74.default.object,
    /**
     * @ignore
     */
    className: import_prop_types74.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'primary'
     */
    color: import_prop_types74.default.oneOfType([import_prop_types74.default.oneOf(["inherit", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types74.default.string]),
    /**
     * If `true`, the shrink animation is disabled.
     * This only works if variant is `indeterminate`.
     * @default false
     */
    disableShrink: (0, import_utils147.chainPropTypes)(import_prop_types74.default.bool, (props) => {
      if (props.disableShrink && props.variant && props.variant !== "indeterminate") {
        return new Error("MUI: You have provided the `disableShrink` prop with a variant other than `indeterminate`. This will have no effect.");
      }
      return null;
    }),
    /**
     * The size of the component.
     * If using a number, the pixel unit is assumed.
     * If using a string, you need to provide the CSS unit, e.g. '3rem'.
     * @default 40
     */
    size: import_prop_types74.default.oneOfType([import_prop_types74.default.number, import_prop_types74.default.string]),
    /**
     * @ignore
     */
    style: import_prop_types74.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types74.default.oneOfType([import_prop_types74.default.arrayOf(import_prop_types74.default.oneOfType([import_prop_types74.default.func, import_prop_types74.default.object, import_prop_types74.default.bool])), import_prop_types74.default.func, import_prop_types74.default.object]),
    /**
     * The thickness of the circle.
     * @default 3.6
     */
    thickness: import_prop_types74.default.number,
    /**
     * The value of the progress indicator for the determinate variant.
     * Value between 0 and 100.
     * @default 0
     */
    value: import_prop_types74.default.number,
    /**
     * The variant to use.
     * Use indeterminate when there is no progress value.
     * @default 'indeterminate'
     */
    variant: import_prop_types74.default.oneOf(["determinate", "indeterminate"])
  } : void 0;
  var CircularProgress_default = CircularProgress;

  // node_modules/@mui/material/Container/Container.js
  var import_prop_types75 = __toESM(require_prop_types());
  var import_system27 = __toESM(require_system());
  var Container = (0, import_system27.createContainer)({
    createStyledComponent: styled_default("div", {
      name: "MuiContainer",
      slot: "Root",
      overridesResolver: (props, styles7) => {
        const {
          ownerState
        } = props;
        return [styles7.root, styles7[`maxWidth${capitalize_default(String(ownerState.maxWidth))}`], ownerState.fixed && styles7.fixed, ownerState.disableGutters && styles7.disableGutters];
      }
    }),
    useThemeProps: (inProps) => useThemeProps({
      props: inProps,
      name: "MuiContainer"
    })
  });
  true ? Container.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: import_prop_types75.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types75.default.object,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types75.default.elementType,
    /**
     * If `true`, the left and right padding is removed.
     * @default false
     */
    disableGutters: import_prop_types75.default.bool,
    /**
     * Set the max-width to match the min-width of the current breakpoint.
     * This is useful if you'd prefer to design for a fixed set of sizes
     * instead of trying to accommodate a fully fluid viewport.
     * It's fluid by default.
     * @default false
     */
    fixed: import_prop_types75.default.bool,
    /**
     * Determine the max-width of the container.
     * The container width grows with the size of the screen.
     * Set to `false` to disable `maxWidth`.
     * @default 'lg'
     */
    maxWidth: import_prop_types75.default.oneOfType([import_prop_types75.default.oneOf(["xs", "sm", "md", "lg", "xl", false]), import_prop_types75.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types75.default.oneOfType([import_prop_types75.default.arrayOf(import_prop_types75.default.oneOfType([import_prop_types75.default.func, import_prop_types75.default.object, import_prop_types75.default.bool])), import_prop_types75.default.func, import_prop_types75.default.object])
  } : void 0;
  var Container_default = Container;

  // node_modules/@mui/material/Container/containerClasses.js
  var import_utils148 = __toESM(require_utils());
  var import_generateUtilityClass62 = __toESM(require_generateUtilityClass3());
  function getContainerUtilityClass(slot) {
    return (0, import_generateUtilityClass62.default)("MuiContainer", slot);
  }
  var containerClasses = (0, import_utils148.unstable_generateUtilityClasses)("MuiContainer", ["root", "disableGutters", "fixed", "maxWidthXs", "maxWidthSm", "maxWidthMd", "maxWidthLg", "maxWidthXl"]);
  var containerClasses_default = containerClasses;

  // node_modules/@mui/material/CssBaseline/CssBaseline.js
  init_extends();
  var React140 = __toESM(require_react());
  var import_prop_types76 = __toESM(require_prop_types());
  var import_jsx_runtime115 = __toESM(require_jsx_runtime());
  var import_jsx_runtime116 = __toESM(require_jsx_runtime());
  var html = (theme, enableColorScheme) => _extends({
    WebkitFontSmoothing: "antialiased",
    // Antialiasing.
    MozOsxFontSmoothing: "grayscale",
    // Antialiasing.
    // Change from `box-sizing: content-box` so that `width`
    // is not affected by `padding` or `border`.
    boxSizing: "border-box",
    // Fix font resize problem in iOS
    WebkitTextSizeAdjust: "100%"
  }, enableColorScheme && !theme.vars && {
    colorScheme: theme.palette.mode
  });
  var body = (theme) => _extends({
    color: (theme.vars || theme).palette.text.primary
  }, theme.typography.body1, {
    backgroundColor: (theme.vars || theme).palette.background.default,
    "@media print": {
      // Save printer ink.
      backgroundColor: (theme.vars || theme).palette.common.white
    }
  });
  var styles3 = (theme, enableColorScheme = false) => {
    var _theme$components;
    const colorSchemeStyles = {};
    if (enableColorScheme && theme.colorSchemes) {
      Object.entries(theme.colorSchemes).forEach(([key, scheme]) => {
        var _scheme$palette;
        colorSchemeStyles[theme.getColorSchemeSelector(key).replace(/\s*&/, "")] = {
          colorScheme: (_scheme$palette = scheme.palette) == null ? void 0 : _scheme$palette.mode
        };
      });
    }
    let defaultStyles = _extends({
      html: html(theme, enableColorScheme),
      "*, *::before, *::after": {
        boxSizing: "inherit"
      },
      "strong, b": {
        fontWeight: theme.typography.fontWeightBold
      },
      body: _extends({
        margin: 0
      }, body(theme), {
        // Add support for document.body.requestFullScreen().
        // Other elements, if background transparent, are not supported.
        "&::backdrop": {
          backgroundColor: (theme.vars || theme).palette.background.default
        }
      })
    }, colorSchemeStyles);
    const themeOverrides = (_theme$components = theme.components) == null || (_theme$components = _theme$components.MuiCssBaseline) == null ? void 0 : _theme$components.styleOverrides;
    if (themeOverrides) {
      defaultStyles = [defaultStyles, themeOverrides];
    }
    return defaultStyles;
  };
  function CssBaseline(inProps) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiCssBaseline"
    });
    const {
      children,
      enableColorScheme = false
    } = props;
    return /* @__PURE__ */ (0, import_jsx_runtime116.jsxs)(React140.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime115.jsx)(GlobalStyles_default, {
        styles: (theme) => styles3(theme, enableColorScheme)
      }), children]
    });
  }
  true ? CssBaseline.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * You can wrap a node.
     */
    children: import_prop_types76.default.node,
    /**
     * Enable `color-scheme` CSS property to use `theme.palette.mode`.
     * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme
     * For browser support, check out https://caniuse.com/?search=color-scheme
     * @default false
     */
    enableColorScheme: import_prop_types76.default.bool
  } : void 0;
  var CssBaseline_default = CssBaseline;

  // node_modules/@mui/material/darkScrollbar/index.js
  var scrollBar = {
    track: "#2b2b2b",
    thumb: "#6b6b6b",
    active: "#959595"
  };
  function darkScrollbar(options = scrollBar) {
    return {
      scrollbarColor: `${options.thumb} ${options.track}`,
      "&::-webkit-scrollbar, & *::-webkit-scrollbar": {
        backgroundColor: options.track
      },
      "&::-webkit-scrollbar-thumb, & *::-webkit-scrollbar-thumb": {
        borderRadius: 8,
        backgroundColor: options.thumb,
        minHeight: 24,
        border: `3px solid ${options.track}`
      },
      "&::-webkit-scrollbar-thumb:focus, & *::-webkit-scrollbar-thumb:focus": {
        backgroundColor: options.active
      },
      "&::-webkit-scrollbar-thumb:active, & *::-webkit-scrollbar-thumb:active": {
        backgroundColor: options.active
      },
      "&::-webkit-scrollbar-thumb:hover, & *::-webkit-scrollbar-thumb:hover": {
        backgroundColor: options.active
      },
      "&::-webkit-scrollbar-corner, & *::-webkit-scrollbar-corner": {
        backgroundColor: options.track
      }
    };
  }

  // node_modules/@mui/material/Dialog/Dialog.js
  init_extends();
  var React143 = __toESM(require_react());
  var import_prop_types78 = __toESM(require_prop_types());
  var import_composeClasses55 = __toESM(require_composeClasses3());
  var import_utils152 = __toESM(require_utils());

  // node_modules/@mui/material/Modal/Modal.js
  init_extends();
  var React141 = __toESM(require_react());
  var import_prop_types77 = __toESM(require_prop_types());
  var import_utils150 = __toESM(require_utils());
  var import_composeClasses54 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/Modal/modalClasses.js
  var import_utils149 = __toESM(require_utils());
  var import_generateUtilityClass63 = __toESM(require_generateUtilityClass3());
  function getModalUtilityClass2(slot) {
    return (0, import_generateUtilityClass63.default)("MuiModal", slot);
  }
  var modalClasses2 = (0, import_utils149.unstable_generateUtilityClasses)("MuiModal", ["root", "hidden", "backdrop"]);
  var modalClasses_default = modalClasses2;

  // node_modules/@mui/material/Modal/Modal.js
  var import_jsx_runtime117 = __toESM(require_jsx_runtime());
  var import_jsx_runtime118 = __toESM(require_jsx_runtime());
  var _excluded77 = ["BackdropComponent", "BackdropProps", "classes", "className", "closeAfterTransition", "children", "container", "component", "components", "componentsProps", "disableAutoFocus", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "onBackdropClick", "onClose", "onTransitionEnter", "onTransitionExited", "open", "slotProps", "slots", "theme"];
  var useUtilityClasses57 = (ownerState) => {
    const {
      open,
      exited,
      classes
    } = ownerState;
    const slots = {
      root: ["root", !open && exited && "hidden"],
      backdrop: ["backdrop"]
    };
    return (0, import_composeClasses54.unstable_composeClasses)(slots, getModalUtilityClass2, classes);
  };
  var ModalRoot = styled_default("div", {
    name: "MuiModal",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, !ownerState.open && ownerState.exited && styles7.hidden];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    position: "fixed",
    zIndex: (theme.vars || theme).zIndex.modal,
    right: 0,
    bottom: 0,
    top: 0,
    left: 0
  }, !ownerState.open && ownerState.exited && {
    visibility: "hidden"
  }));
  var ModalBackdrop = styled_default(Backdrop_default, {
    name: "MuiModal",
    slot: "Backdrop",
    overridesResolver: (props, styles7) => {
      return styles7.backdrop;
    }
  })({
    zIndex: -1
  });
  var Modal3 = /* @__PURE__ */ React141.forwardRef(function Modal4(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$backdrop, _slotProps$root, _slotProps$backdrop;
    const props = useThemeProps({
      name: "MuiModal",
      props: inProps
    });
    const {
      BackdropComponent = ModalBackdrop,
      BackdropProps,
      className,
      closeAfterTransition = false,
      children,
      container,
      component,
      components = {},
      componentsProps = {},
      disableAutoFocus = false,
      disableEnforceFocus = false,
      disableEscapeKeyDown = false,
      disablePortal = false,
      disableRestoreFocus = false,
      disableScrollLock = false,
      hideBackdrop = false,
      keepMounted = false,
      onBackdropClick,
      open,
      slotProps,
      slots
      // eslint-disable-next-line react/prop-types
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded77);
    const propsWithDefaults = _extends({}, props, {
      closeAfterTransition,
      disableAutoFocus,
      disableEnforceFocus,
      disableEscapeKeyDown,
      disablePortal,
      disableRestoreFocus,
      disableScrollLock,
      hideBackdrop,
      keepMounted
    });
    const {
      getRootProps,
      getBackdropProps,
      getTransitionProps: getTransitionProps2,
      portalRef,
      isTopModal,
      exited,
      hasTransition
    } = useModal(_extends({}, propsWithDefaults, {
      rootRef: ref
    }));
    const ownerState = _extends({}, propsWithDefaults, {
      exited
    });
    const classes = useUtilityClasses57(ownerState);
    const childProps = {};
    if (children.props.tabIndex === void 0) {
      childProps.tabIndex = "-1";
    }
    if (hasTransition) {
      const {
        onEnter,
        onExited
      } = getTransitionProps2();
      childProps.onEnter = onEnter;
      childProps.onExited = onExited;
    }
    const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : ModalRoot;
    const BackdropSlot = (_ref2 = (_slots$backdrop = slots == null ? void 0 : slots.backdrop) != null ? _slots$backdrop : components.Backdrop) != null ? _ref2 : BackdropComponent;
    const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
    const backdropSlotProps = (_slotProps$backdrop = slotProps == null ? void 0 : slotProps.backdrop) != null ? _slotProps$backdrop : componentsProps.backdrop;
    const rootProps = useSlotProps({
      elementType: RootSlot,
      externalSlotProps: rootSlotProps,
      externalForwardedProps: other,
      getSlotProps: getRootProps,
      additionalProps: {
        ref,
        as: component
      },
      ownerState,
      className: clsx_default(className, rootSlotProps == null ? void 0 : rootSlotProps.className, classes == null ? void 0 : classes.root, !ownerState.open && ownerState.exited && (classes == null ? void 0 : classes.hidden))
    });
    const backdropProps = useSlotProps({
      elementType: BackdropSlot,
      externalSlotProps: backdropSlotProps,
      additionalProps: BackdropProps,
      getSlotProps: (otherHandlers) => {
        return getBackdropProps(_extends({}, otherHandlers, {
          onClick: (e) => {
            if (onBackdropClick) {
              onBackdropClick(e);
            }
            if (otherHandlers != null && otherHandlers.onClick) {
              otherHandlers.onClick(e);
            }
          }
        }));
      },
      className: clsx_default(backdropSlotProps == null ? void 0 : backdropSlotProps.className, BackdropProps == null ? void 0 : BackdropProps.className, classes == null ? void 0 : classes.backdrop),
      ownerState
    });
    if (!keepMounted && !open && (!hasTransition || exited)) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(Portal, {
      ref: portalRef,
      container,
      disablePortal,
      children: /* @__PURE__ */ (0, import_jsx_runtime118.jsxs)(RootSlot, _extends({}, rootProps, {
        children: [!hideBackdrop && BackdropComponent ? /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(BackdropSlot, _extends({}, backdropProps)) : null, /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(FocusTrap, {
          disableEnforceFocus,
          disableAutoFocus,
          disableRestoreFocus,
          isEnabled: isTopModal,
          open,
          children: /* @__PURE__ */ React141.cloneElement(children, childProps)
        })]
      }))
    });
  });
  true ? Modal3.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * A backdrop component. This prop enables custom backdrop rendering.
     * @deprecated Use `slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.
     * Use the `slots.backdrop` prop to make your application ready for the next version of Material UI.
     * @default styled(Backdrop, {
     *   name: 'MuiModal',
     *   slot: 'Backdrop',
     *   overridesResolver: (props, styles) => {
     *     return styles.backdrop;
     *   },
     * })({
     *   zIndex: -1,
     * })
     */
    BackdropComponent: import_prop_types77.default.elementType,
    /**
     * Props applied to the [`Backdrop`](/material-ui/api/backdrop/) element.
     * @deprecated Use `slotProps.backdrop` instead.
     */
    BackdropProps: import_prop_types77.default.object,
    /**
     * A single child content element.
     */
    children: import_utils150.elementAcceptingRef.isRequired,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types77.default.object,
    /**
     * @ignore
     */
    className: import_prop_types77.default.string,
    /**
     * When set to true the Modal waits until a nested Transition is completed before closing.
     * @default false
     */
    closeAfterTransition: import_prop_types77.default.bool,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types77.default.elementType,
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types77.default.shape({
      Backdrop: import_prop_types77.default.elementType,
      Root: import_prop_types77.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types77.default.shape({
      backdrop: import_prop_types77.default.oneOfType([import_prop_types77.default.func, import_prop_types77.default.object]),
      root: import_prop_types77.default.oneOfType([import_prop_types77.default.func, import_prop_types77.default.object])
    }),
    /**
     * An HTML element or function that returns one.
     * The `container` will have the portal children appended to it.
     *
     * By default, it uses the body of the top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: import_prop_types77.default.oneOfType([import_utils150.HTMLElementType, import_prop_types77.default.func]),
    /**
     * If `true`, the modal will not automatically shift focus to itself when it opens, and
     * replace it to the last focused element when it closes.
     * This also works correctly with any modal children that have the `disableAutoFocus` prop.
     *
     * Generally this should never be set to `true` as it makes the modal less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableAutoFocus: import_prop_types77.default.bool,
    /**
     * If `true`, the modal will not prevent focus from leaving the modal while open.
     *
     * Generally this should never be set to `true` as it makes the modal less
     * accessible to assistive technologies, like screen readers.
     * @default false
     */
    disableEnforceFocus: import_prop_types77.default.bool,
    /**
     * If `true`, hitting escape will not fire the `onClose` callback.
     * @default false
     */
    disableEscapeKeyDown: import_prop_types77.default.bool,
    /**
     * The `children` will be under the DOM hierarchy of the parent component.
     * @default false
     */
    disablePortal: import_prop_types77.default.bool,
    /**
     * If `true`, the modal will not restore focus to previously focused element once
     * modal is hidden or unmounted.
     * @default false
     */
    disableRestoreFocus: import_prop_types77.default.bool,
    /**
     * Disable the scroll lock behavior.
     * @default false
     */
    disableScrollLock: import_prop_types77.default.bool,
    /**
     * If `true`, the backdrop is not rendered.
     * @default false
     */
    hideBackdrop: import_prop_types77.default.bool,
    /**
     * Always keep the children in the DOM.
     * This prop can be useful in SEO situation or
     * when you want to maximize the responsiveness of the Modal.
     * @default false
     */
    keepMounted: import_prop_types77.default.bool,
    /**
     * Callback fired when the backdrop is clicked.
     * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
     */
    onBackdropClick: import_prop_types77.default.func,
    /**
     * Callback fired when the component requests to be closed.
     * The `reason` parameter can optionally be used to control the response to `onClose`.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
     */
    onClose: import_prop_types77.default.func,
    /**
     * A function called when a transition enters.
     */
    onTransitionEnter: import_prop_types77.default.func,
    /**
     * A function called when a transition has exited.
     */
    onTransitionExited: import_prop_types77.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types77.default.bool.isRequired,
    /**
     * The props used for each slot inside the Modal.
     * @default {}
     */
    slotProps: import_prop_types77.default.shape({
      backdrop: import_prop_types77.default.oneOfType([import_prop_types77.default.func, import_prop_types77.default.object]),
      root: import_prop_types77.default.oneOfType([import_prop_types77.default.func, import_prop_types77.default.object])
    }),
    /**
     * The components used for each slot inside the Modal.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types77.default.shape({
      backdrop: import_prop_types77.default.elementType,
      root: import_prop_types77.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types77.default.oneOfType([import_prop_types77.default.arrayOf(import_prop_types77.default.oneOfType([import_prop_types77.default.func, import_prop_types77.default.object, import_prop_types77.default.bool])), import_prop_types77.default.func, import_prop_types77.default.object])
  } : void 0;
  var Modal_default = Modal3;

  // node_modules/@mui/material/Dialog/dialogClasses.js
  var import_utils151 = __toESM(require_utils());
  var import_generateUtilityClass64 = __toESM(require_generateUtilityClass3());
  function getDialogUtilityClass(slot) {
    return (0, import_generateUtilityClass64.default)("MuiDialog", slot);
  }
  var dialogClasses = (0, import_utils151.unstable_generateUtilityClasses)("MuiDialog", ["root", "scrollPaper", "scrollBody", "container", "paper", "paperScrollPaper", "paperScrollBody", "paperWidthFalse", "paperWidthXs", "paperWidthSm", "paperWidthMd", "paperWidthLg", "paperWidthXl", "paperFullWidth", "paperFullScreen"]);
  var dialogClasses_default = dialogClasses;

  // node_modules/@mui/material/Dialog/DialogContext.js
  var React142 = __toESM(require_react());
  var DialogContext = /* @__PURE__ */ React142.createContext({});
  if (true) {
    DialogContext.displayName = "DialogContext";
  }
  var DialogContext_default = DialogContext;

  // node_modules/@mui/material/Dialog/Dialog.js
  var import_jsx_runtime119 = __toESM(require_jsx_runtime());
  var _excluded78 = ["aria-describedby", "aria-labelledby", "BackdropComponent", "BackdropProps", "children", "className", "disableEscapeKeyDown", "fullScreen", "fullWidth", "maxWidth", "onBackdropClick", "onClose", "open", "PaperComponent", "PaperProps", "scroll", "TransitionComponent", "transitionDuration", "TransitionProps"];
  var DialogBackdrop = styled_default(Backdrop_default, {
    name: "MuiDialog",
    slot: "Backdrop",
    overrides: (props, styles7) => styles7.backdrop
  })({
    // Improve scrollable dialog support.
    zIndex: -1
  });
  var useUtilityClasses58 = (ownerState) => {
    const {
      classes,
      scroll,
      maxWidth,
      fullWidth,
      fullScreen
    } = ownerState;
    const slots = {
      root: ["root"],
      container: ["container", `scroll${capitalize_default(scroll)}`],
      paper: ["paper", `paperScroll${capitalize_default(scroll)}`, `paperWidth${capitalize_default(String(maxWidth))}`, fullWidth && "paperFullWidth", fullScreen && "paperFullScreen"]
    };
    return (0, import_composeClasses55.unstable_composeClasses)(slots, getDialogUtilityClass, classes);
  };
  var DialogRoot = styled_default(Modal_default, {
    name: "MuiDialog",
    slot: "Root",
    overridesResolver: (props, styles7) => styles7.root
  })({
    "@media print": {
      // Use !important to override the Modal inline-style.
      position: "absolute !important"
    }
  });
  var DialogContainer = styled_default("div", {
    name: "MuiDialog",
    slot: "Container",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.container, styles7[`scroll${capitalize_default(ownerState.scroll)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    height: "100%",
    "@media print": {
      height: "auto"
    },
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0
  }, ownerState.scroll === "paper" && {
    display: "flex",
    justifyContent: "center",
    alignItems: "center"
  }, ownerState.scroll === "body" && {
    overflowY: "auto",
    overflowX: "hidden",
    textAlign: "center",
    "&:after": {
      content: '""',
      display: "inline-block",
      verticalAlign: "middle",
      height: "100%",
      width: "0"
    }
  }));
  var DialogPaper = styled_default(Paper_default, {
    name: "MuiDialog",
    slot: "Paper",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.paper, styles7[`scrollPaper${capitalize_default(ownerState.scroll)}`], styles7[`paperWidth${capitalize_default(String(ownerState.maxWidth))}`], ownerState.fullWidth && styles7.paperFullWidth, ownerState.fullScreen && styles7.paperFullScreen];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    margin: 32,
    position: "relative",
    overflowY: "auto",
    // Fix IE11 issue, to remove at some point.
    "@media print": {
      overflowY: "visible",
      boxShadow: "none"
    }
  }, ownerState.scroll === "paper" && {
    display: "flex",
    flexDirection: "column",
    maxHeight: "calc(100% - 64px)"
  }, ownerState.scroll === "body" && {
    display: "inline-block",
    verticalAlign: "middle",
    textAlign: "left"
    // 'initial' doesn't work on IE11
  }, !ownerState.maxWidth && {
    maxWidth: "calc(100% - 64px)"
  }, ownerState.maxWidth === "xs" && {
    maxWidth: theme.breakpoints.unit === "px" ? Math.max(theme.breakpoints.values.xs, 444) : `max(${theme.breakpoints.values.xs}${theme.breakpoints.unit}, 444px)`,
    [`&.${dialogClasses_default.paperScrollBody}`]: {
      [theme.breakpoints.down(Math.max(theme.breakpoints.values.xs, 444) + 32 * 2)]: {
        maxWidth: "calc(100% - 64px)"
      }
    }
  }, ownerState.maxWidth && ownerState.maxWidth !== "xs" && {
    maxWidth: `${theme.breakpoints.values[ownerState.maxWidth]}${theme.breakpoints.unit}`,
    [`&.${dialogClasses_default.paperScrollBody}`]: {
      [theme.breakpoints.down(theme.breakpoints.values[ownerState.maxWidth] + 32 * 2)]: {
        maxWidth: "calc(100% - 64px)"
      }
    }
  }, ownerState.fullWidth && {
    width: "calc(100% - 64px)"
  }, ownerState.fullScreen && {
    margin: 0,
    width: "100%",
    maxWidth: "100%",
    height: "100%",
    maxHeight: "none",
    borderRadius: 0,
    [`&.${dialogClasses_default.paperScrollBody}`]: {
      margin: 0,
      maxWidth: "100%"
    }
  }));
  var Dialog = /* @__PURE__ */ React143.forwardRef(function Dialog2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiDialog"
    });
    const theme = useTheme4();
    const defaultTransitionDuration = {
      enter: theme.transitions.duration.enteringScreen,
      exit: theme.transitions.duration.leavingScreen
    };
    const {
      "aria-describedby": ariaDescribedby,
      "aria-labelledby": ariaLabelledbyProp,
      BackdropComponent,
      BackdropProps,
      children,
      className,
      disableEscapeKeyDown = false,
      fullScreen = false,
      fullWidth = false,
      maxWidth = "sm",
      onBackdropClick,
      onClose,
      open,
      PaperComponent = Paper_default,
      PaperProps = {},
      scroll = "paper",
      TransitionComponent = Fade_default,
      transitionDuration = defaultTransitionDuration,
      TransitionProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded78);
    const ownerState = _extends({}, props, {
      disableEscapeKeyDown,
      fullScreen,
      fullWidth,
      maxWidth,
      scroll
    });
    const classes = useUtilityClasses58(ownerState);
    const backdropClick = React143.useRef();
    const handleMouseDown = (event) => {
      backdropClick.current = event.target === event.currentTarget;
    };
    const handleBackdropClick = (event) => {
      if (!backdropClick.current) {
        return;
      }
      backdropClick.current = null;
      if (onBackdropClick) {
        onBackdropClick(event);
      }
      if (onClose) {
        onClose(event, "backdropClick");
      }
    };
    const ariaLabelledby = (0, import_utils152.unstable_useId)(ariaLabelledbyProp);
    const dialogContextValue = React143.useMemo(() => {
      return {
        titleId: ariaLabelledby
      };
    }, [ariaLabelledby]);
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(DialogRoot, _extends({
      className: clsx_default(classes.root, className),
      closeAfterTransition: true,
      components: {
        Backdrop: DialogBackdrop
      },
      componentsProps: {
        backdrop: _extends({
          transitionDuration,
          as: BackdropComponent
        }, BackdropProps)
      },
      disableEscapeKeyDown,
      onClose,
      open,
      ref,
      onClick: handleBackdropClick,
      ownerState
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(TransitionComponent, _extends({
        appear: true,
        in: open,
        timeout: transitionDuration,
        role: "presentation"
      }, TransitionProps, {
        children: /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(DialogContainer, {
          className: clsx_default(classes.container),
          onMouseDown: handleMouseDown,
          ownerState,
          children: /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(DialogPaper, _extends({
            as: PaperComponent,
            elevation: 24,
            role: "dialog",
            "aria-describedby": ariaDescribedby,
            "aria-labelledby": ariaLabelledby
          }, PaperProps, {
            className: clsx_default(classes.paper, PaperProps.className),
            ownerState,
            children: /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(DialogContext_default.Provider, {
              value: dialogContextValue,
              children
            })
          }))
        })
      }))
    }));
  });
  true ? Dialog.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The id(s) of the element(s) that describe the dialog.
     */
    "aria-describedby": import_prop_types78.default.string,
    /**
     * The id(s) of the element(s) that label the dialog.
     */
    "aria-labelledby": import_prop_types78.default.string,
    /**
     * A backdrop component. This prop enables custom backdrop rendering.
     * @deprecated Use `slots.backdrop` instead. While this prop currently works, it will be removed in the next major version.
     * Use the `slots.backdrop` prop to make your application ready for the next version of Material UI.
     * @default styled(Backdrop, {
     *   name: 'MuiModal',
     *   slot: 'Backdrop',
     *   overridesResolver: (props, styles) => {
     *     return styles.backdrop;
     *   },
     * })({
     *   zIndex: -1,
     * })
     */
    BackdropComponent: import_prop_types78.default.elementType,
    /**
     * @ignore
     */
    BackdropProps: import_prop_types78.default.object,
    /**
     * Dialog children, usually the included sub-components.
     */
    children: import_prop_types78.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types78.default.object,
    /**
     * @ignore
     */
    className: import_prop_types78.default.string,
    /**
     * If `true`, hitting escape will not fire the `onClose` callback.
     * @default false
     */
    disableEscapeKeyDown: import_prop_types78.default.bool,
    /**
     * If `true`, the dialog is full-screen.
     * @default false
     */
    fullScreen: import_prop_types78.default.bool,
    /**
     * If `true`, the dialog stretches to `maxWidth`.
     *
     * Notice that the dialog width grow is limited by the default margin.
     * @default false
     */
    fullWidth: import_prop_types78.default.bool,
    /**
     * Determine the max-width of the dialog.
     * The dialog width grows with the size of the screen.
     * Set to `false` to disable `maxWidth`.
     * @default 'sm'
     */
    maxWidth: import_prop_types78.default.oneOfType([import_prop_types78.default.oneOf(["xs", "sm", "md", "lg", "xl", false]), import_prop_types78.default.string]),
    /**
     * Callback fired when the backdrop is clicked.
     * @deprecated Use the `onClose` prop with the `reason` argument to handle the `backdropClick` events.
     */
    onBackdropClick: import_prop_types78.default.func,
    /**
     * Callback fired when the component requests to be closed.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
     */
    onClose: import_prop_types78.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types78.default.bool.isRequired,
    /**
     * The component used to render the body of the dialog.
     * @default Paper
     */
    PaperComponent: import_prop_types78.default.elementType,
    /**
     * Props applied to the [`Paper`](/material-ui/api/paper/) element.
     * @default {}
     */
    PaperProps: import_prop_types78.default.object,
    /**
     * Determine the container for scrolling the dialog.
     * @default 'paper'
     */
    scroll: import_prop_types78.default.oneOf(["body", "paper"]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types78.default.oneOfType([import_prop_types78.default.arrayOf(import_prop_types78.default.oneOfType([import_prop_types78.default.func, import_prop_types78.default.object, import_prop_types78.default.bool])), import_prop_types78.default.func, import_prop_types78.default.object]),
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Fade
     */
    TransitionComponent: import_prop_types78.default.elementType,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: theme.transitions.duration.enteringScreen,
     *   exit: theme.transitions.duration.leavingScreen,
     * }
     */
    transitionDuration: import_prop_types78.default.oneOfType([import_prop_types78.default.number, import_prop_types78.default.shape({
      appear: import_prop_types78.default.number,
      enter: import_prop_types78.default.number,
      exit: import_prop_types78.default.number
    })]),
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
     */
    TransitionProps: import_prop_types78.default.object
  } : void 0;
  var Dialog_default = Dialog;

  // node_modules/@mui/material/DialogActions/DialogActions.js
  init_extends();
  var React144 = __toESM(require_react());
  var import_prop_types79 = __toESM(require_prop_types());
  var import_composeClasses56 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/DialogActions/dialogActionsClasses.js
  var import_utils153 = __toESM(require_utils());
  var import_generateUtilityClass65 = __toESM(require_generateUtilityClass3());
  function getDialogActionsUtilityClass(slot) {
    return (0, import_generateUtilityClass65.default)("MuiDialogActions", slot);
  }
  var dialogActionsClasses = (0, import_utils153.unstable_generateUtilityClasses)("MuiDialogActions", ["root", "spacing"]);
  var dialogActionsClasses_default = dialogActionsClasses;

  // node_modules/@mui/material/DialogActions/DialogActions.js
  var import_jsx_runtime120 = __toESM(require_jsx_runtime());
  var _excluded79 = ["className", "disableSpacing"];
  var useUtilityClasses59 = (ownerState) => {
    const {
      classes,
      disableSpacing
    } = ownerState;
    const slots = {
      root: ["root", !disableSpacing && "spacing"]
    };
    return (0, import_composeClasses56.unstable_composeClasses)(slots, getDialogActionsUtilityClass, classes);
  };
  var DialogActionsRoot = styled_default("div", {
    name: "MuiDialogActions",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, !ownerState.disableSpacing && styles7.spacing];
    }
  })(({
    ownerState
  }) => _extends({
    display: "flex",
    alignItems: "center",
    padding: 8,
    justifyContent: "flex-end",
    flex: "0 0 auto"
  }, !ownerState.disableSpacing && {
    "& > :not(:first-of-type)": {
      marginLeft: 8
    }
  }));
  var DialogActions = /* @__PURE__ */ React144.forwardRef(function DialogActions2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiDialogActions"
    });
    const {
      className,
      disableSpacing = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded79);
    const ownerState = _extends({}, props, {
      disableSpacing
    });
    const classes = useUtilityClasses59(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime120.jsx)(DialogActionsRoot, _extends({
      className: clsx_default(classes.root, className),
      ownerState,
      ref
    }, other));
  });
  true ? DialogActions.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types79.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types79.default.object,
    /**
     * @ignore
     */
    className: import_prop_types79.default.string,
    /**
     * If `true`, the actions do not have additional margin.
     * @default false
     */
    disableSpacing: import_prop_types79.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types79.default.oneOfType([import_prop_types79.default.arrayOf(import_prop_types79.default.oneOfType([import_prop_types79.default.func, import_prop_types79.default.object, import_prop_types79.default.bool])), import_prop_types79.default.func, import_prop_types79.default.object])
  } : void 0;
  var DialogActions_default = DialogActions;

  // node_modules/@mui/material/DialogContent/DialogContent.js
  init_extends();
  var React145 = __toESM(require_react());
  var import_prop_types80 = __toESM(require_prop_types());
  var import_composeClasses57 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/DialogContent/dialogContentClasses.js
  var import_utils154 = __toESM(require_utils());
  var import_generateUtilityClass66 = __toESM(require_generateUtilityClass3());
  function getDialogContentUtilityClass(slot) {
    return (0, import_generateUtilityClass66.default)("MuiDialogContent", slot);
  }
  var dialogContentClasses = (0, import_utils154.unstable_generateUtilityClasses)("MuiDialogContent", ["root", "dividers"]);
  var dialogContentClasses_default = dialogContentClasses;

  // node_modules/@mui/material/DialogTitle/dialogTitleClasses.js
  var import_utils155 = __toESM(require_utils());
  var import_generateUtilityClass67 = __toESM(require_generateUtilityClass3());
  function getDialogTitleUtilityClass(slot) {
    return (0, import_generateUtilityClass67.default)("MuiDialogTitle", slot);
  }
  var dialogTitleClasses = (0, import_utils155.unstable_generateUtilityClasses)("MuiDialogTitle", ["root"]);
  var dialogTitleClasses_default = dialogTitleClasses;

  // node_modules/@mui/material/DialogContent/DialogContent.js
  var import_jsx_runtime121 = __toESM(require_jsx_runtime());
  var _excluded80 = ["className", "dividers"];
  var useUtilityClasses60 = (ownerState) => {
    const {
      classes,
      dividers
    } = ownerState;
    const slots = {
      root: ["root", dividers && "dividers"]
    };
    return (0, import_composeClasses57.unstable_composeClasses)(slots, getDialogContentUtilityClass, classes);
  };
  var DialogContentRoot = styled_default("div", {
    name: "MuiDialogContent",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, ownerState.dividers && styles7.dividers];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    flex: "1 1 auto",
    // Add iOS momentum scrolling for iOS < 13.0
    WebkitOverflowScrolling: "touch",
    overflowY: "auto",
    padding: "20px 24px"
  }, ownerState.dividers ? {
    padding: "16px 24px",
    borderTop: `1px solid ${(theme.vars || theme).palette.divider}`,
    borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`
  } : {
    [`.${dialogTitleClasses_default.root} + &`]: {
      paddingTop: 0
    }
  }));
  var DialogContent = /* @__PURE__ */ React145.forwardRef(function DialogContent2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiDialogContent"
    });
    const {
      className,
      dividers = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded80);
    const ownerState = _extends({}, props, {
      dividers
    });
    const classes = useUtilityClasses60(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(DialogContentRoot, _extends({
      className: clsx_default(classes.root, className),
      ownerState,
      ref
    }, other));
  });
  true ? DialogContent.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types80.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types80.default.object,
    /**
     * @ignore
     */
    className: import_prop_types80.default.string,
    /**
     * Display the top and bottom dividers.
     * @default false
     */
    dividers: import_prop_types80.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types80.default.oneOfType([import_prop_types80.default.arrayOf(import_prop_types80.default.oneOfType([import_prop_types80.default.func, import_prop_types80.default.object, import_prop_types80.default.bool])), import_prop_types80.default.func, import_prop_types80.default.object])
  } : void 0;
  var DialogContent_default = DialogContent;

  // node_modules/@mui/material/DialogContentText/DialogContentText.js
  init_extends();
  var React146 = __toESM(require_react());
  var import_prop_types81 = __toESM(require_prop_types());
  var import_composeClasses58 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/DialogContentText/dialogContentTextClasses.js
  var import_utils156 = __toESM(require_utils());
  var import_generateUtilityClass68 = __toESM(require_generateUtilityClass3());
  function getDialogContentTextUtilityClass(slot) {
    return (0, import_generateUtilityClass68.default)("MuiDialogContentText", slot);
  }
  var dialogContentTextClasses = (0, import_utils156.unstable_generateUtilityClasses)("MuiDialogContentText", ["root"]);
  var dialogContentTextClasses_default = dialogContentTextClasses;

  // node_modules/@mui/material/DialogContentText/DialogContentText.js
  var import_jsx_runtime122 = __toESM(require_jsx_runtime());
  var _excluded81 = ["children", "className"];
  var useUtilityClasses61 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    const composedClasses = (0, import_composeClasses58.unstable_composeClasses)(slots, getDialogContentTextUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var DialogContentTextRoot = styled_default(Typography_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiDialogContentText",
    slot: "Root",
    overridesResolver: (props, styles7) => styles7.root
  })({});
  var DialogContentText = /* @__PURE__ */ React146.forwardRef(function DialogContentText2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiDialogContentText"
    });
    const {
      className
    } = props, ownerState = _objectWithoutPropertiesLoose(props, _excluded81);
    const classes = useUtilityClasses61(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(DialogContentTextRoot, _extends({
      component: "p",
      variant: "body1",
      color: "text.secondary",
      ref,
      ownerState,
      className: clsx_default(classes.root, className)
    }, props, {
      classes
    }));
  });
  true ? DialogContentText.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types81.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types81.default.object,
    /**
     * @ignore
     */
    className: import_prop_types81.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types81.default.oneOfType([import_prop_types81.default.arrayOf(import_prop_types81.default.oneOfType([import_prop_types81.default.func, import_prop_types81.default.object, import_prop_types81.default.bool])), import_prop_types81.default.func, import_prop_types81.default.object])
  } : void 0;
  var DialogContentText_default = DialogContentText;

  // node_modules/@mui/material/DialogTitle/DialogTitle.js
  init_extends();
  var React147 = __toESM(require_react());
  var import_prop_types82 = __toESM(require_prop_types());
  var import_composeClasses59 = __toESM(require_composeClasses3());
  var import_jsx_runtime123 = __toESM(require_jsx_runtime());
  var _excluded82 = ["className", "id"];
  var useUtilityClasses62 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return (0, import_composeClasses59.unstable_composeClasses)(slots, getDialogTitleUtilityClass, classes);
  };
  var DialogTitleRoot = styled_default(Typography_default, {
    name: "MuiDialogTitle",
    slot: "Root",
    overridesResolver: (props, styles7) => styles7.root
  })({
    padding: "16px 24px",
    flex: "0 0 auto"
  });
  var DialogTitle = /* @__PURE__ */ React147.forwardRef(function DialogTitle2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiDialogTitle"
    });
    const {
      className,
      id: idProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded82);
    const ownerState = props;
    const classes = useUtilityClasses62(ownerState);
    const {
      titleId = idProp
    } = React147.useContext(DialogContext_default);
    return /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(DialogTitleRoot, _extends({
      component: "h2",
      className: clsx_default(classes.root, className),
      ownerState,
      ref,
      variant: "h6",
      id: idProp != null ? idProp : titleId
    }, other));
  });
  true ? DialogTitle.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types82.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types82.default.object,
    /**
     * @ignore
     */
    className: import_prop_types82.default.string,
    /**
     * @ignore
     */
    id: import_prop_types82.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types82.default.oneOfType([import_prop_types82.default.arrayOf(import_prop_types82.default.oneOfType([import_prop_types82.default.func, import_prop_types82.default.object, import_prop_types82.default.bool])), import_prop_types82.default.func, import_prop_types82.default.object])
  } : void 0;
  var DialogTitle_default = DialogTitle;

  // node_modules/@mui/material/Divider/Divider.js
  init_extends();
  var React148 = __toESM(require_react());
  var import_prop_types83 = __toESM(require_prop_types());
  var import_composeClasses60 = __toESM(require_composeClasses3());
  var import_system28 = __toESM(require_system());

  // node_modules/@mui/material/Divider/dividerClasses.js
  var import_utils157 = __toESM(require_utils());
  var import_generateUtilityClass69 = __toESM(require_generateUtilityClass3());
  function getDividerUtilityClass(slot) {
    return (0, import_generateUtilityClass69.default)("MuiDivider", slot);
  }
  var dividerClasses = (0, import_utils157.unstable_generateUtilityClasses)("MuiDivider", ["root", "absolute", "fullWidth", "inset", "middle", "flexItem", "light", "vertical", "withChildren", "withChildrenVertical", "textAlignRight", "textAlignLeft", "wrapper", "wrapperVertical"]);
  var dividerClasses_default = dividerClasses;

  // node_modules/@mui/material/Divider/Divider.js
  var import_jsx_runtime124 = __toESM(require_jsx_runtime());
  var _excluded83 = ["absolute", "children", "className", "component", "flexItem", "light", "orientation", "role", "textAlign", "variant"];
  var useUtilityClasses63 = (ownerState) => {
    const {
      absolute,
      children,
      classes,
      flexItem,
      light: light2,
      orientation,
      textAlign,
      variant
    } = ownerState;
    const slots = {
      root: ["root", absolute && "absolute", variant, light2 && "light", orientation === "vertical" && "vertical", flexItem && "flexItem", children && "withChildren", children && orientation === "vertical" && "withChildrenVertical", textAlign === "right" && orientation !== "vertical" && "textAlignRight", textAlign === "left" && orientation !== "vertical" && "textAlignLeft"],
      wrapper: ["wrapper", orientation === "vertical" && "wrapperVertical"]
    };
    return (0, import_composeClasses60.unstable_composeClasses)(slots, getDividerUtilityClass, classes);
  };
  var DividerRoot = styled_default("div", {
    name: "MuiDivider",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, ownerState.absolute && styles7.absolute, styles7[ownerState.variant], ownerState.light && styles7.light, ownerState.orientation === "vertical" && styles7.vertical, ownerState.flexItem && styles7.flexItem, ownerState.children && styles7.withChildren, ownerState.children && ownerState.orientation === "vertical" && styles7.withChildrenVertical, ownerState.textAlign === "right" && ownerState.orientation !== "vertical" && styles7.textAlignRight, ownerState.textAlign === "left" && ownerState.orientation !== "vertical" && styles7.textAlignLeft];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    margin: 0,
    // Reset browser default style.
    flexShrink: 0,
    borderWidth: 0,
    borderStyle: "solid",
    borderColor: (theme.vars || theme).palette.divider,
    borderBottomWidth: "thin"
  }, ownerState.absolute && {
    position: "absolute",
    bottom: 0,
    left: 0,
    width: "100%"
  }, ownerState.light && {
    borderColor: theme.vars ? `rgba(${theme.vars.palette.dividerChannel} / 0.08)` : (0, import_system28.alpha)(theme.palette.divider, 0.08)
  }, ownerState.variant === "inset" && {
    marginLeft: 72
  }, ownerState.variant === "middle" && ownerState.orientation === "horizontal" && {
    marginLeft: theme.spacing(2),
    marginRight: theme.spacing(2)
  }, ownerState.variant === "middle" && ownerState.orientation === "vertical" && {
    marginTop: theme.spacing(1),
    marginBottom: theme.spacing(1)
  }, ownerState.orientation === "vertical" && {
    height: "100%",
    borderBottomWidth: 0,
    borderRightWidth: "thin"
  }, ownerState.flexItem && {
    alignSelf: "stretch",
    height: "auto"
  }), ({
    ownerState
  }) => _extends({}, ownerState.children && {
    display: "flex",
    whiteSpace: "nowrap",
    textAlign: "center",
    border: 0,
    "&::before, &::after": {
      content: '""',
      alignSelf: "center"
    }
  }), ({
    theme,
    ownerState
  }) => _extends({}, ownerState.children && ownerState.orientation !== "vertical" && {
    "&::before, &::after": {
      width: "100%",
      borderTop: `thin solid ${(theme.vars || theme).palette.divider}`
    }
  }), ({
    theme,
    ownerState
  }) => _extends({}, ownerState.children && ownerState.orientation === "vertical" && {
    flexDirection: "column",
    "&::before, &::after": {
      height: "100%",
      borderLeft: `thin solid ${(theme.vars || theme).palette.divider}`
    }
  }), ({
    ownerState
  }) => _extends({}, ownerState.textAlign === "right" && ownerState.orientation !== "vertical" && {
    "&::before": {
      width: "90%"
    },
    "&::after": {
      width: "10%"
    }
  }, ownerState.textAlign === "left" && ownerState.orientation !== "vertical" && {
    "&::before": {
      width: "10%"
    },
    "&::after": {
      width: "90%"
    }
  }));
  var DividerWrapper = styled_default("span", {
    name: "MuiDivider",
    slot: "Wrapper",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.wrapper, ownerState.orientation === "vertical" && styles7.wrapperVertical];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "inline-block",
    paddingLeft: `calc(${theme.spacing(1)} * 1.2)`,
    paddingRight: `calc(${theme.spacing(1)} * 1.2)`
  }, ownerState.orientation === "vertical" && {
    paddingTop: `calc(${theme.spacing(1)} * 1.2)`,
    paddingBottom: `calc(${theme.spacing(1)} * 1.2)`
  }));
  var Divider = /* @__PURE__ */ React148.forwardRef(function Divider2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiDivider"
    });
    const {
      absolute = false,
      children,
      className,
      component = children ? "div" : "hr",
      flexItem = false,
      light: light2 = false,
      orientation = "horizontal",
      role = component !== "hr" ? "separator" : void 0,
      textAlign = "center",
      variant = "fullWidth"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded83);
    const ownerState = _extends({}, props, {
      absolute,
      component,
      flexItem,
      light: light2,
      orientation,
      role,
      textAlign,
      variant
    });
    const classes = useUtilityClasses63(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(DividerRoot, _extends({
      as: component,
      className: clsx_default(classes.root, className),
      role,
      ref,
      ownerState
    }, other, {
      children: children ? /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(DividerWrapper, {
        className: classes.wrapper,
        ownerState,
        children
      }) : null
    }));
  });
  Divider.muiSkipListHighlight = true;
  true ? Divider.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Absolutely position the element.
     * @default false
     */
    absolute: import_prop_types83.default.bool,
    /**
     * The content of the component.
     */
    children: import_prop_types83.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types83.default.object,
    /**
     * @ignore
     */
    className: import_prop_types83.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types83.default.elementType,
    /**
     * If `true`, a vertical divider will have the correct height when used in flex container.
     * (By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)
     * @default false
     */
    flexItem: import_prop_types83.default.bool,
    /**
     * If `true`, the divider will have a lighter color.
     * @default false
     */
    light: import_prop_types83.default.bool,
    /**
     * The component orientation.
     * @default 'horizontal'
     */
    orientation: import_prop_types83.default.oneOf(["horizontal", "vertical"]),
    /**
     * @ignore
     */
    role: import_prop_types83.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types83.default.oneOfType([import_prop_types83.default.arrayOf(import_prop_types83.default.oneOfType([import_prop_types83.default.func, import_prop_types83.default.object, import_prop_types83.default.bool])), import_prop_types83.default.func, import_prop_types83.default.object]),
    /**
     * The text alignment.
     * @default 'center'
     */
    textAlign: import_prop_types83.default.oneOf(["center", "left", "right"]),
    /**
     * The variant to use.
     * @default 'fullWidth'
     */
    variant: import_prop_types83.default.oneOfType([import_prop_types83.default.oneOf(["fullWidth", "inset", "middle"]), import_prop_types83.default.string])
  } : void 0;
  var Divider_default = Divider;

  // node_modules/@mui/material/Drawer/Drawer.js
  init_extends();
  var React150 = __toESM(require_react());
  var import_prop_types85 = __toESM(require_prop_types());
  var import_utils163 = __toESM(require_utils());
  var import_composeClasses61 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/Slide/Slide.js
  init_extends();
  var React149 = __toESM(require_react());
  var import_prop_types84 = __toESM(require_prop_types());
  var import_utils159 = __toESM(require_utils());

  // node_modules/@mui/material/utils/debounce.js
  var import_utils158 = __toESM(require_utils());
  var debounce_default = import_utils158.unstable_debounce;

  // node_modules/@mui/material/Slide/Slide.js
  var import_utils161 = __toESM(require_utils2());
  var import_jsx_runtime125 = __toESM(require_jsx_runtime());
  var _excluded84 = ["addEndListener", "appear", "children", "container", "direction", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  function getTranslateValue(direction, node2, resolvedContainer) {
    const rect = node2.getBoundingClientRect();
    const containerRect = resolvedContainer && resolvedContainer.getBoundingClientRect();
    const containerWindow = (0, import_utils161.ownerWindow)(node2);
    let transform2;
    if (node2.fakeTransform) {
      transform2 = node2.fakeTransform;
    } else {
      const computedStyle = containerWindow.getComputedStyle(node2);
      transform2 = computedStyle.getPropertyValue("-webkit-transform") || computedStyle.getPropertyValue("transform");
    }
    let offsetX = 0;
    let offsetY = 0;
    if (transform2 && transform2 !== "none" && typeof transform2 === "string") {
      const transformValues = transform2.split("(")[1].split(")")[0].split(",");
      offsetX = parseInt(transformValues[4], 10);
      offsetY = parseInt(transformValues[5], 10);
    }
    if (direction === "left") {
      if (containerRect) {
        return `translateX(${containerRect.right + offsetX - rect.left}px)`;
      }
      return `translateX(${containerWindow.innerWidth + offsetX - rect.left}px)`;
    }
    if (direction === "right") {
      if (containerRect) {
        return `translateX(-${rect.right - containerRect.left - offsetX}px)`;
      }
      return `translateX(-${rect.left + rect.width - offsetX}px)`;
    }
    if (direction === "up") {
      if (containerRect) {
        return `translateY(${containerRect.bottom + offsetY - rect.top}px)`;
      }
      return `translateY(${containerWindow.innerHeight + offsetY - rect.top}px)`;
    }
    if (containerRect) {
      return `translateY(-${rect.top - containerRect.top + rect.height - offsetY}px)`;
    }
    return `translateY(-${rect.top + rect.height - offsetY}px)`;
  }
  function resolveContainer(containerPropProp) {
    return typeof containerPropProp === "function" ? containerPropProp() : containerPropProp;
  }
  function setTranslateValue(direction, node2, containerProp) {
    const resolvedContainer = resolveContainer(containerProp);
    const transform2 = getTranslateValue(direction, node2, resolvedContainer);
    if (transform2) {
      node2.style.webkitTransform = transform2;
      node2.style.transform = transform2;
    }
  }
  var Slide = /* @__PURE__ */ React149.forwardRef(function Slide2(props, ref) {
    const theme = useTheme4();
    const defaultEasing = {
      enter: theme.transitions.easing.easeOut,
      exit: theme.transitions.easing.sharp
    };
    const defaultTimeout = {
      enter: theme.transitions.duration.enteringScreen,
      exit: theme.transitions.duration.leavingScreen
    };
    const {
      addEndListener,
      appear = true,
      children,
      container: containerProp,
      direction = "down",
      easing: easingProp = defaultEasing,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style,
      timeout: timeout2 = defaultTimeout,
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition_default
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded84);
    const childrenRef = React149.useRef(null);
    const handleRef = useForkRef_default(children.ref, childrenRef, ref);
    const normalizedTransitionCallback = (callback) => (isAppearing) => {
      if (callback) {
        if (isAppearing === void 0) {
          callback(childrenRef.current);
        } else {
          callback(childrenRef.current, isAppearing);
        }
      }
    };
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      setTranslateValue(direction, node2, containerProp);
      reflow(node2);
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntering = normalizedTransitionCallback((node2, isAppearing) => {
      const transitionProps = getTransitionProps({
        timeout: timeout2,
        style,
        easing: easingProp
      }, {
        mode: "enter"
      });
      node2.style.webkitTransition = theme.transitions.create("-webkit-transform", _extends({}, transitionProps));
      node2.style.transition = theme.transitions.create("transform", _extends({}, transitionProps));
      node2.style.webkitTransform = "none";
      node2.style.transform = "none";
      if (onEntering) {
        onEntering(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node2) => {
      const transitionProps = getTransitionProps({
        timeout: timeout2,
        style,
        easing: easingProp
      }, {
        mode: "exit"
      });
      node2.style.webkitTransition = theme.transitions.create("-webkit-transform", transitionProps);
      node2.style.transition = theme.transitions.create("transform", transitionProps);
      setTranslateValue(direction, node2, containerProp);
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback((node2) => {
      node2.style.webkitTransition = "";
      node2.style.transition = "";
      if (onExited) {
        onExited(node2);
      }
    });
    const handleAddEndListener = (next2) => {
      if (addEndListener) {
        addEndListener(childrenRef.current, next2);
      }
    };
    const updatePosition = React149.useCallback(() => {
      if (childrenRef.current) {
        setTranslateValue(direction, childrenRef.current, containerProp);
      }
    }, [direction, containerProp]);
    React149.useEffect(() => {
      if (inProp || direction === "down" || direction === "right") {
        return void 0;
      }
      const handleResize = debounce_default(() => {
        if (childrenRef.current) {
          setTranslateValue(direction, childrenRef.current, containerProp);
        }
      });
      const containerWindow = (0, import_utils161.ownerWindow)(childrenRef.current);
      containerWindow.addEventListener("resize", handleResize);
      return () => {
        handleResize.clear();
        containerWindow.removeEventListener("resize", handleResize);
      };
    }, [direction, inProp, containerProp]);
    React149.useEffect(() => {
      if (!inProp) {
        updatePosition();
      }
    }, [inProp, updatePosition]);
    return /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(TransitionComponent, _extends({
      nodeRef: childrenRef,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      appear,
      in: inProp,
      timeout: timeout2
    }, other, {
      children: (state, childProps) => {
        return /* @__PURE__ */ React149.cloneElement(children, _extends({
          ref: handleRef,
          style: _extends({
            visibility: state === "exited" && !inProp ? "hidden" : void 0
          }, style, children.props.style)
        }, childProps));
      }
    }));
  });
  true ? Slide.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: import_prop_types84.default.func,
    /**
     * Perform the enter transition when it first mounts if `in` is also `true`.
     * Set this to `false` to disable this behavior.
     * @default true
     */
    appear: import_prop_types84.default.bool,
    /**
     * A single child content element.
     */
    children: import_utils159.elementAcceptingRef.isRequired,
    /**
     * An HTML element, or a function that returns one.
     * It's used to set the container the Slide is transitioning from.
     */
    container: (0, import_utils159.chainPropTypes)(import_prop_types84.default.oneOfType([import_utils159.HTMLElementType, import_prop_types84.default.func]), (props) => {
      if (props.open) {
        const resolvedContainer = resolveContainer(props.container);
        if (resolvedContainer && resolvedContainer.nodeType === 1) {
          const box = resolvedContainer.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(["MUI: The `container` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        } else if (!resolvedContainer || typeof resolvedContainer.getBoundingClientRect !== "function" || resolvedContainer.contextElement != null && resolvedContainer.contextElement.nodeType !== 1) {
          return new Error(["MUI: The `container` prop provided to the component is invalid.", "It should be an HTML element instance."].join("\n"));
        }
      }
      return null;
    }),
    /**
     * Direction the child node will enter from.
     * @default 'down'
     */
    direction: import_prop_types84.default.oneOf(["down", "left", "right", "up"]),
    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     * @default {
     *   enter: theme.transitions.easing.easeOut,
     *   exit: theme.transitions.easing.sharp,
     * }
     */
    easing: import_prop_types84.default.oneOfType([import_prop_types84.default.shape({
      enter: import_prop_types84.default.string,
      exit: import_prop_types84.default.string
    }), import_prop_types84.default.string]),
    /**
     * If `true`, the component will transition in.
     */
    in: import_prop_types84.default.bool,
    /**
     * @ignore
     */
    onEnter: import_prop_types84.default.func,
    /**
     * @ignore
     */
    onEntered: import_prop_types84.default.func,
    /**
     * @ignore
     */
    onEntering: import_prop_types84.default.func,
    /**
     * @ignore
     */
    onExit: import_prop_types84.default.func,
    /**
     * @ignore
     */
    onExited: import_prop_types84.default.func,
    /**
     * @ignore
     */
    onExiting: import_prop_types84.default.func,
    /**
     * @ignore
     */
    style: import_prop_types84.default.object,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: theme.transitions.duration.enteringScreen,
     *   exit: theme.transitions.duration.leavingScreen,
     * }
     */
    timeout: import_prop_types84.default.oneOfType([import_prop_types84.default.number, import_prop_types84.default.shape({
      appear: import_prop_types84.default.number,
      enter: import_prop_types84.default.number,
      exit: import_prop_types84.default.number
    })])
  } : void 0;
  var Slide_default = Slide;

  // node_modules/@mui/material/Drawer/drawerClasses.js
  var import_utils162 = __toESM(require_utils());
  var import_generateUtilityClass70 = __toESM(require_generateUtilityClass3());
  function getDrawerUtilityClass(slot) {
    return (0, import_generateUtilityClass70.default)("MuiDrawer", slot);
  }
  var drawerClasses = (0, import_utils162.unstable_generateUtilityClasses)("MuiDrawer", ["root", "docked", "paper", "paperAnchorLeft", "paperAnchorRight", "paperAnchorTop", "paperAnchorBottom", "paperAnchorDockedLeft", "paperAnchorDockedRight", "paperAnchorDockedTop", "paperAnchorDockedBottom", "modal"]);
  var drawerClasses_default = drawerClasses;

  // node_modules/@mui/material/Drawer/Drawer.js
  var import_jsx_runtime126 = __toESM(require_jsx_runtime());
  var _excluded85 = ["BackdropProps"];
  var _excluded212 = ["anchor", "BackdropProps", "children", "className", "elevation", "hideBackdrop", "ModalProps", "onClose", "open", "PaperProps", "SlideProps", "TransitionComponent", "transitionDuration", "variant"];
  var overridesResolver2 = (props, styles7) => {
    const {
      ownerState
    } = props;
    return [styles7.root, (ownerState.variant === "permanent" || ownerState.variant === "persistent") && styles7.docked, styles7.modal];
  };
  var useUtilityClasses64 = (ownerState) => {
    const {
      classes,
      anchor,
      variant
    } = ownerState;
    const slots = {
      root: ["root"],
      docked: [(variant === "permanent" || variant === "persistent") && "docked"],
      modal: ["modal"],
      paper: ["paper", `paperAnchor${capitalize_default(anchor)}`, variant !== "temporary" && `paperAnchorDocked${capitalize_default(anchor)}`]
    };
    return (0, import_composeClasses61.unstable_composeClasses)(slots, getDrawerUtilityClass, classes);
  };
  var DrawerRoot = styled_default(Modal_default, {
    name: "MuiDrawer",
    slot: "Root",
    overridesResolver: overridesResolver2
  })(({
    theme
  }) => ({
    zIndex: (theme.vars || theme).zIndex.drawer
  }));
  var DrawerDockedRoot = styled_default("div", {
    shouldForwardProp: rootShouldForwardProp,
    name: "MuiDrawer",
    slot: "Docked",
    skipVariantsResolver: false,
    overridesResolver: overridesResolver2
  })({
    flex: "0 0 auto"
  });
  var DrawerPaper = styled_default(Paper_default, {
    name: "MuiDrawer",
    slot: "Paper",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.paper, styles7[`paperAnchor${capitalize_default(ownerState.anchor)}`], ownerState.variant !== "temporary" && styles7[`paperAnchorDocked${capitalize_default(ownerState.anchor)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    overflowY: "auto",
    display: "flex",
    flexDirection: "column",
    height: "100%",
    flex: "1 0 auto",
    zIndex: (theme.vars || theme).zIndex.drawer,
    // Add iOS momentum scrolling for iOS < 13.0
    WebkitOverflowScrolling: "touch",
    // temporary style
    position: "fixed",
    top: 0,
    // We disable the focus ring for mouse, touch and keyboard users.
    // At some point, it would be better to keep it for keyboard users.
    // :focus-ring CSS pseudo-class will help.
    outline: 0
  }, ownerState.anchor === "left" && {
    left: 0
  }, ownerState.anchor === "top" && {
    top: 0,
    left: 0,
    right: 0,
    height: "auto",
    maxHeight: "100%"
  }, ownerState.anchor === "right" && {
    right: 0
  }, ownerState.anchor === "bottom" && {
    top: "auto",
    left: 0,
    bottom: 0,
    right: 0,
    height: "auto",
    maxHeight: "100%"
  }, ownerState.anchor === "left" && ownerState.variant !== "temporary" && {
    borderRight: `1px solid ${(theme.vars || theme).palette.divider}`
  }, ownerState.anchor === "top" && ownerState.variant !== "temporary" && {
    borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`
  }, ownerState.anchor === "right" && ownerState.variant !== "temporary" && {
    borderLeft: `1px solid ${(theme.vars || theme).palette.divider}`
  }, ownerState.anchor === "bottom" && ownerState.variant !== "temporary" && {
    borderTop: `1px solid ${(theme.vars || theme).palette.divider}`
  }));
  var oppositeDirection = {
    left: "right",
    right: "left",
    top: "down",
    bottom: "up"
  };
  function isHorizontal(anchor) {
    return ["left", "right"].indexOf(anchor) !== -1;
  }
  function getAnchor(theme, anchor) {
    return theme.direction === "rtl" && isHorizontal(anchor) ? oppositeDirection[anchor] : anchor;
  }
  var Drawer = /* @__PURE__ */ React150.forwardRef(function Drawer2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiDrawer"
    });
    const theme = useTheme4();
    const defaultTransitionDuration = {
      enter: theme.transitions.duration.enteringScreen,
      exit: theme.transitions.duration.leavingScreen
    };
    const {
      anchor: anchorProp = "left",
      BackdropProps,
      children,
      className,
      elevation = 16,
      hideBackdrop = false,
      ModalProps: {
        BackdropProps: BackdropPropsProp
      } = {},
      onClose,
      open = false,
      PaperProps = {},
      SlideProps,
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Slide_default,
      transitionDuration = defaultTransitionDuration,
      variant = "temporary"
    } = props, ModalProps = _objectWithoutPropertiesLoose(props.ModalProps, _excluded85), other = _objectWithoutPropertiesLoose(props, _excluded212);
    const mounted = React150.useRef(false);
    React150.useEffect(() => {
      mounted.current = true;
    }, []);
    const anchorInvariant = getAnchor(theme, anchorProp);
    const anchor = anchorProp;
    const ownerState = _extends({}, props, {
      anchor,
      elevation,
      open,
      variant
    }, other);
    const classes = useUtilityClasses64(ownerState);
    const drawer = /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(DrawerPaper, _extends({
      elevation: variant === "temporary" ? elevation : 0,
      square: true
    }, PaperProps, {
      className: clsx_default(classes.paper, PaperProps.className),
      ownerState,
      children
    }));
    if (variant === "permanent") {
      return /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(DrawerDockedRoot, _extends({
        className: clsx_default(classes.root, classes.docked, className),
        ownerState,
        ref
      }, other, {
        children: drawer
      }));
    }
    const slidingDrawer = /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(TransitionComponent, _extends({
      in: open,
      direction: oppositeDirection[anchorInvariant],
      timeout: transitionDuration,
      appear: mounted.current
    }, SlideProps, {
      children: drawer
    }));
    if (variant === "persistent") {
      return /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(DrawerDockedRoot, _extends({
        className: clsx_default(classes.root, classes.docked, className),
        ownerState,
        ref
      }, other, {
        children: slidingDrawer
      }));
    }
    return /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(DrawerRoot, _extends({
      BackdropProps: _extends({}, BackdropProps, BackdropPropsProp, {
        transitionDuration
      }),
      className: clsx_default(classes.root, classes.modal, className),
      open,
      ownerState,
      onClose,
      hideBackdrop,
      ref
    }, other, ModalProps, {
      children: slidingDrawer
    }));
  });
  true ? Drawer.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Side from which the drawer will appear.
     * @default 'left'
     */
    anchor: import_prop_types85.default.oneOf(["bottom", "left", "right", "top"]),
    /**
     * @ignore
     */
    BackdropProps: import_prop_types85.default.object,
    /**
     * The content of the component.
     */
    children: import_prop_types85.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types85.default.object,
    /**
     * @ignore
     */
    className: import_prop_types85.default.string,
    /**
     * The elevation of the drawer.
     * @default 16
     */
    elevation: import_utils163.integerPropType,
    /**
     * If `true`, the backdrop is not rendered.
     * @default false
     */
    hideBackdrop: import_prop_types85.default.bool,
    /**
     * Props applied to the [`Modal`](/material-ui/api/modal/) element.
     * @default {}
     */
    ModalProps: import_prop_types85.default.object,
    /**
     * Callback fired when the component requests to be closed.
     * The `reason` parameter can optionally be used to control the response to `onClose`.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
     */
    onClose: import_prop_types85.default.func,
    /**
     * If `true`, the component is shown.
     * @default false
     */
    open: import_prop_types85.default.bool,
    /**
     * Props applied to the [`Paper`](/material-ui/api/paper/) element.
     * @default {}
     */
    PaperProps: import_prop_types85.default.object,
    /**
     * Props applied to the [`Slide`](/material-ui/api/slide/) element.
     */
    SlideProps: import_prop_types85.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types85.default.oneOfType([import_prop_types85.default.arrayOf(import_prop_types85.default.oneOfType([import_prop_types85.default.func, import_prop_types85.default.object, import_prop_types85.default.bool])), import_prop_types85.default.func, import_prop_types85.default.object]),
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: theme.transitions.duration.enteringScreen,
     *   exit: theme.transitions.duration.leavingScreen,
     * }
     */
    transitionDuration: import_prop_types85.default.oneOfType([import_prop_types85.default.number, import_prop_types85.default.shape({
      appear: import_prop_types85.default.number,
      enter: import_prop_types85.default.number,
      exit: import_prop_types85.default.number
    })]),
    /**
     * The variant to use.
     * @default 'temporary'
     */
    variant: import_prop_types85.default.oneOf(["permanent", "persistent", "temporary"])
  } : void 0;
  var Drawer_default = Drawer;

  // node_modules/@mui/material/Fab/Fab.js
  init_extends();
  var React151 = __toESM(require_react());
  var import_prop_types86 = __toESM(require_prop_types());
  var import_composeClasses62 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/Fab/fabClasses.js
  var import_utils164 = __toESM(require_utils());
  var import_generateUtilityClass71 = __toESM(require_generateUtilityClass3());
  function getFabUtilityClass(slot) {
    return (0, import_generateUtilityClass71.default)("MuiFab", slot);
  }
  var fabClasses = (0, import_utils164.unstable_generateUtilityClasses)("MuiFab", ["root", "primary", "secondary", "extended", "circular", "focusVisible", "disabled", "colorInherit", "sizeSmall", "sizeMedium", "sizeLarge", "info", "error", "warning", "success"]);
  var fabClasses_default = fabClasses;

  // node_modules/@mui/material/Fab/Fab.js
  var import_jsx_runtime127 = __toESM(require_jsx_runtime());
  var _excluded86 = ["children", "className", "color", "component", "disabled", "disableFocusRipple", "focusVisibleClassName", "size", "variant"];
  var useUtilityClasses65 = (ownerState) => {
    const {
      color,
      variant,
      classes,
      size: size2
    } = ownerState;
    const slots = {
      root: ["root", variant, `size${capitalize_default(size2)}`, color === "inherit" ? "colorInherit" : color]
    };
    const composedClasses = (0, import_composeClasses62.unstable_composeClasses)(slots, getFabUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var FabRoot = styled_default(ButtonBase_default, {
    name: "MuiFab",
    slot: "Root",
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, styles7[ownerState.variant], styles7[`size${capitalize_default(ownerState.size)}`], ownerState.color === "inherit" && styles7.colorInherit, styles7[capitalize_default(ownerState.size)], styles7[ownerState.color]];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _theme$palette$getCon, _theme$palette;
    return _extends({}, theme.typography.button, {
      minHeight: 36,
      transition: theme.transitions.create(["background-color", "box-shadow", "border-color"], {
        duration: theme.transitions.duration.short
      }),
      borderRadius: "50%",
      padding: 0,
      minWidth: 0,
      width: 56,
      height: 56,
      zIndex: (theme.vars || theme).zIndex.fab,
      boxShadow: (theme.vars || theme).shadows[6],
      "&:active": {
        boxShadow: (theme.vars || theme).shadows[12]
      },
      color: theme.vars ? theme.vars.palette.text.primary : (_theme$palette$getCon = (_theme$palette = theme.palette).getContrastText) == null ? void 0 : _theme$palette$getCon.call(_theme$palette, theme.palette.grey[300]),
      backgroundColor: (theme.vars || theme).palette.grey[300],
      "&:hover": {
        backgroundColor: (theme.vars || theme).palette.grey.A100,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: (theme.vars || theme).palette.grey[300]
        },
        textDecoration: "none"
      },
      [`&.${fabClasses_default.focusVisible}`]: {
        boxShadow: (theme.vars || theme).shadows[6]
      }
    }, ownerState.size === "small" && {
      width: 40,
      height: 40
    }, ownerState.size === "medium" && {
      width: 48,
      height: 48
    }, ownerState.variant === "extended" && {
      borderRadius: 48 / 2,
      padding: "0 16px",
      width: "auto",
      minHeight: "auto",
      minWidth: 48,
      height: 48
    }, ownerState.variant === "extended" && ownerState.size === "small" && {
      width: "auto",
      padding: "0 8px",
      borderRadius: 34 / 2,
      minWidth: 34,
      height: 34
    }, ownerState.variant === "extended" && ownerState.size === "medium" && {
      width: "auto",
      padding: "0 16px",
      borderRadius: 40 / 2,
      minWidth: 40,
      height: 40
    }, ownerState.color === "inherit" && {
      color: "inherit"
    });
  }, ({
    theme,
    ownerState
  }) => _extends({}, ownerState.color !== "inherit" && ownerState.color !== "default" && (theme.vars || theme).palette[ownerState.color] != null && {
    color: (theme.vars || theme).palette[ownerState.color].contrastText,
    backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
    "&:hover": {
      backgroundColor: (theme.vars || theme).palette[ownerState.color].dark,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].main
      }
    }
  }), ({
    theme
  }) => ({
    [`&.${fabClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.action.disabled,
      boxShadow: (theme.vars || theme).shadows[0],
      backgroundColor: (theme.vars || theme).palette.action.disabledBackground
    }
  }));
  var Fab = /* @__PURE__ */ React151.forwardRef(function Fab2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiFab"
    });
    const {
      children,
      className,
      color = "default",
      component = "button",
      disabled = false,
      disableFocusRipple = false,
      focusVisibleClassName,
      size: size2 = "large",
      variant = "circular"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded86);
    const ownerState = _extends({}, props, {
      color,
      component,
      disabled,
      disableFocusRipple,
      size: size2,
      variant
    });
    const classes = useUtilityClasses65(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime127.jsx)(FabRoot, _extends({
      className: clsx_default(classes.root, className),
      component,
      disabled,
      focusRipple: !disableFocusRipple,
      focusVisibleClassName: clsx_default(classes.focusVisible, focusVisibleClassName),
      ownerState,
      ref
    }, other, {
      classes,
      children
    }));
  });
  true ? Fab.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types86.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types86.default.object,
    /**
     * @ignore
     */
    className: import_prop_types86.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'default'
     */
    color: import_prop_types86.default.oneOfType([import_prop_types86.default.oneOf(["default", "error", "info", "inherit", "primary", "secondary", "success", "warning"]), import_prop_types86.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types86.default.elementType,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types86.default.bool,
    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: import_prop_types86.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     */
    disableRipple: import_prop_types86.default.bool,
    /**
     * @ignore
     */
    focusVisibleClassName: import_prop_types86.default.string,
    /**
     * The URL to link to when the button is clicked.
     * If defined, an `a` element will be used as the root node.
     */
    href: import_prop_types86.default.string,
    /**
     * The size of the component.
     * `small` is equivalent to the dense button styling.
     * @default 'large'
     */
    size: import_prop_types86.default.oneOfType([import_prop_types86.default.oneOf(["small", "medium", "large"]), import_prop_types86.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types86.default.oneOfType([import_prop_types86.default.arrayOf(import_prop_types86.default.oneOfType([import_prop_types86.default.func, import_prop_types86.default.object, import_prop_types86.default.bool])), import_prop_types86.default.func, import_prop_types86.default.object]),
    /**
     * The variant to use.
     * @default 'circular'
     */
    variant: import_prop_types86.default.oneOfType([import_prop_types86.default.oneOf(["circular", "extended"]), import_prop_types86.default.string])
  } : void 0;
  var Fab_default = Fab;

  // node_modules/@mui/material/FilledInput/FilledInput.js
  init_extends();
  var React152 = __toESM(require_react());
  var import_utils165 = __toESM(require_utils());
  var import_prop_types87 = __toESM(require_prop_types());
  var import_composeClasses63 = __toESM(require_composeClasses3());
  var import_jsx_runtime128 = __toESM(require_jsx_runtime());
  var _excluded87 = ["disableUnderline", "components", "componentsProps", "fullWidth", "hiddenLabel", "inputComponent", "multiline", "slotProps", "slots", "type"];
  var useUtilityClasses66 = (ownerState) => {
    const {
      classes,
      disableUnderline
    } = ownerState;
    const slots = {
      root: ["root", !disableUnderline && "underline"],
      input: ["input"]
    };
    const composedClasses = (0, import_composeClasses63.unstable_composeClasses)(slots, getFilledInputUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var FilledInputRoot = styled_default(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiFilledInput",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [...rootOverridesResolver(props, styles7), !ownerState.disableUnderline && styles7.underline];
    }
  })(({
    theme,
    ownerState
  }) => {
    var _palette;
    const light2 = theme.palette.mode === "light";
    const bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
    const backgroundColor = light2 ? "rgba(0, 0, 0, 0.06)" : "rgba(255, 255, 255, 0.09)";
    const hoverBackground = light2 ? "rgba(0, 0, 0, 0.09)" : "rgba(255, 255, 255, 0.13)";
    const disabledBackground = light2 ? "rgba(0, 0, 0, 0.12)" : "rgba(255, 255, 255, 0.12)";
    return _extends({
      position: "relative",
      backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor,
      borderTopLeftRadius: (theme.vars || theme).shape.borderRadius,
      borderTopRightRadius: (theme.vars || theme).shape.borderRadius,
      transition: theme.transitions.create("background-color", {
        duration: theme.transitions.duration.shorter,
        easing: theme.transitions.easing.easeOut
      }),
      "&:hover": {
        backgroundColor: theme.vars ? theme.vars.palette.FilledInput.hoverBg : hoverBackground,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor
        }
      },
      [`&.${filledInputClasses_default.focused}`]: {
        backgroundColor: theme.vars ? theme.vars.palette.FilledInput.bg : backgroundColor
      },
      [`&.${filledInputClasses_default.disabled}`]: {
        backgroundColor: theme.vars ? theme.vars.palette.FilledInput.disabledBg : disabledBackground
      }
    }, !ownerState.disableUnderline && {
      "&:after": {
        borderBottom: `2px solid ${(_palette = (theme.vars || theme).palette[ownerState.color || "primary"]) == null ? void 0 : _palette.main}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '""',
        position: "absolute",
        right: 0,
        transform: "scaleX(0)",
        transition: theme.transitions.create("transform", {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut
        }),
        pointerEvents: "none"
        // Transparent to the hover style.
      },
      [`&.${filledInputClasses_default.focused}:after`]: {
        // translateX(0) is a workaround for Safari transform scale bug
        // See https://github.com/mui/material-ui/issues/31766
        transform: "scaleX(1) translateX(0)"
      },
      [`&.${filledInputClasses_default.error}`]: {
        "&:before, &:after": {
          borderBottomColor: (theme.vars || theme).palette.error.main
        }
      },
      "&:before": {
        borderBottom: `1px solid ${theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / ${theme.vars.opacity.inputUnderline})` : bottomLineColor}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '"\\00a0"',
        position: "absolute",
        right: 0,
        transition: theme.transitions.create("border-bottom-color", {
          duration: theme.transitions.duration.shorter
        }),
        pointerEvents: "none"
        // Transparent to the hover style.
      },
      [`&:hover:not(.${filledInputClasses_default.disabled}, .${filledInputClasses_default.error}):before`]: {
        borderBottom: `1px solid ${(theme.vars || theme).palette.text.primary}`
      },
      [`&.${filledInputClasses_default.disabled}:before`]: {
        borderBottomStyle: "dotted"
      }
    }, ownerState.startAdornment && {
      paddingLeft: 12
    }, ownerState.endAdornment && {
      paddingRight: 12
    }, ownerState.multiline && _extends({
      padding: "25px 12px 8px"
    }, ownerState.size === "small" && {
      paddingTop: 21,
      paddingBottom: 4
    }, ownerState.hiddenLabel && {
      paddingTop: 16,
      paddingBottom: 17
    }));
  });
  var FilledInputInput = styled_default(InputBaseComponent, {
    name: "MuiFilledInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(({
    theme,
    ownerState
  }) => _extends({
    paddingTop: 25,
    paddingRight: 12,
    paddingBottom: 8,
    paddingLeft: 12
  }, !theme.vars && {
    "&:-webkit-autofill": {
      WebkitBoxShadow: theme.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
      WebkitTextFillColor: theme.palette.mode === "light" ? null : "#fff",
      caretColor: theme.palette.mode === "light" ? null : "#fff",
      borderTopLeftRadius: "inherit",
      borderTopRightRadius: "inherit"
    }
  }, theme.vars && {
    "&:-webkit-autofill": {
      borderTopLeftRadius: "inherit",
      borderTopRightRadius: "inherit"
    },
    [theme.getColorSchemeSelector("dark")]: {
      "&:-webkit-autofill": {
        WebkitBoxShadow: "0 0 0 100px #266798 inset",
        WebkitTextFillColor: "#fff",
        caretColor: "#fff"
      }
    }
  }, ownerState.size === "small" && {
    paddingTop: 21,
    paddingBottom: 4
  }, ownerState.hiddenLabel && {
    paddingTop: 16,
    paddingBottom: 17
  }, ownerState.multiline && {
    paddingTop: 0,
    paddingBottom: 0,
    paddingLeft: 0,
    paddingRight: 0
  }, ownerState.startAdornment && {
    paddingLeft: 0
  }, ownerState.endAdornment && {
    paddingRight: 0
  }, ownerState.hiddenLabel && ownerState.size === "small" && {
    paddingTop: 8,
    paddingBottom: 9
  }));
  var FilledInput = /* @__PURE__ */ React152.forwardRef(function FilledInput2(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$input;
    const props = useThemeProps({
      props: inProps,
      name: "MuiFilledInput"
    });
    const {
      components = {},
      componentsProps: componentsPropsProp,
      fullWidth = false,
      // declare here to prevent spreading to DOM
      inputComponent = "input",
      multiline = false,
      slotProps,
      slots = {},
      type = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded87);
    const ownerState = _extends({}, props, {
      fullWidth,
      inputComponent,
      multiline,
      type
    });
    const classes = useUtilityClasses66(props);
    const filledInputComponentsProps = {
      root: {
        ownerState
      },
      input: {
        ownerState
      }
    };
    const componentsProps = (slotProps != null ? slotProps : componentsPropsProp) ? (0, import_utils165.deepmerge)(slotProps != null ? slotProps : componentsPropsProp, filledInputComponentsProps) : filledInputComponentsProps;
    const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : FilledInputRoot;
    const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : FilledInputInput;
    return /* @__PURE__ */ (0, import_jsx_runtime128.jsx)(InputBase_default, _extends({
      slots: {
        root: RootSlot,
        input: InputSlot
      },
      componentsProps,
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other, {
      classes
    }));
  });
  true ? FilledInput.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: import_prop_types87.default.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: import_prop_types87.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types87.default.object,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: import_prop_types87.default.oneOfType([import_prop_types87.default.oneOf(["primary", "secondary"]), import_prop_types87.default.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types87.default.shape({
      Input: import_prop_types87.default.elementType,
      Root: import_prop_types87.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types87.default.shape({
      input: import_prop_types87.default.object,
      root: import_prop_types87.default.object
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types87.default.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: import_prop_types87.default.bool,
    /**
     * If `true`, the input will not have an underline.
     */
    disableUnderline: import_prop_types87.default.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: import_prop_types87.default.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: import_prop_types87.default.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types87.default.bool,
    /**
     * If `true`, the label is hidden.
     * This is used to increase density for a `FilledInput`.
     * Be sure to add `aria-label` to the `input` element.
     * @default false
     */
    hiddenLabel: import_prop_types87.default.bool,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types87.default.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: import_prop_types87.default.elementType,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: import_prop_types87.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: import_utils165.refType,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: import_prop_types87.default.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: import_prop_types87.default.oneOfType([import_prop_types87.default.number, import_prop_types87.default.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: import_prop_types87.default.oneOfType([import_prop_types87.default.number, import_prop_types87.default.string]),
    /**
     * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: import_prop_types87.default.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types87.default.string,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types87.default.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: import_prop_types87.default.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: import_prop_types87.default.bool,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: import_prop_types87.default.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: import_prop_types87.default.oneOfType([import_prop_types87.default.number, import_prop_types87.default.string]),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types87.default.shape({
      input: import_prop_types87.default.object,
      root: import_prop_types87.default.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types87.default.shape({
      input: import_prop_types87.default.elementType,
      root: import_prop_types87.default.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: import_prop_types87.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types87.default.oneOfType([import_prop_types87.default.arrayOf(import_prop_types87.default.oneOfType([import_prop_types87.default.func, import_prop_types87.default.object, import_prop_types87.default.bool])), import_prop_types87.default.func, import_prop_types87.default.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: import_prop_types87.default.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: import_prop_types87.default.any
  } : void 0;
  FilledInput.muiName = "Input";
  var FilledInput_default = FilledInput;

  // node_modules/@mui/material/FormControl/FormControl.js
  init_extends();
  var React153 = __toESM(require_react());
  var import_prop_types88 = __toESM(require_prop_types());
  var import_composeClasses64 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/utils/isMuiElement.js
  var import_utils166 = __toESM(require_utils());
  var isMuiElement_default = import_utils166.unstable_isMuiElement;

  // node_modules/@mui/material/FormControl/formControlClasses.js
  var import_utils167 = __toESM(require_utils());
  var import_generateUtilityClass72 = __toESM(require_generateUtilityClass3());
  function getFormControlUtilityClasses(slot) {
    return (0, import_generateUtilityClass72.default)("MuiFormControl", slot);
  }
  var formControlClasses2 = (0, import_utils167.unstable_generateUtilityClasses)("MuiFormControl", ["root", "marginNone", "marginNormal", "marginDense", "fullWidth", "disabled"]);
  var formControlClasses_default = formControlClasses2;

  // node_modules/@mui/material/FormControl/FormControl.js
  var import_jsx_runtime129 = __toESM(require_jsx_runtime());
  var _excluded88 = ["children", "className", "color", "component", "disabled", "error", "focused", "fullWidth", "hiddenLabel", "margin", "required", "size", "variant"];
  var useUtilityClasses67 = (ownerState) => {
    const {
      classes,
      margin,
      fullWidth
    } = ownerState;
    const slots = {
      root: ["root", margin !== "none" && `margin${capitalize_default(margin)}`, fullWidth && "fullWidth"]
    };
    return (0, import_composeClasses64.unstable_composeClasses)(slots, getFormControlUtilityClasses, classes);
  };
  var FormControlRoot = styled_default("div", {
    name: "MuiFormControl",
    slot: "Root",
    overridesResolver: ({
      ownerState
    }, styles7) => {
      return _extends({}, styles7.root, styles7[`margin${capitalize_default(ownerState.margin)}`], ownerState.fullWidth && styles7.fullWidth);
    }
  })(({
    ownerState
  }) => _extends({
    display: "inline-flex",
    flexDirection: "column",
    position: "relative",
    // Reset fieldset default style.
    minWidth: 0,
    padding: 0,
    margin: 0,
    border: 0,
    verticalAlign: "top"
  }, ownerState.margin === "normal" && {
    marginTop: 16,
    marginBottom: 8
  }, ownerState.margin === "dense" && {
    marginTop: 8,
    marginBottom: 4
  }, ownerState.fullWidth && {
    width: "100%"
  }));
  var FormControl3 = /* @__PURE__ */ React153.forwardRef(function FormControl4(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiFormControl"
    });
    const {
      children,
      className,
      color = "primary",
      component = "div",
      disabled = false,
      error = false,
      focused: visuallyFocused,
      fullWidth = false,
      hiddenLabel = false,
      margin = "none",
      required = false,
      size: size2 = "medium",
      variant = "outlined"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded88);
    const ownerState = _extends({}, props, {
      color,
      component,
      disabled,
      error,
      fullWidth,
      hiddenLabel,
      margin,
      required,
      size: size2,
      variant
    });
    const classes = useUtilityClasses67(ownerState);
    const [adornedStart, setAdornedStart] = React153.useState(() => {
      let initialAdornedStart = false;
      if (children) {
        React153.Children.forEach(children, (child) => {
          if (!isMuiElement_default(child, ["Input", "Select"])) {
            return;
          }
          const input = isMuiElement_default(child, ["Select"]) ? child.props.input : child;
          if (input && isAdornedStart(input.props)) {
            initialAdornedStart = true;
          }
        });
      }
      return initialAdornedStart;
    });
    const [filled, setFilled] = React153.useState(() => {
      let initialFilled = false;
      if (children) {
        React153.Children.forEach(children, (child) => {
          if (!isMuiElement_default(child, ["Input", "Select"])) {
            return;
          }
          if (isFilled(child.props, true) || isFilled(child.props.inputProps, true)) {
            initialFilled = true;
          }
        });
      }
      return initialFilled;
    });
    const [focusedState, setFocused] = React153.useState(false);
    if (disabled && focusedState) {
      setFocused(false);
    }
    const focused = visuallyFocused !== void 0 && !disabled ? visuallyFocused : focusedState;
    let registerEffect;
    if (true) {
      const registeredInput = React153.useRef(false);
      registerEffect = () => {
        if (registeredInput.current) {
          console.error(["MUI: There are multiple `InputBase` components inside a FormControl.", "This creates visual inconsistencies, only use one `InputBase`."].join("\n"));
        }
        registeredInput.current = true;
        return () => {
          registeredInput.current = false;
        };
      };
    }
    const childContext = React153.useMemo(() => {
      return {
        adornedStart,
        setAdornedStart,
        color,
        disabled,
        error,
        filled,
        focused,
        fullWidth,
        hiddenLabel,
        size: size2,
        onBlur: () => {
          setFocused(false);
        },
        onEmpty: () => {
          setFilled(false);
        },
        onFilled: () => {
          setFilled(true);
        },
        onFocus: () => {
          setFocused(true);
        },
        registerEffect,
        required,
        variant
      };
    }, [adornedStart, color, disabled, error, filled, focused, fullWidth, hiddenLabel, registerEffect, required, size2, variant]);
    return /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(FormControlContext_default.Provider, {
      value: childContext,
      children: /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(FormControlRoot, _extends({
        as: component,
        ownerState,
        className: clsx_default(classes.root, className),
        ref
      }, other, {
        children
      }))
    });
  });
  true ? FormControl3.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types88.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types88.default.object,
    /**
     * @ignore
     */
    className: import_prop_types88.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'primary'
     */
    color: import_prop_types88.default.oneOfType([import_prop_types88.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), import_prop_types88.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types88.default.elementType,
    /**
     * If `true`, the label, input and helper text should be displayed in a disabled state.
     * @default false
     */
    disabled: import_prop_types88.default.bool,
    /**
     * If `true`, the label is displayed in an error state.
     * @default false
     */
    error: import_prop_types88.default.bool,
    /**
     * If `true`, the component is displayed in focused state.
     */
    focused: import_prop_types88.default.bool,
    /**
     * If `true`, the component will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types88.default.bool,
    /**
     * If `true`, the label is hidden.
     * This is used to increase density for a `FilledInput`.
     * Be sure to add `aria-label` to the `input` element.
     * @default false
     */
    hiddenLabel: import_prop_types88.default.bool,
    /**
     * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
     * @default 'none'
     */
    margin: import_prop_types88.default.oneOf(["dense", "none", "normal"]),
    /**
     * If `true`, the label will indicate that the `input` is required.
     * @default false
     */
    required: import_prop_types88.default.bool,
    /**
     * The size of the component.
     * @default 'medium'
     */
    size: import_prop_types88.default.oneOfType([import_prop_types88.default.oneOf(["medium", "small"]), import_prop_types88.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types88.default.oneOfType([import_prop_types88.default.arrayOf(import_prop_types88.default.oneOfType([import_prop_types88.default.func, import_prop_types88.default.object, import_prop_types88.default.bool])), import_prop_types88.default.func, import_prop_types88.default.object]),
    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: import_prop_types88.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var FormControl_default = FormControl3;

  // node_modules/@mui/material/FormControlLabel/FormControlLabel.js
  init_extends();
  var React154 = __toESM(require_react());
  var import_prop_types90 = __toESM(require_prop_types());
  var import_utils171 = __toESM(require_utils());
  var import_composeClasses65 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/Stack/Stack.js
  var import_prop_types89 = __toESM(require_prop_types());
  var import_system29 = __toESM(require_system());
  var Stack = (0, import_system29.createStack)({
    createStyledComponent: styled_default("div", {
      name: "MuiStack",
      slot: "Root",
      overridesResolver: (props, styles7) => styles7.root
    }),
    useThemeProps: (inProps) => useThemeProps({
      props: inProps,
      name: "MuiStack"
    })
  });
  true ? Stack.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types89.default.node,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types89.default.elementType,
    /**
     * Defines the `flex-direction` style property.
     * It is applied for all screen sizes.
     * @default 'column'
     */
    direction: import_prop_types89.default.oneOfType([import_prop_types89.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), import_prop_types89.default.arrayOf(import_prop_types89.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), import_prop_types89.default.object]),
    /**
     * Add an element between each child.
     */
    divider: import_prop_types89.default.node,
    /**
     * Defines the space between immediate children.
     * @default 0
     */
    spacing: import_prop_types89.default.oneOfType([import_prop_types89.default.arrayOf(import_prop_types89.default.oneOfType([import_prop_types89.default.number, import_prop_types89.default.string])), import_prop_types89.default.number, import_prop_types89.default.object, import_prop_types89.default.string]),
    /**
     * The system prop, which allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types89.default.oneOfType([import_prop_types89.default.arrayOf(import_prop_types89.default.oneOfType([import_prop_types89.default.func, import_prop_types89.default.object, import_prop_types89.default.bool])), import_prop_types89.default.func, import_prop_types89.default.object]),
    /**
     * If `true`, the CSS flexbox `gap` is used instead of applying `margin` to children.
     *
     * While CSS `gap` removes the [known limitations](https://mui.com/joy-ui/react-stack/#limitations),
     * it is not fully supported in some browsers. We recommend checking https://caniuse.com/?search=flex%20gap before using this flag.
     *
     * To enable this flag globally, follow the [theme's default props](https://mui.com/material-ui/customization/theme-components/#default-props) configuration.
     * @default false
     */
    useFlexGap: import_prop_types89.default.bool
  } : void 0;
  var Stack_default = Stack;

  // node_modules/@mui/material/Stack/stackClasses.js
  var import_utils169 = __toESM(require_utils());
  var stackClasses = (0, import_utils169.unstable_generateUtilityClasses)("MuiStack", ["root"]);
  var stackClasses_default = stackClasses;

  // node_modules/@mui/material/FormControlLabel/formControlLabelClasses.js
  var import_utils170 = __toESM(require_utils());
  var import_generateUtilityClass73 = __toESM(require_generateUtilityClass3());
  function getFormControlLabelUtilityClasses(slot) {
    return (0, import_generateUtilityClass73.default)("MuiFormControlLabel", slot);
  }
  var formControlLabelClasses = (0, import_utils170.unstable_generateUtilityClasses)("MuiFormControlLabel", ["root", "labelPlacementStart", "labelPlacementTop", "labelPlacementBottom", "disabled", "label", "error", "required", "asterisk"]);
  var formControlLabelClasses_default = formControlLabelClasses;

  // node_modules/@mui/material/FormControlLabel/FormControlLabel.js
  var import_jsx_runtime130 = __toESM(require_jsx_runtime());
  var import_jsx_runtime131 = __toESM(require_jsx_runtime());
  var _excluded89 = ["checked", "className", "componentsProps", "control", "disabled", "disableTypography", "inputRef", "label", "labelPlacement", "name", "onChange", "required", "slotProps", "value"];
  var useUtilityClasses68 = (ownerState) => {
    const {
      classes,
      disabled,
      labelPlacement,
      error,
      required
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", `labelPlacement${capitalize_default(labelPlacement)}`, error && "error", required && "required"],
      label: ["label", disabled && "disabled"],
      asterisk: ["asterisk", error && "error"]
    };
    return (0, import_composeClasses65.unstable_composeClasses)(slots, getFormControlLabelUtilityClasses, classes);
  };
  var FormControlLabelRoot = styled_default("label", {
    name: "MuiFormControlLabel",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${formControlLabelClasses_default.label}`]: styles7.label
      }, styles7.root, styles7[`labelPlacement${capitalize_default(ownerState.labelPlacement)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "inline-flex",
    alignItems: "center",
    cursor: "pointer",
    // For correct alignment with the text.
    verticalAlign: "middle",
    WebkitTapHighlightColor: "transparent",
    marginLeft: -11,
    marginRight: 16,
    // used for row presentation of radio/checkbox
    [`&.${formControlLabelClasses_default.disabled}`]: {
      cursor: "default"
    }
  }, ownerState.labelPlacement === "start" && {
    flexDirection: "row-reverse",
    marginLeft: 16,
    // used for row presentation of radio/checkbox
    marginRight: -11
  }, ownerState.labelPlacement === "top" && {
    flexDirection: "column-reverse",
    marginLeft: 16
  }, ownerState.labelPlacement === "bottom" && {
    flexDirection: "column",
    marginLeft: 16
  }, {
    [`& .${formControlLabelClasses_default.label}`]: {
      [`&.${formControlLabelClasses_default.disabled}`]: {
        color: (theme.vars || theme).palette.text.disabled
      }
    }
  }));
  var AsteriskComponent = styled_default("span", {
    name: "MuiFormControlLabel",
    slot: "Asterisk",
    overridesResolver: (props, styles7) => styles7.asterisk
  })(({
    theme
  }) => ({
    [`&.${formControlLabelClasses_default.error}`]: {
      color: (theme.vars || theme).palette.error.main
    }
  }));
  var FormControlLabel = /* @__PURE__ */ React154.forwardRef(function FormControlLabel2(inProps, ref) {
    var _ref, _slotProps$typography;
    const props = useThemeProps({
      props: inProps,
      name: "MuiFormControlLabel"
    });
    const {
      className,
      componentsProps = {},
      control,
      disabled: disabledProp,
      disableTypography,
      label: labelProp,
      labelPlacement = "end",
      required: requiredProp,
      slotProps = {}
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded89);
    const muiFormControl = useFormControl();
    const disabled = (_ref = disabledProp != null ? disabledProp : control.props.disabled) != null ? _ref : muiFormControl == null ? void 0 : muiFormControl.disabled;
    const required = requiredProp != null ? requiredProp : control.props.required;
    const controlProps = {
      disabled,
      required
    };
    ["checked", "name", "onChange", "value", "inputRef"].forEach((key) => {
      if (typeof control.props[key] === "undefined" && typeof props[key] !== "undefined") {
        controlProps[key] = props[key];
      }
    });
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["error"]
    });
    const ownerState = _extends({}, props, {
      disabled,
      labelPlacement,
      required,
      error: fcs.error
    });
    const classes = useUtilityClasses68(ownerState);
    const typographySlotProps = (_slotProps$typography = slotProps.typography) != null ? _slotProps$typography : componentsProps.typography;
    let label = labelProp;
    if (label != null && label.type !== Typography_default && !disableTypography) {
      label = /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(Typography_default, _extends({
        component: "span"
      }, typographySlotProps, {
        className: clsx_default(classes.label, typographySlotProps == null ? void 0 : typographySlotProps.className),
        children: label
      }));
    }
    return /* @__PURE__ */ (0, import_jsx_runtime131.jsxs)(FormControlLabelRoot, _extends({
      className: clsx_default(classes.root, className),
      ownerState,
      ref
    }, other, {
      children: [/* @__PURE__ */ React154.cloneElement(control, controlProps), required ? /* @__PURE__ */ (0, import_jsx_runtime131.jsxs)(Stack_default, {
        direction: "row",
        alignItems: "center",
        children: [label, /* @__PURE__ */ (0, import_jsx_runtime131.jsxs)(AsteriskComponent, {
          ownerState,
          "aria-hidden": true,
          className: classes.asterisk,
          children: ["\u2009", "*"]
        })]
      }) : label]
    }));
  });
  true ? FormControlLabel.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * If `true`, the component appears selected.
     */
    checked: import_prop_types90.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types90.default.object,
    /**
     * @ignore
     */
    className: import_prop_types90.default.string,
    /**
     * The props used for each slot inside.
     * @default {}
     */
    componentsProps: import_prop_types90.default.shape({
      typography: import_prop_types90.default.object
    }),
    /**
     * A control element. For instance, it can be a `Radio`, a `Switch` or a `Checkbox`.
     */
    control: import_prop_types90.default.element.isRequired,
    /**
     * If `true`, the control is disabled.
     */
    disabled: import_prop_types90.default.bool,
    /**
     * If `true`, the label is rendered as it is passed without an additional typography node.
     */
    disableTypography: import_prop_types90.default.bool,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: import_utils171.refType,
    /**
     * A text or an element to be used in an enclosing label element.
     */
    label: import_prop_types90.default.node,
    /**
     * The position of the label.
     * @default 'end'
     */
    labelPlacement: import_prop_types90.default.oneOf(["bottom", "end", "start", "top"]),
    /**
     * @ignore
     */
    name: import_prop_types90.default.string,
    /**
     * Callback fired when the state is changed.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: import_prop_types90.default.func,
    /**
     * If `true`, the label will indicate that the `input` is required.
     */
    required: import_prop_types90.default.bool,
    /**
     * The props used for each slot inside.
     * @default {}
     */
    slotProps: import_prop_types90.default.shape({
      typography: import_prop_types90.default.object
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types90.default.oneOfType([import_prop_types90.default.arrayOf(import_prop_types90.default.oneOfType([import_prop_types90.default.func, import_prop_types90.default.object, import_prop_types90.default.bool])), import_prop_types90.default.func, import_prop_types90.default.object]),
    /**
     * The value of the component.
     */
    value: import_prop_types90.default.any
  } : void 0;
  var FormControlLabel_default = FormControlLabel;

  // node_modules/@mui/material/FormGroup/FormGroup.js
  init_extends();
  var React155 = __toESM(require_react());
  var import_prop_types91 = __toESM(require_prop_types());
  var import_composeClasses66 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/FormGroup/formGroupClasses.js
  var import_utils172 = __toESM(require_utils());
  var import_generateUtilityClass74 = __toESM(require_generateUtilityClass3());
  function getFormGroupUtilityClass(slot) {
    return (0, import_generateUtilityClass74.default)("MuiFormGroup", slot);
  }
  var formGroupClasses = (0, import_utils172.unstable_generateUtilityClasses)("MuiFormGroup", ["root", "row", "error"]);
  var formGroupClasses_default = formGroupClasses;

  // node_modules/@mui/material/FormGroup/FormGroup.js
  var import_jsx_runtime132 = __toESM(require_jsx_runtime());
  var _excluded90 = ["className", "row"];
  var useUtilityClasses69 = (ownerState) => {
    const {
      classes,
      row,
      error
    } = ownerState;
    const slots = {
      root: ["root", row && "row", error && "error"]
    };
    return (0, import_composeClasses66.unstable_composeClasses)(slots, getFormGroupUtilityClass, classes);
  };
  var FormGroupRoot = styled_default("div", {
    name: "MuiFormGroup",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, ownerState.row && styles7.row];
    }
  })(({
    ownerState
  }) => _extends({
    display: "flex",
    flexDirection: "column",
    flexWrap: "wrap"
  }, ownerState.row && {
    flexDirection: "row"
  }));
  var FormGroup = /* @__PURE__ */ React155.forwardRef(function FormGroup2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiFormGroup"
    });
    const {
      className,
      row = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded90);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["error"]
    });
    const ownerState = _extends({}, props, {
      row,
      error: fcs.error
    });
    const classes = useUtilityClasses69(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime132.jsx)(FormGroupRoot, _extends({
      className: clsx_default(classes.root, className),
      ownerState,
      ref
    }, other));
  });
  true ? FormGroup.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types91.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types91.default.object,
    /**
     * @ignore
     */
    className: import_prop_types91.default.string,
    /**
     * Display group of elements in a compact row.
     * @default false
     */
    row: import_prop_types91.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types91.default.oneOfType([import_prop_types91.default.arrayOf(import_prop_types91.default.oneOfType([import_prop_types91.default.func, import_prop_types91.default.object, import_prop_types91.default.bool])), import_prop_types91.default.func, import_prop_types91.default.object])
  } : void 0;
  var FormGroup_default = FormGroup;

  // node_modules/@mui/material/FormHelperText/FormHelperText.js
  init_extends();
  var React156 = __toESM(require_react());
  var import_prop_types92 = __toESM(require_prop_types());
  var import_composeClasses67 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/FormHelperText/formHelperTextClasses.js
  var import_utils173 = __toESM(require_utils());
  var import_generateUtilityClass75 = __toESM(require_generateUtilityClass3());
  function getFormHelperTextUtilityClasses(slot) {
    return (0, import_generateUtilityClass75.default)("MuiFormHelperText", slot);
  }
  var formHelperTextClasses = (0, import_utils173.unstable_generateUtilityClasses)("MuiFormHelperText", ["root", "error", "disabled", "sizeSmall", "sizeMedium", "contained", "focused", "filled", "required"]);
  var formHelperTextClasses_default = formHelperTextClasses;

  // node_modules/@mui/material/FormHelperText/FormHelperText.js
  var import_jsx_runtime133 = __toESM(require_jsx_runtime());
  var _span5;
  var _excluded91 = ["children", "className", "component", "disabled", "error", "filled", "focused", "margin", "required", "variant"];
  var useUtilityClasses70 = (ownerState) => {
    const {
      classes,
      contained,
      size: size2,
      disabled,
      error,
      filled,
      focused,
      required
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", error && "error", size2 && `size${capitalize_default(size2)}`, contained && "contained", focused && "focused", filled && "filled", required && "required"]
    };
    return (0, import_composeClasses67.unstable_composeClasses)(slots, getFormHelperTextUtilityClasses, classes);
  };
  var FormHelperTextRoot = styled_default("p", {
    name: "MuiFormHelperText",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, ownerState.size && styles7[`size${capitalize_default(ownerState.size)}`], ownerState.contained && styles7.contained, ownerState.filled && styles7.filled];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    color: (theme.vars || theme).palette.text.secondary
  }, theme.typography.caption, {
    textAlign: "left",
    marginTop: 3,
    marginRight: 0,
    marginBottom: 0,
    marginLeft: 0,
    [`&.${formHelperTextClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.text.disabled
    },
    [`&.${formHelperTextClasses_default.error}`]: {
      color: (theme.vars || theme).palette.error.main
    }
  }, ownerState.size === "small" && {
    marginTop: 4
  }, ownerState.contained && {
    marginLeft: 14,
    marginRight: 14
  }));
  var FormHelperText = /* @__PURE__ */ React156.forwardRef(function FormHelperText2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiFormHelperText"
    });
    const {
      children,
      className,
      component = "p"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded91);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant", "size", "disabled", "error", "filled", "focused", "required"]
    });
    const ownerState = _extends({}, props, {
      component,
      contained: fcs.variant === "filled" || fcs.variant === "outlined",
      variant: fcs.variant,
      size: fcs.size,
      disabled: fcs.disabled,
      error: fcs.error,
      filled: fcs.filled,
      focused: fcs.focused,
      required: fcs.required
    });
    const classes = useUtilityClasses70(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(FormHelperTextRoot, _extends({
      as: component,
      ownerState,
      className: clsx_default(classes.root, className),
      ref
    }, other, {
      children: children === " " ? (
        // notranslate needed while Google Translate will not fix zero-width space issue
        _span5 || (_span5 = /* @__PURE__ */ (0, import_jsx_runtime133.jsx)("span", {
          className: "notranslate",
          children: "\u200B"
        }))
      ) : children
    }));
  });
  true ? FormHelperText.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     *
     * If `' '` is provided, the component reserves one line height for displaying a future message.
     */
    children: import_prop_types92.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types92.default.object,
    /**
     * @ignore
     */
    className: import_prop_types92.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types92.default.elementType,
    /**
     * If `true`, the helper text should be displayed in a disabled state.
     */
    disabled: import_prop_types92.default.bool,
    /**
     * If `true`, helper text should be displayed in an error state.
     */
    error: import_prop_types92.default.bool,
    /**
     * If `true`, the helper text should use filled classes key.
     */
    filled: import_prop_types92.default.bool,
    /**
     * If `true`, the helper text should use focused classes key.
     */
    focused: import_prop_types92.default.bool,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     */
    margin: import_prop_types92.default.oneOf(["dense"]),
    /**
     * If `true`, the helper text should use required classes key.
     */
    required: import_prop_types92.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types92.default.oneOfType([import_prop_types92.default.arrayOf(import_prop_types92.default.oneOfType([import_prop_types92.default.func, import_prop_types92.default.object, import_prop_types92.default.bool])), import_prop_types92.default.func, import_prop_types92.default.object]),
    /**
     * The variant to use.
     */
    variant: import_prop_types92.default.oneOfType([import_prop_types92.default.oneOf(["filled", "outlined", "standard"]), import_prop_types92.default.string])
  } : void 0;
  var FormHelperText_default = FormHelperText;

  // node_modules/@mui/material/FormLabel/FormLabel.js
  init_extends();
  var React157 = __toESM(require_react());
  var import_prop_types93 = __toESM(require_prop_types());
  var import_composeClasses68 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/FormLabel/formLabelClasses.js
  var import_utils174 = __toESM(require_utils());
  var import_generateUtilityClass76 = __toESM(require_generateUtilityClass3());
  function getFormLabelUtilityClasses(slot) {
    return (0, import_generateUtilityClass76.default)("MuiFormLabel", slot);
  }
  var formLabelClasses = (0, import_utils174.unstable_generateUtilityClasses)("MuiFormLabel", ["root", "colorSecondary", "focused", "disabled", "error", "filled", "required", "asterisk"]);
  var formLabelClasses_default = formLabelClasses;

  // node_modules/@mui/material/FormLabel/FormLabel.js
  var import_jsx_runtime134 = __toESM(require_jsx_runtime());
  var _excluded92 = ["children", "className", "color", "component", "disabled", "error", "filled", "focused", "required"];
  var useUtilityClasses71 = (ownerState) => {
    const {
      classes,
      color,
      focused,
      disabled,
      error,
      filled,
      required
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color)}`, disabled && "disabled", error && "error", filled && "filled", focused && "focused", required && "required"],
      asterisk: ["asterisk", error && "error"]
    };
    return (0, import_composeClasses68.unstable_composeClasses)(slots, getFormLabelUtilityClasses, classes);
  };
  var FormLabelRoot = styled_default("label", {
    name: "MuiFormLabel",
    slot: "Root",
    overridesResolver: ({
      ownerState
    }, styles7) => {
      return _extends({}, styles7.root, ownerState.color === "secondary" && styles7.colorSecondary, ownerState.filled && styles7.filled);
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    color: (theme.vars || theme).palette.text.secondary
  }, theme.typography.body1, {
    lineHeight: "1.4375em",
    padding: 0,
    position: "relative",
    [`&.${formLabelClasses_default.focused}`]: {
      color: (theme.vars || theme).palette[ownerState.color].main
    },
    [`&.${formLabelClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.text.disabled
    },
    [`&.${formLabelClasses_default.error}`]: {
      color: (theme.vars || theme).palette.error.main
    }
  }));
  var AsteriskComponent2 = styled_default("span", {
    name: "MuiFormLabel",
    slot: "Asterisk",
    overridesResolver: (props, styles7) => styles7.asterisk
  })(({
    theme
  }) => ({
    [`&.${formLabelClasses_default.error}`]: {
      color: (theme.vars || theme).palette.error.main
    }
  }));
  var FormLabel = /* @__PURE__ */ React157.forwardRef(function FormLabel2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiFormLabel"
    });
    const {
      children,
      className,
      component = "label"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded92);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "required", "focused", "disabled", "error", "filled"]
    });
    const ownerState = _extends({}, props, {
      color: fcs.color || "primary",
      component,
      disabled: fcs.disabled,
      error: fcs.error,
      filled: fcs.filled,
      focused: fcs.focused,
      required: fcs.required
    });
    const classes = useUtilityClasses71(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime134.jsxs)(FormLabelRoot, _extends({
      as: component,
      ownerState,
      className: clsx_default(classes.root, className),
      ref
    }, other, {
      children: [children, fcs.required && /* @__PURE__ */ (0, import_jsx_runtime134.jsxs)(AsteriskComponent2, {
        ownerState,
        "aria-hidden": true,
        className: classes.asterisk,
        children: ["\u2009", "*"]
      })]
    }));
  });
  true ? FormLabel.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types93.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types93.default.object,
    /**
     * @ignore
     */
    className: import_prop_types93.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     */
    color: import_prop_types93.default.oneOfType([import_prop_types93.default.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), import_prop_types93.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types93.default.elementType,
    /**
     * If `true`, the label should be displayed in a disabled state.
     */
    disabled: import_prop_types93.default.bool,
    /**
     * If `true`, the label is displayed in an error state.
     */
    error: import_prop_types93.default.bool,
    /**
     * If `true`, the label should use filled classes key.
     */
    filled: import_prop_types93.default.bool,
    /**
     * If `true`, the input of this label is focused (used by `FormGroup` components).
     */
    focused: import_prop_types93.default.bool,
    /**
     * If `true`, the label will indicate that the `input` is required.
     */
    required: import_prop_types93.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types93.default.oneOfType([import_prop_types93.default.arrayOf(import_prop_types93.default.oneOfType([import_prop_types93.default.func, import_prop_types93.default.object, import_prop_types93.default.bool])), import_prop_types93.default.func, import_prop_types93.default.object])
  } : void 0;
  var FormLabel_default = FormLabel;

  // node_modules/@mui/material/Grid/Grid.js
  init_extends();
  var React159 = __toESM(require_react());
  var import_prop_types94 = __toESM(require_prop_types());
  var import_system30 = __toESM(require_system());
  var import_composeClasses69 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/utils/requirePropFactory.js
  var import_utils175 = __toESM(require_utils());
  var requirePropFactory_default = import_utils175.unstable_requirePropFactory;

  // node_modules/@mui/material/Grid/GridContext.js
  var React158 = __toESM(require_react());
  var GridContext = /* @__PURE__ */ React158.createContext();
  if (true) {
    GridContext.displayName = "GridContext";
  }
  var GridContext_default = GridContext;

  // node_modules/@mui/material/Grid/gridClasses.js
  var import_utils176 = __toESM(require_utils());
  var import_generateUtilityClass77 = __toESM(require_generateUtilityClass3());
  function getGridUtilityClass(slot) {
    return (0, import_generateUtilityClass77.default)("MuiGrid", slot);
  }
  var SPACINGS2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  var DIRECTIONS = ["column-reverse", "column", "row-reverse", "row"];
  var WRAPS = ["nowrap", "wrap-reverse", "wrap"];
  var GRID_SIZES = ["auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
  var gridClasses = (0, import_utils176.unstable_generateUtilityClasses)("MuiGrid", [
    "root",
    "container",
    "item",
    "zeroMinWidth",
    // spacings
    ...SPACINGS2.map((spacing) => `spacing-xs-${spacing}`),
    // direction values
    ...DIRECTIONS.map((direction) => `direction-xs-${direction}`),
    // wrap values
    ...WRAPS.map((wrap) => `wrap-xs-${wrap}`),
    // grid sizes for all breakpoints
    ...GRID_SIZES.map((size2) => `grid-xs-${size2}`),
    ...GRID_SIZES.map((size2) => `grid-sm-${size2}`),
    ...GRID_SIZES.map((size2) => `grid-md-${size2}`),
    ...GRID_SIZES.map((size2) => `grid-lg-${size2}`),
    ...GRID_SIZES.map((size2) => `grid-xl-${size2}`)
  ]);
  var gridClasses_default = gridClasses;

  // node_modules/@mui/material/Grid/Grid.js
  var import_jsx_runtime135 = __toESM(require_jsx_runtime());
  var _excluded93 = ["className", "columns", "columnSpacing", "component", "container", "direction", "item", "rowSpacing", "spacing", "wrap", "zeroMinWidth"];
  function getOffset(val) {
    const parse2 = parseFloat(val);
    return `${parse2}${String(val).replace(String(parse2), "") || "px"}`;
  }
  function generateGrid({
    theme,
    ownerState
  }) {
    let size2;
    return theme.breakpoints.keys.reduce((globalStyles, breakpoint) => {
      let styles7 = {};
      if (ownerState[breakpoint]) {
        size2 = ownerState[breakpoint];
      }
      if (!size2) {
        return globalStyles;
      }
      if (size2 === true) {
        styles7 = {
          flexBasis: 0,
          flexGrow: 1,
          maxWidth: "100%"
        };
      } else if (size2 === "auto") {
        styles7 = {
          flexBasis: "auto",
          flexGrow: 0,
          flexShrink: 0,
          maxWidth: "none",
          width: "auto"
        };
      } else {
        const columnsBreakpointValues = (0, import_system30.unstable_resolveBreakpointValues)({
          values: ownerState.columns,
          breakpoints: theme.breakpoints.values
        });
        const columnValue = typeof columnsBreakpointValues === "object" ? columnsBreakpointValues[breakpoint] : columnsBreakpointValues;
        if (columnValue === void 0 || columnValue === null) {
          return globalStyles;
        }
        const width = `${Math.round(size2 / columnValue * 1e8) / 1e6}%`;
        let more = {};
        if (ownerState.container && ownerState.item && ownerState.columnSpacing !== 0) {
          const themeSpacing = theme.spacing(ownerState.columnSpacing);
          if (themeSpacing !== "0px") {
            const fullWidth = `calc(${width} + ${getOffset(themeSpacing)})`;
            more = {
              flexBasis: fullWidth,
              maxWidth: fullWidth
            };
          }
        }
        styles7 = _extends({
          flexBasis: width,
          flexGrow: 0,
          maxWidth: width
        }, more);
      }
      if (theme.breakpoints.values[breakpoint] === 0) {
        Object.assign(globalStyles, styles7);
      } else {
        globalStyles[theme.breakpoints.up(breakpoint)] = styles7;
      }
      return globalStyles;
    }, {});
  }
  function generateDirection({
    theme,
    ownerState
  }) {
    const directionValues = (0, import_system30.unstable_resolveBreakpointValues)({
      values: ownerState.direction,
      breakpoints: theme.breakpoints.values
    });
    return (0, import_system30.handleBreakpoints)({
      theme
    }, directionValues, (propValue) => {
      const output = {
        flexDirection: propValue
      };
      if (propValue.indexOf("column") === 0) {
        output[`& > .${gridClasses_default.item}`] = {
          maxWidth: "none"
        };
      }
      return output;
    });
  }
  function extractZeroValueBreakpointKeys({
    breakpoints,
    values: values2
  }) {
    let nonZeroKey = "";
    Object.keys(values2).forEach((key) => {
      if (nonZeroKey !== "") {
        return;
      }
      if (values2[key] !== 0) {
        nonZeroKey = key;
      }
    });
    const sortedBreakpointKeysByValue = Object.keys(breakpoints).sort((a, b) => {
      return breakpoints[a] - breakpoints[b];
    });
    return sortedBreakpointKeysByValue.slice(0, sortedBreakpointKeysByValue.indexOf(nonZeroKey));
  }
  function generateRowGap({
    theme,
    ownerState
  }) {
    const {
      container,
      rowSpacing
    } = ownerState;
    let styles7 = {};
    if (container && rowSpacing !== 0) {
      const rowSpacingValues = (0, import_system30.unstable_resolveBreakpointValues)({
        values: rowSpacing,
        breakpoints: theme.breakpoints.values
      });
      let zeroValueBreakpointKeys;
      if (typeof rowSpacingValues === "object") {
        zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({
          breakpoints: theme.breakpoints.values,
          values: rowSpacingValues
        });
      }
      styles7 = (0, import_system30.handleBreakpoints)({
        theme
      }, rowSpacingValues, (propValue, breakpoint) => {
        var _zeroValueBreakpointK;
        const themeSpacing = theme.spacing(propValue);
        if (themeSpacing !== "0px") {
          return {
            marginTop: `-${getOffset(themeSpacing)}`,
            [`& > .${gridClasses_default.item}`]: {
              paddingTop: getOffset(themeSpacing)
            }
          };
        }
        if ((_zeroValueBreakpointK = zeroValueBreakpointKeys) != null && _zeroValueBreakpointK.includes(breakpoint)) {
          return {};
        }
        return {
          marginTop: 0,
          [`& > .${gridClasses_default.item}`]: {
            paddingTop: 0
          }
        };
      });
    }
    return styles7;
  }
  function generateColumnGap({
    theme,
    ownerState
  }) {
    const {
      container,
      columnSpacing
    } = ownerState;
    let styles7 = {};
    if (container && columnSpacing !== 0) {
      const columnSpacingValues = (0, import_system30.unstable_resolveBreakpointValues)({
        values: columnSpacing,
        breakpoints: theme.breakpoints.values
      });
      let zeroValueBreakpointKeys;
      if (typeof columnSpacingValues === "object") {
        zeroValueBreakpointKeys = extractZeroValueBreakpointKeys({
          breakpoints: theme.breakpoints.values,
          values: columnSpacingValues
        });
      }
      styles7 = (0, import_system30.handleBreakpoints)({
        theme
      }, columnSpacingValues, (propValue, breakpoint) => {
        var _zeroValueBreakpointK2;
        const themeSpacing = theme.spacing(propValue);
        if (themeSpacing !== "0px") {
          return {
            width: `calc(100% + ${getOffset(themeSpacing)})`,
            marginLeft: `-${getOffset(themeSpacing)}`,
            [`& > .${gridClasses_default.item}`]: {
              paddingLeft: getOffset(themeSpacing)
            }
          };
        }
        if ((_zeroValueBreakpointK2 = zeroValueBreakpointKeys) != null && _zeroValueBreakpointK2.includes(breakpoint)) {
          return {};
        }
        return {
          width: "100%",
          marginLeft: 0,
          [`& > .${gridClasses_default.item}`]: {
            paddingLeft: 0
          }
        };
      });
    }
    return styles7;
  }
  function resolveSpacingStyles(spacing, breakpoints, styles7 = {}) {
    if (!spacing || spacing <= 0) {
      return [];
    }
    if (typeof spacing === "string" && !Number.isNaN(Number(spacing)) || typeof spacing === "number") {
      return [styles7[`spacing-xs-${String(spacing)}`]];
    }
    const spacingStyles = [];
    breakpoints.forEach((breakpoint) => {
      const value = spacing[breakpoint];
      if (Number(value) > 0) {
        spacingStyles.push(styles7[`spacing-${breakpoint}-${String(value)}`]);
      }
    });
    return spacingStyles;
  }
  var GridRoot = styled_default("div", {
    name: "MuiGrid",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      const {
        container,
        direction,
        item,
        spacing,
        wrap,
        zeroMinWidth,
        breakpoints
      } = ownerState;
      let spacingStyles = [];
      if (container) {
        spacingStyles = resolveSpacingStyles(spacing, breakpoints, styles7);
      }
      const breakpointsStyles = [];
      breakpoints.forEach((breakpoint) => {
        const value = ownerState[breakpoint];
        if (value) {
          breakpointsStyles.push(styles7[`grid-${breakpoint}-${String(value)}`]);
        }
      });
      return [styles7.root, container && styles7.container, item && styles7.item, zeroMinWidth && styles7.zeroMinWidth, ...spacingStyles, direction !== "row" && styles7[`direction-xs-${String(direction)}`], wrap !== "wrap" && styles7[`wrap-xs-${String(wrap)}`], ...breakpointsStyles];
    }
  })(({
    ownerState
  }) => _extends({
    boxSizing: "border-box"
  }, ownerState.container && {
    display: "flex",
    flexWrap: "wrap",
    width: "100%"
  }, ownerState.item && {
    margin: 0
    // For instance, it's useful when used with a `figure` element.
  }, ownerState.zeroMinWidth && {
    minWidth: 0
  }, ownerState.wrap !== "wrap" && {
    flexWrap: ownerState.wrap
  }), generateDirection, generateRowGap, generateColumnGap, generateGrid);
  function resolveSpacingClasses(spacing, breakpoints) {
    if (!spacing || spacing <= 0) {
      return [];
    }
    if (typeof spacing === "string" && !Number.isNaN(Number(spacing)) || typeof spacing === "number") {
      return [`spacing-xs-${String(spacing)}`];
    }
    const classes = [];
    breakpoints.forEach((breakpoint) => {
      const value = spacing[breakpoint];
      if (Number(value) > 0) {
        const className = `spacing-${breakpoint}-${String(value)}`;
        classes.push(className);
      }
    });
    return classes;
  }
  var useUtilityClasses72 = (ownerState) => {
    const {
      classes,
      container,
      direction,
      item,
      spacing,
      wrap,
      zeroMinWidth,
      breakpoints
    } = ownerState;
    let spacingClasses = [];
    if (container) {
      spacingClasses = resolveSpacingClasses(spacing, breakpoints);
    }
    const breakpointsClasses = [];
    breakpoints.forEach((breakpoint) => {
      const value = ownerState[breakpoint];
      if (value) {
        breakpointsClasses.push(`grid-${breakpoint}-${String(value)}`);
      }
    });
    const slots = {
      root: ["root", container && "container", item && "item", zeroMinWidth && "zeroMinWidth", ...spacingClasses, direction !== "row" && `direction-xs-${String(direction)}`, wrap !== "wrap" && `wrap-xs-${String(wrap)}`, ...breakpointsClasses]
    };
    return (0, import_composeClasses69.unstable_composeClasses)(slots, getGridUtilityClass, classes);
  };
  var Grid = /* @__PURE__ */ React159.forwardRef(function Grid2(inProps, ref) {
    const themeProps = useThemeProps({
      props: inProps,
      name: "MuiGrid"
    });
    const {
      breakpoints
    } = useTheme4();
    const props = (0, import_system30.unstable_extendSxProp)(themeProps);
    const {
      className,
      columns: columnsProp,
      columnSpacing: columnSpacingProp,
      component = "div",
      container = false,
      direction = "row",
      item = false,
      rowSpacing: rowSpacingProp,
      spacing = 0,
      wrap = "wrap",
      zeroMinWidth = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded93);
    const rowSpacing = rowSpacingProp || spacing;
    const columnSpacing = columnSpacingProp || spacing;
    const columnsContext = React159.useContext(GridContext_default);
    const columns = container ? columnsProp || 12 : columnsContext;
    const breakpointsValues = {};
    const otherFiltered = _extends({}, other);
    breakpoints.keys.forEach((breakpoint) => {
      if (other[breakpoint] != null) {
        breakpointsValues[breakpoint] = other[breakpoint];
        delete otherFiltered[breakpoint];
      }
    });
    const ownerState = _extends({}, props, {
      columns,
      container,
      direction,
      item,
      rowSpacing,
      columnSpacing,
      wrap,
      zeroMinWidth,
      spacing
    }, breakpointsValues, {
      breakpoints: breakpoints.keys
    });
    const classes = useUtilityClasses72(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime135.jsx)(GridContext_default.Provider, {
      value: columns,
      children: /* @__PURE__ */ (0, import_jsx_runtime135.jsx)(GridRoot, _extends({
        ownerState,
        className: clsx_default(classes.root, className),
        as: component,
        ref
      }, otherFiltered))
    });
  });
  true ? Grid.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types94.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types94.default.object,
    /**
     * @ignore
     */
    className: import_prop_types94.default.string,
    /**
     * The number of columns.
     * @default 12
     */
    columns: import_prop_types94.default.oneOfType([import_prop_types94.default.arrayOf(import_prop_types94.default.number), import_prop_types94.default.number, import_prop_types94.default.object]),
    /**
     * Defines the horizontal space between the type `item` components.
     * It overrides the value of the `spacing` prop.
     */
    columnSpacing: import_prop_types94.default.oneOfType([import_prop_types94.default.arrayOf(import_prop_types94.default.oneOfType([import_prop_types94.default.number, import_prop_types94.default.string])), import_prop_types94.default.number, import_prop_types94.default.object, import_prop_types94.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types94.default.elementType,
    /**
     * If `true`, the component will have the flex *container* behavior.
     * You should be wrapping *items* with a *container*.
     * @default false
     */
    container: import_prop_types94.default.bool,
    /**
     * Defines the `flex-direction` style property.
     * It is applied for all screen sizes.
     * @default 'row'
     */
    direction: import_prop_types94.default.oneOfType([import_prop_types94.default.oneOf(["column-reverse", "column", "row-reverse", "row"]), import_prop_types94.default.arrayOf(import_prop_types94.default.oneOf(["column-reverse", "column", "row-reverse", "row"])), import_prop_types94.default.object]),
    /**
     * If `true`, the component will have the flex *item* behavior.
     * You should be wrapping *items* with a *container*.
     * @default false
     */
    item: import_prop_types94.default.bool,
    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for the `lg` breakpoint and wider screens if not overridden.
     * @default false
     */
    lg: import_prop_types94.default.oneOfType([import_prop_types94.default.oneOf(["auto"]), import_prop_types94.default.number, import_prop_types94.default.bool]),
    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for the `md` breakpoint and wider screens if not overridden.
     * @default false
     */
    md: import_prop_types94.default.oneOfType([import_prop_types94.default.oneOf(["auto"]), import_prop_types94.default.number, import_prop_types94.default.bool]),
    /**
     * Defines the vertical space between the type `item` components.
     * It overrides the value of the `spacing` prop.
     */
    rowSpacing: import_prop_types94.default.oneOfType([import_prop_types94.default.arrayOf(import_prop_types94.default.oneOfType([import_prop_types94.default.number, import_prop_types94.default.string])), import_prop_types94.default.number, import_prop_types94.default.object, import_prop_types94.default.string]),
    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for the `sm` breakpoint and wider screens if not overridden.
     * @default false
     */
    sm: import_prop_types94.default.oneOfType([import_prop_types94.default.oneOf(["auto"]), import_prop_types94.default.number, import_prop_types94.default.bool]),
    /**
     * Defines the space between the type `item` components.
     * It can only be used on a type `container` component.
     * @default 0
     */
    spacing: import_prop_types94.default.oneOfType([import_prop_types94.default.arrayOf(import_prop_types94.default.oneOfType([import_prop_types94.default.number, import_prop_types94.default.string])), import_prop_types94.default.number, import_prop_types94.default.object, import_prop_types94.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types94.default.oneOfType([import_prop_types94.default.arrayOf(import_prop_types94.default.oneOfType([import_prop_types94.default.func, import_prop_types94.default.object, import_prop_types94.default.bool])), import_prop_types94.default.func, import_prop_types94.default.object]),
    /**
     * Defines the `flex-wrap` style property.
     * It's applied for all screen sizes.
     * @default 'wrap'
     */
    wrap: import_prop_types94.default.oneOf(["nowrap", "wrap-reverse", "wrap"]),
    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for the `xl` breakpoint and wider screens if not overridden.
     * @default false
     */
    xl: import_prop_types94.default.oneOfType([import_prop_types94.default.oneOf(["auto"]), import_prop_types94.default.number, import_prop_types94.default.bool]),
    /**
     * If a number, it sets the number of columns the grid item uses.
     * It can't be greater than the total number of columns of the container (12 by default).
     * If 'auto', the grid item's width matches its content.
     * If false, the prop is ignored.
     * If true, the grid item's width grows to use the space available in the grid container.
     * The value is applied for all the screen sizes with the lowest priority.
     * @default false
     */
    xs: import_prop_types94.default.oneOfType([import_prop_types94.default.oneOf(["auto"]), import_prop_types94.default.number, import_prop_types94.default.bool]),
    /**
     * If `true`, it sets `min-width: 0` on the item.
     * Refer to the limitations section of the documentation to better understand the use case.
     * @default false
     */
    zeroMinWidth: import_prop_types94.default.bool
  } : void 0;
  if (true) {
    const requireProp = requirePropFactory_default("Grid", Grid);
    Grid["propTypes"] = _extends({}, Grid.propTypes, {
      direction: requireProp("container"),
      lg: requireProp("item"),
      md: requireProp("item"),
      sm: requireProp("item"),
      spacing: requireProp("container"),
      wrap: requireProp("container"),
      xs: requireProp("item"),
      zeroMinWidth: requireProp("item")
    });
  }
  var Grid_default = Grid;

  // node_modules/@mui/material/Unstable_Grid2/Grid2.js
  var import_prop_types95 = __toESM(require_prop_types());
  var import_Unstable_Grid = __toESM(require_Unstable_Grid());
  var Grid22 = (0, import_Unstable_Grid.createGrid)({
    createStyledComponent: styled_default("div", {
      name: "MuiGrid2",
      slot: "Root",
      overridesResolver: (props, styles7) => styles7.root
    }),
    componentName: "MuiGrid2",
    useThemeProps: (inProps) => useThemeProps({
      props: inProps,
      name: "MuiGrid2"
    })
  });
  true ? Grid22.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit TypeScript types and run "yarn proptypes"  |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types95.default.node,
    /**
     * @ignore
     */
    sx: import_prop_types95.default.oneOfType([import_prop_types95.default.arrayOf(import_prop_types95.default.oneOfType([import_prop_types95.default.func, import_prop_types95.default.object, import_prop_types95.default.bool])), import_prop_types95.default.func, import_prop_types95.default.object])
  } : void 0;
  var Grid2_default = Grid22;

  // node_modules/@mui/material/Unstable_Grid2/grid2Classes.js
  var import_utils177 = __toESM(require_utils());
  var import_generateUtilityClass78 = __toESM(require_generateUtilityClass3());
  function getGrid2UtilityClass(slot) {
    return (0, import_generateUtilityClass78.default)("MuiGrid2", slot);
  }
  var SPACINGS3 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  var DIRECTIONS2 = ["column-reverse", "column", "row-reverse", "row"];
  var WRAPS2 = ["nowrap", "wrap-reverse", "wrap"];
  var GRID_SIZES2 = ["auto", true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];
  var grid2Classes = (0, import_utils177.unstable_generateUtilityClasses)("MuiGrid2", [
    "root",
    "container",
    "item",
    "zeroMinWidth",
    // spacings
    ...SPACINGS3.map((spacing) => `spacing-xs-${spacing}`),
    // direction values
    ...DIRECTIONS2.map((direction) => `direction-xs-${direction}`),
    // wrap values
    ...WRAPS2.map((wrap) => `wrap-xs-${wrap}`),
    // grid sizes for all breakpoints
    ...GRID_SIZES2.map((size2) => `grid-xs-${size2}`),
    ...GRID_SIZES2.map((size2) => `grid-sm-${size2}`),
    ...GRID_SIZES2.map((size2) => `grid-md-${size2}`),
    ...GRID_SIZES2.map((size2) => `grid-lg-${size2}`),
    ...GRID_SIZES2.map((size2) => `grid-xl-${size2}`)
  ]);
  var grid2Classes_default = grid2Classes;

  // node_modules/@mui/material/Grow/Grow.js
  init_extends();
  var React160 = __toESM(require_react());
  var import_prop_types96 = __toESM(require_prop_types());
  var import_utils178 = __toESM(require_utils());
  var import_jsx_runtime136 = __toESM(require_jsx_runtime());
  var _excluded94 = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  function getScale2(value) {
    return `scale(${value}, ${value ** 2})`;
  }
  var styles4 = {
    entering: {
      opacity: 1,
      transform: getScale2(1)
    },
    entered: {
      opacity: 1,
      transform: "none"
    }
  };
  var isWebKit154 = typeof navigator !== "undefined" && /^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent) && /(os |version\/)15(.|_)4/i.test(navigator.userAgent);
  var Grow = /* @__PURE__ */ React160.forwardRef(function Grow2(props, ref) {
    const {
      addEndListener,
      appear = true,
      children,
      easing: easing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style,
      timeout: timeout2 = "auto",
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition_default
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded94);
    const timer = React160.useRef();
    const autoTimeout = React160.useRef();
    const theme = useTheme4();
    const nodeRef = React160.useRef(null);
    const handleRef = useForkRef_default(nodeRef, children.ref, ref);
    const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
      if (callback) {
        const node2 = nodeRef.current;
        if (maybeIsAppearing === void 0) {
          callback(node2);
        } else {
          callback(node2, maybeIsAppearing);
        }
      }
    };
    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      reflow(node2);
      const {
        duration: transitionDuration,
        delay,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "enter"
      });
      let duration2;
      if (timeout2 === "auto") {
        duration2 = theme.transitions.getAutoHeightDuration(node2.clientHeight);
        autoTimeout.current = duration2;
      } else {
        duration2 = transitionDuration;
      }
      node2.style.transition = [theme.transitions.create("opacity", {
        duration: duration2,
        delay
      }), theme.transitions.create("transform", {
        duration: isWebKit154 ? duration2 : duration2 * 0.666,
        delay,
        easing: transitionTimingFunction
      })].join(",");
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node2) => {
      const {
        duration: transitionDuration,
        delay,
        easing: transitionTimingFunction
      } = getTransitionProps({
        style,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "exit"
      });
      let duration2;
      if (timeout2 === "auto") {
        duration2 = theme.transitions.getAutoHeightDuration(node2.clientHeight);
        autoTimeout.current = duration2;
      } else {
        duration2 = transitionDuration;
      }
      node2.style.transition = [theme.transitions.create("opacity", {
        duration: duration2,
        delay
      }), theme.transitions.create("transform", {
        duration: isWebKit154 ? duration2 : duration2 * 0.666,
        delay: isWebKit154 ? delay : delay || duration2 * 0.333,
        easing: transitionTimingFunction
      })].join(",");
      node2.style.opacity = 0;
      node2.style.transform = getScale2(0.75);
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleAddEndListener = (next2) => {
      if (timeout2 === "auto") {
        timer.current = setTimeout(next2, autoTimeout.current || 0);
      }
      if (addEndListener) {
        addEndListener(nodeRef.current, next2);
      }
    };
    React160.useEffect(() => {
      return () => {
        clearTimeout(timer.current);
      };
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime136.jsx)(TransitionComponent, _extends({
      appear,
      in: inProp,
      nodeRef,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      timeout: timeout2 === "auto" ? null : timeout2
    }, other, {
      children: (state, childProps) => {
        return /* @__PURE__ */ React160.cloneElement(children, _extends({
          style: _extends({
            opacity: 0,
            transform: getScale2(0.75),
            visibility: state === "exited" && !inProp ? "hidden" : void 0
          }, styles4[state], style, children.props.style),
          ref: handleRef
        }, childProps));
      }
    }));
  });
  true ? Grow.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: import_prop_types96.default.func,
    /**
     * Perform the enter transition when it first mounts if `in` is also `true`.
     * Set this to `false` to disable this behavior.
     * @default true
     */
    appear: import_prop_types96.default.bool,
    /**
     * A single child content element.
     */
    children: import_utils178.elementAcceptingRef.isRequired,
    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     */
    easing: import_prop_types96.default.oneOfType([import_prop_types96.default.shape({
      enter: import_prop_types96.default.string,
      exit: import_prop_types96.default.string
    }), import_prop_types96.default.string]),
    /**
     * If `true`, the component will transition in.
     */
    in: import_prop_types96.default.bool,
    /**
     * @ignore
     */
    onEnter: import_prop_types96.default.func,
    /**
     * @ignore
     */
    onEntered: import_prop_types96.default.func,
    /**
     * @ignore
     */
    onEntering: import_prop_types96.default.func,
    /**
     * @ignore
     */
    onExit: import_prop_types96.default.func,
    /**
     * @ignore
     */
    onExited: import_prop_types96.default.func,
    /**
     * @ignore
     */
    onExiting: import_prop_types96.default.func,
    /**
     * @ignore
     */
    style: import_prop_types96.default.object,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     *
     * Set to 'auto' to automatically calculate transition time based on height.
     * @default 'auto'
     */
    timeout: import_prop_types96.default.oneOfType([import_prop_types96.default.oneOf(["auto"]), import_prop_types96.default.number, import_prop_types96.default.shape({
      appear: import_prop_types96.default.number,
      enter: import_prop_types96.default.number,
      exit: import_prop_types96.default.number
    })])
  } : void 0;
  Grow.muiSupportAuto = true;
  var Grow_default = Grow;

  // node_modules/@mui/material/Hidden/Hidden.js
  init_extends();
  var React165 = __toESM(require_react());
  var import_prop_types100 = __toESM(require_prop_types());

  // node_modules/@mui/material/Hidden/HiddenJs.js
  var React163 = __toESM(require_react());
  var import_prop_types98 = __toESM(require_prop_types());
  var import_utils181 = __toESM(require_utils());

  // node_modules/@mui/material/Hidden/withWidth.js
  init_extends();
  var React162 = __toESM(require_react());
  var import_prop_types97 = __toESM(require_prop_types());
  var import_utils180 = __toESM(require_utils());
  var import_system32 = __toESM(require_system());

  // node_modules/@mui/material/useMediaQuery/useMediaQuery.js
  var React161 = __toESM(require_react());
  var import_system31 = __toESM(require_system());
  function useMediaQueryOld(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {
    const [match2, setMatch] = React161.useState(() => {
      if (noSsr && matchMedia) {
        return matchMedia(query).matches;
      }
      if (ssrMatchMedia) {
        return ssrMatchMedia(query).matches;
      }
      return defaultMatches;
    });
    useEnhancedEffect_default(() => {
      let active = true;
      if (!matchMedia) {
        return void 0;
      }
      const queryList = matchMedia(query);
      const updateMatch = () => {
        if (active) {
          setMatch(queryList.matches);
        }
      };
      updateMatch();
      queryList.addListener(updateMatch);
      return () => {
        active = false;
        queryList.removeListener(updateMatch);
      };
    }, [query, matchMedia]);
    return match2;
  }
  var maybeReactUseSyncExternalStore = React161["useSyncExternalStore"];
  function useMediaQueryNew(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr) {
    const getDefaultSnapshot = React161.useCallback(() => defaultMatches, [defaultMatches]);
    const getServerSnapshot = React161.useMemo(() => {
      if (noSsr && matchMedia) {
        return () => matchMedia(query).matches;
      }
      if (ssrMatchMedia !== null) {
        const {
          matches
        } = ssrMatchMedia(query);
        return () => matches;
      }
      return getDefaultSnapshot;
    }, [getDefaultSnapshot, query, ssrMatchMedia, noSsr, matchMedia]);
    const [getSnapshot, subscribe] = React161.useMemo(() => {
      if (matchMedia === null) {
        return [getDefaultSnapshot, () => () => {
        }];
      }
      const mediaQueryList = matchMedia(query);
      return [() => mediaQueryList.matches, (notify) => {
        mediaQueryList.addListener(notify);
        return () => {
          mediaQueryList.removeListener(notify);
        };
      }];
    }, [getDefaultSnapshot, matchMedia, query]);
    const match2 = maybeReactUseSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
    return match2;
  }
  function useMediaQuery(queryInput, options = {}) {
    const theme = (0, import_system31.useThemeWithoutDefault)();
    const supportMatchMedia = typeof window !== "undefined" && typeof window.matchMedia !== "undefined";
    const {
      defaultMatches = false,
      matchMedia = supportMatchMedia ? window.matchMedia : null,
      ssrMatchMedia = null,
      noSsr = false
    } = (0, import_system31.getThemeProps)({
      name: "MuiUseMediaQuery",
      props: options,
      theme
    });
    if (true) {
      if (typeof queryInput === "function" && theme === null) {
        console.error(["MUI: The `query` argument provided is invalid.", "You are providing a function without a theme in the context.", "One of the parent elements needs to use a ThemeProvider."].join("\n"));
      }
    }
    let query = typeof queryInput === "function" ? queryInput(theme) : queryInput;
    query = query.replace(/^@media( ?)/m, "");
    const useMediaQueryImplementation = maybeReactUseSyncExternalStore !== void 0 ? useMediaQueryNew : useMediaQueryOld;
    const match2 = useMediaQueryImplementation(query, defaultMatches, matchMedia, ssrMatchMedia, noSsr);
    if (true) {
      React161.useDebugValue({
        query,
        match: match2
      });
    }
    return match2;
  }

  // node_modules/@mui/material/Hidden/withWidth.js
  var import_jsx_runtime137 = __toESM(require_jsx_runtime());
  var _excluded95 = ["initialWidth", "width"];
  var breakpointKeys = ["xs", "sm", "md", "lg", "xl"];
  var isWidthUp = (breakpoint, width, inclusive = true) => {
    if (inclusive) {
      return breakpointKeys.indexOf(breakpoint) <= breakpointKeys.indexOf(width);
    }
    return breakpointKeys.indexOf(breakpoint) < breakpointKeys.indexOf(width);
  };
  var isWidthDown = (breakpoint, width, inclusive = false) => {
    if (inclusive) {
      return breakpointKeys.indexOf(width) <= breakpointKeys.indexOf(breakpoint);
    }
    return breakpointKeys.indexOf(width) < breakpointKeys.indexOf(breakpoint);
  };
  var withWidth = (options = {}) => (Component) => {
    const {
      withTheme: withThemeOption = false,
      noSSR = false,
      initialWidth: initialWidthOption
    } = options;
    function WithWidth(props) {
      const contextTheme = useTheme4();
      const theme = props.theme || contextTheme;
      const _getThemeProps = (0, import_system32.getThemeProps)({
        theme,
        name: "MuiWithWidth",
        props
      }), {
        initialWidth,
        width
      } = _getThemeProps, other = _objectWithoutPropertiesLoose(_getThemeProps, _excluded95);
      const [mountedState, setMountedState] = React162.useState(false);
      useEnhancedEffect_default(() => {
        setMountedState(true);
      }, []);
      const keys = theme.breakpoints.keys.slice().reverse();
      const widthComputed = keys.reduce((output, key) => {
        const matches = useMediaQuery(theme.breakpoints.up(key));
        return !output && matches ? key : output;
      }, null);
      const more = _extends({
        width: width || (mountedState || noSSR ? widthComputed : void 0) || initialWidth || initialWidthOption
      }, withThemeOption ? {
        theme
      } : {}, other);
      if (more.width === void 0) {
        return null;
      }
      return /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(Component, _extends({}, more));
    }
    true ? WithWidth.propTypes = {
      /**
       * As `window.innerWidth` is unavailable on the server,
       * we default to rendering an empty component during the first mount.
       * You might want to use a heuristic to approximate
       * the screen width of the client browser screen width.
       *
       * For instance, you could be using the user-agent or the client-hints.
       * https://caniuse.com/#search=client%20hint
       */
      initialWidth: import_prop_types97.default.oneOf(["xs", "sm", "md", "lg", "xl"]),
      /**
       * @ignore
       */
      theme: import_prop_types97.default.object,
      /**
       * Bypass the width calculation logic.
       */
      width: import_prop_types97.default.oneOf(["xs", "sm", "md", "lg", "xl"])
    } : void 0;
    if (true) {
      WithWidth.displayName = `WithWidth(${(0, import_utils180.getDisplayName)(Component)})`;
    }
    return WithWidth;
  };
  var withWidth_default = withWidth;

  // node_modules/@mui/material/Hidden/HiddenJs.js
  var import_jsx_runtime138 = __toESM(require_jsx_runtime());
  function HiddenJs(props) {
    const {
      children,
      only,
      width
    } = props;
    const theme = useTheme4();
    let visible = true;
    if (only) {
      if (Array.isArray(only)) {
        for (let i = 0; i < only.length; i += 1) {
          const breakpoint = only[i];
          if (width === breakpoint) {
            visible = false;
            break;
          }
        }
      } else if (only && width === only) {
        visible = false;
      }
    }
    if (visible) {
      for (let i = 0; i < theme.breakpoints.keys.length; i += 1) {
        const breakpoint = theme.breakpoints.keys[i];
        const breakpointUp = props[`${breakpoint}Up`];
        const breakpointDown = props[`${breakpoint}Down`];
        if (breakpointUp && isWidthUp(breakpoint, width) || breakpointDown && isWidthDown(breakpoint, width)) {
          visible = false;
          break;
        }
      }
    }
    if (!visible) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime138.jsx)(React163.Fragment, {
      children
    });
  }
  true ? HiddenJs.propTypes = {
    /**
     * The content of the component.
     */
    children: import_prop_types98.default.node,
    /**
     * If `true`, screens this size and down are hidden.
     */
    // eslint-disable-next-line react/no-unused-prop-types
    lgDown: import_prop_types98.default.bool,
    /**
     * If `true`, screens this size and up are hidden.
     */
    // eslint-disable-next-line react/no-unused-prop-types
    lgUp: import_prop_types98.default.bool,
    /**
     * If `true`, screens this size and down are hidden.
     */
    // eslint-disable-next-line react/no-unused-prop-types
    mdDown: import_prop_types98.default.bool,
    /**
     * If `true`, screens this size and up are hidden.
     */
    // eslint-disable-next-line react/no-unused-prop-types
    mdUp: import_prop_types98.default.bool,
    /**
     * Hide the given breakpoint(s).
     */
    only: import_prop_types98.default.oneOfType([import_prop_types98.default.oneOf(["xs", "sm", "md", "lg", "xl"]), import_prop_types98.default.arrayOf(import_prop_types98.default.oneOf(["xs", "sm", "md", "lg", "xl"]))]),
    /**
     * If `true`, screens this size and down are hidden.
     */
    // eslint-disable-next-line react/no-unused-prop-types
    smDown: import_prop_types98.default.bool,
    /**
     * If `true`, screens this size and up are hidden.
     */
    // eslint-disable-next-line react/no-unused-prop-types
    smUp: import_prop_types98.default.bool,
    /**
     * @ignore
     * width prop provided by withWidth decorator.
     */
    width: import_prop_types98.default.string.isRequired,
    /**
     * If `true`, screens this size and down are hidden.
     */
    // eslint-disable-next-line react/no-unused-prop-types
    xlDown: import_prop_types98.default.bool,
    /**
     * If `true`, screens this size and up are hidden.
     */
    // eslint-disable-next-line react/no-unused-prop-types
    xlUp: import_prop_types98.default.bool,
    /**
     * If `true`, screens this size and down are hidden.
     */
    // eslint-disable-next-line react/no-unused-prop-types
    xsDown: import_prop_types98.default.bool,
    /**
     * If `true`, screens this size and up are hidden.
     */
    // eslint-disable-next-line react/no-unused-prop-types
    xsUp: import_prop_types98.default.bool
  } : void 0;
  if (true) {
    true ? HiddenJs.propTypes = (0, import_utils181.exactProp)(HiddenJs.propTypes) : void 0;
  }
  var HiddenJs_default = withWidth_default()(HiddenJs);

  // node_modules/@mui/material/Hidden/HiddenCss.js
  init_extends();
  var React164 = __toESM(require_react());
  var import_prop_types99 = __toESM(require_prop_types());
  var import_composeClasses70 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/Hidden/hiddenCssClasses.js
  var import_utils182 = __toESM(require_utils());
  var import_generateUtilityClass79 = __toESM(require_generateUtilityClass3());
  function getHiddenCssUtilityClass(slot) {
    return (0, import_generateUtilityClass79.default)("PrivateHiddenCss", slot);
  }
  var hiddenCssClasses = (0, import_utils182.unstable_generateUtilityClasses)("PrivateHiddenCss", ["root", "xlDown", "xlUp", "onlyXl", "lgDown", "lgUp", "onlyLg", "mdDown", "mdUp", "onlyMd", "smDown", "smUp", "onlySm", "xsDown", "xsUp", "onlyXs"]);

  // node_modules/@mui/material/Hidden/HiddenCss.js
  var import_jsx_runtime139 = __toESM(require_jsx_runtime());
  var _excluded96 = ["children", "className", "only"];
  var useUtilityClasses73 = (ownerState) => {
    const {
      classes,
      breakpoints
    } = ownerState;
    const slots = {
      root: ["root", ...breakpoints.map(({
        breakpoint,
        dir
      }) => {
        return dir === "only" ? `${dir}${capitalize_default(breakpoint)}` : `${breakpoint}${capitalize_default(dir)}`;
      })]
    };
    return (0, import_composeClasses70.unstable_composeClasses)(slots, getHiddenCssUtilityClass, classes);
  };
  var HiddenCssRoot = styled_default("div", {
    name: "PrivateHiddenCss",
    slot: "Root"
  })(({
    theme,
    ownerState
  }) => {
    const hidden = {
      display: "none"
    };
    return _extends({}, ownerState.breakpoints.map(({
      breakpoint,
      dir
    }) => {
      if (dir === "only") {
        return {
          [theme.breakpoints.only(breakpoint)]: hidden
        };
      }
      return dir === "up" ? {
        [theme.breakpoints.up(breakpoint)]: hidden
      } : {
        [theme.breakpoints.down(breakpoint)]: hidden
      };
    }).reduce((r2, o) => {
      Object.keys(o).forEach((k) => {
        r2[k] = o[k];
      });
      return r2;
    }, {}));
  });
  function HiddenCss(props) {
    const {
      children,
      className,
      only
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded96);
    const theme = useTheme4();
    if (true) {
      const unknownProps = Object.keys(other).filter((propName) => {
        const isUndeclaredBreakpoint = !theme.breakpoints.keys.some((breakpoint) => {
          return `${breakpoint}Up` === propName || `${breakpoint}Down` === propName;
        });
        return !["classes", "theme", "isRtl", "sx"].includes(propName) && isUndeclaredBreakpoint;
      });
      if (unknownProps.length > 0) {
        console.error(`MUI: Unsupported props received by \`<Hidden implementation="css" />\`: ${unknownProps.join(", ")}. Did you forget to wrap this component in a ThemeProvider declaring these breakpoints?`);
      }
    }
    const breakpoints = [];
    for (let i = 0; i < theme.breakpoints.keys.length; i += 1) {
      const breakpoint = theme.breakpoints.keys[i];
      const breakpointUp = other[`${breakpoint}Up`];
      const breakpointDown = other[`${breakpoint}Down`];
      if (breakpointUp) {
        breakpoints.push({
          breakpoint,
          dir: "up"
        });
      }
      if (breakpointDown) {
        breakpoints.push({
          breakpoint,
          dir: "down"
        });
      }
    }
    if (only) {
      const onlyBreakpoints = Array.isArray(only) ? only : [only];
      onlyBreakpoints.forEach((breakpoint) => {
        breakpoints.push({
          breakpoint,
          dir: "only"
        });
      });
    }
    const ownerState = _extends({}, props, {
      breakpoints
    });
    const classes = useUtilityClasses73(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(HiddenCssRoot, {
      className: clsx_default(classes.root, className),
      ownerState,
      children
    });
  }
  true ? HiddenCss.propTypes = {
    /**
     * The content of the component.
     */
    children: import_prop_types99.default.node,
    /**
     * @ignore
     */
    className: import_prop_types99.default.string,
    /**
     * Specify which implementation to use.  'js' is the default, 'css' works better for
     * server-side rendering.
     */
    implementation: import_prop_types99.default.oneOf(["js", "css"]),
    /**
     * If `true`, screens this size and down are hidden.
     */
    lgDown: import_prop_types99.default.bool,
    /**
     * If `true`, screens this size and up are hidden.
     */
    lgUp: import_prop_types99.default.bool,
    /**
     * If `true`, screens this size and down are hidden.
     */
    mdDown: import_prop_types99.default.bool,
    /**
     * If `true`, screens this size and up are hidden.
     */
    mdUp: import_prop_types99.default.bool,
    /**
     * Hide the given breakpoint(s).
     */
    only: import_prop_types99.default.oneOfType([import_prop_types99.default.oneOf(["xs", "sm", "md", "lg", "xl"]), import_prop_types99.default.arrayOf(import_prop_types99.default.oneOf(["xs", "sm", "md", "lg", "xl"]))]),
    /**
     * If `true`, screens this size and down are hidden.
     */
    smDown: import_prop_types99.default.bool,
    /**
     * If `true`, screens this size and up are hidden.
     */
    smUp: import_prop_types99.default.bool,
    /**
     * If `true`, screens this size and down are hidden.
     */
    xlDown: import_prop_types99.default.bool,
    /**
     * If `true`, screens this size and up are hidden.
     */
    xlUp: import_prop_types99.default.bool,
    /**
     * If `true`, screens this size and down are hidden.
     */
    xsDown: import_prop_types99.default.bool,
    /**
     * If `true`, screens this size and up are hidden.
     */
    xsUp: import_prop_types99.default.bool
  } : void 0;
  var HiddenCss_default = HiddenCss;

  // node_modules/@mui/material/Hidden/Hidden.js
  var import_jsx_runtime140 = __toESM(require_jsx_runtime());
  var _excluded97 = ["implementation", "lgDown", "lgUp", "mdDown", "mdUp", "smDown", "smUp", "xlDown", "xlUp", "xsDown", "xsUp"];
  function Hidden(props) {
    const {
      implementation = "js",
      lgDown = false,
      lgUp = false,
      mdDown = false,
      mdUp = false,
      smDown = false,
      smUp = false,
      xlDown = false,
      xlUp = false,
      xsDown = false,
      xsUp = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded97);
    if (implementation === "js") {
      return /* @__PURE__ */ (0, import_jsx_runtime140.jsx)(HiddenJs_default, _extends({
        lgDown,
        lgUp,
        mdDown,
        mdUp,
        smDown,
        smUp,
        xlDown,
        xlUp,
        xsDown,
        xsUp
      }, other));
    }
    return /* @__PURE__ */ (0, import_jsx_runtime140.jsx)(HiddenCss_default, _extends({
      lgDown,
      lgUp,
      mdDown,
      mdUp,
      smDown,
      smUp,
      xlDown,
      xlUp,
      xsDown,
      xsUp
    }, other));
  }
  true ? Hidden.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types100.default.node,
    /**
     * Specify which implementation to use.  'js' is the default, 'css' works better for
     * server-side rendering.
     * @default 'js'
     */
    implementation: import_prop_types100.default.oneOf(["css", "js"]),
    /**
     * You can use this prop when choosing the `js` implementation with server-side rendering.
     *
     * As `window.innerWidth` is unavailable on the server,
     * we default to rendering an empty component during the first mount.
     * You might want to use a heuristic to approximate
     * the screen width of the client browser screen width.
     *
     * For instance, you could be using the user-agent or the client-hints.
     * https://caniuse.com/#search=client%20hint
     */
    initialWidth: import_prop_types100.default.oneOf(["xs", "sm", "md", "lg", "xl"]),
    /**
     * If `true`, component is hidden on screens below (but not including) this size.
     * @default false
     */
    lgDown: import_prop_types100.default.bool,
    /**
     * If `true`, component is hidden on screens this size and above.
     * @default false
     */
    lgUp: import_prop_types100.default.bool,
    /**
     * If `true`, component is hidden on screens below (but not including) this size.
     * @default false
     */
    mdDown: import_prop_types100.default.bool,
    /**
     * If `true`, component is hidden on screens this size and above.
     * @default false
     */
    mdUp: import_prop_types100.default.bool,
    /**
     * Hide the given breakpoint(s).
     */
    only: import_prop_types100.default.oneOfType([import_prop_types100.default.oneOf(["xs", "sm", "md", "lg", "xl"]), import_prop_types100.default.arrayOf(import_prop_types100.default.oneOf(["xs", "sm", "md", "lg", "xl"]).isRequired)]),
    /**
     * If `true`, component is hidden on screens below (but not including) this size.
     * @default false
     */
    smDown: import_prop_types100.default.bool,
    /**
     * If `true`, component is hidden on screens this size and above.
     * @default false
     */
    smUp: import_prop_types100.default.bool,
    /**
     * If `true`, component is hidden on screens below (but not including) this size.
     * @default false
     */
    xlDown: import_prop_types100.default.bool,
    /**
     * If `true`, component is hidden on screens this size and above.
     * @default false
     */
    xlUp: import_prop_types100.default.bool,
    /**
     * If `true`, component is hidden on screens below (but not including) this size.
     * @default false
     */
    xsDown: import_prop_types100.default.bool,
    /**
     * If `true`, component is hidden on screens this size and above.
     * @default false
     */
    xsUp: import_prop_types100.default.bool
  } : void 0;
  var Hidden_default = Hidden;

  // node_modules/@mui/material/Icon/Icon.js
  init_extends();
  var React166 = __toESM(require_react());
  var import_prop_types101 = __toESM(require_prop_types());
  var import_composeClasses71 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/Icon/iconClasses.js
  var import_utils183 = __toESM(require_utils());
  var import_generateUtilityClass80 = __toESM(require_generateUtilityClass3());
  function getIconUtilityClass(slot) {
    return (0, import_generateUtilityClass80.default)("MuiIcon", slot);
  }
  var iconClasses = (0, import_utils183.unstable_generateUtilityClasses)("MuiIcon", ["root", "colorPrimary", "colorSecondary", "colorAction", "colorError", "colorDisabled", "fontSizeInherit", "fontSizeSmall", "fontSizeMedium", "fontSizeLarge"]);
  var iconClasses_default = iconClasses;

  // node_modules/@mui/material/Icon/Icon.js
  var import_jsx_runtime141 = __toESM(require_jsx_runtime());
  var _excluded98 = ["baseClassName", "className", "color", "component", "fontSize"];
  var useUtilityClasses74 = (ownerState) => {
    const {
      color,
      fontSize,
      classes
    } = ownerState;
    const slots = {
      root: ["root", color !== "inherit" && `color${capitalize_default(color)}`, `fontSize${capitalize_default(fontSize)}`]
    };
    return (0, import_composeClasses71.unstable_composeClasses)(slots, getIconUtilityClass, classes);
  };
  var IconRoot = styled_default("span", {
    name: "MuiIcon",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, ownerState.color !== "inherit" && styles7[`color${capitalize_default(ownerState.color)}`], styles7[`fontSize${capitalize_default(ownerState.fontSize)}`]];
    }
  })(({
    theme,
    ownerState
  }) => ({
    userSelect: "none",
    width: "1em",
    height: "1em",
    // Chrome fix for https://bugs.chromium.org/p/chromium/issues/detail?id=820541
    // To remove at some point.
    overflow: "hidden",
    display: "inline-block",
    // allow overflow hidden to take action
    textAlign: "center",
    // support non-square icon
    flexShrink: 0,
    fontSize: {
      inherit: "inherit",
      small: theme.typography.pxToRem(20),
      medium: theme.typography.pxToRem(24),
      large: theme.typography.pxToRem(36)
    }[ownerState.fontSize],
    // TODO v5 deprecate, v6 remove for sx
    color: {
      primary: (theme.vars || theme).palette.primary.main,
      secondary: (theme.vars || theme).palette.secondary.main,
      info: (theme.vars || theme).palette.info.main,
      success: (theme.vars || theme).palette.success.main,
      warning: (theme.vars || theme).palette.warning.main,
      action: (theme.vars || theme).palette.action.active,
      error: (theme.vars || theme).palette.error.main,
      disabled: (theme.vars || theme).palette.action.disabled,
      inherit: void 0
    }[ownerState.color]
  }));
  var Icon = /* @__PURE__ */ React166.forwardRef(function Icon2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiIcon"
    });
    const {
      baseClassName = "material-icons",
      className,
      color = "inherit",
      component: Component = "span",
      fontSize = "medium"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded98);
    const ownerState = _extends({}, props, {
      baseClassName,
      color,
      component: Component,
      fontSize
    });
    const classes = useUtilityClasses74(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(IconRoot, _extends({
      as: Component,
      className: clsx_default(
        baseClassName,
        // Prevent the translation of the text content.
        // The font relies on the exact text content to render the icon.
        "notranslate",
        classes.root,
        className
      ),
      ownerState,
      "aria-hidden": true,
      ref
    }, other));
  });
  true ? Icon.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The base class applied to the icon. Defaults to 'material-icons', but can be changed to any
     * other base class that suits the icon font you're using (e.g. material-icons-rounded, fas, etc).
     * @default 'material-icons'
     */
    baseClassName: import_prop_types101.default.string,
    /**
     * The name of the icon font ligature.
     */
    children: import_prop_types101.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types101.default.object,
    /**
     * @ignore
     */
    className: import_prop_types101.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'inherit'
     */
    color: import_prop_types101.default.oneOfType([import_prop_types101.default.oneOf(["inherit", "action", "disabled", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types101.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types101.default.elementType,
    /**
     * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
     * @default 'medium'
     */
    fontSize: import_prop_types101.default.oneOfType([import_prop_types101.default.oneOf(["inherit", "large", "medium", "small"]), import_prop_types101.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types101.default.oneOfType([import_prop_types101.default.arrayOf(import_prop_types101.default.oneOfType([import_prop_types101.default.func, import_prop_types101.default.object, import_prop_types101.default.bool])), import_prop_types101.default.func, import_prop_types101.default.object])
  } : void 0;
  Icon.muiName = "Icon";
  var Icon_default = Icon;

  // node_modules/@mui/material/ImageList/ImageList.js
  init_extends();
  var import_composeClasses72 = __toESM(require_composeClasses3());
  var import_utils185 = __toESM(require_utils());
  var import_prop_types102 = __toESM(require_prop_types());
  var React168 = __toESM(require_react());

  // node_modules/@mui/material/ImageList/imageListClasses.js
  var import_utils184 = __toESM(require_utils());
  var import_generateUtilityClass81 = __toESM(require_generateUtilityClass3());
  function getImageListUtilityClass(slot) {
    return (0, import_generateUtilityClass81.default)("MuiImageList", slot);
  }
  var imageListClasses = (0, import_utils184.unstable_generateUtilityClasses)("MuiImageList", ["root", "masonry", "quilted", "standard", "woven"]);
  var imageListClasses_default = imageListClasses;

  // node_modules/@mui/material/ImageList/ImageListContext.js
  var React167 = __toESM(require_react());
  var ImageListContext = /* @__PURE__ */ React167.createContext({});
  if (true) {
    ImageListContext.displayName = "ImageListContext";
  }
  var ImageListContext_default = ImageListContext;

  // node_modules/@mui/material/ImageList/ImageList.js
  var import_jsx_runtime142 = __toESM(require_jsx_runtime());
  var _excluded99 = ["children", "className", "cols", "component", "rowHeight", "gap", "style", "variant"];
  var useUtilityClasses75 = (ownerState) => {
    const {
      classes,
      variant
    } = ownerState;
    const slots = {
      root: ["root", variant]
    };
    return (0, import_composeClasses72.unstable_composeClasses)(slots, getImageListUtilityClass, classes);
  };
  var ImageListRoot = styled_default("ul", {
    name: "MuiImageList",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, styles7[ownerState.variant]];
    }
  })(({
    ownerState
  }) => {
    return _extends({
      display: "grid",
      overflowY: "auto",
      listStyle: "none",
      padding: 0,
      // Add iOS momentum scrolling for iOS < 13.0
      WebkitOverflowScrolling: "touch"
    }, ownerState.variant === "masonry" && {
      display: "block"
    });
  });
  var ImageList = /* @__PURE__ */ React168.forwardRef(function ImageList2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiImageList"
    });
    const {
      children,
      className,
      cols = 2,
      component = "ul",
      rowHeight = "auto",
      gap = 4,
      style: styleProp,
      variant = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded99);
    const contextValue = React168.useMemo(() => ({
      rowHeight,
      gap,
      variant
    }), [rowHeight, gap, variant]);
    React168.useEffect(() => {
      if (true) {
        if (document !== void 0 && "objectFit" in document.documentElement.style === false) {
          console.error(["MUI: ImageList v5+ no longer natively supports Internet Explorer.", "Use v4 of this component instead, or polyfill CSS object-fit."].join("\n"));
        }
      }
    }, []);
    const style = variant === "masonry" ? _extends({
      columnCount: cols,
      columnGap: gap
    }, styleProp) : _extends({
      gridTemplateColumns: `repeat(${cols}, 1fr)`,
      gap
    }, styleProp);
    const ownerState = _extends({}, props, {
      component,
      gap,
      rowHeight,
      variant
    });
    const classes = useUtilityClasses75(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(ImageListRoot, _extends({
      as: component,
      className: clsx_default(classes.root, classes[variant], className),
      ref,
      style,
      ownerState
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(ImageListContext_default.Provider, {
        value: contextValue,
        children
      })
    }));
  });
  true ? ImageList.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component, normally `ImageListItem`s.
     */
    children: import_prop_types102.default.node.isRequired,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types102.default.object,
    /**
     * @ignore
     */
    className: import_prop_types102.default.string,
    /**
     * Number of columns.
     * @default 2
     */
    cols: import_utils185.integerPropType,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types102.default.elementType,
    /**
     * The gap between items in px.
     * @default 4
     */
    gap: import_prop_types102.default.number,
    /**
     * The height of one row in px.
     * @default 'auto'
     */
    rowHeight: import_prop_types102.default.oneOfType([import_prop_types102.default.oneOf(["auto"]), import_prop_types102.default.number]),
    /**
     * @ignore
     */
    style: import_prop_types102.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types102.default.oneOfType([import_prop_types102.default.arrayOf(import_prop_types102.default.oneOfType([import_prop_types102.default.func, import_prop_types102.default.object, import_prop_types102.default.bool])), import_prop_types102.default.func, import_prop_types102.default.object]),
    /**
     * The variant to use.
     * @default 'standard'
     */
    variant: import_prop_types102.default.oneOfType([import_prop_types102.default.oneOf(["masonry", "quilted", "standard", "woven"]), import_prop_types102.default.string])
  } : void 0;
  var ImageList_default = ImageList;

  // node_modules/@mui/material/ImageListItem/ImageListItem.js
  init_extends();
  var import_composeClasses73 = __toESM(require_composeClasses3());
  var import_utils187 = __toESM(require_utils());
  var import_prop_types103 = __toESM(require_prop_types());
  var React169 = __toESM(require_react());
  var import_react_is5 = __toESM(require_react_is3());

  // node_modules/@mui/material/ImageListItem/imageListItemClasses.js
  var import_utils186 = __toESM(require_utils());
  var import_generateUtilityClass82 = __toESM(require_generateUtilityClass3());
  function getImageListItemUtilityClass(slot) {
    return (0, import_generateUtilityClass82.default)("MuiImageListItem", slot);
  }
  var imageListItemClasses = (0, import_utils186.unstable_generateUtilityClasses)("MuiImageListItem", ["root", "img", "standard", "woven", "masonry", "quilted"]);
  var imageListItemClasses_default = imageListItemClasses;

  // node_modules/@mui/material/ImageListItem/ImageListItem.js
  var import_jsx_runtime143 = __toESM(require_jsx_runtime());
  var _excluded100 = ["children", "className", "cols", "component", "rows", "style"];
  var useUtilityClasses76 = (ownerState) => {
    const {
      classes,
      variant
    } = ownerState;
    const slots = {
      root: ["root", variant],
      img: ["img"]
    };
    return (0, import_composeClasses73.unstable_composeClasses)(slots, getImageListItemUtilityClass, classes);
  };
  var ImageListItemRoot = styled_default("li", {
    name: "MuiImageListItem",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${imageListItemClasses_default.img}`]: styles7.img
      }, styles7.root, styles7[ownerState.variant]];
    }
  })(({
    ownerState
  }) => _extends({
    display: "block",
    position: "relative"
  }, ownerState.variant === "standard" && {
    // For titlebar under list item
    display: "flex",
    flexDirection: "column"
  }, ownerState.variant === "woven" && {
    height: "100%",
    alignSelf: "center",
    "&:nth-of-type(even)": {
      height: "70%"
    }
  }, {
    [`& .${imageListItemClasses_default.img}`]: _extends({
      objectFit: "cover",
      width: "100%",
      height: "100%",
      display: "block"
    }, ownerState.variant === "standard" && {
      height: "auto",
      flexGrow: 1
    })
  }));
  var ImageListItem = /* @__PURE__ */ React169.forwardRef(function ImageListItem2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiImageListItem"
    });
    const {
      children,
      className,
      cols = 1,
      component = "li",
      rows = 1,
      style
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded100);
    const {
      rowHeight = "auto",
      gap,
      variant
    } = React169.useContext(ImageListContext_default);
    let height = "auto";
    if (variant === "woven") {
      height = void 0;
    } else if (rowHeight !== "auto") {
      height = rowHeight * rows + gap * (rows - 1);
    }
    const ownerState = _extends({}, props, {
      cols,
      component,
      gap,
      rowHeight,
      rows,
      variant
    });
    const classes = useUtilityClasses76(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(ImageListItemRoot, _extends({
      as: component,
      className: clsx_default(classes.root, classes[variant], className),
      ref,
      style: _extends({
        height,
        gridColumnEnd: variant !== "masonry" ? `span ${cols}` : void 0,
        gridRowEnd: variant !== "masonry" ? `span ${rows}` : void 0,
        marginBottom: variant === "masonry" ? gap : void 0,
        breakInside: variant === "masonry" ? "avoid" : void 0
      }, style),
      ownerState
    }, other, {
      children: React169.Children.map(children, (child) => {
        if (!/* @__PURE__ */ React169.isValidElement(child)) {
          return null;
        }
        if (true) {
          if ((0, import_react_is5.isFragment)(child)) {
            console.error(["MUI: The ImageListItem component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
          }
        }
        if (child.type === "img" || isMuiElement_default(child, ["Image"])) {
          return /* @__PURE__ */ React169.cloneElement(child, {
            className: clsx_default(classes.img, child.props.className)
          });
        }
        return child;
      })
    }));
  });
  true ? ImageListItem.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component, normally an `<img>`.
     */
    children: import_prop_types103.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types103.default.object,
    /**
     * @ignore
     */
    className: import_prop_types103.default.string,
    /**
     * Width of the item in number of grid columns.
     * @default 1
     */
    cols: import_utils187.integerPropType,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types103.default.elementType,
    /**
     * Height of the item in number of grid rows.
     * @default 1
     */
    rows: import_utils187.integerPropType,
    /**
     * @ignore
     */
    style: import_prop_types103.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types103.default.oneOfType([import_prop_types103.default.arrayOf(import_prop_types103.default.oneOfType([import_prop_types103.default.func, import_prop_types103.default.object, import_prop_types103.default.bool])), import_prop_types103.default.func, import_prop_types103.default.object])
  } : void 0;
  var ImageListItem_default = ImageListItem;

  // node_modules/@mui/material/ImageListItemBar/ImageListItemBar.js
  init_extends();
  var import_composeClasses74 = __toESM(require_composeClasses3());
  var import_prop_types104 = __toESM(require_prop_types());
  var React170 = __toESM(require_react());

  // node_modules/@mui/material/ImageListItemBar/imageListItemBarClasses.js
  var import_utils188 = __toESM(require_utils());
  var import_generateUtilityClass83 = __toESM(require_generateUtilityClass3());
  function getImageListItemBarUtilityClass(slot) {
    return (0, import_generateUtilityClass83.default)("MuiImageListItemBar", slot);
  }
  var imageListItemBarClasses = (0, import_utils188.unstable_generateUtilityClasses)("MuiImageListItemBar", ["root", "positionBottom", "positionTop", "positionBelow", "titleWrap", "titleWrapBottom", "titleWrapTop", "titleWrapBelow", "titleWrapActionPosLeft", "titleWrapActionPosRight", "title", "subtitle", "actionIcon", "actionIconActionPosLeft", "actionIconActionPosRight"]);
  var imageListItemBarClasses_default = imageListItemBarClasses;

  // node_modules/@mui/material/ImageListItemBar/ImageListItemBar.js
  var import_jsx_runtime144 = __toESM(require_jsx_runtime());
  var import_jsx_runtime145 = __toESM(require_jsx_runtime());
  var _excluded101 = ["actionIcon", "actionPosition", "className", "subtitle", "title", "position"];
  var useUtilityClasses77 = (ownerState) => {
    const {
      classes,
      position: position2,
      actionIcon,
      actionPosition
    } = ownerState;
    const slots = {
      root: ["root", `position${capitalize_default(position2)}`],
      titleWrap: ["titleWrap", `titleWrap${capitalize_default(position2)}`, actionIcon && `titleWrapActionPos${capitalize_default(actionPosition)}`],
      title: ["title"],
      subtitle: ["subtitle"],
      actionIcon: ["actionIcon", `actionIconActionPos${capitalize_default(actionPosition)}`]
    };
    return (0, import_composeClasses74.unstable_composeClasses)(slots, getImageListItemBarUtilityClass, classes);
  };
  var ImageListItemBarRoot = styled_default("div", {
    name: "MuiImageListItemBar",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, styles7[`position${capitalize_default(ownerState.position)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    return _extends({
      position: "absolute",
      left: 0,
      right: 0,
      background: "rgba(0, 0, 0, 0.5)",
      display: "flex",
      alignItems: "center",
      fontFamily: theme.typography.fontFamily
    }, ownerState.position === "bottom" && {
      bottom: 0
    }, ownerState.position === "top" && {
      top: 0
    }, ownerState.position === "below" && {
      position: "relative",
      background: "transparent",
      alignItems: "normal"
    });
  });
  var ImageListItemBarTitleWrap = styled_default("div", {
    name: "MuiImageListItemBar",
    slot: "TitleWrap",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.titleWrap, styles7[`titleWrap${capitalize_default(ownerState.position)}`], ownerState.actionIcon && styles7[`titleWrapActionPos${capitalize_default(ownerState.actionPosition)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    return _extends({
      flexGrow: 1,
      padding: "12px 16px",
      color: (theme.vars || theme).palette.common.white,
      overflow: "hidden"
    }, ownerState.position === "below" && {
      padding: "6px 0 12px",
      color: "inherit"
    }, ownerState.actionIcon && ownerState.actionPosition === "left" && {
      paddingLeft: 0
    }, ownerState.actionIcon && ownerState.actionPosition === "right" && {
      paddingRight: 0
    });
  });
  var ImageListItemBarTitle = styled_default("div", {
    name: "MuiImageListItemBar",
    slot: "Title",
    overridesResolver: (props, styles7) => styles7.title
  })(({
    theme
  }) => {
    return {
      fontSize: theme.typography.pxToRem(16),
      lineHeight: "24px",
      textOverflow: "ellipsis",
      overflow: "hidden",
      whiteSpace: "nowrap"
    };
  });
  var ImageListItemBarSubtitle = styled_default("div", {
    name: "MuiImageListItemBar",
    slot: "Subtitle",
    overridesResolver: (props, styles7) => styles7.subtitle
  })(({
    theme
  }) => {
    return {
      fontSize: theme.typography.pxToRem(12),
      lineHeight: 1,
      textOverflow: "ellipsis",
      overflow: "hidden",
      whiteSpace: "nowrap"
    };
  });
  var ImageListItemBarActionIcon = styled_default("div", {
    name: "MuiImageListItemBar",
    slot: "ActionIcon",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.actionIcon, styles7[`actionIconActionPos${capitalize_default(ownerState.actionPosition)}`]];
    }
  })(({
    ownerState
  }) => {
    return _extends({}, ownerState.actionPosition === "left" && {
      order: -1
    });
  });
  var ImageListItemBar = /* @__PURE__ */ React170.forwardRef(function ImageListItemBar2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiImageListItemBar"
    });
    const {
      actionIcon,
      actionPosition = "right",
      className,
      subtitle,
      title,
      position: position2 = "bottom"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded101);
    const ownerState = _extends({}, props, {
      position: position2,
      actionPosition
    });
    const classes = useUtilityClasses77(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime145.jsxs)(ImageListItemBarRoot, _extends({
      ownerState,
      className: clsx_default(classes.root, className),
      ref
    }, other, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime145.jsxs)(ImageListItemBarTitleWrap, {
        ownerState,
        className: classes.titleWrap,
        children: [/* @__PURE__ */ (0, import_jsx_runtime144.jsx)(ImageListItemBarTitle, {
          className: classes.title,
          children: title
        }), subtitle ? /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(ImageListItemBarSubtitle, {
          className: classes.subtitle,
          children: subtitle
        }) : null]
      }), actionIcon ? /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(ImageListItemBarActionIcon, {
        ownerState,
        className: classes.actionIcon,
        children: actionIcon
      }) : null]
    }));
  });
  true ? ImageListItemBar.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * An IconButton element to be used as secondary action target
     * (primary action target is the item itself).
     */
    actionIcon: import_prop_types104.default.node,
    /**
     * Position of secondary action IconButton.
     * @default 'right'
     */
    actionPosition: import_prop_types104.default.oneOf(["left", "right"]),
    /**
     * @ignore
     */
    children: import_prop_types104.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types104.default.object,
    /**
     * @ignore
     */
    className: import_prop_types104.default.string,
    /**
     * Position of the title bar.
     * @default 'bottom'
     */
    position: import_prop_types104.default.oneOf(["below", "bottom", "top"]),
    /**
     * String or element serving as subtitle (support text).
     */
    subtitle: import_prop_types104.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types104.default.oneOfType([import_prop_types104.default.arrayOf(import_prop_types104.default.oneOfType([import_prop_types104.default.func, import_prop_types104.default.object, import_prop_types104.default.bool])), import_prop_types104.default.func, import_prop_types104.default.object]),
    /**
     * Title to be displayed.
     */
    title: import_prop_types104.default.node
  } : void 0;
  var ImageListItemBar_default = ImageListItemBar;

  // node_modules/@mui/material/Input/Input.js
  init_extends();
  var React171 = __toESM(require_react());
  var import_prop_types105 = __toESM(require_prop_types());
  var import_composeClasses75 = __toESM(require_composeClasses3());
  var import_utils189 = __toESM(require_utils());
  var import_jsx_runtime146 = __toESM(require_jsx_runtime());
  var _excluded102 = ["disableUnderline", "components", "componentsProps", "fullWidth", "inputComponent", "multiline", "slotProps", "slots", "type"];
  var useUtilityClasses78 = (ownerState) => {
    const {
      classes,
      disableUnderline
    } = ownerState;
    const slots = {
      root: ["root", !disableUnderline && "underline"],
      input: ["input"]
    };
    const composedClasses = (0, import_composeClasses75.unstable_composeClasses)(slots, getInputUtilityClass2, classes);
    return _extends({}, classes, composedClasses);
  };
  var InputRoot = styled_default(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiInput",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [...rootOverridesResolver(props, styles7), !ownerState.disableUnderline && styles7.underline];
    }
  })(({
    theme,
    ownerState
  }) => {
    const light2 = theme.palette.mode === "light";
    let bottomLineColor = light2 ? "rgba(0, 0, 0, 0.42)" : "rgba(255, 255, 255, 0.7)";
    if (theme.vars) {
      bottomLineColor = `rgba(${theme.vars.palette.common.onBackgroundChannel} / ${theme.vars.opacity.inputUnderline})`;
    }
    return _extends({
      position: "relative"
    }, ownerState.formControl && {
      "label + &": {
        marginTop: 16
      }
    }, !ownerState.disableUnderline && {
      "&:after": {
        borderBottom: `2px solid ${(theme.vars || theme).palette[ownerState.color].main}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '""',
        position: "absolute",
        right: 0,
        transform: "scaleX(0)",
        transition: theme.transitions.create("transform", {
          duration: theme.transitions.duration.shorter,
          easing: theme.transitions.easing.easeOut
        }),
        pointerEvents: "none"
        // Transparent to the hover style.
      },
      [`&.${inputClasses_default.focused}:after`]: {
        // translateX(0) is a workaround for Safari transform scale bug
        // See https://github.com/mui/material-ui/issues/31766
        transform: "scaleX(1) translateX(0)"
      },
      [`&.${inputClasses_default.error}`]: {
        "&:before, &:after": {
          borderBottomColor: (theme.vars || theme).palette.error.main
        }
      },
      "&:before": {
        borderBottom: `1px solid ${bottomLineColor}`,
        left: 0,
        bottom: 0,
        // Doing the other way around crash on IE11 "''" https://github.com/cssinjs/jss/issues/242
        content: '"\\00a0"',
        position: "absolute",
        right: 0,
        transition: theme.transitions.create("border-bottom-color", {
          duration: theme.transitions.duration.shorter
        }),
        pointerEvents: "none"
        // Transparent to the hover style.
      },
      [`&:hover:not(.${inputClasses_default.disabled}, .${inputClasses_default.error}):before`]: {
        borderBottom: `2px solid ${(theme.vars || theme).palette.text.primary}`,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          borderBottom: `1px solid ${bottomLineColor}`
        }
      },
      [`&.${inputClasses_default.disabled}:before`]: {
        borderBottomStyle: "dotted"
      }
    });
  });
  var InputInput = styled_default(InputBaseComponent, {
    name: "MuiInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })({});
  var Input3 = /* @__PURE__ */ React171.forwardRef(function Input4(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$input;
    const props = useThemeProps({
      props: inProps,
      name: "MuiInput"
    });
    const {
      disableUnderline,
      components = {},
      componentsProps: componentsPropsProp,
      fullWidth = false,
      inputComponent = "input",
      multiline = false,
      slotProps,
      slots = {},
      type = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded102);
    const classes = useUtilityClasses78(props);
    const ownerState = {
      disableUnderline
    };
    const inputComponentsProps = {
      root: {
        ownerState
      }
    };
    const componentsProps = (slotProps != null ? slotProps : componentsPropsProp) ? (0, import_utils189.deepmerge)(slotProps != null ? slotProps : componentsPropsProp, inputComponentsProps) : inputComponentsProps;
    const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : InputRoot;
    const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : InputInput;
    return /* @__PURE__ */ (0, import_jsx_runtime146.jsx)(InputBase_default, _extends({
      slots: {
        root: RootSlot,
        input: InputSlot
      },
      slotProps: componentsProps,
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other, {
      classes
    }));
  });
  true ? Input3.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: import_prop_types105.default.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: import_prop_types105.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types105.default.object,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: import_prop_types105.default.oneOfType([import_prop_types105.default.oneOf(["primary", "secondary"]), import_prop_types105.default.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types105.default.shape({
      Input: import_prop_types105.default.elementType,
      Root: import_prop_types105.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types105.default.shape({
      input: import_prop_types105.default.object,
      root: import_prop_types105.default.object
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types105.default.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: import_prop_types105.default.bool,
    /**
     * If `true`, the `input` will not have an underline.
     */
    disableUnderline: import_prop_types105.default.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: import_prop_types105.default.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: import_prop_types105.default.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types105.default.bool,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types105.default.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: import_prop_types105.default.elementType,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: import_prop_types105.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: import_utils189.refType,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: import_prop_types105.default.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: import_prop_types105.default.oneOfType([import_prop_types105.default.number, import_prop_types105.default.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: import_prop_types105.default.oneOfType([import_prop_types105.default.number, import_prop_types105.default.string]),
    /**
     * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: import_prop_types105.default.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types105.default.string,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types105.default.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: import_prop_types105.default.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: import_prop_types105.default.bool,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: import_prop_types105.default.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: import_prop_types105.default.oneOfType([import_prop_types105.default.number, import_prop_types105.default.string]),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types105.default.shape({
      input: import_prop_types105.default.object,
      root: import_prop_types105.default.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types105.default.shape({
      input: import_prop_types105.default.elementType,
      root: import_prop_types105.default.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: import_prop_types105.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types105.default.oneOfType([import_prop_types105.default.arrayOf(import_prop_types105.default.oneOfType([import_prop_types105.default.func, import_prop_types105.default.object, import_prop_types105.default.bool])), import_prop_types105.default.func, import_prop_types105.default.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: import_prop_types105.default.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: import_prop_types105.default.any
  } : void 0;
  Input3.muiName = "Input";
  var Input_default = Input3;

  // node_modules/@mui/material/InputAdornment/InputAdornment.js
  init_extends();
  var React172 = __toESM(require_react());
  var import_prop_types106 = __toESM(require_prop_types());
  var import_composeClasses76 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/InputAdornment/inputAdornmentClasses.js
  var import_utils190 = __toESM(require_utils());
  var import_generateUtilityClass84 = __toESM(require_generateUtilityClass3());
  function getInputAdornmentUtilityClass(slot) {
    return (0, import_generateUtilityClass84.default)("MuiInputAdornment", slot);
  }
  var inputAdornmentClasses = (0, import_utils190.unstable_generateUtilityClasses)("MuiInputAdornment", ["root", "filled", "standard", "outlined", "positionStart", "positionEnd", "disablePointerEvents", "hiddenLabel", "sizeSmall"]);
  var inputAdornmentClasses_default = inputAdornmentClasses;

  // node_modules/@mui/material/InputAdornment/InputAdornment.js
  var import_jsx_runtime147 = __toESM(require_jsx_runtime());
  var import_jsx_runtime148 = __toESM(require_jsx_runtime());
  var _span6;
  var _excluded103 = ["children", "className", "component", "disablePointerEvents", "disableTypography", "position", "variant"];
  var overridesResolver3 = (props, styles7) => {
    const {
      ownerState
    } = props;
    return [styles7.root, styles7[`position${capitalize_default(ownerState.position)}`], ownerState.disablePointerEvents === true && styles7.disablePointerEvents, styles7[ownerState.variant]];
  };
  var useUtilityClasses79 = (ownerState) => {
    const {
      classes,
      disablePointerEvents,
      hiddenLabel,
      position: position2,
      size: size2,
      variant
    } = ownerState;
    const slots = {
      root: ["root", disablePointerEvents && "disablePointerEvents", position2 && `position${capitalize_default(position2)}`, variant, hiddenLabel && "hiddenLabel", size2 && `size${capitalize_default(size2)}`]
    };
    return (0, import_composeClasses76.unstable_composeClasses)(slots, getInputAdornmentUtilityClass, classes);
  };
  var InputAdornmentRoot = styled_default("div", {
    name: "MuiInputAdornment",
    slot: "Root",
    overridesResolver: overridesResolver3
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "flex",
    height: "0.01em",
    // Fix IE11 flexbox alignment. To remove at some point.
    maxHeight: "2em",
    alignItems: "center",
    whiteSpace: "nowrap",
    color: (theme.vars || theme).palette.action.active
  }, ownerState.variant === "filled" && {
    // Styles applied to the root element if `variant="filled"`.
    [`&.${inputAdornmentClasses_default.positionStart}&:not(.${inputAdornmentClasses_default.hiddenLabel})`]: {
      marginTop: 16
    }
  }, ownerState.position === "start" && {
    // Styles applied to the root element if `position="start"`.
    marginRight: 8
  }, ownerState.position === "end" && {
    // Styles applied to the root element if `position="end"`.
    marginLeft: 8
  }, ownerState.disablePointerEvents === true && {
    // Styles applied to the root element if `disablePointerEvents={true}`.
    pointerEvents: "none"
  }));
  var InputAdornment = /* @__PURE__ */ React172.forwardRef(function InputAdornment2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiInputAdornment"
    });
    const {
      children,
      className,
      component = "div",
      disablePointerEvents = false,
      disableTypography = false,
      position: position2,
      variant: variantProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded103);
    const muiFormControl = useFormControl() || {};
    let variant = variantProp;
    if (variantProp && muiFormControl.variant) {
      if (true) {
        if (variantProp === muiFormControl.variant) {
          console.error("MUI: The `InputAdornment` variant infers the variant prop you do not have to provide one.");
        }
      }
    }
    if (muiFormControl && !variant) {
      variant = muiFormControl.variant;
    }
    const ownerState = _extends({}, props, {
      hiddenLabel: muiFormControl.hiddenLabel,
      size: muiFormControl.size,
      disablePointerEvents,
      position: position2,
      variant
    });
    const classes = useUtilityClasses79(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime147.jsx)(FormControlContext_default.Provider, {
      value: null,
      children: /* @__PURE__ */ (0, import_jsx_runtime147.jsx)(InputAdornmentRoot, _extends({
        as: component,
        ownerState,
        className: clsx_default(classes.root, className),
        ref
      }, other, {
        children: typeof children === "string" && !disableTypography ? /* @__PURE__ */ (0, import_jsx_runtime147.jsx)(Typography_default, {
          color: "text.secondary",
          children
        }) : /* @__PURE__ */ (0, import_jsx_runtime148.jsxs)(React172.Fragment, {
          children: [position2 === "start" ? (
            /* notranslate needed while Google Translate will not fix zero-width space issue */
            _span6 || (_span6 = /* @__PURE__ */ (0, import_jsx_runtime147.jsx)("span", {
              className: "notranslate",
              children: "\u200B"
            }))
          ) : null, children]
        })
      }))
    });
  });
  true ? InputAdornment.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component, normally an `IconButton` or string.
     */
    children: import_prop_types106.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types106.default.object,
    /**
     * @ignore
     */
    className: import_prop_types106.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types106.default.elementType,
    /**
     * Disable pointer events on the root.
     * This allows for the content of the adornment to focus the `input` on click.
     * @default false
     */
    disablePointerEvents: import_prop_types106.default.bool,
    /**
     * If children is a string then disable wrapping in a Typography component.
     * @default false
     */
    disableTypography: import_prop_types106.default.bool,
    /**
     * The position this adornment should appear relative to the `Input`.
     */
    position: import_prop_types106.default.oneOf(["end", "start"]).isRequired,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types106.default.oneOfType([import_prop_types106.default.arrayOf(import_prop_types106.default.oneOfType([import_prop_types106.default.func, import_prop_types106.default.object, import_prop_types106.default.bool])), import_prop_types106.default.func, import_prop_types106.default.object]),
    /**
     * The variant to use.
     * Note: If you are using the `TextField` component or the `FormControl` component
     * you do not have to set this manually.
     */
    variant: import_prop_types106.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var InputAdornment_default = InputAdornment;

  // node_modules/@mui/material/InputLabel/InputLabel.js
  init_extends();
  var React173 = __toESM(require_react());
  var import_prop_types107 = __toESM(require_prop_types());
  var import_composeClasses77 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/InputLabel/inputLabelClasses.js
  var import_utils191 = __toESM(require_utils());
  var import_generateUtilityClass85 = __toESM(require_generateUtilityClass3());
  function getInputLabelUtilityClasses(slot) {
    return (0, import_generateUtilityClass85.default)("MuiInputLabel", slot);
  }
  var inputLabelClasses = (0, import_utils191.unstable_generateUtilityClasses)("MuiInputLabel", ["root", "focused", "disabled", "error", "required", "asterisk", "formControl", "sizeSmall", "shrink", "animated", "standard", "filled", "outlined"]);
  var inputLabelClasses_default = inputLabelClasses;

  // node_modules/@mui/material/InputLabel/InputLabel.js
  var import_jsx_runtime149 = __toESM(require_jsx_runtime());
  var _excluded104 = ["disableAnimation", "margin", "shrink", "variant", "className"];
  var useUtilityClasses80 = (ownerState) => {
    const {
      classes,
      formControl,
      size: size2,
      shrink,
      disableAnimation,
      variant,
      required
    } = ownerState;
    const slots = {
      root: ["root", formControl && "formControl", !disableAnimation && "animated", shrink && "shrink", size2 && size2 !== "normal" && `size${capitalize_default(size2)}`, variant],
      asterisk: [required && "asterisk"]
    };
    const composedClasses = (0, import_composeClasses77.unstable_composeClasses)(slots, getInputLabelUtilityClasses, classes);
    return _extends({}, classes, composedClasses);
  };
  var InputLabelRoot = styled_default(FormLabel_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiInputLabel",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${formLabelClasses_default.asterisk}`]: styles7.asterisk
      }, styles7.root, ownerState.formControl && styles7.formControl, ownerState.size === "small" && styles7.sizeSmall, ownerState.shrink && styles7.shrink, !ownerState.disableAnimation && styles7.animated, styles7[ownerState.variant]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "block",
    transformOrigin: "top left",
    whiteSpace: "nowrap",
    overflow: "hidden",
    textOverflow: "ellipsis",
    maxWidth: "100%"
  }, ownerState.formControl && {
    position: "absolute",
    left: 0,
    top: 0,
    // slight alteration to spec spacing to match visual spec result
    transform: "translate(0, 20px) scale(1)"
  }, ownerState.size === "small" && {
    // Compensation for the `Input.inputSizeSmall` style.
    transform: "translate(0, 17px) scale(1)"
  }, ownerState.shrink && {
    transform: "translate(0, -1.5px) scale(0.75)",
    transformOrigin: "top left",
    maxWidth: "133%"
  }, !ownerState.disableAnimation && {
    transition: theme.transitions.create(["color", "transform", "max-width"], {
      duration: theme.transitions.duration.shorter,
      easing: theme.transitions.easing.easeOut
    })
  }, ownerState.variant === "filled" && _extends({
    // Chrome's autofill feature gives the input field a yellow background.
    // Since the input field is behind the label in the HTML tree,
    // the input field is drawn last and hides the label with an opaque background color.
    // zIndex: 1 will raise the label above opaque background-colors of input.
    zIndex: 1,
    pointerEvents: "none",
    transform: "translate(12px, 16px) scale(1)",
    maxWidth: "calc(100% - 24px)"
  }, ownerState.size === "small" && {
    transform: "translate(12px, 13px) scale(1)"
  }, ownerState.shrink && _extends({
    userSelect: "none",
    pointerEvents: "auto",
    transform: "translate(12px, 7px) scale(0.75)",
    maxWidth: "calc(133% - 24px)"
  }, ownerState.size === "small" && {
    transform: "translate(12px, 4px) scale(0.75)"
  })), ownerState.variant === "outlined" && _extends({
    // see comment above on filled.zIndex
    zIndex: 1,
    pointerEvents: "none",
    transform: "translate(14px, 16px) scale(1)",
    maxWidth: "calc(100% - 24px)"
  }, ownerState.size === "small" && {
    transform: "translate(14px, 9px) scale(1)"
  }, ownerState.shrink && {
    userSelect: "none",
    pointerEvents: "auto",
    // Theoretically, we should have (8+5)*2/0.75 = 34px
    // but it feels a better when it bleeds a bit on the left, so 32px.
    maxWidth: "calc(133% - 32px)",
    transform: "translate(14px, -9px) scale(0.75)"
  })));
  var InputLabel = /* @__PURE__ */ React173.forwardRef(function InputLabel2(inProps, ref) {
    const props = useThemeProps({
      name: "MuiInputLabel",
      props: inProps
    });
    const {
      disableAnimation = false,
      shrink: shrinkProp,
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded104);
    const muiFormControl = useFormControl();
    let shrink = shrinkProp;
    if (typeof shrink === "undefined" && muiFormControl) {
      shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
    }
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["size", "variant", "required"]
    });
    const ownerState = _extends({}, props, {
      disableAnimation,
      formControl: muiFormControl,
      shrink,
      size: fcs.size,
      variant: fcs.variant,
      required: fcs.required
    });
    const classes = useUtilityClasses80(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(InputLabelRoot, _extends({
      "data-shrink": shrink,
      ownerState,
      ref,
      className: clsx_default(classes.root, className)
    }, other, {
      classes
    }));
  });
  true ? InputLabel.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types107.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types107.default.object,
    /**
     * @ignore
     */
    className: import_prop_types107.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     */
    color: import_prop_types107.default.oneOfType([import_prop_types107.default.oneOf(["error", "info", "primary", "secondary", "success", "warning"]), import_prop_types107.default.string]),
    /**
     * If `true`, the transition animation is disabled.
     * @default false
     */
    disableAnimation: import_prop_types107.default.bool,
    /**
     * If `true`, the component is disabled.
     */
    disabled: import_prop_types107.default.bool,
    /**
     * If `true`, the label is displayed in an error state.
     */
    error: import_prop_types107.default.bool,
    /**
     * If `true`, the `input` of this label is focused.
     */
    focused: import_prop_types107.default.bool,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     */
    margin: import_prop_types107.default.oneOf(["dense"]),
    /**
     * if `true`, the label will indicate that the `input` is required.
     */
    required: import_prop_types107.default.bool,
    /**
     * If `true`, the label is shrunk.
     */
    shrink: import_prop_types107.default.bool,
    /**
     * The size of the component.
     * @default 'normal'
     */
    size: import_prop_types107.default.oneOfType([import_prop_types107.default.oneOf(["normal", "small"]), import_prop_types107.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types107.default.oneOfType([import_prop_types107.default.arrayOf(import_prop_types107.default.oneOfType([import_prop_types107.default.func, import_prop_types107.default.object, import_prop_types107.default.bool])), import_prop_types107.default.func, import_prop_types107.default.object]),
    /**
     * The variant to use.
     */
    variant: import_prop_types107.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var InputLabel_default = InputLabel;

  // node_modules/@mui/material/LinearProgress/LinearProgress.js
  init_extends();
  var React174 = __toESM(require_react());
  var import_prop_types108 = __toESM(require_prop_types());
  var import_composeClasses78 = __toESM(require_composeClasses3());
  var import_system33 = __toESM(require_system());

  // node_modules/@mui/material/LinearProgress/linearProgressClasses.js
  var import_utils192 = __toESM(require_utils());
  var import_generateUtilityClass86 = __toESM(require_generateUtilityClass3());
  function getLinearProgressUtilityClass(slot) {
    return (0, import_generateUtilityClass86.default)("MuiLinearProgress", slot);
  }
  var linearProgressClasses = (0, import_utils192.unstable_generateUtilityClasses)("MuiLinearProgress", ["root", "colorPrimary", "colorSecondary", "determinate", "indeterminate", "buffer", "query", "dashed", "dashedColorPrimary", "dashedColorSecondary", "bar", "barColorPrimary", "barColorSecondary", "bar1Indeterminate", "bar1Determinate", "bar1Buffer", "bar2Indeterminate", "bar2Buffer"]);
  var linearProgressClasses_default = linearProgressClasses;

  // node_modules/@mui/material/LinearProgress/LinearProgress.js
  var import_jsx_runtime150 = __toESM(require_jsx_runtime());
  var import_jsx_runtime151 = __toESM(require_jsx_runtime());
  var _excluded105 = ["className", "color", "value", "valueBuffer", "variant"];
  var _3 = (t) => t;
  var _t6;
  var _t23;
  var _t33;
  var _t43;
  var _t52;
  var _t62;
  var TRANSITION_DURATION = 4;
  var indeterminate1Keyframe = (0, import_system33.keyframes)(_t6 || (_t6 = _3`
  0% {
    left: -35%;
    right: 100%;
  }

  60% {
    left: 100%;
    right: -90%;
  }

  100% {
    left: 100%;
    right: -90%;
  }
`));
  var indeterminate2Keyframe = (0, import_system33.keyframes)(_t23 || (_t23 = _3`
  0% {
    left: -200%;
    right: 100%;
  }

  60% {
    left: 107%;
    right: -8%;
  }

  100% {
    left: 107%;
    right: -8%;
  }
`));
  var bufferKeyframe = (0, import_system33.keyframes)(_t33 || (_t33 = _3`
  0% {
    opacity: 1;
    background-position: 0 -23px;
  }

  60% {
    opacity: 0;
    background-position: 0 -23px;
  }

  100% {
    opacity: 1;
    background-position: -200px -23px;
  }
`));
  var useUtilityClasses81 = (ownerState) => {
    const {
      classes,
      variant,
      color
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color)}`, variant],
      dashed: ["dashed", `dashedColor${capitalize_default(color)}`],
      bar1: ["bar", `barColor${capitalize_default(color)}`, (variant === "indeterminate" || variant === "query") && "bar1Indeterminate", variant === "determinate" && "bar1Determinate", variant === "buffer" && "bar1Buffer"],
      bar2: ["bar", variant !== "buffer" && `barColor${capitalize_default(color)}`, variant === "buffer" && `color${capitalize_default(color)}`, (variant === "indeterminate" || variant === "query") && "bar2Indeterminate", variant === "buffer" && "bar2Buffer"]
    };
    return (0, import_composeClasses78.unstable_composeClasses)(slots, getLinearProgressUtilityClass, classes);
  };
  var getColorShade = (theme, color) => {
    if (color === "inherit") {
      return "currentColor";
    }
    if (theme.vars) {
      return theme.vars.palette.LinearProgress[`${color}Bg`];
    }
    return theme.palette.mode === "light" ? (0, import_system33.lighten)(theme.palette[color].main, 0.62) : (0, import_system33.darken)(theme.palette[color].main, 0.5);
  };
  var LinearProgressRoot = styled_default("span", {
    name: "MuiLinearProgress",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, styles7[`color${capitalize_default(ownerState.color)}`], styles7[ownerState.variant]];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    position: "relative",
    overflow: "hidden",
    display: "block",
    height: 4,
    zIndex: 0,
    // Fix Safari's bug during composition of different paint.
    "@media print": {
      colorAdjust: "exact"
    },
    backgroundColor: getColorShade(theme, ownerState.color)
  }, ownerState.color === "inherit" && ownerState.variant !== "buffer" && {
    backgroundColor: "none",
    "&::before": {
      content: '""',
      position: "absolute",
      left: 0,
      top: 0,
      right: 0,
      bottom: 0,
      backgroundColor: "currentColor",
      opacity: 0.3
    }
  }, ownerState.variant === "buffer" && {
    backgroundColor: "transparent"
  }, ownerState.variant === "query" && {
    transform: "rotate(180deg)"
  }));
  var LinearProgressDashed = styled_default("span", {
    name: "MuiLinearProgress",
    slot: "Dashed",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.dashed, styles7[`dashedColor${capitalize_default(ownerState.color)}`]];
    }
  })(({
    ownerState,
    theme
  }) => {
    const backgroundColor = getColorShade(theme, ownerState.color);
    return _extends({
      position: "absolute",
      marginTop: 0,
      height: "100%",
      width: "100%"
    }, ownerState.color === "inherit" && {
      opacity: 0.3
    }, {
      backgroundImage: `radial-gradient(${backgroundColor} 0%, ${backgroundColor} 16%, transparent 42%)`,
      backgroundSize: "10px 10px",
      backgroundPosition: "0 -23px"
    });
  }, (0, import_system33.css)(_t43 || (_t43 = _3`
    animation: ${0} 3s infinite linear;
  `), bufferKeyframe));
  var LinearProgressBar1 = styled_default("span", {
    name: "MuiLinearProgress",
    slot: "Bar1",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.bar, styles7[`barColor${capitalize_default(ownerState.color)}`], (ownerState.variant === "indeterminate" || ownerState.variant === "query") && styles7.bar1Indeterminate, ownerState.variant === "determinate" && styles7.bar1Determinate, ownerState.variant === "buffer" && styles7.bar1Buffer];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    width: "100%",
    position: "absolute",
    left: 0,
    bottom: 0,
    top: 0,
    transition: "transform 0.2s linear",
    transformOrigin: "left",
    backgroundColor: ownerState.color === "inherit" ? "currentColor" : (theme.vars || theme).palette[ownerState.color].main
  }, ownerState.variant === "determinate" && {
    transition: `transform .${TRANSITION_DURATION}s linear`
  }, ownerState.variant === "buffer" && {
    zIndex: 1,
    transition: `transform .${TRANSITION_DURATION}s linear`
  }), ({
    ownerState
  }) => (ownerState.variant === "indeterminate" || ownerState.variant === "query") && (0, import_system33.css)(_t52 || (_t52 = _3`
      width: auto;
      animation: ${0} 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;
    `), indeterminate1Keyframe));
  var LinearProgressBar2 = styled_default("span", {
    name: "MuiLinearProgress",
    slot: "Bar2",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.bar, styles7[`barColor${capitalize_default(ownerState.color)}`], (ownerState.variant === "indeterminate" || ownerState.variant === "query") && styles7.bar2Indeterminate, ownerState.variant === "buffer" && styles7.bar2Buffer];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    width: "100%",
    position: "absolute",
    left: 0,
    bottom: 0,
    top: 0,
    transition: "transform 0.2s linear",
    transformOrigin: "left"
  }, ownerState.variant !== "buffer" && {
    backgroundColor: ownerState.color === "inherit" ? "currentColor" : (theme.vars || theme).palette[ownerState.color].main
  }, ownerState.color === "inherit" && {
    opacity: 0.3
  }, ownerState.variant === "buffer" && {
    backgroundColor: getColorShade(theme, ownerState.color),
    transition: `transform .${TRANSITION_DURATION}s linear`
  }), ({
    ownerState
  }) => (ownerState.variant === "indeterminate" || ownerState.variant === "query") && (0, import_system33.css)(_t62 || (_t62 = _3`
      width: auto;
      animation: ${0} 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) 1.15s infinite;
    `), indeterminate2Keyframe));
  var LinearProgress = /* @__PURE__ */ React174.forwardRef(function LinearProgress2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiLinearProgress"
    });
    const {
      className,
      color = "primary",
      value,
      valueBuffer,
      variant = "indeterminate"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded105);
    const ownerState = _extends({}, props, {
      color,
      variant
    });
    const classes = useUtilityClasses81(ownerState);
    const theme = useTheme4();
    const rootProps = {};
    const inlineStyles = {
      bar1: {},
      bar2: {}
    };
    if (variant === "determinate" || variant === "buffer") {
      if (value !== void 0) {
        rootProps["aria-valuenow"] = Math.round(value);
        rootProps["aria-valuemin"] = 0;
        rootProps["aria-valuemax"] = 100;
        let transform2 = value - 100;
        if (theme.direction === "rtl") {
          transform2 = -transform2;
        }
        inlineStyles.bar1.transform = `translateX(${transform2}%)`;
      } else if (true) {
        console.error("MUI: You need to provide a value prop when using the determinate or buffer variant of LinearProgress .");
      }
    }
    if (variant === "buffer") {
      if (valueBuffer !== void 0) {
        let transform2 = (valueBuffer || 0) - 100;
        if (theme.direction === "rtl") {
          transform2 = -transform2;
        }
        inlineStyles.bar2.transform = `translateX(${transform2}%)`;
      } else if (true) {
        console.error("MUI: You need to provide a valueBuffer prop when using the buffer variant of LinearProgress.");
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime151.jsxs)(LinearProgressRoot, _extends({
      className: clsx_default(classes.root, className),
      ownerState,
      role: "progressbar"
    }, rootProps, {
      ref
    }, other, {
      children: [variant === "buffer" ? /* @__PURE__ */ (0, import_jsx_runtime150.jsx)(LinearProgressDashed, {
        className: classes.dashed,
        ownerState
      }) : null, /* @__PURE__ */ (0, import_jsx_runtime150.jsx)(LinearProgressBar1, {
        className: classes.bar1,
        ownerState,
        style: inlineStyles.bar1
      }), variant === "determinate" ? null : /* @__PURE__ */ (0, import_jsx_runtime150.jsx)(LinearProgressBar2, {
        className: classes.bar2,
        ownerState,
        style: inlineStyles.bar2
      })]
    }));
  });
  true ? LinearProgress.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types108.default.object,
    /**
     * @ignore
     */
    className: import_prop_types108.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'primary'
     */
    color: import_prop_types108.default.oneOfType([import_prop_types108.default.oneOf(["inherit", "primary", "secondary"]), import_prop_types108.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types108.default.oneOfType([import_prop_types108.default.arrayOf(import_prop_types108.default.oneOfType([import_prop_types108.default.func, import_prop_types108.default.object, import_prop_types108.default.bool])), import_prop_types108.default.func, import_prop_types108.default.object]),
    /**
     * The value of the progress indicator for the determinate and buffer variants.
     * Value between 0 and 100.
     */
    value: import_prop_types108.default.number,
    /**
     * The value for the buffer variant.
     * Value between 0 and 100.
     */
    valueBuffer: import_prop_types108.default.number,
    /**
     * The variant to use.
     * Use indeterminate or query when there is no progress value.
     * @default 'indeterminate'
     */
    variant: import_prop_types108.default.oneOf(["buffer", "determinate", "indeterminate", "query"])
  } : void 0;
  var LinearProgress_default = LinearProgress;

  // node_modules/@mui/material/Link/Link.js
  init_extends();
  var React175 = __toESM(require_react());
  var import_prop_types109 = __toESM(require_prop_types());
  var import_utils194 = __toESM(require_utils());
  var import_composeClasses79 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/Link/linkClasses.js
  var import_utils193 = __toESM(require_utils());
  var import_generateUtilityClass87 = __toESM(require_generateUtilityClass3());
  function getLinkUtilityClass(slot) {
    return (0, import_generateUtilityClass87.default)("MuiLink", slot);
  }
  var linkClasses = (0, import_utils193.unstable_generateUtilityClasses)("MuiLink", ["root", "underlineNone", "underlineHover", "underlineAlways", "button", "focusVisible"]);
  var linkClasses_default = linkClasses;

  // node_modules/@mui/material/Link/getTextDecoration.js
  var import_system34 = __toESM(require_system());
  var colorTransformations2 = {
    primary: "primary.main",
    textPrimary: "text.primary",
    secondary: "secondary.main",
    textSecondary: "text.secondary",
    error: "error.main"
  };
  var transformDeprecatedColors2 = (color) => {
    return colorTransformations2[color] || color;
  };
  var getTextDecoration = ({
    theme,
    ownerState
  }) => {
    const transformedColor = transformDeprecatedColors2(ownerState.color);
    const color = (0, import_system34.getPath)(theme, `palette.${transformedColor}`, false) || ownerState.color;
    const channelColor = (0, import_system34.getPath)(theme, `palette.${transformedColor}Channel`);
    if ("vars" in theme && channelColor) {
      return `rgba(${channelColor} / 0.4)`;
    }
    return (0, import_system34.alpha)(color, 0.4);
  };
  var getTextDecoration_default = getTextDecoration;

  // node_modules/@mui/material/Link/Link.js
  var import_jsx_runtime152 = __toESM(require_jsx_runtime());
  var _excluded106 = ["className", "color", "component", "onBlur", "onFocus", "TypographyClasses", "underline", "variant", "sx"];
  var useUtilityClasses82 = (ownerState) => {
    const {
      classes,
      component,
      focusVisible,
      underline
    } = ownerState;
    const slots = {
      root: ["root", `underline${capitalize_default(underline)}`, component === "button" && "button", focusVisible && "focusVisible"]
    };
    return (0, import_composeClasses79.unstable_composeClasses)(slots, getLinkUtilityClass, classes);
  };
  var LinkRoot = styled_default(Typography_default, {
    name: "MuiLink",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, styles7[`underline${capitalize_default(ownerState.underline)}`], ownerState.component === "button" && styles7.button];
    }
  })(({
    theme,
    ownerState
  }) => {
    return _extends({}, ownerState.underline === "none" && {
      textDecoration: "none"
    }, ownerState.underline === "hover" && {
      textDecoration: "none",
      "&:hover": {
        textDecoration: "underline"
      }
    }, ownerState.underline === "always" && _extends({
      textDecoration: "underline"
    }, ownerState.color !== "inherit" && {
      textDecorationColor: getTextDecoration_default({
        theme,
        ownerState
      })
    }, {
      "&:hover": {
        textDecorationColor: "inherit"
      }
    }), ownerState.component === "button" && {
      position: "relative",
      WebkitTapHighlightColor: "transparent",
      backgroundColor: "transparent",
      // Reset default value
      // We disable the focus ring for mouse, touch and keyboard users.
      outline: 0,
      border: 0,
      margin: 0,
      // Remove the margin in Safari
      borderRadius: 0,
      padding: 0,
      // Remove the padding in Firefox
      cursor: "pointer",
      userSelect: "none",
      verticalAlign: "middle",
      MozAppearance: "none",
      // Reset
      WebkitAppearance: "none",
      // Reset
      "&::-moz-focus-inner": {
        borderStyle: "none"
        // Remove Firefox dotted outline.
      },
      [`&.${linkClasses_default.focusVisible}`]: {
        outline: "auto"
      }
    });
  });
  var Link = /* @__PURE__ */ React175.forwardRef(function Link2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiLink"
    });
    const {
      className,
      color = "primary",
      component = "a",
      onBlur,
      onFocus,
      TypographyClasses,
      underline = "always",
      variant = "inherit",
      sx
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded106);
    const {
      isFocusVisibleRef,
      onBlur: handleBlurVisible,
      onFocus: handleFocusVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible_default();
    const [focusVisible, setFocusVisible] = React175.useState(false);
    const handlerRef = useForkRef_default(ref, focusVisibleRef);
    const handleBlur2 = (event) => {
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setFocusVisible(false);
      }
      if (onBlur) {
        onBlur(event);
      }
    };
    const handleFocus = (event) => {
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        setFocusVisible(true);
      }
      if (onFocus) {
        onFocus(event);
      }
    };
    const ownerState = _extends({}, props, {
      color,
      component,
      focusVisible,
      underline,
      variant
    });
    const classes = useUtilityClasses82(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(LinkRoot, _extends({
      color,
      className: clsx_default(classes.root, className),
      classes: TypographyClasses,
      component,
      onBlur: handleBlur2,
      onFocus: handleFocus,
      ref: handlerRef,
      ownerState,
      variant,
      sx: [...!Object.keys(colorTransformations2).includes(color) ? [{
        color
      }] : [], ...Array.isArray(sx) ? sx : [sx]]
    }, other));
  });
  true ? Link.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types109.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types109.default.object,
    /**
     * @ignore
     */
    className: import_prop_types109.default.string,
    /**
     * The color of the link.
     * @default 'primary'
     */
    color: import_prop_types109.default.any,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_utils194.elementTypeAcceptingRef,
    /**
     * @ignore
     */
    onBlur: import_prop_types109.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types109.default.func,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types109.default.oneOfType([import_prop_types109.default.arrayOf(import_prop_types109.default.oneOfType([import_prop_types109.default.func, import_prop_types109.default.object, import_prop_types109.default.bool])), import_prop_types109.default.func, import_prop_types109.default.object]),
    /**
     * `classes` prop applied to the [`Typography`](/material-ui/api/typography/) element.
     */
    TypographyClasses: import_prop_types109.default.object,
    /**
     * Controls when the link should have an underline.
     * @default 'always'
     */
    underline: import_prop_types109.default.oneOf(["always", "hover", "none"]),
    /**
     * Applies the theme typography styles.
     * @default 'inherit'
     */
    variant: import_prop_types109.default.oneOfType([import_prop_types109.default.oneOf(["body1", "body2", "button", "caption", "h1", "h2", "h3", "h4", "h5", "h6", "inherit", "overline", "subtitle1", "subtitle2"]), import_prop_types109.default.string])
  } : void 0;
  var Link_default = Link;

  // node_modules/@mui/material/List/List.js
  init_extends();
  var React177 = __toESM(require_react());
  var import_prop_types110 = __toESM(require_prop_types());
  var import_composeClasses80 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/List/ListContext.js
  var React176 = __toESM(require_react());
  var ListContext2 = /* @__PURE__ */ React176.createContext({});
  if (true) {
    ListContext2.displayName = "ListContext";
  }
  var ListContext_default = ListContext2;

  // node_modules/@mui/material/List/listClasses.js
  var import_utils195 = __toESM(require_utils());
  var import_generateUtilityClass88 = __toESM(require_generateUtilityClass3());
  function getListUtilityClass(slot) {
    return (0, import_generateUtilityClass88.default)("MuiList", slot);
  }
  var listClasses = (0, import_utils195.unstable_generateUtilityClasses)("MuiList", ["root", "padding", "dense", "subheader"]);
  var listClasses_default = listClasses;

  // node_modules/@mui/material/List/List.js
  var import_jsx_runtime153 = __toESM(require_jsx_runtime());
  var import_jsx_runtime154 = __toESM(require_jsx_runtime());
  var _excluded107 = ["children", "className", "component", "dense", "disablePadding", "subheader"];
  var useUtilityClasses83 = (ownerState) => {
    const {
      classes,
      disablePadding,
      dense,
      subheader
    } = ownerState;
    const slots = {
      root: ["root", !disablePadding && "padding", dense && "dense", subheader && "subheader"]
    };
    return (0, import_composeClasses80.unstable_composeClasses)(slots, getListUtilityClass, classes);
  };
  var ListRoot = styled_default("ul", {
    name: "MuiList",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, !ownerState.disablePadding && styles7.padding, ownerState.dense && styles7.dense, ownerState.subheader && styles7.subheader];
    }
  })(({
    ownerState
  }) => _extends({
    listStyle: "none",
    margin: 0,
    padding: 0,
    position: "relative"
  }, !ownerState.disablePadding && {
    paddingTop: 8,
    paddingBottom: 8
  }, ownerState.subheader && {
    paddingTop: 0
  }));
  var List = /* @__PURE__ */ React177.forwardRef(function List2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiList"
    });
    const {
      children,
      className,
      component = "ul",
      dense = false,
      disablePadding = false,
      subheader
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded107);
    const context = React177.useMemo(() => ({
      dense
    }), [dense]);
    const ownerState = _extends({}, props, {
      component,
      dense,
      disablePadding
    });
    const classes = useUtilityClasses83(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(ListContext_default.Provider, {
      value: context,
      children: /* @__PURE__ */ (0, import_jsx_runtime153.jsxs)(ListRoot, _extends({
        as: component,
        className: clsx_default(classes.root, className),
        ref,
        ownerState
      }, other, {
        children: [subheader, children]
      }))
    });
  });
  true ? List.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types110.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types110.default.object,
    /**
     * @ignore
     */
    className: import_prop_types110.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types110.default.elementType,
    /**
     * If `true`, compact vertical padding designed for keyboard and mouse input is used for
     * the list and list items.
     * The prop is available to descendant components as the `dense` context.
     * @default false
     */
    dense: import_prop_types110.default.bool,
    /**
     * If `true`, vertical padding is removed from the list.
     * @default false
     */
    disablePadding: import_prop_types110.default.bool,
    /**
     * The content of the subheader, normally `ListSubheader`.
     */
    subheader: import_prop_types110.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types110.default.oneOfType([import_prop_types110.default.arrayOf(import_prop_types110.default.oneOfType([import_prop_types110.default.func, import_prop_types110.default.object, import_prop_types110.default.bool])), import_prop_types110.default.func, import_prop_types110.default.object])
  } : void 0;
  var List_default = List;

  // node_modules/@mui/material/ListItem/ListItem.js
  init_extends();
  var React180 = __toESM(require_react());
  var import_prop_types113 = __toESM(require_prop_types());
  var import_utils199 = __toESM(require_utils());
  var import_system36 = __toESM(require_system());

  // node_modules/@mui/material/ListItem/listItemClasses.js
  var import_utils196 = __toESM(require_utils());
  var import_generateUtilityClass89 = __toESM(require_generateUtilityClass3());
  function getListItemUtilityClass(slot) {
    return (0, import_generateUtilityClass89.default)("MuiListItem", slot);
  }
  var listItemClasses = (0, import_utils196.unstable_generateUtilityClasses)("MuiListItem", ["root", "container", "focusVisible", "dense", "alignItemsFlexStart", "disabled", "divider", "gutters", "padding", "button", "secondaryAction", "selected"]);
  var listItemClasses_default = listItemClasses;

  // node_modules/@mui/material/ListItemButton/ListItemButton.js
  init_extends();
  var React178 = __toESM(require_react());
  var import_prop_types111 = __toESM(require_prop_types());
  var import_composeClasses81 = __toESM(require_composeClasses3());
  var import_system35 = __toESM(require_system());

  // node_modules/@mui/material/ListItemButton/listItemButtonClasses.js
  var import_utils197 = __toESM(require_utils());
  var import_generateUtilityClass90 = __toESM(require_generateUtilityClass3());
  function getListItemButtonUtilityClass(slot) {
    return (0, import_generateUtilityClass90.default)("MuiListItemButton", slot);
  }
  var listItemButtonClasses = (0, import_utils197.unstable_generateUtilityClasses)("MuiListItemButton", ["root", "focusVisible", "dense", "alignItemsFlexStart", "disabled", "divider", "gutters", "selected"]);
  var listItemButtonClasses_default = listItemButtonClasses;

  // node_modules/@mui/material/ListItemButton/ListItemButton.js
  var import_jsx_runtime155 = __toESM(require_jsx_runtime());
  var _excluded108 = ["alignItems", "autoFocus", "component", "children", "dense", "disableGutters", "divider", "focusVisibleClassName", "selected", "className"];
  var overridesResolver4 = (props, styles7) => {
    const {
      ownerState
    } = props;
    return [styles7.root, ownerState.dense && styles7.dense, ownerState.alignItems === "flex-start" && styles7.alignItemsFlexStart, ownerState.divider && styles7.divider, !ownerState.disableGutters && styles7.gutters];
  };
  var useUtilityClasses84 = (ownerState) => {
    const {
      alignItems,
      classes,
      dense,
      disabled,
      disableGutters,
      divider,
      selected
    } = ownerState;
    const slots = {
      root: ["root", dense && "dense", !disableGutters && "gutters", divider && "divider", disabled && "disabled", alignItems === "flex-start" && "alignItemsFlexStart", selected && "selected"]
    };
    const composedClasses = (0, import_composeClasses81.unstable_composeClasses)(slots, getListItemButtonUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var ListItemButtonRoot = styled_default(ButtonBase_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiListItemButton",
    slot: "Root",
    overridesResolver: overridesResolver4
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "flex",
    flexGrow: 1,
    justifyContent: "flex-start",
    alignItems: "center",
    position: "relative",
    textDecoration: "none",
    minWidth: 0,
    boxSizing: "border-box",
    textAlign: "left",
    paddingTop: 8,
    paddingBottom: 8,
    transition: theme.transitions.create("background-color", {
      duration: theme.transitions.duration.shortest
    }),
    "&:hover": {
      textDecoration: "none",
      backgroundColor: (theme.vars || theme).palette.action.hover,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    },
    [`&.${listItemButtonClasses_default.selected}`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, import_system35.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity),
      [`&.${listItemButtonClasses_default.focusVisible}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, import_system35.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
      }
    },
    [`&.${listItemButtonClasses_default.selected}:hover`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : (0, import_system35.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, import_system35.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity)
      }
    },
    [`&.${listItemButtonClasses_default.focusVisible}`]: {
      backgroundColor: (theme.vars || theme).palette.action.focus
    },
    [`&.${listItemButtonClasses_default.disabled}`]: {
      opacity: (theme.vars || theme).palette.action.disabledOpacity
    }
  }, ownerState.divider && {
    borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
    backgroundClip: "padding-box"
  }, ownerState.alignItems === "flex-start" && {
    alignItems: "flex-start"
  }, !ownerState.disableGutters && {
    paddingLeft: 16,
    paddingRight: 16
  }, ownerState.dense && {
    paddingTop: 4,
    paddingBottom: 4
  }));
  var ListItemButton = /* @__PURE__ */ React178.forwardRef(function ListItemButton2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiListItemButton"
    });
    const {
      alignItems = "center",
      autoFocus = false,
      component = "div",
      children,
      dense = false,
      disableGutters = false,
      divider = false,
      focusVisibleClassName,
      selected = false,
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded108);
    const context = React178.useContext(ListContext_default);
    const childContext = React178.useMemo(() => ({
      dense: dense || context.dense || false,
      alignItems,
      disableGutters
    }), [alignItems, context.dense, dense, disableGutters]);
    const listItemRef = React178.useRef(null);
    useEnhancedEffect_default(() => {
      if (autoFocus) {
        if (listItemRef.current) {
          listItemRef.current.focus();
        } else if (true) {
          console.error("MUI: Unable to set focus to a ListItemButton whose component has not been rendered.");
        }
      }
    }, [autoFocus]);
    const ownerState = _extends({}, props, {
      alignItems,
      dense: childContext.dense,
      disableGutters,
      divider,
      selected
    });
    const classes = useUtilityClasses84(ownerState);
    const handleRef = useForkRef_default(listItemRef, ref);
    return /* @__PURE__ */ (0, import_jsx_runtime155.jsx)(ListContext_default.Provider, {
      value: childContext,
      children: /* @__PURE__ */ (0, import_jsx_runtime155.jsx)(ListItemButtonRoot, _extends({
        ref: handleRef,
        href: other.href || other.to,
        component: (other.href || other.to) && component === "div" ? "button" : component,
        focusVisibleClassName: clsx_default(classes.focusVisible, focusVisibleClassName),
        ownerState,
        className: clsx_default(classes.root, className)
      }, other, {
        classes,
        children
      }))
    });
  });
  true ? ListItemButton.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Defines the `align-items` style property.
     * @default 'center'
     */
    alignItems: import_prop_types111.default.oneOf(["center", "flex-start"]),
    /**
     * If `true`, the list item is focused during the first mount.
     * Focus will also be triggered if the value changes from false to true.
     * @default false
     */
    autoFocus: import_prop_types111.default.bool,
    /**
     * The content of the component if a `ListItemSecondaryAction` is used it must
     * be the last child.
     */
    children: import_prop_types111.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types111.default.object,
    /**
     * @ignore
     */
    className: import_prop_types111.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types111.default.elementType,
    /**
     * If `true`, compact vertical padding designed for keyboard and mouse input is used.
     * The prop defaults to the value inherited from the parent List component.
     * @default false
     */
    dense: import_prop_types111.default.bool,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types111.default.bool,
    /**
     * If `true`, the left and right padding is removed.
     * @default false
     */
    disableGutters: import_prop_types111.default.bool,
    /**
     * If `true`, a 1px light border is added to the bottom of the list item.
     * @default false
     */
    divider: import_prop_types111.default.bool,
    /**
     * This prop can help identify which element has keyboard focus.
     * The class name will be applied when the element gains the focus through keyboard interaction.
     * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
     * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
     * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
     * if needed.
     */
    focusVisibleClassName: import_prop_types111.default.string,
    /**
     * @ignore
     */
    href: import_prop_types111.default.string,
    /**
     * Use to apply selected styling.
     * @default false
     */
    selected: import_prop_types111.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types111.default.oneOfType([import_prop_types111.default.arrayOf(import_prop_types111.default.oneOfType([import_prop_types111.default.func, import_prop_types111.default.object, import_prop_types111.default.bool])), import_prop_types111.default.func, import_prop_types111.default.object])
  } : void 0;
  var ListItemButton_default = ListItemButton;

  // node_modules/@mui/material/ListItemSecondaryAction/ListItemSecondaryAction.js
  init_extends();
  var React179 = __toESM(require_react());
  var import_prop_types112 = __toESM(require_prop_types());
  var import_composeClasses82 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/ListItemSecondaryAction/listItemSecondaryActionClasses.js
  var import_utils198 = __toESM(require_utils());
  var import_generateUtilityClass91 = __toESM(require_generateUtilityClass3());
  function getListItemSecondaryActionClassesUtilityClass(slot) {
    return (0, import_generateUtilityClass91.default)("MuiListItemSecondaryAction", slot);
  }
  var listItemSecondaryActionClasses = (0, import_utils198.unstable_generateUtilityClasses)("MuiListItemSecondaryAction", ["root", "disableGutters"]);
  var listItemSecondaryActionClasses_default = listItemSecondaryActionClasses;

  // node_modules/@mui/material/ListItemSecondaryAction/ListItemSecondaryAction.js
  var import_jsx_runtime156 = __toESM(require_jsx_runtime());
  var _excluded109 = ["className"];
  var useUtilityClasses85 = (ownerState) => {
    const {
      disableGutters,
      classes
    } = ownerState;
    const slots = {
      root: ["root", disableGutters && "disableGutters"]
    };
    return (0, import_composeClasses82.unstable_composeClasses)(slots, getListItemSecondaryActionClassesUtilityClass, classes);
  };
  var ListItemSecondaryActionRoot = styled_default("div", {
    name: "MuiListItemSecondaryAction",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, ownerState.disableGutters && styles7.disableGutters];
    }
  })(({
    ownerState
  }) => _extends({
    position: "absolute",
    right: 16,
    top: "50%",
    transform: "translateY(-50%)"
  }, ownerState.disableGutters && {
    right: 0
  }));
  var ListItemSecondaryAction = /* @__PURE__ */ React179.forwardRef(function ListItemSecondaryAction2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiListItemSecondaryAction"
    });
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded109);
    const context = React179.useContext(ListContext_default);
    const ownerState = _extends({}, props, {
      disableGutters: context.disableGutters
    });
    const classes = useUtilityClasses85(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(ListItemSecondaryActionRoot, _extends({
      className: clsx_default(classes.root, className),
      ownerState,
      ref
    }, other));
  });
  true ? ListItemSecondaryAction.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component, normally an `IconButton` or selection control.
     */
    children: import_prop_types112.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types112.default.object,
    /**
     * @ignore
     */
    className: import_prop_types112.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types112.default.oneOfType([import_prop_types112.default.arrayOf(import_prop_types112.default.oneOfType([import_prop_types112.default.func, import_prop_types112.default.object, import_prop_types112.default.bool])), import_prop_types112.default.func, import_prop_types112.default.object])
  } : void 0;
  ListItemSecondaryAction.muiName = "ListItemSecondaryAction";
  var ListItemSecondaryAction_default = ListItemSecondaryAction;

  // node_modules/@mui/material/ListItem/ListItem.js
  var import_jsx_runtime157 = __toESM(require_jsx_runtime());
  var import_jsx_runtime158 = __toESM(require_jsx_runtime());
  var _excluded110 = ["className"];
  var _excluded213 = ["alignItems", "autoFocus", "button", "children", "className", "component", "components", "componentsProps", "ContainerComponent", "ContainerProps", "dense", "disabled", "disableGutters", "disablePadding", "divider", "focusVisibleClassName", "secondaryAction", "selected", "slotProps", "slots"];
  var overridesResolver5 = (props, styles7) => {
    const {
      ownerState
    } = props;
    return [styles7.root, ownerState.dense && styles7.dense, ownerState.alignItems === "flex-start" && styles7.alignItemsFlexStart, ownerState.divider && styles7.divider, !ownerState.disableGutters && styles7.gutters, !ownerState.disablePadding && styles7.padding, ownerState.button && styles7.button, ownerState.hasSecondaryAction && styles7.secondaryAction];
  };
  var useUtilityClasses86 = (ownerState) => {
    const {
      alignItems,
      button,
      classes,
      dense,
      disabled,
      disableGutters,
      disablePadding,
      divider,
      hasSecondaryAction,
      selected
    } = ownerState;
    const slots = {
      root: ["root", dense && "dense", !disableGutters && "gutters", !disablePadding && "padding", divider && "divider", disabled && "disabled", button && "button", alignItems === "flex-start" && "alignItemsFlexStart", hasSecondaryAction && "secondaryAction", selected && "selected"],
      container: ["container"]
    };
    return (0, base_exports.unstable_composeClasses)(slots, getListItemUtilityClass, classes);
  };
  var ListItemRoot = styled_default("div", {
    name: "MuiListItem",
    slot: "Root",
    overridesResolver: overridesResolver5
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "flex",
    justifyContent: "flex-start",
    alignItems: "center",
    position: "relative",
    textDecoration: "none",
    width: "100%",
    boxSizing: "border-box",
    textAlign: "left"
  }, !ownerState.disablePadding && _extends({
    paddingTop: 8,
    paddingBottom: 8
  }, ownerState.dense && {
    paddingTop: 4,
    paddingBottom: 4
  }, !ownerState.disableGutters && {
    paddingLeft: 16,
    paddingRight: 16
  }, !!ownerState.secondaryAction && {
    // Add some space to avoid collision as `ListItemSecondaryAction`
    // is absolutely positioned.
    paddingRight: 48
  }), !!ownerState.secondaryAction && {
    [`& > .${listItemButtonClasses_default.root}`]: {
      paddingRight: 48
    }
  }, {
    [`&.${listItemClasses_default.focusVisible}`]: {
      backgroundColor: (theme.vars || theme).palette.action.focus
    },
    [`&.${listItemClasses_default.selected}`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, import_system36.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity),
      [`&.${listItemClasses_default.focusVisible}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, import_system36.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
      }
    },
    [`&.${listItemClasses_default.disabled}`]: {
      opacity: (theme.vars || theme).palette.action.disabledOpacity
    }
  }, ownerState.alignItems === "flex-start" && {
    alignItems: "flex-start"
  }, ownerState.divider && {
    borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
    backgroundClip: "padding-box"
  }, ownerState.button && {
    transition: theme.transitions.create("background-color", {
      duration: theme.transitions.duration.shortest
    }),
    "&:hover": {
      textDecoration: "none",
      backgroundColor: (theme.vars || theme).palette.action.hover,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    },
    [`&.${listItemClasses_default.selected}:hover`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : (0, import_system36.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, import_system36.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity)
      }
    }
  }, ownerState.hasSecondaryAction && {
    // Add some space to avoid collision as `ListItemSecondaryAction`
    // is absolutely positioned.
    paddingRight: 48
  }));
  var ListItemContainer = styled_default("li", {
    name: "MuiListItem",
    slot: "Container",
    overridesResolver: (props, styles7) => styles7.container
  })({
    position: "relative"
  });
  var ListItem = /* @__PURE__ */ React180.forwardRef(function ListItem2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiListItem"
    });
    const {
      alignItems = "center",
      autoFocus = false,
      button = false,
      children: childrenProp,
      className,
      component: componentProp,
      components = {},
      componentsProps = {},
      ContainerComponent = "li",
      ContainerProps: {
        className: ContainerClassName
      } = {},
      dense = false,
      disabled = false,
      disableGutters = false,
      disablePadding = false,
      divider = false,
      focusVisibleClassName,
      secondaryAction,
      selected = false,
      slotProps = {},
      slots = {}
    } = props, ContainerProps = _objectWithoutPropertiesLoose(props.ContainerProps, _excluded110), other = _objectWithoutPropertiesLoose(props, _excluded213);
    const context = React180.useContext(ListContext_default);
    const childContext = React180.useMemo(() => ({
      dense: dense || context.dense || false,
      alignItems,
      disableGutters
    }), [alignItems, context.dense, dense, disableGutters]);
    const listItemRef = React180.useRef(null);
    useEnhancedEffect_default(() => {
      if (autoFocus) {
        if (listItemRef.current) {
          listItemRef.current.focus();
        } else if (true) {
          console.error("MUI: Unable to set focus to a ListItem whose component has not been rendered.");
        }
      }
    }, [autoFocus]);
    const children = React180.Children.toArray(childrenProp);
    const hasSecondaryAction = children.length && isMuiElement_default(children[children.length - 1], ["ListItemSecondaryAction"]);
    const ownerState = _extends({}, props, {
      alignItems,
      autoFocus,
      button,
      dense: childContext.dense,
      disabled,
      disableGutters,
      disablePadding,
      divider,
      hasSecondaryAction,
      selected
    });
    const classes = useUtilityClasses86(ownerState);
    const handleRef = useForkRef_default(listItemRef, ref);
    const Root = slots.root || components.Root || ListItemRoot;
    const rootProps = slotProps.root || componentsProps.root || {};
    const componentProps = _extends({
      className: clsx_default(classes.root, rootProps.className, className),
      disabled
    }, other);
    let Component = componentProp || "li";
    if (button) {
      componentProps.component = componentProp || "div";
      componentProps.focusVisibleClassName = clsx_default(listItemClasses_default.focusVisible, focusVisibleClassName);
      Component = ButtonBase_default;
    }
    if (hasSecondaryAction) {
      Component = !componentProps.component && !componentProp ? "div" : Component;
      if (ContainerComponent === "li") {
        if (Component === "li") {
          Component = "div";
        } else if (componentProps.component === "li") {
          componentProps.component = "div";
        }
      }
      return /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(ListContext_default.Provider, {
        value: childContext,
        children: /* @__PURE__ */ (0, import_jsx_runtime158.jsxs)(ListItemContainer, _extends({
          as: ContainerComponent,
          className: clsx_default(classes.container, ContainerClassName),
          ref: handleRef,
          ownerState
        }, ContainerProps, {
          children: [/* @__PURE__ */ (0, import_jsx_runtime157.jsx)(Root, _extends({}, rootProps, !isHostComponent(Root) && {
            as: Component,
            ownerState: _extends({}, ownerState, rootProps.ownerState)
          }, componentProps, {
            children
          })), children.pop()]
        }))
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(ListContext_default.Provider, {
      value: childContext,
      children: /* @__PURE__ */ (0, import_jsx_runtime158.jsxs)(Root, _extends({}, rootProps, {
        as: Component,
        ref: handleRef
      }, !isHostComponent(Root) && {
        ownerState: _extends({}, ownerState, rootProps.ownerState)
      }, componentProps, {
        children: [children, secondaryAction && /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(ListItemSecondaryAction_default, {
          children: secondaryAction
        })]
      }))
    });
  });
  true ? ListItem.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Defines the `align-items` style property.
     * @default 'center'
     */
    alignItems: import_prop_types113.default.oneOf(["center", "flex-start"]),
    /**
     * If `true`, the list item is focused during the first mount.
     * Focus will also be triggered if the value changes from false to true.
     * @default false
     * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
     */
    autoFocus: import_prop_types113.default.bool,
    /**
     * If `true`, the list item is a button (using `ButtonBase`). Props intended
     * for `ButtonBase` can then be applied to `ListItem`.
     * @default false
     * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
     */
    button: import_prop_types113.default.bool,
    /**
     * The content of the component if a `ListItemSecondaryAction` is used it must
     * be the last child.
     */
    children: (0, import_utils199.chainPropTypes)(import_prop_types113.default.node, (props) => {
      const children = React180.Children.toArray(props.children);
      let secondaryActionIndex = -1;
      for (let i = children.length - 1; i >= 0; i -= 1) {
        const child = children[i];
        if (isMuiElement_default(child, ["ListItemSecondaryAction"])) {
          secondaryActionIndex = i;
          break;
        }
      }
      if (secondaryActionIndex !== -1 && secondaryActionIndex !== children.length - 1) {
        return new Error("MUI: You used an element after ListItemSecondaryAction. For ListItem to detect that it has a secondary action you must pass it as the last child to ListItem.");
      }
      return null;
    }),
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types113.default.object,
    /**
     * @ignore
     */
    className: import_prop_types113.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types113.default.elementType,
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types113.default.shape({
      Root: import_prop_types113.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types113.default.shape({
      root: import_prop_types113.default.object
    }),
    /**
     * The container component used when a `ListItemSecondaryAction` is the last child.
     * @default 'li'
     * @deprecated
     */
    ContainerComponent: import_utils199.elementTypeAcceptingRef,
    /**
     * Props applied to the container component if used.
     * @default {}
     * @deprecated
     */
    ContainerProps: import_prop_types113.default.object,
    /**
     * If `true`, compact vertical padding designed for keyboard and mouse input is used.
     * The prop defaults to the value inherited from the parent List component.
     * @default false
     */
    dense: import_prop_types113.default.bool,
    /**
     * If `true`, the component is disabled.
     * @default false
     * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
     */
    disabled: import_prop_types113.default.bool,
    /**
     * If `true`, the left and right padding is removed.
     * @default false
     */
    disableGutters: import_prop_types113.default.bool,
    /**
     * If `true`, all padding is removed.
     * @default false
     */
    disablePadding: import_prop_types113.default.bool,
    /**
     * If `true`, a 1px light border is added to the bottom of the list item.
     * @default false
     */
    divider: import_prop_types113.default.bool,
    /**
     * @ignore
     */
    focusVisibleClassName: import_prop_types113.default.string,
    /**
     * The element to display at the end of ListItem.
     */
    secondaryAction: import_prop_types113.default.node,
    /**
     * Use to apply selected styling.
     * @default false
     * @deprecated checkout [ListItemButton](/material-ui/api/list-item-button/) instead
     */
    selected: import_prop_types113.default.bool,
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types113.default.shape({
      root: import_prop_types113.default.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types113.default.shape({
      root: import_prop_types113.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types113.default.oneOfType([import_prop_types113.default.arrayOf(import_prop_types113.default.oneOfType([import_prop_types113.default.func, import_prop_types113.default.object, import_prop_types113.default.bool])), import_prop_types113.default.func, import_prop_types113.default.object])
  } : void 0;
  var ListItem_default = ListItem;

  // node_modules/@mui/material/ListItemAvatar/ListItemAvatar.js
  init_extends();
  var React181 = __toESM(require_react());
  var import_prop_types114 = __toESM(require_prop_types());
  var import_composeClasses83 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/ListItemAvatar/listItemAvatarClasses.js
  var import_utils200 = __toESM(require_utils());
  var import_generateUtilityClass92 = __toESM(require_generateUtilityClass3());
  function getListItemAvatarUtilityClass(slot) {
    return (0, import_generateUtilityClass92.default)("MuiListItemAvatar", slot);
  }
  var listItemAvatarClasses = (0, import_utils200.unstable_generateUtilityClasses)("MuiListItemAvatar", ["root", "alignItemsFlexStart"]);
  var listItemAvatarClasses_default = listItemAvatarClasses;

  // node_modules/@mui/material/ListItemAvatar/ListItemAvatar.js
  var import_jsx_runtime159 = __toESM(require_jsx_runtime());
  var _excluded111 = ["className"];
  var useUtilityClasses87 = (ownerState) => {
    const {
      alignItems,
      classes
    } = ownerState;
    const slots = {
      root: ["root", alignItems === "flex-start" && "alignItemsFlexStart"]
    };
    return (0, import_composeClasses83.unstable_composeClasses)(slots, getListItemAvatarUtilityClass, classes);
  };
  var ListItemAvatarRoot = styled_default("div", {
    name: "MuiListItemAvatar",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, ownerState.alignItems === "flex-start" && styles7.alignItemsFlexStart];
    }
  })(({
    ownerState
  }) => _extends({
    minWidth: 56,
    flexShrink: 0
  }, ownerState.alignItems === "flex-start" && {
    marginTop: 8
  }));
  var ListItemAvatar = /* @__PURE__ */ React181.forwardRef(function ListItemAvatar2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiListItemAvatar"
    });
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded111);
    const context = React181.useContext(ListContext_default);
    const ownerState = _extends({}, props, {
      alignItems: context.alignItems
    });
    const classes = useUtilityClasses87(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(ListItemAvatarRoot, _extends({
      className: clsx_default(classes.root, className),
      ownerState,
      ref
    }, other));
  });
  true ? ListItemAvatar.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component, normally an `Avatar`.
     */
    children: import_prop_types114.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types114.default.object,
    /**
     * @ignore
     */
    className: import_prop_types114.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types114.default.oneOfType([import_prop_types114.default.arrayOf(import_prop_types114.default.oneOfType([import_prop_types114.default.func, import_prop_types114.default.object, import_prop_types114.default.bool])), import_prop_types114.default.func, import_prop_types114.default.object])
  } : void 0;
  var ListItemAvatar_default = ListItemAvatar;

  // node_modules/@mui/material/ListItemIcon/ListItemIcon.js
  init_extends();
  var React182 = __toESM(require_react());
  var import_prop_types115 = __toESM(require_prop_types());
  var import_composeClasses84 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/ListItemIcon/listItemIconClasses.js
  var import_utils201 = __toESM(require_utils());
  var import_generateUtilityClass93 = __toESM(require_generateUtilityClass3());
  function getListItemIconUtilityClass(slot) {
    return (0, import_generateUtilityClass93.default)("MuiListItemIcon", slot);
  }
  var listItemIconClasses = (0, import_utils201.unstable_generateUtilityClasses)("MuiListItemIcon", ["root", "alignItemsFlexStart"]);
  var listItemIconClasses_default = listItemIconClasses;

  // node_modules/@mui/material/ListItemIcon/ListItemIcon.js
  var import_jsx_runtime160 = __toESM(require_jsx_runtime());
  var _excluded112 = ["className"];
  var useUtilityClasses88 = (ownerState) => {
    const {
      alignItems,
      classes
    } = ownerState;
    const slots = {
      root: ["root", alignItems === "flex-start" && "alignItemsFlexStart"]
    };
    return (0, import_composeClasses84.unstable_composeClasses)(slots, getListItemIconUtilityClass, classes);
  };
  var ListItemIconRoot = styled_default("div", {
    name: "MuiListItemIcon",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, ownerState.alignItems === "flex-start" && styles7.alignItemsFlexStart];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    minWidth: 56,
    color: (theme.vars || theme).palette.action.active,
    flexShrink: 0,
    display: "inline-flex"
  }, ownerState.alignItems === "flex-start" && {
    marginTop: 8
  }));
  var ListItemIcon = /* @__PURE__ */ React182.forwardRef(function ListItemIcon2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiListItemIcon"
    });
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded112);
    const context = React182.useContext(ListContext_default);
    const ownerState = _extends({}, props, {
      alignItems: context.alignItems
    });
    const classes = useUtilityClasses88(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime160.jsx)(ListItemIconRoot, _extends({
      className: clsx_default(classes.root, className),
      ownerState,
      ref
    }, other));
  });
  true ? ListItemIcon.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component, normally `Icon`, `SvgIcon`,
     * or a `@mui/icons-material` SVG icon element.
     */
    children: import_prop_types115.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types115.default.object,
    /**
     * @ignore
     */
    className: import_prop_types115.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types115.default.oneOfType([import_prop_types115.default.arrayOf(import_prop_types115.default.oneOfType([import_prop_types115.default.func, import_prop_types115.default.object, import_prop_types115.default.bool])), import_prop_types115.default.func, import_prop_types115.default.object])
  } : void 0;
  var ListItemIcon_default = ListItemIcon;

  // node_modules/@mui/material/ListItemText/ListItemText.js
  init_extends();
  var React183 = __toESM(require_react());
  var import_prop_types116 = __toESM(require_prop_types());
  var import_composeClasses85 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/ListItemText/listItemTextClasses.js
  var import_utils202 = __toESM(require_utils());
  var import_generateUtilityClass94 = __toESM(require_generateUtilityClass3());
  function getListItemTextUtilityClass(slot) {
    return (0, import_generateUtilityClass94.default)("MuiListItemText", slot);
  }
  var listItemTextClasses = (0, import_utils202.unstable_generateUtilityClasses)("MuiListItemText", ["root", "multiline", "dense", "inset", "primary", "secondary"]);
  var listItemTextClasses_default = listItemTextClasses;

  // node_modules/@mui/material/ListItemText/ListItemText.js
  var import_jsx_runtime161 = __toESM(require_jsx_runtime());
  var import_jsx_runtime162 = __toESM(require_jsx_runtime());
  var _excluded113 = ["children", "className", "disableTypography", "inset", "primary", "primaryTypographyProps", "secondary", "secondaryTypographyProps"];
  var useUtilityClasses89 = (ownerState) => {
    const {
      classes,
      inset,
      primary,
      secondary,
      dense
    } = ownerState;
    const slots = {
      root: ["root", inset && "inset", dense && "dense", primary && secondary && "multiline"],
      primary: ["primary"],
      secondary: ["secondary"]
    };
    return (0, import_composeClasses85.unstable_composeClasses)(slots, getListItemTextUtilityClass, classes);
  };
  var ListItemTextRoot = styled_default("div", {
    name: "MuiListItemText",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${listItemTextClasses_default.primary}`]: styles7.primary
      }, {
        [`& .${listItemTextClasses_default.secondary}`]: styles7.secondary
      }, styles7.root, ownerState.inset && styles7.inset, ownerState.primary && ownerState.secondary && styles7.multiline, ownerState.dense && styles7.dense];
    }
  })(({
    ownerState
  }) => _extends({
    flex: "1 1 auto",
    minWidth: 0,
    marginTop: 4,
    marginBottom: 4
  }, ownerState.primary && ownerState.secondary && {
    marginTop: 6,
    marginBottom: 6
  }, ownerState.inset && {
    paddingLeft: 56
  }));
  var ListItemText = /* @__PURE__ */ React183.forwardRef(function ListItemText2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiListItemText"
    });
    const {
      children,
      className,
      disableTypography = false,
      inset = false,
      primary: primaryProp,
      primaryTypographyProps,
      secondary: secondaryProp,
      secondaryTypographyProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded113);
    const {
      dense
    } = React183.useContext(ListContext_default);
    let primary = primaryProp != null ? primaryProp : children;
    let secondary = secondaryProp;
    const ownerState = _extends({}, props, {
      disableTypography,
      inset,
      primary: !!primary,
      secondary: !!secondary,
      dense
    });
    const classes = useUtilityClasses89(ownerState);
    if (primary != null && primary.type !== Typography_default && !disableTypography) {
      primary = /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(Typography_default, _extends({
        variant: dense ? "body2" : "body1",
        className: classes.primary,
        component: primaryTypographyProps != null && primaryTypographyProps.variant ? void 0 : "span",
        display: "block"
      }, primaryTypographyProps, {
        children: primary
      }));
    }
    if (secondary != null && secondary.type !== Typography_default && !disableTypography) {
      secondary = /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(Typography_default, _extends({
        variant: "body2",
        className: classes.secondary,
        color: "text.secondary",
        display: "block"
      }, secondaryTypographyProps, {
        children: secondary
      }));
    }
    return /* @__PURE__ */ (0, import_jsx_runtime162.jsxs)(ListItemTextRoot, _extends({
      className: clsx_default(classes.root, className),
      ownerState,
      ref
    }, other, {
      children: [primary, secondary]
    }));
  });
  true ? ListItemText.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Alias for the `primary` prop.
     */
    children: import_prop_types116.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types116.default.object,
    /**
     * @ignore
     */
    className: import_prop_types116.default.string,
    /**
     * If `true`, the children won't be wrapped by a Typography component.
     * This can be useful to render an alternative Typography variant by wrapping
     * the `children` (or `primary`) text, and optional `secondary` text
     * with the Typography component.
     * @default false
     */
    disableTypography: import_prop_types116.default.bool,
    /**
     * If `true`, the children are indented.
     * This should be used if there is no left avatar or left icon.
     * @default false
     */
    inset: import_prop_types116.default.bool,
    /**
     * The main content element.
     */
    primary: import_prop_types116.default.node,
    /**
     * These props will be forwarded to the primary typography component
     * (as long as disableTypography is not `true`).
     */
    primaryTypographyProps: import_prop_types116.default.object,
    /**
     * The secondary content element.
     */
    secondary: import_prop_types116.default.node,
    /**
     * These props will be forwarded to the secondary typography component
     * (as long as disableTypography is not `true`).
     */
    secondaryTypographyProps: import_prop_types116.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types116.default.oneOfType([import_prop_types116.default.arrayOf(import_prop_types116.default.oneOfType([import_prop_types116.default.func, import_prop_types116.default.object, import_prop_types116.default.bool])), import_prop_types116.default.func, import_prop_types116.default.object])
  } : void 0;
  var ListItemText_default = ListItemText;

  // node_modules/@mui/material/Menu/Menu.js
  init_extends();
  var React186 = __toESM(require_react());
  var import_react_is7 = __toESM(require_react_is3());
  var import_prop_types119 = __toESM(require_prop_types());
  var import_composeClasses86 = __toESM(require_composeClasses3());
  var import_utils210 = __toESM(require_utils());

  // node_modules/@mui/material/MenuList/MenuList.js
  init_extends();
  var React184 = __toESM(require_react());
  var import_react_is6 = __toESM(require_react_is3());
  var import_prop_types117 = __toESM(require_prop_types());

  // node_modules/@mui/material/utils/ownerDocument.js
  var import_utils203 = __toESM(require_utils());
  var ownerDocument_default = import_utils203.unstable_ownerDocument;

  // node_modules/@mui/material/utils/getScrollbarSize.js
  var import_utils204 = __toESM(require_utils());
  var getScrollbarSize_default = import_utils204.unstable_getScrollbarSize;

  // node_modules/@mui/material/MenuList/MenuList.js
  var import_jsx_runtime163 = __toESM(require_jsx_runtime());
  var _excluded114 = ["actions", "autoFocus", "autoFocusItem", "children", "className", "disabledItemsFocusable", "disableListWrap", "onKeyDown", "variant"];
  function nextItem(list, item, disableListWrap) {
    if (list === item) {
      return list.firstChild;
    }
    if (item && item.nextElementSibling) {
      return item.nextElementSibling;
    }
    return disableListWrap ? null : list.firstChild;
  }
  function previousItem(list, item, disableListWrap) {
    if (list === item) {
      return disableListWrap ? list.firstChild : list.lastChild;
    }
    if (item && item.previousElementSibling) {
      return item.previousElementSibling;
    }
    return disableListWrap ? null : list.lastChild;
  }
  function textCriteriaMatches2(nextFocus, textCriteria) {
    if (textCriteria === void 0) {
      return true;
    }
    let text = nextFocus.innerText;
    if (text === void 0) {
      text = nextFocus.textContent;
    }
    text = text.trim().toLowerCase();
    if (text.length === 0) {
      return false;
    }
    if (textCriteria.repeating) {
      return text[0] === textCriteria.keys[0];
    }
    return text.indexOf(textCriteria.keys.join("")) === 0;
  }
  function moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
    let wrappedOnce = false;
    let nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);
    while (nextFocus) {
      if (nextFocus === list.firstChild) {
        if (wrappedOnce) {
          return false;
        }
        wrappedOnce = true;
      }
      const nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute("aria-disabled") === "true";
      if (!nextFocus.hasAttribute("tabindex") || !textCriteriaMatches2(nextFocus, textCriteria) || nextFocusDisabled) {
        nextFocus = traversalFunction(list, nextFocus, disableListWrap);
      } else {
        nextFocus.focus();
        return true;
      }
    }
    return false;
  }
  var MenuList = /* @__PURE__ */ React184.forwardRef(function MenuList2(props, ref) {
    const {
      // private
      // eslint-disable-next-line react/prop-types
      actions,
      autoFocus = false,
      autoFocusItem = false,
      children,
      className,
      disabledItemsFocusable = false,
      disableListWrap = false,
      onKeyDown,
      variant = "selectedMenu"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded114);
    const listRef = React184.useRef(null);
    const textCriteriaRef = React184.useRef({
      keys: [],
      repeating: true,
      previousKeyMatched: true,
      lastTime: null
    });
    useEnhancedEffect_default(() => {
      if (autoFocus) {
        listRef.current.focus();
      }
    }, [autoFocus]);
    React184.useImperativeHandle(actions, () => ({
      adjustStyleForScrollbar: (containerElement, theme) => {
        const noExplicitWidth = !listRef.current.style.width;
        if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
          const scrollbarSize = `${getScrollbarSize_default(ownerDocument_default(containerElement))}px`;
          listRef.current.style[theme.direction === "rtl" ? "paddingLeft" : "paddingRight"] = scrollbarSize;
          listRef.current.style.width = `calc(100% + ${scrollbarSize})`;
        }
        return listRef.current;
      }
    }), []);
    const handleKeyDown2 = (event) => {
      const list = listRef.current;
      const key = event.key;
      const currentFocus = ownerDocument_default(list).activeElement;
      if (key === "ArrowDown") {
        event.preventDefault();
        moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem);
      } else if (key === "ArrowUp") {
        event.preventDefault();
        moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem);
      } else if (key === "Home") {
        event.preventDefault();
        moveFocus(list, null, disableListWrap, disabledItemsFocusable, nextItem);
      } else if (key === "End") {
        event.preventDefault();
        moveFocus(list, null, disableListWrap, disabledItemsFocusable, previousItem);
      } else if (key.length === 1) {
        const criteria = textCriteriaRef.current;
        const lowerKey = key.toLowerCase();
        const currTime = performance.now();
        if (criteria.keys.length > 0) {
          if (currTime - criteria.lastTime > 500) {
            criteria.keys = [];
            criteria.repeating = true;
            criteria.previousKeyMatched = true;
          } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {
            criteria.repeating = false;
          }
        }
        criteria.lastTime = currTime;
        criteria.keys.push(lowerKey);
        const keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches2(currentFocus, criteria);
        if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, disabledItemsFocusable, nextItem, criteria))) {
          event.preventDefault();
        } else {
          criteria.previousKeyMatched = false;
        }
      }
      if (onKeyDown) {
        onKeyDown(event);
      }
    };
    const handleRef = useForkRef_default(listRef, ref);
    let activeItemIndex = -1;
    React184.Children.forEach(children, (child, index3) => {
      if (!/* @__PURE__ */ React184.isValidElement(child)) {
        if (activeItemIndex === index3) {
          activeItemIndex += 1;
          if (activeItemIndex >= children.length) {
            activeItemIndex = -1;
          }
        }
        return;
      }
      if (true) {
        if ((0, import_react_is6.isFragment)(child)) {
          console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      if (!child.props.disabled) {
        if (variant === "selectedMenu" && child.props.selected) {
          activeItemIndex = index3;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index3;
        }
      }
      if (activeItemIndex === index3 && (child.props.disabled || child.props.muiSkipListHighlight || child.type.muiSkipListHighlight)) {
        activeItemIndex += 1;
        if (activeItemIndex >= children.length) {
          activeItemIndex = -1;
        }
      }
    });
    const items = React184.Children.map(children, (child, index3) => {
      if (index3 === activeItemIndex) {
        const newChildProps = {};
        if (autoFocusItem) {
          newChildProps.autoFocus = true;
        }
        if (child.props.tabIndex === void 0 && variant === "selectedMenu") {
          newChildProps.tabIndex = 0;
        }
        return /* @__PURE__ */ React184.cloneElement(child, newChildProps);
      }
      return child;
    });
    return /* @__PURE__ */ (0, import_jsx_runtime163.jsx)(List_default, _extends({
      role: "menu",
      ref: handleRef,
      className,
      onKeyDown: handleKeyDown2,
      tabIndex: autoFocus ? 0 : -1
    }, other, {
      children: items
    }));
  });
  true ? MenuList.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * If `true`, will focus the `[role="menu"]` container and move into tab order.
     * @default false
     */
    autoFocus: import_prop_types117.default.bool,
    /**
     * If `true`, will focus the first menuitem if `variant="menu"` or selected item
     * if `variant="selectedMenu"`.
     * @default false
     */
    autoFocusItem: import_prop_types117.default.bool,
    /**
     * MenuList contents, normally `MenuItem`s.
     */
    children: import_prop_types117.default.node,
    /**
     * @ignore
     */
    className: import_prop_types117.default.string,
    /**
     * If `true`, will allow focus on disabled items.
     * @default false
     */
    disabledItemsFocusable: import_prop_types117.default.bool,
    /**
     * If `true`, the menu items will not wrap focus.
     * @default false
     */
    disableListWrap: import_prop_types117.default.bool,
    /**
     * @ignore
     */
    onKeyDown: import_prop_types117.default.func,
    /**
     * The variant to use. Use `menu` to prevent selected items from impacting the initial focus
     * and the vertical alignment relative to the anchor element.
     * @default 'selectedMenu'
     */
    variant: import_prop_types117.default.oneOf(["menu", "selectedMenu"])
  } : void 0;
  var MenuList_default = MenuList;

  // node_modules/@mui/material/Popover/Popover.js
  init_extends();
  var React185 = __toESM(require_react());
  var import_prop_types118 = __toESM(require_prop_types());
  var import_utils207 = __toESM(require_utils());

  // node_modules/@mui/material/utils/ownerWindow.js
  var import_utils205 = __toESM(require_utils());
  var ownerWindow_default = import_utils205.unstable_ownerWindow;

  // node_modules/@mui/material/Popover/popoverClasses.js
  var import_utils206 = __toESM(require_utils());
  var import_generateUtilityClass95 = __toESM(require_generateUtilityClass3());
  function getPopoverUtilityClass(slot) {
    return (0, import_generateUtilityClass95.default)("MuiPopover", slot);
  }
  var popoverClasses = (0, import_utils206.unstable_generateUtilityClasses)("MuiPopover", ["root", "paper"]);
  var popoverClasses_default = popoverClasses;

  // node_modules/@mui/material/Popover/Popover.js
  var import_jsx_runtime164 = __toESM(require_jsx_runtime());
  var _excluded115 = ["onEntering"];
  var _excluded214 = ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "className", "container", "elevation", "marginThreshold", "open", "PaperProps", "slots", "slotProps", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps", "disableScrollLock"];
  var _excluded310 = ["slotProps"];
  function getOffsetTop(rect, vertical) {
    let offset3 = 0;
    if (typeof vertical === "number") {
      offset3 = vertical;
    } else if (vertical === "center") {
      offset3 = rect.height / 2;
    } else if (vertical === "bottom") {
      offset3 = rect.height;
    }
    return offset3;
  }
  function getOffsetLeft(rect, horizontal) {
    let offset3 = 0;
    if (typeof horizontal === "number") {
      offset3 = horizontal;
    } else if (horizontal === "center") {
      offset3 = rect.width / 2;
    } else if (horizontal === "right") {
      offset3 = rect.width;
    }
    return offset3;
  }
  function getTransformOriginValue(transformOrigin) {
    return [transformOrigin.horizontal, transformOrigin.vertical].map((n) => typeof n === "number" ? `${n}px` : n).join(" ");
  }
  function resolveAnchorEl2(anchorEl) {
    return typeof anchorEl === "function" ? anchorEl() : anchorEl;
  }
  var useUtilityClasses90 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      paper: ["paper"]
    };
    return (0, base_exports.unstable_composeClasses)(slots, getPopoverUtilityClass, classes);
  };
  var PopoverRoot = styled_default(Modal_default, {
    name: "MuiPopover",
    slot: "Root",
    overridesResolver: (props, styles7) => styles7.root
  })({});
  var PopoverPaper = styled_default(Paper_default, {
    name: "MuiPopover",
    slot: "Paper",
    overridesResolver: (props, styles7) => styles7.paper
  })({
    position: "absolute",
    overflowY: "auto",
    overflowX: "hidden",
    // So we see the popover when it's empty.
    // It's most likely on issue on userland.
    minWidth: 16,
    minHeight: 16,
    maxWidth: "calc(100% - 32px)",
    maxHeight: "calc(100% - 32px)",
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0
  });
  var Popover = /* @__PURE__ */ React185.forwardRef(function Popover2(inProps, ref) {
    var _slotProps$paper, _slots$root, _slots$paper;
    const props = useThemeProps({
      props: inProps,
      name: "MuiPopover"
    });
    const {
      action,
      anchorEl,
      anchorOrigin = {
        vertical: "top",
        horizontal: "left"
      },
      anchorPosition,
      anchorReference = "anchorEl",
      children,
      className,
      container: containerProp,
      elevation = 8,
      marginThreshold = 16,
      open,
      PaperProps: PaperPropsProp = {},
      slots,
      slotProps,
      transformOrigin = {
        vertical: "top",
        horizontal: "left"
      },
      TransitionComponent = Grow_default,
      transitionDuration: transitionDurationProp = "auto",
      TransitionProps: {
        onEntering
      } = {},
      disableScrollLock = false
    } = props, TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded115), other = _objectWithoutPropertiesLoose(props, _excluded214);
    const externalPaperSlotProps = (_slotProps$paper = slotProps == null ? void 0 : slotProps.paper) != null ? _slotProps$paper : PaperPropsProp;
    const paperRef = React185.useRef();
    const handlePaperRef = useForkRef_default(paperRef, externalPaperSlotProps.ref);
    const ownerState = _extends({}, props, {
      anchorOrigin,
      anchorReference,
      elevation,
      marginThreshold,
      externalPaperSlotProps,
      transformOrigin,
      TransitionComponent,
      transitionDuration: transitionDurationProp,
      TransitionProps
    });
    const classes = useUtilityClasses90(ownerState);
    const getAnchorOffset = React185.useCallback(() => {
      if (anchorReference === "anchorPosition") {
        if (true) {
          if (!anchorPosition) {
            console.error('MUI: You need to provide a `anchorPosition` prop when using <Popover anchorReference="anchorPosition" />.');
          }
        }
        return anchorPosition;
      }
      const resolvedAnchorEl = resolveAnchorEl2(anchorEl);
      const anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : ownerDocument_default(paperRef.current).body;
      const anchorRect = anchorElement.getBoundingClientRect();
      if (true) {
        const box = anchorElement.getBoundingClientRect();
        if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
          console.warn(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
        }
      }
      return {
        top: anchorRect.top + getOffsetTop(anchorRect, anchorOrigin.vertical),
        left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
      };
    }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]);
    const getTransformOrigin = React185.useCallback((elemRect) => {
      return {
        vertical: getOffsetTop(elemRect, transformOrigin.vertical),
        horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)
      };
    }, [transformOrigin.horizontal, transformOrigin.vertical]);
    const getPositioningStyle = React185.useCallback((element) => {
      const elemRect = {
        width: element.offsetWidth,
        height: element.offsetHeight
      };
      const elemTransformOrigin = getTransformOrigin(elemRect);
      if (anchorReference === "none") {
        return {
          top: null,
          left: null,
          transformOrigin: getTransformOriginValue(elemTransformOrigin)
        };
      }
      const anchorOffset = getAnchorOffset();
      let top2 = anchorOffset.top - elemTransformOrigin.vertical;
      let left2 = anchorOffset.left - elemTransformOrigin.horizontal;
      const bottom2 = top2 + elemRect.height;
      const right2 = left2 + elemRect.width;
      const containerWindow = ownerWindow_default(resolveAnchorEl2(anchorEl));
      const heightThreshold = containerWindow.innerHeight - marginThreshold;
      const widthThreshold = containerWindow.innerWidth - marginThreshold;
      if (marginThreshold !== null && top2 < marginThreshold) {
        const diff = top2 - marginThreshold;
        top2 -= diff;
        elemTransformOrigin.vertical += diff;
      } else if (marginThreshold !== null && bottom2 > heightThreshold) {
        const diff = bottom2 - heightThreshold;
        top2 -= diff;
        elemTransformOrigin.vertical += diff;
      }
      if (true) {
        if (elemRect.height > heightThreshold && elemRect.height && heightThreshold) {
          console.error(["MUI: The popover component is too tall.", `Some part of it can not be seen on the screen (${elemRect.height - heightThreshold}px).`, "Please consider adding a `max-height` to improve the user-experience."].join("\n"));
        }
      }
      if (marginThreshold !== null && left2 < marginThreshold) {
        const diff = left2 - marginThreshold;
        left2 -= diff;
        elemTransformOrigin.horizontal += diff;
      } else if (right2 > widthThreshold) {
        const diff = right2 - widthThreshold;
        left2 -= diff;
        elemTransformOrigin.horizontal += diff;
      }
      return {
        top: `${Math.round(top2)}px`,
        left: `${Math.round(left2)}px`,
        transformOrigin: getTransformOriginValue(elemTransformOrigin)
      };
    }, [anchorEl, anchorReference, getAnchorOffset, getTransformOrigin, marginThreshold]);
    const [isPositioned, setIsPositioned] = React185.useState(open);
    const setPositioningStyles = React185.useCallback(() => {
      const element = paperRef.current;
      if (!element) {
        return;
      }
      const positioning = getPositioningStyle(element);
      if (positioning.top !== null) {
        element.style.top = positioning.top;
      }
      if (positioning.left !== null) {
        element.style.left = positioning.left;
      }
      element.style.transformOrigin = positioning.transformOrigin;
      setIsPositioned(true);
    }, [getPositioningStyle]);
    React185.useEffect(() => {
      if (disableScrollLock) {
        window.addEventListener("scroll", setPositioningStyles);
      }
      return () => window.removeEventListener("scroll", setPositioningStyles);
    }, [anchorEl, disableScrollLock, setPositioningStyles]);
    const handleEntering = (element, isAppearing) => {
      if (onEntering) {
        onEntering(element, isAppearing);
      }
      setPositioningStyles();
    };
    const handleExited = () => {
      setIsPositioned(false);
    };
    React185.useEffect(() => {
      if (open) {
        setPositioningStyles();
      }
    });
    React185.useImperativeHandle(action, () => open ? {
      updatePosition: () => {
        setPositioningStyles();
      }
    } : null, [open, setPositioningStyles]);
    React185.useEffect(() => {
      if (!open) {
        return void 0;
      }
      const handleResize = debounce_default(() => {
        setPositioningStyles();
      });
      const containerWindow = ownerWindow_default(anchorEl);
      containerWindow.addEventListener("resize", handleResize);
      return () => {
        handleResize.clear();
        containerWindow.removeEventListener("resize", handleResize);
      };
    }, [anchorEl, open, setPositioningStyles]);
    let transitionDuration = transitionDurationProp;
    if (transitionDurationProp === "auto" && !TransitionComponent.muiSupportAuto) {
      transitionDuration = void 0;
    }
    const container = containerProp || (anchorEl ? ownerDocument_default(resolveAnchorEl2(anchorEl)).body : void 0);
    const RootSlot = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : PopoverRoot;
    const PaperSlot = (_slots$paper = slots == null ? void 0 : slots.paper) != null ? _slots$paper : PopoverPaper;
    const paperProps = useSlotProps({
      elementType: PaperSlot,
      externalSlotProps: _extends({}, externalPaperSlotProps, {
        style: isPositioned ? externalPaperSlotProps.style : _extends({}, externalPaperSlotProps.style, {
          opacity: 0
        })
      }),
      additionalProps: {
        elevation,
        ref: handlePaperRef
      },
      ownerState,
      className: clsx_default(classes.paper, externalPaperSlotProps == null ? void 0 : externalPaperSlotProps.className)
    });
    const _useSlotProps = useSlotProps({
      elementType: RootSlot,
      externalSlotProps: (slotProps == null ? void 0 : slotProps.root) || {},
      externalForwardedProps: other,
      additionalProps: {
        ref,
        slotProps: {
          backdrop: {
            invisible: true
          }
        },
        container,
        open
      },
      ownerState,
      className: clsx_default(classes.root, className)
    }), {
      slotProps: rootSlotPropsProp
    } = _useSlotProps, rootProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded310);
    return /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(RootSlot, _extends({}, rootProps, !isHostComponent(RootSlot) && {
      slotProps: rootSlotPropsProp,
      disableScrollLock
    }, {
      children: /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(TransitionComponent, _extends({
        appear: true,
        in: open,
        onEntering: handleEntering,
        onExited: handleExited,
        timeout: transitionDuration
      }, TransitionProps, {
        children: /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(PaperSlot, _extends({}, paperProps, {
          children
        }))
      }))
    }));
  });
  true ? Popover.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * A ref for imperative actions.
     * It currently only supports updatePosition() action.
     */
    action: import_utils207.refType,
    /**
     * An HTML element, [PopoverVirtualElement](/material-ui/react-popover/#virtual-element),
     * or a function that returns either.
     * It's used to set the position of the popover.
     */
    anchorEl: (0, import_utils207.chainPropTypes)(import_prop_types118.default.oneOfType([import_utils207.HTMLElementType, import_prop_types118.default.func]), (props) => {
      if (props.open && (!props.anchorReference || props.anchorReference === "anchorEl")) {
        const resolvedAnchorEl = resolveAnchorEl2(props.anchorEl);
        if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
          const box = resolvedAnchorEl.getBoundingClientRect();
          if (box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
            return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", "The anchor element should be part of the document layout.", "Make sure the element is present in the document or that it's not display none."].join("\n"));
          }
        } else {
          return new Error(["MUI: The `anchorEl` prop provided to the component is invalid.", `It should be an Element or PopoverVirtualElement instance but it's \`${resolvedAnchorEl}\` instead.`].join("\n"));
        }
      }
      return null;
    }),
    /**
     * This is the point on the anchor where the popover's
     * `anchorEl` will attach to. This is not used when the
     * anchorReference is 'anchorPosition'.
     *
     * Options:
     * vertical: [top, center, bottom];
     * horizontal: [left, center, right].
     * @default {
     *   vertical: 'top',
     *   horizontal: 'left',
     * }
     */
    anchorOrigin: import_prop_types118.default.shape({
      horizontal: import_prop_types118.default.oneOfType([import_prop_types118.default.oneOf(["center", "left", "right"]), import_prop_types118.default.number]).isRequired,
      vertical: import_prop_types118.default.oneOfType([import_prop_types118.default.oneOf(["bottom", "center", "top"]), import_prop_types118.default.number]).isRequired
    }),
    /**
     * This is the position that may be used to set the position of the popover.
     * The coordinates are relative to the application's client area.
     */
    anchorPosition: import_prop_types118.default.shape({
      left: import_prop_types118.default.number.isRequired,
      top: import_prop_types118.default.number.isRequired
    }),
    /**
     * This determines which anchor prop to refer to when setting
     * the position of the popover.
     * @default 'anchorEl'
     */
    anchorReference: import_prop_types118.default.oneOf(["anchorEl", "anchorPosition", "none"]),
    /**
     * The content of the component.
     */
    children: import_prop_types118.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types118.default.object,
    /**
     * @ignore
     */
    className: import_prop_types118.default.string,
    /**
     * An HTML element, component instance, or function that returns either.
     * The `container` will passed to the Modal component.
     *
     * By default, it uses the body of the anchorEl's top-level document object,
     * so it's simply `document.body` most of the time.
     */
    container: import_prop_types118.default.oneOfType([import_utils207.HTMLElementType, import_prop_types118.default.func]),
    /**
     * Disable the scroll lock behavior.
     * @default false
     */
    disableScrollLock: import_prop_types118.default.bool,
    /**
     * The elevation of the popover.
     * @default 8
     */
    elevation: import_utils207.integerPropType,
    /**
     * Specifies how close to the edge of the window the popover can appear.
     * If null, the popover will not be constrained by the window.
     * @default 16
     */
    marginThreshold: import_prop_types118.default.number,
    /**
     * Callback fired when the component requests to be closed.
     * The `reason` parameter can optionally be used to control the response to `onClose`.
     */
    onClose: import_prop_types118.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types118.default.bool.isRequired,
    /**
     * Props applied to the [`Paper`](/material-ui/api/paper/) element.
     *
     * This prop is an alias for `slotProps.paper` and will be overriden by it if both are used.
     * @deprecated Use `slotProps.paper` instead.
     *
     * @default {}
     */
    PaperProps: import_prop_types118.default.shape({
      component: import_utils207.elementTypeAcceptingRef
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * @default {}
     */
    slotProps: import_prop_types118.default.shape({
      paper: import_prop_types118.default.oneOfType([import_prop_types118.default.func, import_prop_types118.default.object]),
      root: import_prop_types118.default.oneOfType([import_prop_types118.default.func, import_prop_types118.default.object])
    }),
    /**
     * The components used for each slot inside.
     *
     * @default {}
     */
    slots: import_prop_types118.default.shape({
      paper: import_prop_types118.default.elementType,
      root: import_prop_types118.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types118.default.oneOfType([import_prop_types118.default.arrayOf(import_prop_types118.default.oneOfType([import_prop_types118.default.func, import_prop_types118.default.object, import_prop_types118.default.bool])), import_prop_types118.default.func, import_prop_types118.default.object]),
    /**
     * This is the point on the popover which
     * will attach to the anchor's origin.
     *
     * Options:
     * vertical: [top, center, bottom, x(px)];
     * horizontal: [left, center, right, x(px)].
     * @default {
     *   vertical: 'top',
     *   horizontal: 'left',
     * }
     */
    transformOrigin: import_prop_types118.default.shape({
      horizontal: import_prop_types118.default.oneOfType([import_prop_types118.default.oneOf(["center", "left", "right"]), import_prop_types118.default.number]).isRequired,
      vertical: import_prop_types118.default.oneOfType([import_prop_types118.default.oneOf(["bottom", "center", "top"]), import_prop_types118.default.number]).isRequired
    }),
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Grow
     */
    TransitionComponent: import_prop_types118.default.elementType,
    /**
     * Set to 'auto' to automatically calculate transition time based on height.
     * @default 'auto'
     */
    transitionDuration: import_prop_types118.default.oneOfType([import_prop_types118.default.oneOf(["auto"]), import_prop_types118.default.number, import_prop_types118.default.shape({
      appear: import_prop_types118.default.number,
      enter: import_prop_types118.default.number,
      exit: import_prop_types118.default.number
    })]),
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
     * @default {}
     */
    TransitionProps: import_prop_types118.default.object
  } : void 0;
  var Popover_default = Popover;

  // node_modules/@mui/material/Menu/menuClasses.js
  var import_utils208 = __toESM(require_utils());
  var import_generateUtilityClass96 = __toESM(require_generateUtilityClass3());
  function getMenuUtilityClass2(slot) {
    return (0, import_generateUtilityClass96.default)("MuiMenu", slot);
  }
  var menuClasses2 = (0, import_utils208.unstable_generateUtilityClasses)("MuiMenu", ["root", "paper", "list"]);
  var menuClasses_default = menuClasses2;

  // node_modules/@mui/material/Menu/Menu.js
  var import_jsx_runtime165 = __toESM(require_jsx_runtime());
  var _excluded116 = ["onEntering"];
  var _excluded215 = ["autoFocus", "children", "className", "disableAutoFocusItem", "MenuListProps", "onClose", "open", "PaperProps", "PopoverClasses", "transitionDuration", "TransitionProps", "variant", "slots", "slotProps"];
  var RTL_ORIGIN = {
    vertical: "top",
    horizontal: "right"
  };
  var LTR_ORIGIN = {
    vertical: "top",
    horizontal: "left"
  };
  var useUtilityClasses91 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      paper: ["paper"],
      list: ["list"]
    };
    return (0, import_composeClasses86.unstable_composeClasses)(slots, getMenuUtilityClass2, classes);
  };
  var MenuRoot = styled_default(Popover_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiMenu",
    slot: "Root",
    overridesResolver: (props, styles7) => styles7.root
  })({});
  var MenuPaper = styled_default(PopoverPaper, {
    name: "MuiMenu",
    slot: "Paper",
    overridesResolver: (props, styles7) => styles7.paper
  })({
    // specZ: The maximum height of a simple menu should be one or more rows less than the view
    // height. This ensures a tappable area outside of the simple menu with which to dismiss
    // the menu.
    maxHeight: "calc(100% - 96px)",
    // Add iOS momentum scrolling for iOS < 13.0
    WebkitOverflowScrolling: "touch"
  });
  var MenuMenuList = styled_default(MenuList_default, {
    name: "MuiMenu",
    slot: "List",
    overridesResolver: (props, styles7) => styles7.list
  })({
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0
  });
  var Menu3 = /* @__PURE__ */ React186.forwardRef(function Menu4(inProps, ref) {
    var _slots$paper, _slotProps$paper;
    const props = useThemeProps({
      props: inProps,
      name: "MuiMenu"
    });
    const {
      autoFocus = true,
      children,
      className,
      disableAutoFocusItem = false,
      MenuListProps = {},
      onClose,
      open,
      PaperProps = {},
      PopoverClasses,
      transitionDuration = "auto",
      TransitionProps: {
        onEntering
      } = {},
      variant = "selectedMenu",
      slots = {},
      slotProps = {}
    } = props, TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded116), other = _objectWithoutPropertiesLoose(props, _excluded215);
    const theme = useTheme4();
    const isRtl = theme.direction === "rtl";
    const ownerState = _extends({}, props, {
      autoFocus,
      disableAutoFocusItem,
      MenuListProps,
      onEntering,
      PaperProps,
      transitionDuration,
      TransitionProps,
      variant
    });
    const classes = useUtilityClasses91(ownerState);
    const autoFocusItem = autoFocus && !disableAutoFocusItem && open;
    const menuListActionsRef = React186.useRef(null);
    const handleEntering = (element, isAppearing) => {
      if (menuListActionsRef.current) {
        menuListActionsRef.current.adjustStyleForScrollbar(element, theme);
      }
      if (onEntering) {
        onEntering(element, isAppearing);
      }
    };
    const handleListKeyDown = (event) => {
      if (event.key === "Tab") {
        event.preventDefault();
        if (onClose) {
          onClose(event, "tabKeyDown");
        }
      }
    };
    let activeItemIndex = -1;
    React186.Children.map(children, (child, index3) => {
      if (!/* @__PURE__ */ React186.isValidElement(child)) {
        return;
      }
      if (true) {
        if ((0, import_react_is7.isFragment)(child)) {
          console.error(["MUI: The Menu component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      if (!child.props.disabled) {
        if (variant === "selectedMenu" && child.props.selected) {
          activeItemIndex = index3;
        } else if (activeItemIndex === -1) {
          activeItemIndex = index3;
        }
      }
    });
    const PaperSlot = (_slots$paper = slots.paper) != null ? _slots$paper : MenuPaper;
    const paperExternalSlotProps = (_slotProps$paper = slotProps.paper) != null ? _slotProps$paper : PaperProps;
    const rootSlotProps = useSlotProps({
      elementType: slots.root,
      externalSlotProps: slotProps.root,
      ownerState,
      className: [classes.root, className]
    });
    const paperSlotProps = useSlotProps({
      elementType: PaperSlot,
      externalSlotProps: paperExternalSlotProps,
      ownerState,
      className: classes.paper
    });
    return /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(MenuRoot, _extends({
      onClose,
      anchorOrigin: {
        vertical: "bottom",
        horizontal: isRtl ? "right" : "left"
      },
      transformOrigin: isRtl ? RTL_ORIGIN : LTR_ORIGIN,
      slots: {
        paper: PaperSlot,
        root: slots.root
      },
      slotProps: {
        root: rootSlotProps,
        paper: paperSlotProps
      },
      open,
      ref,
      transitionDuration,
      TransitionProps: _extends({
        onEntering: handleEntering
      }, TransitionProps),
      ownerState
    }, other, {
      classes: PopoverClasses,
      children: /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(MenuMenuList, _extends({
        onKeyDown: handleListKeyDown,
        actions: menuListActionsRef,
        autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
        autoFocusItem,
        variant
      }, MenuListProps, {
        className: clsx_default(classes.list, MenuListProps.className),
        children
      }))
    }));
  });
  true ? Menu3.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * An HTML element, or a function that returns one.
     * It's used to set the position of the menu.
     */
    anchorEl: import_prop_types119.default.oneOfType([import_utils210.HTMLElementType, import_prop_types119.default.func]),
    /**
     * If `true` (Default) will focus the `[role="menu"]` if no focusable child is found. Disabled
     * children are not focusable. If you set this prop to `false` focus will be placed
     * on the parent modal container. This has severe accessibility implications
     * and should only be considered if you manage focus otherwise.
     * @default true
     */
    autoFocus: import_prop_types119.default.bool,
    /**
     * Menu contents, normally `MenuItem`s.
     */
    children: import_prop_types119.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types119.default.object,
    /**
     * @ignore
     */
    className: import_prop_types119.default.string,
    /**
     * When opening the menu will not focus the active item but the `[role="menu"]`
     * unless `autoFocus` is also set to `false`. Not using the default means not
     * following WAI-ARIA authoring practices. Please be considerate about possible
     * accessibility implications.
     * @default false
     */
    disableAutoFocusItem: import_prop_types119.default.bool,
    /**
     * Props applied to the [`MenuList`](/material-ui/api/menu-list/) element.
     * @default {}
     */
    MenuListProps: import_prop_types119.default.object,
    /**
     * Callback fired when the component requests to be closed.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`, `"tabKeyDown"`.
     */
    onClose: import_prop_types119.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types119.default.bool.isRequired,
    /**
     * @ignore
     */
    PaperProps: import_prop_types119.default.object,
    /**
     * `classes` prop applied to the [`Popover`](/material-ui/api/popover/) element.
     */
    PopoverClasses: import_prop_types119.default.object,
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * @default {}
     */
    slotProps: import_prop_types119.default.shape({
      paper: import_prop_types119.default.oneOfType([import_prop_types119.default.func, import_prop_types119.default.object]),
      root: import_prop_types119.default.oneOfType([import_prop_types119.default.func, import_prop_types119.default.object])
    }),
    /**
     * The components used for each slot inside.
     *
     * @default {}
     */
    slots: import_prop_types119.default.shape({
      paper: import_prop_types119.default.elementType,
      root: import_prop_types119.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types119.default.oneOfType([import_prop_types119.default.arrayOf(import_prop_types119.default.oneOfType([import_prop_types119.default.func, import_prop_types119.default.object, import_prop_types119.default.bool])), import_prop_types119.default.func, import_prop_types119.default.object]),
    /**
     * The length of the transition in `ms`, or 'auto'
     * @default 'auto'
     */
    transitionDuration: import_prop_types119.default.oneOfType([import_prop_types119.default.oneOf(["auto"]), import_prop_types119.default.number, import_prop_types119.default.shape({
      appear: import_prop_types119.default.number,
      enter: import_prop_types119.default.number,
      exit: import_prop_types119.default.number
    })]),
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
     * @default {}
     */
    TransitionProps: import_prop_types119.default.object,
    /**
     * The variant to use. Use `menu` to prevent selected items from impacting the initial focus.
     * @default 'selectedMenu'
     */
    variant: import_prop_types119.default.oneOf(["menu", "selectedMenu"])
  } : void 0;
  var Menu_default = Menu3;

  // node_modules/@mui/material/MenuItem/MenuItem.js
  init_extends();
  var React187 = __toESM(require_react());
  var import_prop_types120 = __toESM(require_prop_types());
  var import_composeClasses87 = __toESM(require_composeClasses3());
  var import_system37 = __toESM(require_system());

  // node_modules/@mui/material/MenuItem/menuItemClasses.js
  var import_utils211 = __toESM(require_utils());
  var import_generateUtilityClass97 = __toESM(require_generateUtilityClass3());
  function getMenuItemUtilityClass2(slot) {
    return (0, import_generateUtilityClass97.default)("MuiMenuItem", slot);
  }
  var menuItemClasses2 = (0, import_utils211.unstable_generateUtilityClasses)("MuiMenuItem", ["root", "focusVisible", "dense", "disabled", "divider", "gutters", "selected"]);
  var menuItemClasses_default = menuItemClasses2;

  // node_modules/@mui/material/MenuItem/MenuItem.js
  var import_jsx_runtime166 = __toESM(require_jsx_runtime());
  var _excluded117 = ["autoFocus", "component", "dense", "divider", "disableGutters", "focusVisibleClassName", "role", "tabIndex", "className"];
  var overridesResolver6 = (props, styles7) => {
    const {
      ownerState
    } = props;
    return [styles7.root, ownerState.dense && styles7.dense, ownerState.divider && styles7.divider, !ownerState.disableGutters && styles7.gutters];
  };
  var useUtilityClasses92 = (ownerState) => {
    const {
      disabled,
      dense,
      divider,
      disableGutters,
      selected,
      classes
    } = ownerState;
    const slots = {
      root: ["root", dense && "dense", disabled && "disabled", !disableGutters && "gutters", divider && "divider", selected && "selected"]
    };
    const composedClasses = (0, import_composeClasses87.unstable_composeClasses)(slots, getMenuItemUtilityClass2, classes);
    return _extends({}, classes, composedClasses);
  };
  var MenuItemRoot = styled_default(ButtonBase_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiMenuItem",
    slot: "Root",
    overridesResolver: overridesResolver6
  })(({
    theme,
    ownerState
  }) => _extends({}, theme.typography.body1, {
    display: "flex",
    justifyContent: "flex-start",
    alignItems: "center",
    position: "relative",
    textDecoration: "none",
    minHeight: 48,
    paddingTop: 6,
    paddingBottom: 6,
    boxSizing: "border-box",
    whiteSpace: "nowrap"
  }, !ownerState.disableGutters && {
    paddingLeft: 16,
    paddingRight: 16
  }, ownerState.divider && {
    borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
    backgroundClip: "padding-box"
  }, {
    "&:hover": {
      textDecoration: "none",
      backgroundColor: (theme.vars || theme).palette.action.hover,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    },
    [`&.${menuItemClasses_default.selected}`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, import_system37.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity),
      [`&.${menuItemClasses_default.focusVisible}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, import_system37.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
      }
    },
    [`&.${menuItemClasses_default.selected}:hover`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : (0, import_system37.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, import_system37.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity)
      }
    },
    [`&.${menuItemClasses_default.focusVisible}`]: {
      backgroundColor: (theme.vars || theme).palette.action.focus
    },
    [`&.${menuItemClasses_default.disabled}`]: {
      opacity: (theme.vars || theme).palette.action.disabledOpacity
    },
    [`& + .${dividerClasses_default.root}`]: {
      marginTop: theme.spacing(1),
      marginBottom: theme.spacing(1)
    },
    [`& + .${dividerClasses_default.inset}`]: {
      marginLeft: 52
    },
    [`& .${listItemTextClasses_default.root}`]: {
      marginTop: 0,
      marginBottom: 0
    },
    [`& .${listItemTextClasses_default.inset}`]: {
      paddingLeft: 36
    },
    [`& .${listItemIconClasses_default.root}`]: {
      minWidth: 36
    }
  }, !ownerState.dense && {
    [theme.breakpoints.up("sm")]: {
      minHeight: "auto"
    }
  }, ownerState.dense && _extends({
    minHeight: 32,
    // https://m2.material.io/components/menus#specs > Dense
    paddingTop: 4,
    paddingBottom: 4
  }, theme.typography.body2, {
    [`& .${listItemIconClasses_default.root} svg`]: {
      fontSize: "1.25rem"
    }
  })));
  var MenuItem3 = /* @__PURE__ */ React187.forwardRef(function MenuItem4(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiMenuItem"
    });
    const {
      autoFocus = false,
      component = "li",
      dense = false,
      divider = false,
      disableGutters = false,
      focusVisibleClassName,
      role = "menuitem",
      tabIndex: tabIndexProp,
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded117);
    const context = React187.useContext(ListContext_default);
    const childContext = React187.useMemo(() => ({
      dense: dense || context.dense || false,
      disableGutters
    }), [context.dense, dense, disableGutters]);
    const menuItemRef = React187.useRef(null);
    useEnhancedEffect_default(() => {
      if (autoFocus) {
        if (menuItemRef.current) {
          menuItemRef.current.focus();
        } else if (true) {
          console.error("MUI: Unable to set focus to a MenuItem whose component has not been rendered.");
        }
      }
    }, [autoFocus]);
    const ownerState = _extends({}, props, {
      dense: childContext.dense,
      divider,
      disableGutters
    });
    const classes = useUtilityClasses92(props);
    const handleRef = useForkRef_default(menuItemRef, ref);
    let tabIndex;
    if (!props.disabled) {
      tabIndex = tabIndexProp !== void 0 ? tabIndexProp : -1;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(ListContext_default.Provider, {
      value: childContext,
      children: /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(MenuItemRoot, _extends({
        ref: handleRef,
        role,
        tabIndex,
        component,
        focusVisibleClassName: clsx_default(classes.focusVisible, focusVisibleClassName),
        className: clsx_default(classes.root, className)
      }, other, {
        ownerState,
        classes
      }))
    });
  });
  true ? MenuItem3.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * If `true`, the list item is focused during the first mount.
     * Focus will also be triggered if the value changes from false to true.
     * @default false
     */
    autoFocus: import_prop_types120.default.bool,
    /**
     * The content of the component.
     */
    children: import_prop_types120.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types120.default.object,
    /**
     * @ignore
     */
    className: import_prop_types120.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types120.default.elementType,
    /**
     * If `true`, compact vertical padding designed for keyboard and mouse input is used.
     * The prop defaults to the value inherited from the parent Menu component.
     * @default false
     */
    dense: import_prop_types120.default.bool,
    /**
     * @ignore
     */
    disabled: import_prop_types120.default.bool,
    /**
     * If `true`, the left and right padding is removed.
     * @default false
     */
    disableGutters: import_prop_types120.default.bool,
    /**
     * If `true`, a 1px light border is added to the bottom of the menu item.
     * @default false
     */
    divider: import_prop_types120.default.bool,
    /**
     * This prop can help identify which element has keyboard focus.
     * The class name will be applied when the element gains the focus through keyboard interaction.
     * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
     * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
     * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
     * if needed.
     */
    focusVisibleClassName: import_prop_types120.default.string,
    /**
     * @ignore
     */
    role: import_prop_types120.default.string,
    /**
     * If `true`, the component is selected.
     * @default false
     */
    selected: import_prop_types120.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types120.default.oneOfType([import_prop_types120.default.arrayOf(import_prop_types120.default.oneOfType([import_prop_types120.default.func, import_prop_types120.default.object, import_prop_types120.default.bool])), import_prop_types120.default.func, import_prop_types120.default.object]),
    /**
     * @default 0
     */
    tabIndex: import_prop_types120.default.number
  } : void 0;
  var MenuItem_default = MenuItem3;

  // node_modules/@mui/material/MobileStepper/MobileStepper.js
  init_extends();
  var React188 = __toESM(require_react());
  var import_prop_types121 = __toESM(require_prop_types());
  var import_utils213 = __toESM(require_utils());
  var import_composeClasses88 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/MobileStepper/mobileStepperClasses.js
  var import_utils212 = __toESM(require_utils());
  var import_generateUtilityClass98 = __toESM(require_generateUtilityClass3());
  function getMobileStepperUtilityClass(slot) {
    return (0, import_generateUtilityClass98.default)("MuiMobileStepper", slot);
  }
  var mobileStepperClasses = (0, import_utils212.unstable_generateUtilityClasses)("MuiMobileStepper", ["root", "positionBottom", "positionTop", "positionStatic", "dots", "dot", "dotActive", "progress"]);
  var mobileStepperClasses_default = mobileStepperClasses;

  // node_modules/@mui/material/MobileStepper/MobileStepper.js
  var import_jsx_runtime167 = __toESM(require_jsx_runtime());
  var import_jsx_runtime168 = __toESM(require_jsx_runtime());
  var _excluded118 = ["activeStep", "backButton", "className", "LinearProgressProps", "nextButton", "position", "steps", "variant"];
  var useUtilityClasses93 = (ownerState) => {
    const {
      classes,
      position: position2
    } = ownerState;
    const slots = {
      root: ["root", `position${capitalize_default(position2)}`],
      dots: ["dots"],
      dot: ["dot"],
      dotActive: ["dotActive"],
      progress: ["progress"]
    };
    return (0, import_composeClasses88.unstable_composeClasses)(slots, getMobileStepperUtilityClass, classes);
  };
  var MobileStepperRoot = styled_default(Paper_default, {
    name: "MuiMobileStepper",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, styles7[`position${capitalize_default(ownerState.position)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "flex",
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    background: (theme.vars || theme).palette.background.default,
    padding: 8
  }, ownerState.position === "bottom" && {
    position: "fixed",
    bottom: 0,
    left: 0,
    right: 0,
    zIndex: (theme.vars || theme).zIndex.mobileStepper
  }, ownerState.position === "top" && {
    position: "fixed",
    top: 0,
    left: 0,
    right: 0,
    zIndex: (theme.vars || theme).zIndex.mobileStepper
  }));
  var MobileStepperDots = styled_default("div", {
    name: "MuiMobileStepper",
    slot: "Dots",
    overridesResolver: (props, styles7) => styles7.dots
  })(({
    ownerState
  }) => _extends({}, ownerState.variant === "dots" && {
    display: "flex",
    flexDirection: "row"
  }));
  var MobileStepperDot = styled_default("div", {
    name: "MuiMobileStepper",
    slot: "Dot",
    shouldForwardProp: (prop) => slotShouldForwardProp(prop) && prop !== "dotActive",
    overridesResolver: (props, styles7) => {
      const {
        dotActive
      } = props;
      return [styles7.dot, dotActive && styles7.dotActive];
    }
  })(({
    theme,
    ownerState,
    dotActive
  }) => _extends({}, ownerState.variant === "dots" && _extends({
    transition: theme.transitions.create("background-color", {
      duration: theme.transitions.duration.shortest
    }),
    backgroundColor: (theme.vars || theme).palette.action.disabled,
    borderRadius: "50%",
    width: 8,
    height: 8,
    margin: "0 2px"
  }, dotActive && {
    backgroundColor: (theme.vars || theme).palette.primary.main
  })));
  var MobileStepperProgress = styled_default(LinearProgress_default, {
    name: "MuiMobileStepper",
    slot: "Progress",
    overridesResolver: (props, styles7) => styles7.progress
  })(({
    ownerState
  }) => _extends({}, ownerState.variant === "progress" && {
    width: "50%"
  }));
  var MobileStepper = /* @__PURE__ */ React188.forwardRef(function MobileStepper2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiMobileStepper"
    });
    const {
      activeStep = 0,
      backButton,
      className,
      LinearProgressProps,
      nextButton,
      position: position2 = "bottom",
      steps,
      variant = "dots"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded118);
    const ownerState = _extends({}, props, {
      activeStep,
      position: position2,
      variant
    });
    let value;
    if (variant === "progress") {
      if (steps === 1) {
        value = 100;
      } else {
        value = Math.ceil(activeStep / (steps - 1) * 100);
      }
    }
    const classes = useUtilityClasses93(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime167.jsxs)(MobileStepperRoot, _extends({
      square: true,
      elevation: 0,
      className: clsx_default(classes.root, className),
      ref,
      ownerState
    }, other, {
      children: [backButton, variant === "text" && /* @__PURE__ */ (0, import_jsx_runtime167.jsxs)(React188.Fragment, {
        children: [activeStep + 1, " / ", steps]
      }), variant === "dots" && /* @__PURE__ */ (0, import_jsx_runtime168.jsx)(MobileStepperDots, {
        ownerState,
        className: classes.dots,
        children: [...new Array(steps)].map((_5, index3) => /* @__PURE__ */ (0, import_jsx_runtime168.jsx)(MobileStepperDot, {
          className: clsx_default(classes.dot, index3 === activeStep && classes.dotActive),
          ownerState,
          dotActive: index3 === activeStep
        }, index3))
      }), variant === "progress" && /* @__PURE__ */ (0, import_jsx_runtime168.jsx)(MobileStepperProgress, _extends({
        ownerState,
        className: classes.progress,
        variant: "determinate",
        value
      }, LinearProgressProps)), nextButton]
    }));
  });
  true ? MobileStepper.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Set the active step (zero based index).
     * Defines which dot is highlighted when the variant is 'dots'.
     * @default 0
     */
    activeStep: import_utils213.integerPropType,
    /**
     * A back button element. For instance, it can be a `Button` or an `IconButton`.
     */
    backButton: import_prop_types121.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types121.default.object,
    /**
     * @ignore
     */
    className: import_prop_types121.default.string,
    /**
     * Props applied to the `LinearProgress` element.
     */
    LinearProgressProps: import_prop_types121.default.object,
    /**
     * A next button element. For instance, it can be a `Button` or an `IconButton`.
     */
    nextButton: import_prop_types121.default.node,
    /**
     * Set the positioning type.
     * @default 'bottom'
     */
    position: import_prop_types121.default.oneOf(["bottom", "static", "top"]),
    /**
     * The total steps.
     */
    steps: import_utils213.integerPropType.isRequired,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types121.default.oneOfType([import_prop_types121.default.arrayOf(import_prop_types121.default.oneOfType([import_prop_types121.default.func, import_prop_types121.default.object, import_prop_types121.default.bool])), import_prop_types121.default.func, import_prop_types121.default.object]),
    /**
     * The variant to use.
     * @default 'dots'
     */
    variant: import_prop_types121.default.oneOf(["dots", "progress", "text"])
  } : void 0;
  var MobileStepper_default = MobileStepper;

  // node_modules/@mui/material/NativeSelect/NativeSelect.js
  init_extends();
  var React190 = __toESM(require_react());
  var import_prop_types123 = __toESM(require_prop_types());
  var import_composeClasses90 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/NativeSelect/NativeSelectInput.js
  init_extends();
  var React189 = __toESM(require_react());
  var import_prop_types122 = __toESM(require_prop_types());
  var import_utils215 = __toESM(require_utils());
  var import_composeClasses89 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/NativeSelect/nativeSelectClasses.js
  var import_utils214 = __toESM(require_utils());
  var import_generateUtilityClass99 = __toESM(require_generateUtilityClass3());
  function getNativeSelectUtilityClasses(slot) {
    return (0, import_generateUtilityClass99.default)("MuiNativeSelect", slot);
  }
  var nativeSelectClasses = (0, import_utils214.unstable_generateUtilityClasses)("MuiNativeSelect", ["root", "select", "multiple", "filled", "outlined", "standard", "disabled", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput", "error"]);
  var nativeSelectClasses_default = nativeSelectClasses;

  // node_modules/@mui/material/NativeSelect/NativeSelectInput.js
  var import_jsx_runtime169 = __toESM(require_jsx_runtime());
  var import_jsx_runtime170 = __toESM(require_jsx_runtime());
  var _excluded119 = ["className", "disabled", "error", "IconComponent", "inputRef", "variant"];
  var useUtilityClasses94 = (ownerState) => {
    const {
      classes,
      variant,
      disabled,
      multiple,
      open,
      error
    } = ownerState;
    const slots = {
      select: ["select", variant, disabled && "disabled", multiple && "multiple", error && "error"],
      icon: ["icon", `icon${capitalize_default(variant)}`, open && "iconOpen", disabled && "disabled"]
    };
    return (0, import_composeClasses89.unstable_composeClasses)(slots, getNativeSelectUtilityClasses, classes);
  };
  var nativeSelectSelectStyles = ({
    ownerState,
    theme
  }) => _extends({
    MozAppearance: "none",
    // Reset
    WebkitAppearance: "none",
    // Reset
    // When interacting quickly, the text can end up selected.
    // Native select can't be selected either.
    userSelect: "none",
    borderRadius: 0,
    // Reset
    cursor: "pointer",
    "&:focus": _extends({}, theme.vars ? {
      backgroundColor: `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.05)`
    } : {
      backgroundColor: theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.05)" : "rgba(255, 255, 255, 0.05)"
    }, {
      borderRadius: 0
      // Reset Chrome style
    }),
    // Remove IE11 arrow
    "&::-ms-expand": {
      display: "none"
    },
    [`&.${nativeSelectClasses_default.disabled}`]: {
      cursor: "default"
    },
    "&[multiple]": {
      height: "auto"
    },
    "&:not([multiple]) option, &:not([multiple]) optgroup": {
      backgroundColor: (theme.vars || theme).palette.background.paper
    },
    // Bump specificity to allow extending custom inputs
    "&&&": {
      paddingRight: 24,
      minWidth: 16
      // So it doesn't collapse.
    }
  }, ownerState.variant === "filled" && {
    "&&&": {
      paddingRight: 32
    }
  }, ownerState.variant === "outlined" && {
    borderRadius: (theme.vars || theme).shape.borderRadius,
    "&:focus": {
      borderRadius: (theme.vars || theme).shape.borderRadius
      // Reset the reset for Chrome style
    },
    "&&&": {
      paddingRight: 32
    }
  });
  var NativeSelectSelect = styled_default("select", {
    name: "MuiNativeSelect",
    slot: "Select",
    shouldForwardProp: rootShouldForwardProp,
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.select, styles7[ownerState.variant], ownerState.error && styles7.error, {
        [`&.${nativeSelectClasses_default.multiple}`]: styles7.multiple
      }];
    }
  })(nativeSelectSelectStyles);
  var nativeSelectIconStyles = ({
    ownerState,
    theme
  }) => _extends({
    // We use a position absolute over a flexbox in order to forward the pointer events
    // to the input and to support wrapping tags..
    position: "absolute",
    right: 0,
    top: "calc(50% - .5em)",
    // Center vertically, height is 1em
    pointerEvents: "none",
    // Don't block pointer events on the select under the icon.
    color: (theme.vars || theme).palette.action.active,
    [`&.${nativeSelectClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.action.disabled
    }
  }, ownerState.open && {
    transform: "rotate(180deg)"
  }, ownerState.variant === "filled" && {
    right: 7
  }, ownerState.variant === "outlined" && {
    right: 7
  });
  var NativeSelectIcon = styled_default("svg", {
    name: "MuiNativeSelect",
    slot: "Icon",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.icon, ownerState.variant && styles7[`icon${capitalize_default(ownerState.variant)}`], ownerState.open && styles7.iconOpen];
    }
  })(nativeSelectIconStyles);
  var NativeSelectInput = /* @__PURE__ */ React189.forwardRef(function NativeSelectInput2(props, ref) {
    const {
      className,
      disabled,
      error,
      IconComponent,
      inputRef,
      variant = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded119);
    const ownerState = _extends({}, props, {
      disabled,
      variant,
      error
    });
    const classes = useUtilityClasses94(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime170.jsxs)(React189.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime169.jsx)(NativeSelectSelect, _extends({
        ownerState,
        className: clsx_default(classes.select, className),
        disabled,
        ref: inputRef || ref
      }, other)), props.multiple ? null : /* @__PURE__ */ (0, import_jsx_runtime169.jsx)(NativeSelectIcon, {
        as: IconComponent,
        ownerState,
        className: classes.icon
      })]
    });
  });
  true ? NativeSelectInput.propTypes = {
    /**
     * The option elements to populate the select with.
     * Can be some `<option>` elements.
     */
    children: import_prop_types122.default.node,
    /**
     * Override or extend the styles applied to the component.
     * See [CSS API](#css) below for more details.
     */
    classes: import_prop_types122.default.object,
    /**
     * The CSS class name of the select element.
     */
    className: import_prop_types122.default.string,
    /**
     * If `true`, the select is disabled.
     */
    disabled: import_prop_types122.default.bool,
    /**
     * If `true`, the `select input` will indicate an error.
     */
    error: import_prop_types122.default.bool,
    /**
     * The icon that displays the arrow.
     */
    IconComponent: import_prop_types122.default.elementType.isRequired,
    /**
     * Use that prop to pass a ref to the native select element.
     * @deprecated
     */
    inputRef: import_utils215.refType,
    /**
     * @ignore
     */
    multiple: import_prop_types122.default.bool,
    /**
     * Name attribute of the `select` or hidden `input` element.
     */
    name: import_prop_types122.default.string,
    /**
     * Callback fired when a menu item is selected.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types122.default.func,
    /**
     * The input value.
     */
    value: import_prop_types122.default.any,
    /**
     * The variant to use.
     */
    variant: import_prop_types122.default.oneOf(["standard", "outlined", "filled"])
  } : void 0;
  var NativeSelectInput_default = NativeSelectInput;

  // node_modules/@mui/material/NativeSelect/NativeSelect.js
  var import_jsx_runtime171 = __toESM(require_jsx_runtime());
  var _excluded120 = ["className", "children", "classes", "IconComponent", "input", "inputProps", "variant"];
  var _excluded216 = ["root"];
  var useUtilityClasses95 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return (0, import_composeClasses90.unstable_composeClasses)(slots, getNativeSelectUtilityClasses, classes);
  };
  var defaultInput = /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(Input_default, {});
  var NativeSelect = /* @__PURE__ */ React190.forwardRef(function NativeSelect2(inProps, ref) {
    const props = useThemeProps({
      name: "MuiNativeSelect",
      props: inProps
    });
    const {
      className,
      children,
      classes: classesProp = {},
      IconComponent = ArrowDropDown_default,
      input = defaultInput,
      inputProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded120);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant"]
    });
    const ownerState = _extends({}, props, {
      classes: classesProp
    });
    const classes = useUtilityClasses95(ownerState);
    const otherClasses = _objectWithoutPropertiesLoose(classesProp, _excluded216);
    return /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(React190.Fragment, {
      children: /* @__PURE__ */ React190.cloneElement(input, _extends({
        // Most of the logic is implemented in `NativeSelectInput`.
        // The `Select` component is a simple API wrapper to expose something better to play with.
        inputComponent: NativeSelectInput_default,
        inputProps: _extends({
          children,
          classes: otherClasses,
          IconComponent,
          variant: fcs.variant,
          type: void 0
        }, inputProps, input ? input.props.inputProps : {}),
        ref
      }, other, {
        className: clsx_default(classes.root, input.props.className, className)
      }))
    });
  });
  true ? NativeSelect.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The option elements to populate the select with.
     * Can be some `<option>` elements.
     */
    children: import_prop_types123.default.node,
    /**
     * Override or extend the styles applied to the component.
     * @default {}
     */
    classes: import_prop_types123.default.object,
    /**
     * @ignore
     */
    className: import_prop_types123.default.string,
    /**
     * The icon that displays the arrow.
     * @default ArrowDropDownIcon
     */
    IconComponent: import_prop_types123.default.elementType,
    /**
     * An `Input` element; does not have to be a material-ui specific `Input`.
     * @default <Input />
     */
    input: import_prop_types123.default.element,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#attributes) applied to the `select` element.
     */
    inputProps: import_prop_types123.default.object,
    /**
     * Callback fired when a menu item is selected.
     *
     * @param {React.ChangeEvent<HTMLSelectElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types123.default.func,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types123.default.oneOfType([import_prop_types123.default.arrayOf(import_prop_types123.default.oneOfType([import_prop_types123.default.func, import_prop_types123.default.object, import_prop_types123.default.bool])), import_prop_types123.default.func, import_prop_types123.default.object]),
    /**
     * The `input` value. The DOM API casts this to a string.
     */
    value: import_prop_types123.default.any,
    /**
     * The variant to use.
     */
    variant: import_prop_types123.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  NativeSelect.muiName = "Select";
  var NativeSelect_default = NativeSelect;

  // node_modules/@mui/material/OutlinedInput/OutlinedInput.js
  init_extends();
  var React192 = __toESM(require_react());
  var import_prop_types125 = __toESM(require_prop_types());
  var import_utils216 = __toESM(require_utils());
  var import_composeClasses91 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/OutlinedInput/NotchedOutline.js
  init_extends();
  var React191 = __toESM(require_react());
  var import_prop_types124 = __toESM(require_prop_types());
  var import_jsx_runtime172 = __toESM(require_jsx_runtime());
  var _span7;
  var _excluded121 = ["children", "classes", "className", "label", "notched"];
  var NotchedOutlineRoot = styled_default("fieldset")({
    textAlign: "left",
    position: "absolute",
    bottom: 0,
    right: 0,
    top: -5,
    left: 0,
    margin: 0,
    padding: "0 8px",
    pointerEvents: "none",
    borderRadius: "inherit",
    borderStyle: "solid",
    borderWidth: 1,
    overflow: "hidden",
    minWidth: "0%"
  });
  var NotchedOutlineLegend = styled_default("legend")(({
    ownerState,
    theme
  }) => _extends({
    float: "unset",
    // Fix conflict with bootstrap
    width: "auto",
    // Fix conflict with bootstrap
    overflow: "hidden"
  }, !ownerState.withLabel && {
    padding: 0,
    lineHeight: "11px",
    // sync with `height` in `legend` styles
    transition: theme.transitions.create("width", {
      duration: 150,
      easing: theme.transitions.easing.easeOut
    })
  }, ownerState.withLabel && _extends({
    display: "block",
    // Fix conflict with normalize.css and sanitize.css
    padding: 0,
    height: 11,
    // sync with `lineHeight` in `legend` styles
    fontSize: "0.75em",
    visibility: "hidden",
    maxWidth: 0.01,
    transition: theme.transitions.create("max-width", {
      duration: 50,
      easing: theme.transitions.easing.easeOut
    }),
    whiteSpace: "nowrap",
    "& > span": {
      paddingLeft: 5,
      paddingRight: 5,
      display: "inline-block",
      opacity: 0,
      visibility: "visible"
    }
  }, ownerState.notched && {
    maxWidth: "100%",
    transition: theme.transitions.create("max-width", {
      duration: 100,
      easing: theme.transitions.easing.easeOut,
      delay: 50
    })
  })));
  function NotchedOutline(props) {
    const {
      className,
      label,
      notched
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded121);
    const withLabel = label != null && label !== "";
    const ownerState = _extends({}, props, {
      notched,
      withLabel
    });
    return /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(NotchedOutlineRoot, _extends({
      "aria-hidden": true,
      className,
      ownerState
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(NotchedOutlineLegend, {
        ownerState,
        children: withLabel ? /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("span", {
          children: label
        }) : (
          // notranslate needed while Google Translate will not fix zero-width space issue
          _span7 || (_span7 = /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("span", {
            className: "notranslate",
            children: "\u200B"
          }))
        )
      })
    }));
  }
  true ? NotchedOutline.propTypes = {
    /**
     * The content of the component.
     */
    children: import_prop_types124.default.node,
    /**
     * Override or extend the styles applied to the component.
     * See [CSS API](#css) below for more details.
     */
    classes: import_prop_types124.default.object,
    /**
     * @ignore
     */
    className: import_prop_types124.default.string,
    /**
     * The label.
     */
    label: import_prop_types124.default.node,
    /**
     * If `true`, the outline is notched to accommodate the label.
     */
    notched: import_prop_types124.default.bool.isRequired,
    /**
     * @ignore
     */
    style: import_prop_types124.default.object
  } : void 0;

  // node_modules/@mui/material/OutlinedInput/OutlinedInput.js
  var import_jsx_runtime173 = __toESM(require_jsx_runtime());
  var import_jsx_runtime174 = __toESM(require_jsx_runtime());
  var _excluded122 = ["components", "fullWidth", "inputComponent", "label", "multiline", "notched", "slots", "type"];
  var useUtilityClasses96 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      notchedOutline: ["notchedOutline"],
      input: ["input"]
    };
    const composedClasses = (0, import_composeClasses91.unstable_composeClasses)(slots, getOutlinedInputUtilityClass, classes);
    return _extends({}, classes, composedClasses);
  };
  var OutlinedInputRoot = styled_default(InputBaseRoot, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiOutlinedInput",
    slot: "Root",
    overridesResolver: rootOverridesResolver
  })(({
    theme,
    ownerState
  }) => {
    const borderColor = theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
    return _extends({
      position: "relative",
      borderRadius: (theme.vars || theme).shape.borderRadius,
      [`&:hover .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: (theme.vars || theme).palette.text.primary
      },
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        [`&:hover .${outlinedInputClasses_default.notchedOutline}`]: {
          borderColor: theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor
        }
      },
      [`&.${outlinedInputClasses_default.focused} .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: (theme.vars || theme).palette[ownerState.color].main,
        borderWidth: 2
      },
      [`&.${outlinedInputClasses_default.error} .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: (theme.vars || theme).palette.error.main
      },
      [`&.${outlinedInputClasses_default.disabled} .${outlinedInputClasses_default.notchedOutline}`]: {
        borderColor: (theme.vars || theme).palette.action.disabled
      }
    }, ownerState.startAdornment && {
      paddingLeft: 14
    }, ownerState.endAdornment && {
      paddingRight: 14
    }, ownerState.multiline && _extends({
      padding: "16.5px 14px"
    }, ownerState.size === "small" && {
      padding: "8.5px 14px"
    }));
  });
  var NotchedOutlineRoot2 = styled_default(NotchedOutline, {
    name: "MuiOutlinedInput",
    slot: "NotchedOutline",
    overridesResolver: (props, styles7) => styles7.notchedOutline
  })(({
    theme
  }) => {
    const borderColor = theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)";
    return {
      borderColor: theme.vars ? `rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : borderColor
    };
  });
  var OutlinedInputInput = styled_default(InputBaseComponent, {
    name: "MuiOutlinedInput",
    slot: "Input",
    overridesResolver: inputOverridesResolver
  })(({
    theme,
    ownerState
  }) => _extends({
    padding: "16.5px 14px"
  }, !theme.vars && {
    "&:-webkit-autofill": {
      WebkitBoxShadow: theme.palette.mode === "light" ? null : "0 0 0 100px #266798 inset",
      WebkitTextFillColor: theme.palette.mode === "light" ? null : "#fff",
      caretColor: theme.palette.mode === "light" ? null : "#fff",
      borderRadius: "inherit"
    }
  }, theme.vars && {
    "&:-webkit-autofill": {
      borderRadius: "inherit"
    },
    [theme.getColorSchemeSelector("dark")]: {
      "&:-webkit-autofill": {
        WebkitBoxShadow: "0 0 0 100px #266798 inset",
        WebkitTextFillColor: "#fff",
        caretColor: "#fff"
      }
    }
  }, ownerState.size === "small" && {
    padding: "8.5px 14px"
  }, ownerState.multiline && {
    padding: 0
  }, ownerState.startAdornment && {
    paddingLeft: 0
  }, ownerState.endAdornment && {
    paddingRight: 0
  }));
  var OutlinedInput = /* @__PURE__ */ React192.forwardRef(function OutlinedInput2(inProps, ref) {
    var _ref, _slots$root, _ref2, _slots$input, _React$Fragment;
    const props = useThemeProps({
      props: inProps,
      name: "MuiOutlinedInput"
    });
    const {
      components = {},
      fullWidth = false,
      inputComponent = "input",
      label,
      multiline = false,
      notched,
      slots = {},
      type = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded122);
    const classes = useUtilityClasses96(props);
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["color", "disabled", "error", "focused", "hiddenLabel", "size", "required"]
    });
    const ownerState = _extends({}, props, {
      color: fcs.color || "primary",
      disabled: fcs.disabled,
      error: fcs.error,
      focused: fcs.focused,
      formControl: muiFormControl,
      fullWidth,
      hiddenLabel: fcs.hiddenLabel,
      multiline,
      size: fcs.size,
      type
    });
    const RootSlot = (_ref = (_slots$root = slots.root) != null ? _slots$root : components.Root) != null ? _ref : OutlinedInputRoot;
    const InputSlot = (_ref2 = (_slots$input = slots.input) != null ? _slots$input : components.Input) != null ? _ref2 : OutlinedInputInput;
    return /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(InputBase_default, _extends({
      slots: {
        root: RootSlot,
        input: InputSlot
      },
      renderSuffix: (state) => /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(NotchedOutlineRoot2, {
        ownerState,
        className: classes.notchedOutline,
        label: label != null && label !== "" && fcs.required ? _React$Fragment || (_React$Fragment = /* @__PURE__ */ (0, import_jsx_runtime173.jsxs)(React192.Fragment, {
          children: [label, "\u2009", "*"]
        })) : label,
        notched: typeof notched !== "undefined" ? notched : Boolean(state.startAdornment || state.filled || state.focused)
      }),
      fullWidth,
      inputComponent,
      multiline,
      ref,
      type
    }, other, {
      classes: _extends({}, classes, {
        notchedOutline: null
      })
    }));
  });
  true ? OutlinedInput.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: import_prop_types125.default.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     */
    autoFocus: import_prop_types125.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types125.default.object,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * The prop defaults to the value (`'primary'`) inherited from the parent FormControl component.
     */
    color: import_prop_types125.default.oneOfType([import_prop_types125.default.oneOf(["primary", "secondary"]), import_prop_types125.default.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types125.default.shape({
      Input: import_prop_types125.default.elementType,
      Root: import_prop_types125.default.elementType
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types125.default.any,
    /**
     * If `true`, the component is disabled.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    disabled: import_prop_types125.default.bool,
    /**
     * End `InputAdornment` for this component.
     */
    endAdornment: import_prop_types125.default.node,
    /**
     * If `true`, the `input` will indicate an error.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    error: import_prop_types125.default.bool,
    /**
     * If `true`, the `input` will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types125.default.bool,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types125.default.string,
    /**
     * The component used for the `input` element.
     * Either a string to use a HTML element or a component.
     * @default 'input'
     */
    inputComponent: import_prop_types125.default.elementType,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * @default {}
     */
    inputProps: import_prop_types125.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: import_utils216.refType,
    /**
     * The label of the `input`. It is only used for layout. The actual labelling
     * is handled by `InputLabel`.
     */
    label: import_prop_types125.default.node,
    /**
     * If `dense`, will adjust vertical spacing. This is normally obtained via context from
     * FormControl.
     * The prop defaults to the value (`'none'`) inherited from the parent FormControl component.
     */
    margin: import_prop_types125.default.oneOf(["dense", "none"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: import_prop_types125.default.oneOfType([import_prop_types125.default.number, import_prop_types125.default.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: import_prop_types125.default.oneOfType([import_prop_types125.default.number, import_prop_types125.default.string]),
    /**
     * If `true`, a [TextareaAutosize](/material-ui/react-textarea-autosize/) element is rendered.
     * @default false
     */
    multiline: import_prop_types125.default.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types125.default.string,
    /**
     * If `true`, the outline is notched to accommodate the label.
     */
    notched: import_prop_types125.default.bool,
    /**
     * Callback fired when the value is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types125.default.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: import_prop_types125.default.string,
    /**
     * It prevents the user from changing the value of the field
     * (not from interacting with the field).
     */
    readOnly: import_prop_types125.default.bool,
    /**
     * If `true`, the `input` element is required.
     * The prop defaults to the value (`false`) inherited from the parent FormControl component.
     */
    required: import_prop_types125.default.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: import_prop_types125.default.oneOfType([import_prop_types125.default.number, import_prop_types125.default.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types125.default.shape({
      input: import_prop_types125.default.elementType,
      root: import_prop_types125.default.elementType
    }),
    /**
     * Start `InputAdornment` for this component.
     */
    startAdornment: import_prop_types125.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types125.default.oneOfType([import_prop_types125.default.arrayOf(import_prop_types125.default.oneOfType([import_prop_types125.default.func, import_prop_types125.default.object, import_prop_types125.default.bool])), import_prop_types125.default.func, import_prop_types125.default.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     * @default 'text'
     */
    type: import_prop_types125.default.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: import_prop_types125.default.any
  } : void 0;
  OutlinedInput.muiName = "Input";
  var OutlinedInput_default = OutlinedInput;

  // node_modules/@mui/material/Pagination/Pagination.js
  init_extends();
  var React198 = __toESM(require_react());
  var import_prop_types127 = __toESM(require_prop_types());
  var import_composeClasses93 = __toESM(require_composeClasses3());
  var import_utils220 = __toESM(require_utils());

  // node_modules/@mui/material/Pagination/paginationClasses.js
  var import_utils217 = __toESM(require_utils());
  var import_generateUtilityClass100 = __toESM(require_generateUtilityClass3());
  function getPaginationUtilityClass(slot) {
    return (0, import_generateUtilityClass100.default)("MuiPagination", slot);
  }
  var paginationClasses = (0, import_utils217.unstable_generateUtilityClasses)("MuiPagination", ["root", "ul", "outlined", "text"]);
  var paginationClasses_default = paginationClasses;

  // node_modules/@mui/material/usePagination/usePagination.js
  init_extends();
  var import_utils218 = __toESM(require_utils());
  var _excluded123 = ["boundaryCount", "componentName", "count", "defaultPage", "disabled", "hideNextButton", "hidePrevButton", "onChange", "page", "showFirstButton", "showLastButton", "siblingCount"];
  function usePagination(props = {}) {
    const {
      boundaryCount = 1,
      componentName = "usePagination",
      count = 1,
      defaultPage = 1,
      disabled = false,
      hideNextButton = false,
      hidePrevButton = false,
      onChange: handleChange,
      page: pageProp,
      showFirstButton = false,
      showLastButton = false,
      siblingCount = 1
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded123);
    const [page, setPageState] = (0, import_utils218.unstable_useControlled)({
      controlled: pageProp,
      default: defaultPage,
      name: componentName,
      state: "page"
    });
    const handleClick = (event, value) => {
      if (!pageProp) {
        setPageState(value);
      }
      if (handleChange) {
        handleChange(event, value);
      }
    };
    const range = (start2, end2) => {
      const length2 = end2 - start2 + 1;
      return Array.from({
        length: length2
      }, (_5, i) => start2 + i);
    };
    const startPages = range(1, Math.min(boundaryCount, count));
    const endPages = range(Math.max(count - boundaryCount + 1, boundaryCount + 1), count);
    const siblingsStart = Math.max(
      Math.min(
        // Natural start
        page - siblingCount,
        // Lower boundary when page is high
        count - boundaryCount - siblingCount * 2 - 1
      ),
      // Greater than startPages
      boundaryCount + 2
    );
    const siblingsEnd = Math.min(
      Math.max(
        // Natural end
        page + siblingCount,
        // Upper boundary when page is low
        boundaryCount + siblingCount * 2 + 2
      ),
      // Less than endPages
      endPages.length > 0 ? endPages[0] - 2 : count - 1
    );
    const itemList = [
      ...showFirstButton ? ["first"] : [],
      ...hidePrevButton ? [] : ["previous"],
      ...startPages,
      // Start ellipsis
      // eslint-disable-next-line no-nested-ternary
      ...siblingsStart > boundaryCount + 2 ? ["start-ellipsis"] : boundaryCount + 1 < count - boundaryCount ? [boundaryCount + 1] : [],
      // Sibling pages
      ...range(siblingsStart, siblingsEnd),
      // End ellipsis
      // eslint-disable-next-line no-nested-ternary
      ...siblingsEnd < count - boundaryCount - 1 ? ["end-ellipsis"] : count - boundaryCount > boundaryCount ? [count - boundaryCount] : [],
      ...endPages,
      ...hideNextButton ? [] : ["next"],
      ...showLastButton ? ["last"] : []
    ];
    const buttonPage = (type) => {
      switch (type) {
        case "first":
          return 1;
        case "previous":
          return page - 1;
        case "next":
          return page + 1;
        case "last":
          return count;
        default:
          return null;
      }
    };
    const items = itemList.map((item) => {
      return typeof item === "number" ? {
        onClick: (event) => {
          handleClick(event, item);
        },
        type: "page",
        page: item,
        selected: item === page,
        disabled,
        "aria-current": item === page ? "true" : void 0
      } : {
        onClick: (event) => {
          handleClick(event, buttonPage(item));
        },
        type: item,
        page: buttonPage(item),
        selected: false,
        disabled: disabled || item.indexOf("ellipsis") === -1 && (item === "next" || item === "last" ? page >= count : page <= 1)
      };
    });
    return _extends({
      items
    }, other);
  }

  // node_modules/@mui/material/PaginationItem/PaginationItem.js
  init_extends();
  var React197 = __toESM(require_react());
  var import_prop_types126 = __toESM(require_prop_types());
  var import_composeClasses92 = __toESM(require_composeClasses3());
  var import_system38 = __toESM(require_system());

  // node_modules/@mui/material/PaginationItem/paginationItemClasses.js
  var import_utils219 = __toESM(require_utils());
  var import_generateUtilityClass101 = __toESM(require_generateUtilityClass3());
  function getPaginationItemUtilityClass(slot) {
    return (0, import_generateUtilityClass101.default)("MuiPaginationItem", slot);
  }
  var paginationItemClasses = (0, import_utils219.unstable_generateUtilityClasses)("MuiPaginationItem", ["root", "page", "sizeSmall", "sizeLarge", "text", "textPrimary", "textSecondary", "outlined", "outlinedPrimary", "outlinedSecondary", "rounded", "ellipsis", "firstLast", "previousNext", "focusVisible", "disabled", "selected", "icon"]);
  var paginationItemClasses_default = paginationItemClasses;

  // node_modules/@mui/material/internal/svg-icons/FirstPage.js
  var React193 = __toESM(require_react());
  var import_jsx_runtime175 = __toESM(require_jsx_runtime());
  var FirstPage_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime175.jsx)("path", {
    d: "M18.41 16.59L13.82 12l4.59-4.59L17 6l-6 6 6 6zM6 6h2v12H6z"
  }), "FirstPage");

  // node_modules/@mui/material/internal/svg-icons/LastPage.js
  var React194 = __toESM(require_react());
  var import_jsx_runtime176 = __toESM(require_jsx_runtime());
  var LastPage_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime176.jsx)("path", {
    d: "M5.59 7.41L10.18 12l-4.59 4.59L7 18l6-6-6-6zM16 6h2v12h-2z"
  }), "LastPage");

  // node_modules/@mui/material/internal/svg-icons/NavigateBefore.js
  var React195 = __toESM(require_react());
  var import_jsx_runtime177 = __toESM(require_jsx_runtime());
  var NavigateBefore_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime177.jsx)("path", {
    d: "M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"
  }), "NavigateBefore");

  // node_modules/@mui/material/internal/svg-icons/NavigateNext.js
  var React196 = __toESM(require_react());
  var import_jsx_runtime178 = __toESM(require_jsx_runtime());
  var NavigateNext_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime178.jsx)("path", {
    d: "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"
  }), "NavigateNext");

  // node_modules/@mui/material/PaginationItem/PaginationItem.js
  var import_jsx_runtime179 = __toESM(require_jsx_runtime());
  var import_jsx_runtime180 = __toESM(require_jsx_runtime());
  var _excluded124 = ["className", "color", "component", "components", "disabled", "page", "selected", "shape", "size", "slots", "type", "variant"];
  var overridesResolver7 = (props, styles7) => {
    const {
      ownerState
    } = props;
    return [styles7.root, styles7[ownerState.variant], styles7[`size${capitalize_default(ownerState.size)}`], ownerState.variant === "text" && styles7[`text${capitalize_default(ownerState.color)}`], ownerState.variant === "outlined" && styles7[`outlined${capitalize_default(ownerState.color)}`], ownerState.shape === "rounded" && styles7.rounded, ownerState.type === "page" && styles7.page, (ownerState.type === "start-ellipsis" || ownerState.type === "end-ellipsis") && styles7.ellipsis, (ownerState.type === "previous" || ownerState.type === "next") && styles7.previousNext, (ownerState.type === "first" || ownerState.type === "last") && styles7.firstLast];
  };
  var useUtilityClasses97 = (ownerState) => {
    const {
      classes,
      color,
      disabled,
      selected,
      size: size2,
      shape,
      type,
      variant
    } = ownerState;
    const slots = {
      root: ["root", `size${capitalize_default(size2)}`, variant, shape, color !== "standard" && `${variant}${capitalize_default(color)}`, disabled && "disabled", selected && "selected", {
        page: "page",
        first: "firstLast",
        last: "firstLast",
        "start-ellipsis": "ellipsis",
        "end-ellipsis": "ellipsis",
        previous: "previousNext",
        next: "previousNext"
      }[type]],
      icon: ["icon"]
    };
    return (0, import_composeClasses92.unstable_composeClasses)(slots, getPaginationItemUtilityClass, classes);
  };
  var PaginationItemEllipsis = styled_default("div", {
    name: "MuiPaginationItem",
    slot: "Root",
    overridesResolver: overridesResolver7
  })(({
    theme,
    ownerState
  }) => _extends({}, theme.typography.body2, {
    borderRadius: 32 / 2,
    textAlign: "center",
    boxSizing: "border-box",
    minWidth: 32,
    padding: "0 6px",
    margin: "0 3px",
    color: (theme.vars || theme).palette.text.primary,
    height: "auto",
    [`&.${paginationItemClasses_default.disabled}`]: {
      opacity: (theme.vars || theme).palette.action.disabledOpacity
    }
  }, ownerState.size === "small" && {
    minWidth: 26,
    borderRadius: 26 / 2,
    margin: "0 1px",
    padding: "0 4px"
  }, ownerState.size === "large" && {
    minWidth: 40,
    borderRadius: 40 / 2,
    padding: "0 10px",
    fontSize: theme.typography.pxToRem(15)
  }));
  var PaginationItemPage = styled_default(ButtonBase_default, {
    name: "MuiPaginationItem",
    slot: "Root",
    overridesResolver: overridesResolver7
  })(({
    theme,
    ownerState
  }) => _extends({}, theme.typography.body2, {
    borderRadius: 32 / 2,
    textAlign: "center",
    boxSizing: "border-box",
    minWidth: 32,
    height: 32,
    padding: "0 6px",
    margin: "0 3px",
    color: (theme.vars || theme).palette.text.primary,
    [`&.${paginationItemClasses_default.focusVisible}`]: {
      backgroundColor: (theme.vars || theme).palette.action.focus
    },
    [`&.${paginationItemClasses_default.disabled}`]: {
      opacity: (theme.vars || theme).palette.action.disabledOpacity
    },
    transition: theme.transitions.create(["color", "background-color"], {
      duration: theme.transitions.duration.short
    }),
    "&:hover": {
      backgroundColor: (theme.vars || theme).palette.action.hover,
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    },
    [`&.${paginationItemClasses_default.selected}`]: {
      backgroundColor: (theme.vars || theme).palette.action.selected,
      "&:hover": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selected} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : (0, import_system38.alpha)(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: (theme.vars || theme).palette.action.selected
        }
      },
      [`&.${paginationItemClasses_default.focusVisible}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.selected} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, import_system38.alpha)(theme.palette.action.selected, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
      },
      [`&.${paginationItemClasses_default.disabled}`]: {
        opacity: 1,
        color: (theme.vars || theme).palette.action.disabled,
        backgroundColor: (theme.vars || theme).palette.action.selected
      }
    }
  }, ownerState.size === "small" && {
    minWidth: 26,
    height: 26,
    borderRadius: 26 / 2,
    margin: "0 1px",
    padding: "0 4px"
  }, ownerState.size === "large" && {
    minWidth: 40,
    height: 40,
    borderRadius: 40 / 2,
    padding: "0 10px",
    fontSize: theme.typography.pxToRem(15)
  }, ownerState.shape === "rounded" && {
    borderRadius: (theme.vars || theme).shape.borderRadius
  }), ({
    theme,
    ownerState
  }) => _extends({}, ownerState.variant === "text" && {
    [`&.${paginationItemClasses_default.selected}`]: _extends({}, ownerState.color !== "standard" && {
      color: (theme.vars || theme).palette[ownerState.color].contrastText,
      backgroundColor: (theme.vars || theme).palette[ownerState.color].main,
      "&:hover": {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].dark,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: (theme.vars || theme).palette[ownerState.color].main
        }
      },
      [`&.${paginationItemClasses_default.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette[ownerState.color].dark
      }
    }, {
      [`&.${paginationItemClasses_default.disabled}`]: {
        color: (theme.vars || theme).palette.action.disabled
      }
    })
  }, ownerState.variant === "outlined" && {
    border: theme.vars ? `1px solid rgba(${theme.vars.palette.common.onBackgroundChannel} / 0.23)` : `1px solid ${theme.palette.mode === "light" ? "rgba(0, 0, 0, 0.23)" : "rgba(255, 255, 255, 0.23)"}`,
    [`&.${paginationItemClasses_default.selected}`]: _extends({}, ownerState.color !== "standard" && {
      color: (theme.vars || theme).palette[ownerState.color].main,
      border: `1px solid ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.5)` : (0, import_system38.alpha)(theme.palette[ownerState.color].main, 0.5)}`,
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.activatedOpacity})` : (0, import_system38.alpha)(theme.palette[ownerState.color].main, theme.palette.action.activatedOpacity),
      "&:hover": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / calc(${theme.vars.palette.action.activatedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, import_system38.alpha)(theme.palette[ownerState.color].main, theme.palette.action.activatedOpacity + theme.palette.action.focusOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      },
      [`&.${paginationItemClasses_default.focusVisible}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / calc(${theme.vars.palette.action.activatedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : (0, import_system38.alpha)(theme.palette[ownerState.color].main, theme.palette.action.activatedOpacity + theme.palette.action.focusOpacity)
      }
    }, {
      [`&.${paginationItemClasses_default.disabled}`]: {
        borderColor: (theme.vars || theme).palette.action.disabledBackground,
        color: (theme.vars || theme).palette.action.disabled
      }
    })
  }));
  var PaginationItemPageIcon = styled_default("div", {
    name: "MuiPaginationItem",
    slot: "Icon",
    overridesResolver: (props, styles7) => styles7.icon
  })(({
    theme,
    ownerState
  }) => _extends({
    fontSize: theme.typography.pxToRem(20),
    margin: "0 -8px"
  }, ownerState.size === "small" && {
    fontSize: theme.typography.pxToRem(18)
  }, ownerState.size === "large" && {
    fontSize: theme.typography.pxToRem(22)
  }));
  var PaginationItem = /* @__PURE__ */ React197.forwardRef(function PaginationItem2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiPaginationItem"
    });
    const {
      className,
      color = "standard",
      component,
      components = {},
      disabled = false,
      page,
      selected = false,
      shape = "circular",
      size: size2 = "medium",
      slots = {},
      type = "page",
      variant = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded124);
    const ownerState = _extends({}, props, {
      color,
      disabled,
      selected,
      shape,
      size: size2,
      type,
      variant
    });
    const theme = useTheme4();
    const classes = useUtilityClasses97(ownerState);
    const normalizedIcons = theme.direction === "rtl" ? {
      previous: slots.next || components.next || NavigateNext_default,
      next: slots.previous || components.previous || NavigateBefore_default,
      last: slots.first || components.first || FirstPage_default,
      first: slots.last || components.last || LastPage_default
    } : {
      previous: slots.previous || components.previous || NavigateBefore_default,
      next: slots.next || components.next || NavigateNext_default,
      first: slots.first || components.first || FirstPage_default,
      last: slots.last || components.last || LastPage_default
    };
    const Icon3 = normalizedIcons[type];
    return type === "start-ellipsis" || type === "end-ellipsis" ? /* @__PURE__ */ (0, import_jsx_runtime179.jsx)(PaginationItemEllipsis, {
      ref,
      ownerState,
      className: clsx_default(classes.root, className),
      children: "\u2026"
    }) : /* @__PURE__ */ (0, import_jsx_runtime180.jsxs)(PaginationItemPage, _extends({
      ref,
      ownerState,
      component,
      disabled,
      className: clsx_default(classes.root, className)
    }, other, {
      children: [type === "page" && page, Icon3 ? /* @__PURE__ */ (0, import_jsx_runtime179.jsx)(PaginationItemPageIcon, {
        as: Icon3,
        ownerState,
        className: classes.icon
      }) : null]
    }));
  });
  true ? PaginationItem.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * @ignore
     */
    children: import_prop_types126.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types126.default.object,
    /**
     * @ignore
     */
    className: import_prop_types126.default.string,
    /**
     * The active color.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'standard'
     */
    color: import_prop_types126.default.oneOfType([import_prop_types126.default.oneOf(["primary", "secondary", "standard"]), import_prop_types126.default.string]),
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types126.default.elementType,
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types126.default.shape({
      first: import_prop_types126.default.elementType,
      last: import_prop_types126.default.elementType,
      next: import_prop_types126.default.elementType,
      previous: import_prop_types126.default.elementType
    }),
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types126.default.bool,
    /**
     * The current page number.
     */
    page: import_prop_types126.default.node,
    /**
     * If `true` the pagination item is selected.
     * @default false
     */
    selected: import_prop_types126.default.bool,
    /**
     * The shape of the pagination item.
     * @default 'circular'
     */
    shape: import_prop_types126.default.oneOf(["circular", "rounded"]),
    /**
     * The size of the component.
     * @default 'medium'
     */
    size: import_prop_types126.default.oneOfType([import_prop_types126.default.oneOf(["small", "medium", "large"]), import_prop_types126.default.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types126.default.shape({
      first: import_prop_types126.default.elementType,
      last: import_prop_types126.default.elementType,
      next: import_prop_types126.default.elementType,
      previous: import_prop_types126.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types126.default.oneOfType([import_prop_types126.default.arrayOf(import_prop_types126.default.oneOfType([import_prop_types126.default.func, import_prop_types126.default.object, import_prop_types126.default.bool])), import_prop_types126.default.func, import_prop_types126.default.object]),
    /**
     * The type of pagination item.
     * @default 'page'
     */
    type: import_prop_types126.default.oneOf(["end-ellipsis", "first", "last", "next", "page", "previous", "start-ellipsis"]),
    /**
     * The variant to use.
     * @default 'text'
     */
    variant: import_prop_types126.default.oneOfType([import_prop_types126.default.oneOf(["outlined", "text"]), import_prop_types126.default.string])
  } : void 0;
  var PaginationItem_default = PaginationItem;

  // node_modules/@mui/material/Pagination/Pagination.js
  var import_jsx_runtime181 = __toESM(require_jsx_runtime());
  var _excluded125 = ["boundaryCount", "className", "color", "count", "defaultPage", "disabled", "getItemAriaLabel", "hideNextButton", "hidePrevButton", "onChange", "page", "renderItem", "shape", "showFirstButton", "showLastButton", "siblingCount", "size", "variant"];
  var useUtilityClasses98 = (ownerState) => {
    const {
      classes,
      variant
    } = ownerState;
    const slots = {
      root: ["root", variant],
      ul: ["ul"]
    };
    return (0, import_composeClasses93.unstable_composeClasses)(slots, getPaginationUtilityClass, classes);
  };
  var PaginationRoot = styled_default("nav", {
    name: "MuiPagination",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, styles7[ownerState.variant]];
    }
  })({});
  var PaginationUl = styled_default("ul", {
    name: "MuiPagination",
    slot: "Ul",
    overridesResolver: (props, styles7) => styles7.ul
  })({
    display: "flex",
    flexWrap: "wrap",
    alignItems: "center",
    padding: 0,
    margin: 0,
    listStyle: "none"
  });
  function defaultGetAriaLabel3(type, page, selected) {
    if (type === "page") {
      return `${selected ? "" : "Go to "}page ${page}`;
    }
    return `Go to ${type} page`;
  }
  var Pagination = /* @__PURE__ */ React198.forwardRef(function Pagination2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiPagination"
    });
    const {
      boundaryCount = 1,
      className,
      color = "standard",
      count = 1,
      defaultPage = 1,
      disabled = false,
      getItemAriaLabel = defaultGetAriaLabel3,
      hideNextButton = false,
      hidePrevButton = false,
      renderItem = (item) => /* @__PURE__ */ (0, import_jsx_runtime181.jsx)(PaginationItem_default, _extends({}, item)),
      shape = "circular",
      showFirstButton = false,
      showLastButton = false,
      siblingCount = 1,
      size: size2 = "medium",
      variant = "text"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded125);
    const {
      items
    } = usePagination(_extends({}, props, {
      componentName: "Pagination"
    }));
    const ownerState = _extends({}, props, {
      boundaryCount,
      color,
      count,
      defaultPage,
      disabled,
      getItemAriaLabel,
      hideNextButton,
      hidePrevButton,
      renderItem,
      shape,
      showFirstButton,
      showLastButton,
      siblingCount,
      size: size2,
      variant
    });
    const classes = useUtilityClasses98(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime181.jsx)(PaginationRoot, _extends({
      "aria-label": "pagination navigation",
      className: clsx_default(classes.root, className),
      ownerState,
      ref
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime181.jsx)(PaginationUl, {
        className: classes.ul,
        ownerState,
        children: items.map((item, index3) => /* @__PURE__ */ (0, import_jsx_runtime181.jsx)("li", {
          children: renderItem(_extends({}, item, {
            color,
            "aria-label": getItemAriaLabel(item.type, item.page, item.selected),
            shape,
            size: size2,
            variant
          }))
        }, index3))
      })
    }));
  });
  true ? Pagination.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Number of always visible pages at the beginning and end.
     * @default 1
     */
    boundaryCount: import_utils220.integerPropType,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types127.default.object,
    /**
     * @ignore
     */
    className: import_prop_types127.default.string,
    /**
     * The active color.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'standard'
     */
    color: import_prop_types127.default.oneOfType([import_prop_types127.default.oneOf(["primary", "secondary", "standard"]), import_prop_types127.default.string]),
    /**
     * The total number of pages.
     * @default 1
     */
    count: import_utils220.integerPropType,
    /**
     * The page selected by default when the component is uncontrolled.
     * @default 1
     */
    defaultPage: import_utils220.integerPropType,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types127.default.bool,
    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the current page.
     * This is important for screen reader users.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @param {string} type The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous'). Defaults to 'page'.
     * @param {number} page The page number to format.
     * @param {bool} selected If true, the current page is selected.
     * @returns {string}
     */
    getItemAriaLabel: import_prop_types127.default.func,
    /**
     * If `true`, hide the next-page button.
     * @default false
     */
    hideNextButton: import_prop_types127.default.bool,
    /**
     * If `true`, hide the previous-page button.
     * @default false
     */
    hidePrevButton: import_prop_types127.default.bool,
    /**
     * Callback fired when the page is changed.
     *
     * @param {React.ChangeEvent<unknown>} event The event source of the callback.
     * @param {number} page The page selected.
     */
    onChange: import_prop_types127.default.func,
    /**
     * The current page.
     */
    page: import_utils220.integerPropType,
    /**
     * Render the item.
     * @param {PaginationRenderItemParams} params The props to spread on a PaginationItem.
     * @returns {ReactNode}
     * @default (item) => <PaginationItem {...item} />
     */
    renderItem: import_prop_types127.default.func,
    /**
     * The shape of the pagination items.
     * @default 'circular'
     */
    shape: import_prop_types127.default.oneOf(["circular", "rounded"]),
    /**
     * If `true`, show the first-page button.
     * @default false
     */
    showFirstButton: import_prop_types127.default.bool,
    /**
     * If `true`, show the last-page button.
     * @default false
     */
    showLastButton: import_prop_types127.default.bool,
    /**
     * Number of always visible pages before and after the current page.
     * @default 1
     */
    siblingCount: import_utils220.integerPropType,
    /**
     * The size of the component.
     * @default 'medium'
     */
    size: import_prop_types127.default.oneOfType([import_prop_types127.default.oneOf(["small", "medium", "large"]), import_prop_types127.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types127.default.oneOfType([import_prop_types127.default.arrayOf(import_prop_types127.default.oneOfType([import_prop_types127.default.func, import_prop_types127.default.object, import_prop_types127.default.bool])), import_prop_types127.default.func, import_prop_types127.default.object]),
    /**
     * The variant to use.
     * @default 'text'
     */
    variant: import_prop_types127.default.oneOfType([import_prop_types127.default.oneOf(["outlined", "text"]), import_prop_types127.default.string])
  } : void 0;
  var Pagination_default = Pagination;

  // node_modules/@mui/material/Radio/Radio.js
  init_extends();
  var React204 = __toESM(require_react());
  var import_prop_types129 = __toESM(require_prop_types());
  var import_utils223 = __toESM(require_utils());
  var import_composeClasses94 = __toESM(require_composeClasses3());
  var import_system39 = __toESM(require_system());

  // node_modules/@mui/material/Radio/RadioButtonIcon.js
  init_extends();
  var React201 = __toESM(require_react());
  var import_prop_types128 = __toESM(require_prop_types());

  // node_modules/@mui/material/internal/svg-icons/RadioButtonUnchecked.js
  var React199 = __toESM(require_react());
  var import_jsx_runtime182 = __toESM(require_jsx_runtime());
  var RadioButtonUnchecked_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime182.jsx)("path", {
    d: "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"
  }), "RadioButtonUnchecked");

  // node_modules/@mui/material/internal/svg-icons/RadioButtonChecked.js
  var React200 = __toESM(require_react());
  var import_jsx_runtime183 = __toESM(require_jsx_runtime());
  var RadioButtonChecked_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime183.jsx)("path", {
    d: "M8.465 8.465C9.37 7.56 10.62 7 12 7C14.76 7 17 9.24 17 12C17 13.38 16.44 14.63 15.535 15.535C14.63 16.44 13.38 17 12 17C9.24 17 7 14.76 7 12C7 10.62 7.56 9.37 8.465 8.465Z"
  }), "RadioButtonChecked");

  // node_modules/@mui/material/Radio/RadioButtonIcon.js
  var import_jsx_runtime184 = __toESM(require_jsx_runtime());
  var import_jsx_runtime185 = __toESM(require_jsx_runtime());
  var RadioButtonIconRoot = styled_default("span")({
    position: "relative",
    display: "flex"
  });
  var RadioButtonIconBackground = styled_default(RadioButtonUnchecked_default)({
    // Scale applied to prevent dot misalignment in Safari
    transform: "scale(1)"
  });
  var RadioButtonIconDot = styled_default(RadioButtonChecked_default)(({
    theme,
    ownerState
  }) => _extends({
    left: 0,
    position: "absolute",
    transform: "scale(0)",
    transition: theme.transitions.create("transform", {
      easing: theme.transitions.easing.easeIn,
      duration: theme.transitions.duration.shortest
    })
  }, ownerState.checked && {
    transform: "scale(1)",
    transition: theme.transitions.create("transform", {
      easing: theme.transitions.easing.easeOut,
      duration: theme.transitions.duration.shortest
    })
  }));
  function RadioButtonIcon(props) {
    const {
      checked = false,
      classes = {},
      fontSize
    } = props;
    const ownerState = _extends({}, props, {
      checked
    });
    return /* @__PURE__ */ (0, import_jsx_runtime185.jsxs)(RadioButtonIconRoot, {
      className: classes.root,
      ownerState,
      children: [/* @__PURE__ */ (0, import_jsx_runtime184.jsx)(RadioButtonIconBackground, {
        fontSize,
        className: classes.background,
        ownerState
      }), /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(RadioButtonIconDot, {
        fontSize,
        className: classes.dot,
        ownerState
      })]
    });
  }
  true ? RadioButtonIcon.propTypes = {
    /**
     * If `true`, the component is checked.
     */
    checked: import_prop_types128.default.bool,
    /**
     * Override or extend the styles applied to the component.
     * See [CSS API](#css) below for more details.
     */
    classes: import_prop_types128.default.object,
    /**
     * The size of the component.
     * `small` is equivalent to the dense radio styling.
     */
    fontSize: import_prop_types128.default.oneOf(["small", "medium"])
  } : void 0;
  var RadioButtonIcon_default = RadioButtonIcon;

  // node_modules/@mui/material/utils/createChainedFunction.js
  var import_utils221 = __toESM(require_utils());
  var createChainedFunction_default = import_utils221.unstable_createChainedFunction;

  // node_modules/@mui/material/RadioGroup/useRadioGroup.js
  var React203 = __toESM(require_react());

  // node_modules/@mui/material/RadioGroup/RadioGroupContext.js
  var React202 = __toESM(require_react());
  var RadioGroupContext = /* @__PURE__ */ React202.createContext(void 0);
  if (true) {
    RadioGroupContext.displayName = "RadioGroupContext";
  }
  var RadioGroupContext_default = RadioGroupContext;

  // node_modules/@mui/material/RadioGroup/useRadioGroup.js
  function useRadioGroup() {
    return React203.useContext(RadioGroupContext_default);
  }

  // node_modules/@mui/material/Radio/radioClasses.js
  var import_utils222 = __toESM(require_utils());
  var import_generateUtilityClass102 = __toESM(require_generateUtilityClass3());
  function getRadioUtilityClass(slot) {
    return (0, import_generateUtilityClass102.default)("MuiRadio", slot);
  }
  var radioClasses = (0, import_utils222.unstable_generateUtilityClasses)("MuiRadio", ["root", "checked", "disabled", "colorPrimary", "colorSecondary", "sizeSmall"]);
  var radioClasses_default = radioClasses;

  // node_modules/@mui/material/Radio/Radio.js
  var import_jsx_runtime186 = __toESM(require_jsx_runtime());
  var _excluded126 = ["checked", "checkedIcon", "color", "icon", "name", "onChange", "size", "className"];
  var useUtilityClasses99 = (ownerState) => {
    const {
      classes,
      color,
      size: size2
    } = ownerState;
    const slots = {
      root: ["root", `color${capitalize_default(color)}`, size2 !== "medium" && `size${capitalize_default(size2)}`]
    };
    return _extends({}, classes, (0, import_composeClasses94.unstable_composeClasses)(slots, getRadioUtilityClass, classes));
  };
  var RadioRoot = styled_default(SwitchBase_default, {
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) || prop === "classes",
    name: "MuiRadio",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, styles7[`color${capitalize_default(ownerState.color)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    color: (theme.vars || theme).palette.text.secondary
  }, !ownerState.disableRipple && {
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${ownerState.color === "default" ? theme.vars.palette.action.activeChannel : theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_system39.alpha)(ownerState.color === "default" ? theme.palette.action.active : theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    }
  }, ownerState.color !== "default" && {
    [`&.${radioClasses_default.checked}`]: {
      color: (theme.vars || theme).palette[ownerState.color].main
    }
  }, {
    [`&.${radioClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.action.disabled
    }
  }));
  function areEqualValues(a, b) {
    if (typeof b === "object" && b !== null) {
      return a === b;
    }
    return String(a) === String(b);
  }
  var defaultCheckedIcon2 = /* @__PURE__ */ (0, import_jsx_runtime186.jsx)(RadioButtonIcon_default, {
    checked: true
  });
  var defaultIcon2 = /* @__PURE__ */ (0, import_jsx_runtime186.jsx)(RadioButtonIcon_default, {});
  var Radio = /* @__PURE__ */ React204.forwardRef(function Radio2(inProps, ref) {
    var _defaultIcon$props$fo, _defaultCheckedIcon$p;
    const props = useThemeProps({
      props: inProps,
      name: "MuiRadio"
    });
    const {
      checked: checkedProp,
      checkedIcon = defaultCheckedIcon2,
      color = "primary",
      icon = defaultIcon2,
      name: nameProp,
      onChange: onChangeProp,
      size: size2 = "medium",
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded126);
    const ownerState = _extends({}, props, {
      color,
      size: size2
    });
    const classes = useUtilityClasses99(ownerState);
    const radioGroup = useRadioGroup();
    let checked = checkedProp;
    const onChange = createChainedFunction_default(onChangeProp, radioGroup && radioGroup.onChange);
    let name = nameProp;
    if (radioGroup) {
      if (typeof checked === "undefined") {
        checked = areEqualValues(radioGroup.value, props.value);
      }
      if (typeof name === "undefined") {
        name = radioGroup.name;
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime186.jsx)(RadioRoot, _extends({
      type: "radio",
      icon: /* @__PURE__ */ React204.cloneElement(icon, {
        fontSize: (_defaultIcon$props$fo = defaultIcon2.props.fontSize) != null ? _defaultIcon$props$fo : size2
      }),
      checkedIcon: /* @__PURE__ */ React204.cloneElement(checkedIcon, {
        fontSize: (_defaultCheckedIcon$p = defaultCheckedIcon2.props.fontSize) != null ? _defaultCheckedIcon$p : size2
      }),
      ownerState,
      classes,
      name,
      checked,
      onChange,
      ref,
      className: clsx_default(classes.root, className)
    }, other));
  });
  true ? Radio.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * If `true`, the component is checked.
     */
    checked: import_prop_types129.default.bool,
    /**
     * The icon to display when the component is checked.
     * @default <RadioButtonIcon checked />
     */
    checkedIcon: import_prop_types129.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types129.default.object,
    /**
     * @ignore
     */
    className: import_prop_types129.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'primary'
     */
    color: import_prop_types129.default.oneOfType([import_prop_types129.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types129.default.string]),
    /**
     * If `true`, the component is disabled.
     */
    disabled: import_prop_types129.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     * @default false
     */
    disableRipple: import_prop_types129.default.bool,
    /**
     * The icon to display when the component is unchecked.
     * @default <RadioButtonIcon />
     */
    icon: import_prop_types129.default.node,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types129.default.string,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: import_prop_types129.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: import_utils223.refType,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types129.default.string,
    /**
     * Callback fired when the state is changed.
     *
     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: import_prop_types129.default.func,
    /**
     * If `true`, the `input` element is required.
     * @default false
     */
    required: import_prop_types129.default.bool,
    /**
     * The size of the component.
     * `small` is equivalent to the dense radio styling.
     * @default 'medium'
     */
    size: import_prop_types129.default.oneOfType([import_prop_types129.default.oneOf(["medium", "small"]), import_prop_types129.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types129.default.oneOfType([import_prop_types129.default.arrayOf(import_prop_types129.default.oneOfType([import_prop_types129.default.func, import_prop_types129.default.object, import_prop_types129.default.bool])), import_prop_types129.default.func, import_prop_types129.default.object]),
    /**
     * The value of the component. The DOM API casts this to a string.
     */
    value: import_prop_types129.default.any
  } : void 0;
  var Radio_default = Radio;

  // node_modules/@mui/material/RadioGroup/RadioGroup.js
  init_extends();
  var React205 = __toESM(require_react());
  var import_prop_types130 = __toESM(require_prop_types());

  // node_modules/@mui/material/utils/useId.js
  var import_utils224 = __toESM(require_utils());
  var useId_default = import_utils224.unstable_useId;

  // node_modules/@mui/material/RadioGroup/RadioGroup.js
  var import_jsx_runtime187 = __toESM(require_jsx_runtime());
  var _excluded127 = ["actions", "children", "defaultValue", "name", "onChange", "value"];
  var RadioGroup = /* @__PURE__ */ React205.forwardRef(function RadioGroup2(props, ref) {
    const {
      // private
      // eslint-disable-next-line react/prop-types
      actions,
      children,
      defaultValue,
      name: nameProp,
      onChange,
      value: valueProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded127);
    const rootRef = React205.useRef(null);
    const [value, setValueState] = useControlled_default({
      controlled: valueProp,
      default: defaultValue,
      name: "RadioGroup"
    });
    React205.useImperativeHandle(actions, () => ({
      focus: () => {
        let input = rootRef.current.querySelector("input:not(:disabled):checked");
        if (!input) {
          input = rootRef.current.querySelector("input:not(:disabled)");
        }
        if (input) {
          input.focus();
        }
      }
    }), []);
    const handleRef = useForkRef_default(ref, rootRef);
    const name = useId_default(nameProp);
    const contextValue = React205.useMemo(() => ({
      name,
      onChange(event) {
        setValueState(event.target.value);
        if (onChange) {
          onChange(event, event.target.value);
        }
      },
      value
    }), [name, onChange, setValueState, value]);
    return /* @__PURE__ */ (0, import_jsx_runtime187.jsx)(RadioGroupContext_default.Provider, {
      value: contextValue,
      children: /* @__PURE__ */ (0, import_jsx_runtime187.jsx)(FormGroup_default, _extends({
        role: "radiogroup",
        ref: handleRef
      }, other, {
        children
      }))
    });
  });
  true ? RadioGroup.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types130.default.node,
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types130.default.any,
    /**
     * The name used to reference the value of the control.
     * If you don't provide this prop, it falls back to a randomly generated name.
     */
    name: import_prop_types130.default.string,
    /**
     * Callback fired when a radio button is selected.
     *
     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
     * @param {string} value The value of the selected radio button.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types130.default.func,
    /**
     * Value of the selected radio button. The DOM API casts this to a string.
     */
    value: import_prop_types130.default.any
  } : void 0;
  var RadioGroup_default = RadioGroup;

  // node_modules/@mui/material/Rating/Rating.js
  init_extends();
  var React208 = __toESM(require_react());
  var import_prop_types131 = __toESM(require_prop_types());
  var import_utils226 = __toESM(require_utils());
  var import_composeClasses95 = __toESM(require_composeClasses3());
  var import_utils227 = __toESM(require_utils2());

  // node_modules/@mui/material/internal/svg-icons/Star.js
  var React206 = __toESM(require_react());
  var import_jsx_runtime188 = __toESM(require_jsx_runtime());
  var Star_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime188.jsx)("path", {
    d: "M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"
  }), "Star");

  // node_modules/@mui/material/internal/svg-icons/StarBorder.js
  var React207 = __toESM(require_react());
  var import_jsx_runtime189 = __toESM(require_jsx_runtime());
  var StarBorder_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime189.jsx)("path", {
    d: "M22 9.24l-7.19-.62L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21 12 17.27 18.18 21l-1.63-7.03L22 9.24zM12 15.4l-3.76 2.27 1-4.28-3.32-2.88 4.38-.38L12 6.1l1.71 4.04 4.38.38-3.32 2.88 1 4.28L12 15.4z"
  }), "StarBorder");

  // node_modules/@mui/material/Rating/ratingClasses.js
  var import_utils225 = __toESM(require_utils());
  var import_generateUtilityClass103 = __toESM(require_generateUtilityClass3());
  function getRatingUtilityClass(slot) {
    return (0, import_generateUtilityClass103.default)("MuiRating", slot);
  }
  var ratingClasses = (0, import_utils225.unstable_generateUtilityClasses)("MuiRating", ["root", "sizeSmall", "sizeMedium", "sizeLarge", "readOnly", "disabled", "focusVisible", "visuallyHidden", "pristine", "label", "labelEmptyValueActive", "icon", "iconEmpty", "iconFilled", "iconHover", "iconFocus", "iconActive", "decimal"]);
  var ratingClasses_default = ratingClasses;

  // node_modules/@mui/material/Rating/Rating.js
  var import_jsx_runtime190 = __toESM(require_jsx_runtime());
  var import_jsx_runtime191 = __toESM(require_jsx_runtime());
  var _excluded128 = ["value"];
  var _excluded217 = ["className", "defaultValue", "disabled", "emptyIcon", "emptyLabelText", "getLabelText", "highlightSelectedOnly", "icon", "IconContainerComponent", "max", "name", "onChange", "onChangeActive", "onMouseLeave", "onMouseMove", "precision", "readOnly", "size", "value"];
  function clamp4(value, min3, max3) {
    if (value < min3) {
      return min3;
    }
    if (value > max3) {
      return max3;
    }
    return value;
  }
  function getDecimalPrecision2(num) {
    const decimalPart = num.toString().split(".")[1];
    return decimalPart ? decimalPart.length : 0;
  }
  function roundValueToPrecision(value, precision) {
    if (value == null) {
      return value;
    }
    const nearest = Math.round(value / precision) * precision;
    return Number(nearest.toFixed(getDecimalPrecision2(precision)));
  }
  var useUtilityClasses100 = (ownerState) => {
    const {
      classes,
      size: size2,
      readOnly,
      disabled,
      emptyValueFocused,
      focusVisible
    } = ownerState;
    const slots = {
      root: ["root", `size${(0, import_utils227.capitalize)(size2)}`, disabled && "disabled", focusVisible && "focusVisible", readOnly && "readOnly"],
      label: ["label", "pristine"],
      labelEmptyValue: [emptyValueFocused && "labelEmptyValueActive"],
      icon: ["icon"],
      iconEmpty: ["iconEmpty"],
      iconFilled: ["iconFilled"],
      iconHover: ["iconHover"],
      iconFocus: ["iconFocus"],
      iconActive: ["iconActive"],
      decimal: ["decimal"],
      visuallyHidden: ["visuallyHidden"]
    };
    return (0, import_composeClasses95.unstable_composeClasses)(slots, getRatingUtilityClass, classes);
  };
  var RatingRoot = styled_default("span", {
    name: "MuiRating",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${ratingClasses_default.visuallyHidden}`]: styles7.visuallyHidden
      }, styles7.root, styles7[`size${(0, import_utils227.capitalize)(ownerState.size)}`], ownerState.readOnly && styles7.readOnly];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "inline-flex",
    // Required to position the pristine input absolutely
    position: "relative",
    fontSize: theme.typography.pxToRem(24),
    color: "#faaf00",
    cursor: "pointer",
    textAlign: "left",
    WebkitTapHighlightColor: "transparent",
    [`&.${ratingClasses_default.disabled}`]: {
      opacity: (theme.vars || theme).palette.action.disabledOpacity,
      pointerEvents: "none"
    },
    [`&.${ratingClasses_default.focusVisible} .${ratingClasses_default.iconActive}`]: {
      outline: "1px solid #999"
    },
    [`& .${ratingClasses_default.visuallyHidden}`]: import_utils226.visuallyHidden
  }, ownerState.size === "small" && {
    fontSize: theme.typography.pxToRem(18)
  }, ownerState.size === "large" && {
    fontSize: theme.typography.pxToRem(30)
  }, ownerState.readOnly && {
    pointerEvents: "none"
  }));
  var RatingLabel = styled_default("label", {
    name: "MuiRating",
    slot: "Label",
    overridesResolver: ({
      ownerState
    }, styles7) => [styles7.label, ownerState.emptyValueFocused && styles7.labelEmptyValueActive]
  })(({
    ownerState
  }) => _extends({
    cursor: "inherit"
  }, ownerState.emptyValueFocused && {
    top: 0,
    bottom: 0,
    position: "absolute",
    outline: "1px solid #999",
    width: "100%"
  }));
  var RatingIcon = styled_default("span", {
    name: "MuiRating",
    slot: "Icon",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.icon, ownerState.iconEmpty && styles7.iconEmpty, ownerState.iconFilled && styles7.iconFilled, ownerState.iconHover && styles7.iconHover, ownerState.iconFocus && styles7.iconFocus, ownerState.iconActive && styles7.iconActive];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    // Fit wrapper to actual icon size.
    display: "flex",
    transition: theme.transitions.create("transform", {
      duration: theme.transitions.duration.shortest
    }),
    // Fix mouseLeave issue.
    // https://github.com/facebook/react/issues/4492
    pointerEvents: "none"
  }, ownerState.iconActive && {
    transform: "scale(1.2)"
  }, ownerState.iconEmpty && {
    color: (theme.vars || theme).palette.action.disabled
  }));
  var RatingDecimal = styled_default("span", {
    name: "MuiRating",
    slot: "Decimal",
    shouldForwardProp: (prop) => slotShouldForwardProp(prop) && prop !== "iconActive",
    overridesResolver: (props, styles7) => {
      const {
        iconActive
      } = props;
      return [styles7.decimal, iconActive && styles7.iconActive];
    }
  })(({
    iconActive
  }) => _extends({
    position: "relative"
  }, iconActive && {
    transform: "scale(1.2)"
  }));
  function IconContainer(props) {
    const other = _objectWithoutPropertiesLoose(props, _excluded128);
    return /* @__PURE__ */ (0, import_jsx_runtime190.jsx)("span", _extends({}, other));
  }
  true ? IconContainer.propTypes = {
    value: import_prop_types131.default.number.isRequired
  } : void 0;
  function RatingItem(props) {
    const {
      classes,
      disabled,
      emptyIcon,
      focus,
      getLabelText,
      highlightSelectedOnly,
      hover,
      icon,
      IconContainerComponent,
      isActive,
      itemValue,
      labelProps,
      name,
      onBlur,
      onChange,
      onClick,
      onFocus,
      readOnly,
      ownerState,
      ratingValue,
      ratingValueRounded
    } = props;
    const isFilled2 = highlightSelectedOnly ? itemValue === ratingValue : itemValue <= ratingValue;
    const isHovered = itemValue <= hover;
    const isFocused = itemValue <= focus;
    const isChecked = itemValue === ratingValueRounded;
    const id = (0, import_utils227.unstable_useId)();
    const container = /* @__PURE__ */ (0, import_jsx_runtime190.jsx)(RatingIcon, {
      as: IconContainerComponent,
      value: itemValue,
      className: clsx_default(classes.icon, isFilled2 ? classes.iconFilled : classes.iconEmpty, isHovered && classes.iconHover, isFocused && classes.iconFocus, isActive && classes.iconActive),
      ownerState: _extends({}, ownerState, {
        iconEmpty: !isFilled2,
        iconFilled: isFilled2,
        iconHover: isHovered,
        iconFocus: isFocused,
        iconActive: isActive
      }),
      children: emptyIcon && !isFilled2 ? emptyIcon : icon
    });
    if (readOnly) {
      return /* @__PURE__ */ (0, import_jsx_runtime190.jsx)("span", _extends({}, labelProps, {
        children: container
      }));
    }
    return /* @__PURE__ */ (0, import_jsx_runtime191.jsxs)(React208.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime191.jsxs)(RatingLabel, _extends({
        ownerState: _extends({}, ownerState, {
          emptyValueFocused: void 0
        }),
        htmlFor: id
      }, labelProps, {
        children: [container, /* @__PURE__ */ (0, import_jsx_runtime190.jsx)("span", {
          className: classes.visuallyHidden,
          children: getLabelText(itemValue)
        })]
      })), /* @__PURE__ */ (0, import_jsx_runtime190.jsx)("input", {
        className: classes.visuallyHidden,
        onFocus,
        onBlur,
        onChange,
        onClick,
        disabled,
        value: itemValue,
        id,
        type: "radio",
        name,
        checked: isChecked
      })]
    });
  }
  true ? RatingItem.propTypes = {
    classes: import_prop_types131.default.object.isRequired,
    disabled: import_prop_types131.default.bool.isRequired,
    emptyIcon: import_prop_types131.default.node,
    focus: import_prop_types131.default.number.isRequired,
    getLabelText: import_prop_types131.default.func.isRequired,
    highlightSelectedOnly: import_prop_types131.default.bool.isRequired,
    hover: import_prop_types131.default.number.isRequired,
    icon: import_prop_types131.default.node,
    IconContainerComponent: import_prop_types131.default.elementType.isRequired,
    isActive: import_prop_types131.default.bool.isRequired,
    itemValue: import_prop_types131.default.number.isRequired,
    labelProps: import_prop_types131.default.object,
    name: import_prop_types131.default.string,
    onBlur: import_prop_types131.default.func.isRequired,
    onChange: import_prop_types131.default.func.isRequired,
    onClick: import_prop_types131.default.func.isRequired,
    onFocus: import_prop_types131.default.func.isRequired,
    ownerState: import_prop_types131.default.object.isRequired,
    ratingValue: import_prop_types131.default.number,
    ratingValueRounded: import_prop_types131.default.number,
    readOnly: import_prop_types131.default.bool.isRequired
  } : void 0;
  var defaultIcon3 = /* @__PURE__ */ (0, import_jsx_runtime190.jsx)(Star_default, {
    fontSize: "inherit"
  });
  var defaultEmptyIcon = /* @__PURE__ */ (0, import_jsx_runtime190.jsx)(StarBorder_default, {
    fontSize: "inherit"
  });
  function defaultLabelText(value) {
    return `${value} Star${value !== 1 ? "s" : ""}`;
  }
  var Rating = /* @__PURE__ */ React208.forwardRef(function Rating2(inProps, ref) {
    const props = useThemeProps({
      name: "MuiRating",
      props: inProps
    });
    const {
      className,
      defaultValue = null,
      disabled = false,
      emptyIcon = defaultEmptyIcon,
      emptyLabelText = "Empty",
      getLabelText = defaultLabelText,
      highlightSelectedOnly = false,
      icon = defaultIcon3,
      IconContainerComponent = IconContainer,
      max: max3 = 5,
      name: nameProp,
      onChange,
      onChangeActive,
      onMouseLeave,
      onMouseMove,
      precision = 1,
      readOnly = false,
      size: size2 = "medium",
      value: valueProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded217);
    const name = (0, import_utils227.unstable_useId)(nameProp);
    const [valueDerived, setValueState] = (0, import_utils227.useControlled)({
      controlled: valueProp,
      default: defaultValue,
      name: "Rating"
    });
    const valueRounded = roundValueToPrecision(valueDerived, precision);
    const theme = useTheme4();
    const [{
      hover,
      focus
    }, setState] = React208.useState({
      hover: -1,
      focus: -1
    });
    let value = valueRounded;
    if (hover !== -1) {
      value = hover;
    }
    if (focus !== -1) {
      value = focus;
    }
    const {
      isFocusVisibleRef,
      onBlur: handleBlurVisible,
      onFocus: handleFocusVisible,
      ref: focusVisibleRef
    } = (0, import_utils227.useIsFocusVisible)();
    const [focusVisible, setFocusVisible] = React208.useState(false);
    const rootRef = React208.useRef();
    const handleRef = (0, import_utils227.useForkRef)(focusVisibleRef, rootRef, ref);
    const handleMouseMove = (event) => {
      if (onMouseMove) {
        onMouseMove(event);
      }
      const rootNode = rootRef.current;
      const {
        right: right2,
        left: left2
      } = rootNode.getBoundingClientRect();
      const {
        width
      } = rootNode.firstChild.getBoundingClientRect();
      let percent2;
      if (theme.direction === "rtl") {
        percent2 = (right2 - event.clientX) / (width * max3);
      } else {
        percent2 = (event.clientX - left2) / (width * max3);
      }
      let newHover = roundValueToPrecision(max3 * percent2 + precision / 2, precision);
      newHover = clamp4(newHover, precision, max3);
      setState((prev2) => prev2.hover === newHover && prev2.focus === newHover ? prev2 : {
        hover: newHover,
        focus: newHover
      });
      setFocusVisible(false);
      if (onChangeActive && hover !== newHover) {
        onChangeActive(event, newHover);
      }
    };
    const handleMouseLeave = (event) => {
      if (onMouseLeave) {
        onMouseLeave(event);
      }
      const newHover = -1;
      setState({
        hover: newHover,
        focus: newHover
      });
      if (onChangeActive && hover !== newHover) {
        onChangeActive(event, newHover);
      }
    };
    const handleChange = (event) => {
      let newValue = event.target.value === "" ? null : parseFloat(event.target.value);
      if (hover !== -1) {
        newValue = hover;
      }
      setValueState(newValue);
      if (onChange) {
        onChange(event, newValue);
      }
    };
    const handleClear = (event) => {
      if (event.clientX === 0 && event.clientY === 0) {
        return;
      }
      setState({
        hover: -1,
        focus: -1
      });
      setValueState(null);
      if (onChange && parseFloat(event.target.value) === valueRounded) {
        onChange(event, null);
      }
    };
    const handleFocus = (event) => {
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        setFocusVisible(true);
      }
      const newFocus = parseFloat(event.target.value);
      setState((prev2) => ({
        hover: prev2.hover,
        focus: newFocus
      }));
    };
    const handleBlur2 = (event) => {
      if (hover !== -1) {
        return;
      }
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setFocusVisible(false);
      }
      const newFocus = -1;
      setState((prev2) => ({
        hover: prev2.hover,
        focus: newFocus
      }));
    };
    const [emptyValueFocused, setEmptyValueFocused] = React208.useState(false);
    const ownerState = _extends({}, props, {
      defaultValue,
      disabled,
      emptyIcon,
      emptyLabelText,
      emptyValueFocused,
      focusVisible,
      getLabelText,
      icon,
      IconContainerComponent,
      max: max3,
      precision,
      readOnly,
      size: size2
    });
    const classes = useUtilityClasses100(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime191.jsxs)(RatingRoot, _extends({
      ref: handleRef,
      onMouseMove: handleMouseMove,
      onMouseLeave: handleMouseLeave,
      className: clsx_default(classes.root, className, readOnly && "MuiRating-readOnly"),
      ownerState,
      role: readOnly ? "img" : null,
      "aria-label": readOnly ? getLabelText(value) : null
    }, other, {
      children: [Array.from(new Array(max3)).map((_5, index3) => {
        const itemValue = index3 + 1;
        const ratingItemProps = {
          classes,
          disabled,
          emptyIcon,
          focus,
          getLabelText,
          highlightSelectedOnly,
          hover,
          icon,
          IconContainerComponent,
          name,
          onBlur: handleBlur2,
          onChange: handleChange,
          onClick: handleClear,
          onFocus: handleFocus,
          ratingValue: value,
          ratingValueRounded: valueRounded,
          readOnly,
          ownerState
        };
        const isActive = itemValue === Math.ceil(value) && (hover !== -1 || focus !== -1);
        if (precision < 1) {
          const items = Array.from(new Array(1 / precision));
          return /* @__PURE__ */ (0, import_jsx_runtime190.jsx)(RatingDecimal, {
            className: clsx_default(classes.decimal, isActive && classes.iconActive),
            ownerState,
            iconActive: isActive,
            children: items.map(($, indexDecimal) => {
              const itemDecimalValue = roundValueToPrecision(itemValue - 1 + (indexDecimal + 1) * precision, precision);
              return /* @__PURE__ */ (0, import_jsx_runtime190.jsx)(RatingItem, _extends({}, ratingItemProps, {
                // The icon is already displayed as active
                isActive: false,
                itemValue: itemDecimalValue,
                labelProps: {
                  style: items.length - 1 === indexDecimal ? {} : {
                    width: itemDecimalValue === value ? `${(indexDecimal + 1) * precision * 100}%` : "0%",
                    overflow: "hidden",
                    position: "absolute"
                  }
                }
              }), itemDecimalValue);
            })
          }, itemValue);
        }
        return /* @__PURE__ */ (0, import_jsx_runtime190.jsx)(RatingItem, _extends({}, ratingItemProps, {
          isActive,
          itemValue
        }), itemValue);
      }), !readOnly && !disabled && /* @__PURE__ */ (0, import_jsx_runtime191.jsxs)(RatingLabel, {
        className: clsx_default(classes.label, classes.labelEmptyValue),
        ownerState,
        children: [/* @__PURE__ */ (0, import_jsx_runtime190.jsx)("input", {
          className: classes.visuallyHidden,
          value: "",
          id: `${name}-empty`,
          type: "radio",
          name,
          checked: valueRounded == null,
          onFocus: () => setEmptyValueFocused(true),
          onBlur: () => setEmptyValueFocused(false),
          onChange: handleChange
        }), /* @__PURE__ */ (0, import_jsx_runtime190.jsx)("span", {
          className: classes.visuallyHidden,
          children: emptyLabelText
        })]
      })]
    }));
  });
  true ? Rating.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types131.default.object,
    /**
     * @ignore
     */
    className: import_prop_types131.default.string,
    /**
     * The default value. Use when the component is not controlled.
     * @default null
     */
    defaultValue: import_prop_types131.default.number,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types131.default.bool,
    /**
     * The icon to display when empty.
     * @default <StarBorder fontSize="inherit" />
     */
    emptyIcon: import_prop_types131.default.node,
    /**
     * The label read when the rating input is empty.
     * @default 'Empty'
     */
    emptyLabelText: import_prop_types131.default.node,
    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the current value of the rating.
     * This is important for screen reader users.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @param {number} value The rating label's value to format.
     * @returns {string}
     * @default function defaultLabelText(value) {
     *   return `${value} Star${value !== 1 ? 's' : ''}`;
     * }
     */
    getLabelText: import_prop_types131.default.func,
    /**
     * If `true`, only the selected icon will be highlighted.
     * @default false
     */
    highlightSelectedOnly: import_prop_types131.default.bool,
    /**
     * The icon to display.
     * @default <Star fontSize="inherit" />
     */
    icon: import_prop_types131.default.node,
    /**
     * The component containing the icon.
     * @default function IconContainer(props) {
     *   const { value, ...other } = props;
     *   return <span {...other} />;
     * }
     */
    IconContainerComponent: import_prop_types131.default.elementType,
    /**
     * Maximum rating.
     * @default 5
     */
    max: import_prop_types131.default.number,
    /**
     * The name attribute of the radio `input` elements.
     * This input `name` should be unique within the page.
     * Being unique within a form is insufficient since the `name` is used to generated IDs.
     */
    name: import_prop_types131.default.string,
    /**
     * Callback fired when the value changes.
     * @param {React.SyntheticEvent} event The event source of the callback.
     * @param {number|null} value The new value.
     */
    onChange: import_prop_types131.default.func,
    /**
     * Callback function that is fired when the hover state changes.
     * @param {React.SyntheticEvent} event The event source of the callback.
     * @param {number} value The new value.
     */
    onChangeActive: import_prop_types131.default.func,
    /**
     * @ignore
     */
    onMouseLeave: import_prop_types131.default.func,
    /**
     * @ignore
     */
    onMouseMove: import_prop_types131.default.func,
    /**
     * The minimum increment value change allowed.
     * @default 1
     */
    precision: (0, import_utils226.chainPropTypes)(import_prop_types131.default.number, (props) => {
      if (props.precision < 0.1) {
        return new Error(["MUI: The prop `precision` should be above 0.1.", "A value below this limit has an imperceptible impact."].join("\n"));
      }
      return null;
    }),
    /**
     * Removes all hover effects and pointer events.
     * @default false
     */
    readOnly: import_prop_types131.default.bool,
    /**
     * The size of the component.
     * @default 'medium'
     */
    size: import_prop_types131.default.oneOfType([import_prop_types131.default.oneOf(["small", "medium", "large"]), import_prop_types131.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types131.default.oneOfType([import_prop_types131.default.arrayOf(import_prop_types131.default.oneOfType([import_prop_types131.default.func, import_prop_types131.default.object, import_prop_types131.default.bool])), import_prop_types131.default.func, import_prop_types131.default.object]),
    /**
     * The rating value.
     */
    value: import_prop_types131.default.number
  } : void 0;
  var Rating_default = Rating;

  // node_modules/@mui/material/ScopedCssBaseline/ScopedCssBaseline.js
  init_extends();
  var React209 = __toESM(require_react());
  var import_prop_types132 = __toESM(require_prop_types());
  var import_composeClasses96 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/ScopedCssBaseline/scopedCssBaselineClasses.js
  var import_utils228 = __toESM(require_utils());
  var import_generateUtilityClass104 = __toESM(require_generateUtilityClass3());
  function getScopedCssBaselineUtilityClass(slot) {
    return (0, import_generateUtilityClass104.default)("MuiScopedCssBaseline", slot);
  }
  var scopedCssBaselineClasses = (0, import_utils228.unstable_generateUtilityClasses)("MuiScopedCssBaseline", ["root"]);
  var scopedCssBaselineClasses_default = scopedCssBaselineClasses;

  // node_modules/@mui/material/ScopedCssBaseline/ScopedCssBaseline.js
  var import_jsx_runtime192 = __toESM(require_jsx_runtime());
  var _excluded129 = ["className", "component", "enableColorScheme"];
  var useUtilityClasses101 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return (0, import_composeClasses96.unstable_composeClasses)(slots, getScopedCssBaselineUtilityClass, classes);
  };
  var ScopedCssBaselineRoot = styled_default("div", {
    name: "MuiScopedCssBaseline",
    slot: "Root",
    overridesResolver: (props, styles7) => styles7.root
  })(({
    theme,
    ownerState
  }) => {
    const colorSchemeStyles = {};
    if (ownerState.enableColorScheme && theme.colorSchemes) {
      Object.entries(theme.colorSchemes).forEach(([key, scheme]) => {
        var _scheme$palette;
        colorSchemeStyles[`&${theme.getColorSchemeSelector(key).replace(/\s*&/, "")}`] = {
          colorScheme: (_scheme$palette = scheme.palette) == null ? void 0 : _scheme$palette.mode
        };
      });
    }
    return _extends({}, html(theme, ownerState.enableColorScheme), body(theme), {
      "& *, & *::before, & *::after": {
        boxSizing: "inherit"
      },
      "& strong, & b": {
        fontWeight: theme.typography.fontWeightBold
      }
    }, colorSchemeStyles);
  });
  var ScopedCssBaseline = /* @__PURE__ */ React209.forwardRef(function ScopedCssBaseline2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiScopedCssBaseline"
    });
    const {
      className,
      component = "div"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded129);
    const ownerState = _extends({}, props, {
      component
    });
    const classes = useUtilityClasses101(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime192.jsx)(ScopedCssBaselineRoot, _extends({
      as: component,
      className: clsx_default(classes.root, className),
      ref,
      ownerState
    }, other));
  });
  true ? ScopedCssBaseline.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types132.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types132.default.object,
    /**
     * @ignore
     */
    className: import_prop_types132.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types132.default.elementType,
    /**
     * Enable `color-scheme` CSS property to use `theme.palette.mode`.
     * For more details, check out https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme
     * For browser support, check out https://caniuse.com/?search=color-scheme
     */
    enableColorScheme: import_prop_types132.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types132.default.oneOfType([import_prop_types132.default.arrayOf(import_prop_types132.default.oneOfType([import_prop_types132.default.func, import_prop_types132.default.object, import_prop_types132.default.bool])), import_prop_types132.default.func, import_prop_types132.default.object])
  } : void 0;
  var ScopedCssBaseline_default = ScopedCssBaseline;

  // node_modules/@mui/material/Select/Select.js
  init_extends();
  var React211 = __toESM(require_react());
  var import_prop_types134 = __toESM(require_prop_types());
  var import_utils232 = __toESM(require_utils());

  // node_modules/@mui/material/Select/SelectInput.js
  init_extends();
  var React210 = __toESM(require_react());
  var import_react_is8 = __toESM(require_react_is3());
  var import_prop_types133 = __toESM(require_prop_types());
  var import_composeClasses97 = __toESM(require_composeClasses3());
  var import_utils230 = __toESM(require_utils());

  // node_modules/@mui/material/Select/selectClasses.js
  var import_utils229 = __toESM(require_utils());
  var import_generateUtilityClass105 = __toESM(require_generateUtilityClass3());
  function getSelectUtilityClasses(slot) {
    return (0, import_generateUtilityClass105.default)("MuiSelect", slot);
  }
  var selectClasses2 = (0, import_utils229.unstable_generateUtilityClasses)("MuiSelect", ["root", "select", "multiple", "filled", "outlined", "standard", "disabled", "focused", "icon", "iconOpen", "iconFilled", "iconOutlined", "iconStandard", "nativeInput", "error"]);
  var selectClasses_default = selectClasses2;

  // node_modules/@mui/material/Select/SelectInput.js
  var import_jsx_runtime193 = __toESM(require_jsx_runtime());
  var import_jsx_runtime194 = __toESM(require_jsx_runtime());
  var _span8;
  var _excluded130 = ["aria-describedby", "aria-label", "autoFocus", "autoWidth", "children", "className", "defaultOpen", "defaultValue", "disabled", "displayEmpty", "error", "IconComponent", "inputRef", "labelId", "MenuProps", "multiple", "name", "onBlur", "onChange", "onClose", "onFocus", "onOpen", "open", "readOnly", "renderValue", "SelectDisplayProps", "tabIndex", "type", "value", "variant"];
  var SelectSelect = styled_default("div", {
    name: "MuiSelect",
    slot: "Select",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [
        // Win specificity over the input base
        {
          [`&.${selectClasses_default.select}`]: styles7.select
        },
        {
          [`&.${selectClasses_default.select}`]: styles7[ownerState.variant]
        },
        {
          [`&.${selectClasses_default.error}`]: styles7.error
        },
        {
          [`&.${selectClasses_default.multiple}`]: styles7.multiple
        }
      ];
    }
  })(nativeSelectSelectStyles, {
    // Win specificity over the input base
    [`&.${selectClasses_default.select}`]: {
      height: "auto",
      // Resets for multiple select with chips
      minHeight: "1.4375em",
      // Required for select\text-field height consistency
      textOverflow: "ellipsis",
      whiteSpace: "nowrap",
      overflow: "hidden"
    }
  });
  var SelectIcon = styled_default("svg", {
    name: "MuiSelect",
    slot: "Icon",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.icon, ownerState.variant && styles7[`icon${capitalize_default(ownerState.variant)}`], ownerState.open && styles7.iconOpen];
    }
  })(nativeSelectIconStyles);
  var SelectNativeInput = styled_default("input", {
    shouldForwardProp: (prop) => slotShouldForwardProp(prop) && prop !== "classes",
    name: "MuiSelect",
    slot: "NativeInput",
    overridesResolver: (props, styles7) => styles7.nativeInput
  })({
    bottom: 0,
    left: 0,
    position: "absolute",
    opacity: 0,
    pointerEvents: "none",
    width: "100%",
    boxSizing: "border-box"
  });
  function areEqualValues2(a, b) {
    if (typeof b === "object" && b !== null) {
      return a === b;
    }
    return String(a) === String(b);
  }
  function isEmpty3(display) {
    return display == null || typeof display === "string" && !display.trim();
  }
  var useUtilityClasses102 = (ownerState) => {
    const {
      classes,
      variant,
      disabled,
      multiple,
      open,
      error
    } = ownerState;
    const slots = {
      select: ["select", variant, disabled && "disabled", multiple && "multiple", error && "error"],
      icon: ["icon", `icon${capitalize_default(variant)}`, open && "iconOpen", disabled && "disabled"],
      nativeInput: ["nativeInput"]
    };
    return (0, import_composeClasses97.unstable_composeClasses)(slots, getSelectUtilityClasses, classes);
  };
  var SelectInput = /* @__PURE__ */ React210.forwardRef(function SelectInput2(props, ref) {
    var _MenuProps$slotProps;
    const {
      "aria-describedby": ariaDescribedby,
      "aria-label": ariaLabel,
      autoFocus,
      autoWidth,
      children,
      className,
      defaultOpen,
      defaultValue,
      disabled,
      displayEmpty,
      error = false,
      IconComponent,
      inputRef: inputRefProp,
      labelId,
      MenuProps = {},
      multiple,
      name,
      onBlur,
      onChange,
      onClose,
      onFocus,
      onOpen,
      open: openProp,
      readOnly,
      renderValue,
      SelectDisplayProps = {},
      tabIndex: tabIndexProp,
      value: valueProp,
      variant = "standard"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded130);
    const [value, setValueState] = useControlled_default({
      controlled: valueProp,
      default: defaultValue,
      name: "Select"
    });
    const [openState, setOpenState] = useControlled_default({
      controlled: openProp,
      default: defaultOpen,
      name: "Select"
    });
    const inputRef = React210.useRef(null);
    const displayRef = React210.useRef(null);
    const [displayNode, setDisplayNode] = React210.useState(null);
    const {
      current: isOpenControlled
    } = React210.useRef(openProp != null);
    const [menuMinWidthState, setMenuMinWidthState] = React210.useState();
    const handleRef = useForkRef_default(ref, inputRefProp);
    const handleDisplayRef = React210.useCallback((node2) => {
      displayRef.current = node2;
      if (node2) {
        setDisplayNode(node2);
      }
    }, []);
    const anchorElement = displayNode == null ? void 0 : displayNode.parentNode;
    React210.useImperativeHandle(handleRef, () => ({
      focus: () => {
        displayRef.current.focus();
      },
      node: inputRef.current,
      value
    }), [value]);
    React210.useEffect(() => {
      if (defaultOpen && openState && displayNode && !isOpenControlled) {
        setMenuMinWidthState(autoWidth ? null : anchorElement.clientWidth);
        displayRef.current.focus();
      }
    }, [displayNode, autoWidth]);
    React210.useEffect(() => {
      if (autoFocus) {
        displayRef.current.focus();
      }
    }, [autoFocus]);
    React210.useEffect(() => {
      if (!labelId) {
        return void 0;
      }
      const label = ownerDocument_default(displayRef.current).getElementById(labelId);
      if (label) {
        const handler = () => {
          if (getSelection().isCollapsed) {
            displayRef.current.focus();
          }
        };
        label.addEventListener("click", handler);
        return () => {
          label.removeEventListener("click", handler);
        };
      }
      return void 0;
    }, [labelId]);
    const update2 = (open2, event) => {
      if (open2) {
        if (onOpen) {
          onOpen(event);
        }
      } else if (onClose) {
        onClose(event);
      }
      if (!isOpenControlled) {
        setMenuMinWidthState(autoWidth ? null : anchorElement.clientWidth);
        setOpenState(open2);
      }
    };
    const handleMouseDown = (event) => {
      if (event.button !== 0) {
        return;
      }
      event.preventDefault();
      displayRef.current.focus();
      update2(true, event);
    };
    const handleClose = (event) => {
      update2(false, event);
    };
    const childrenArray = React210.Children.toArray(children);
    const handleChange = (event) => {
      const child = childrenArray.find((childItem) => childItem.props.value === event.target.value);
      if (child === void 0) {
        return;
      }
      setValueState(child.props.value);
      if (onChange) {
        onChange(event, child);
      }
    };
    const handleItemClick = (child) => (event) => {
      let newValue;
      if (!event.currentTarget.hasAttribute("tabindex")) {
        return;
      }
      if (multiple) {
        newValue = Array.isArray(value) ? value.slice() : [];
        const itemIndex = value.indexOf(child.props.value);
        if (itemIndex === -1) {
          newValue.push(child.props.value);
        } else {
          newValue.splice(itemIndex, 1);
        }
      } else {
        newValue = child.props.value;
      }
      if (child.props.onClick) {
        child.props.onClick(event);
      }
      if (value !== newValue) {
        setValueState(newValue);
        if (onChange) {
          const nativeEvent = event.nativeEvent || event;
          const clonedEvent = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
          Object.defineProperty(clonedEvent, "target", {
            writable: true,
            value: {
              value: newValue,
              name
            }
          });
          onChange(clonedEvent, child);
        }
      }
      if (!multiple) {
        update2(false, event);
      }
    };
    const handleKeyDown2 = (event) => {
      if (!readOnly) {
        const validKeys = [
          " ",
          "ArrowUp",
          "ArrowDown",
          // The native select doesn't respond to enter on macOS, but it's recommended by
          // https://www.w3.org/WAI/ARIA/apg/patterns/combobox/examples/combobox-select-only/
          "Enter"
        ];
        if (validKeys.indexOf(event.key) !== -1) {
          event.preventDefault();
          update2(true, event);
        }
      }
    };
    const open = displayNode !== null && openState;
    const handleBlur2 = (event) => {
      if (!open && onBlur) {
        Object.defineProperty(event, "target", {
          writable: true,
          value: {
            value,
            name
          }
        });
        onBlur(event);
      }
    };
    delete other["aria-invalid"];
    let display;
    let displaySingle;
    const displayMultiple = [];
    let computeDisplay = false;
    let foundMatch = false;
    if (isFilled({
      value
    }) || displayEmpty) {
      if (renderValue) {
        display = renderValue(value);
      } else {
        computeDisplay = true;
      }
    }
    const items = childrenArray.map((child) => {
      if (!/* @__PURE__ */ React210.isValidElement(child)) {
        return null;
      }
      if (true) {
        if ((0, import_react_is8.isFragment)(child)) {
          console.error(["MUI: The Select component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      let selected;
      if (multiple) {
        if (!Array.isArray(value)) {
          throw new Error(true ? `MUI: The \`value\` prop must be an array when using the \`Select\` component with \`multiple\`.` : (0, import_utils.formatMuiErrorMessage)(2));
        }
        selected = value.some((v) => areEqualValues2(v, child.props.value));
        if (selected && computeDisplay) {
          displayMultiple.push(child.props.children);
        }
      } else {
        selected = areEqualValues2(value, child.props.value);
        if (selected && computeDisplay) {
          displaySingle = child.props.children;
        }
      }
      if (selected) {
        foundMatch = true;
      }
      return /* @__PURE__ */ React210.cloneElement(child, {
        "aria-selected": selected ? "true" : "false",
        onClick: handleItemClick(child),
        onKeyUp: (event) => {
          if (event.key === " ") {
            event.preventDefault();
          }
          if (child.props.onKeyUp) {
            child.props.onKeyUp(event);
          }
        },
        role: "option",
        selected,
        value: void 0,
        // The value is most likely not a valid HTML attribute.
        "data-value": child.props.value
        // Instead, we provide it as a data attribute.
      });
    });
    if (true) {
      React210.useEffect(() => {
        if (!foundMatch && !multiple && value !== "") {
          const values2 = childrenArray.map((child) => child.props.value);
          console.warn([`MUI: You have provided an out-of-range value \`${value}\` for the select ${name ? `(name="${name}") ` : ""}component.`, "Consider providing a value that matches one of the available options or ''.", `The available values are ${values2.filter((x) => x != null).map((x) => `\`${x}\``).join(", ") || '""'}.`].join("\n"));
        }
      }, [foundMatch, childrenArray, multiple, name, value]);
    }
    if (computeDisplay) {
      if (multiple) {
        if (displayMultiple.length === 0) {
          display = null;
        } else {
          display = displayMultiple.reduce((output, child, index3) => {
            output.push(child);
            if (index3 < displayMultiple.length - 1) {
              output.push(", ");
            }
            return output;
          }, []);
        }
      } else {
        display = displaySingle;
      }
    }
    let menuMinWidth = menuMinWidthState;
    if (!autoWidth && isOpenControlled && displayNode) {
      menuMinWidth = anchorElement.clientWidth;
    }
    let tabIndex;
    if (typeof tabIndexProp !== "undefined") {
      tabIndex = tabIndexProp;
    } else {
      tabIndex = disabled ? null : 0;
    }
    const buttonId = SelectDisplayProps.id || (name ? `mui-component-select-${name}` : void 0);
    const ownerState = _extends({}, props, {
      variant,
      value,
      open,
      error
    });
    const classes = useUtilityClasses102(ownerState);
    const paperProps = _extends({}, MenuProps.PaperProps, (_MenuProps$slotProps = MenuProps.slotProps) == null ? void 0 : _MenuProps$slotProps.paper);
    return /* @__PURE__ */ (0, import_jsx_runtime194.jsxs)(React210.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime193.jsx)(SelectSelect, _extends({
        ref: handleDisplayRef,
        tabIndex,
        role: "button",
        "aria-disabled": disabled ? "true" : void 0,
        "aria-expanded": open ? "true" : "false",
        "aria-haspopup": "listbox",
        "aria-label": ariaLabel,
        "aria-labelledby": [labelId, buttonId].filter(Boolean).join(" ") || void 0,
        "aria-describedby": ariaDescribedby,
        onKeyDown: handleKeyDown2,
        onMouseDown: disabled || readOnly ? null : handleMouseDown,
        onBlur: handleBlur2,
        onFocus
      }, SelectDisplayProps, {
        ownerState,
        className: clsx_default(SelectDisplayProps.className, classes.select, className),
        id: buttonId,
        children: isEmpty3(display) ? (
          // notranslate needed while Google Translate will not fix zero-width space issue
          _span8 || (_span8 = /* @__PURE__ */ (0, import_jsx_runtime193.jsx)("span", {
            className: "notranslate",
            children: "\u200B"
          }))
        ) : display
      })), /* @__PURE__ */ (0, import_jsx_runtime193.jsx)(SelectNativeInput, _extends({
        "aria-invalid": error,
        value: Array.isArray(value) ? value.join(",") : value,
        name,
        ref: inputRef,
        "aria-hidden": true,
        onChange: handleChange,
        tabIndex: -1,
        disabled,
        className: classes.nativeInput,
        autoFocus,
        ownerState
      }, other)), /* @__PURE__ */ (0, import_jsx_runtime193.jsx)(SelectIcon, {
        as: IconComponent,
        className: classes.icon,
        ownerState
      }), /* @__PURE__ */ (0, import_jsx_runtime193.jsx)(Menu_default, _extends({
        id: `menu-${name || ""}`,
        anchorEl: anchorElement,
        open,
        onClose: handleClose,
        anchorOrigin: {
          vertical: "bottom",
          horizontal: "center"
        },
        transformOrigin: {
          vertical: "top",
          horizontal: "center"
        }
      }, MenuProps, {
        MenuListProps: _extends({
          "aria-labelledby": labelId,
          role: "listbox",
          "aria-multiselectable": multiple ? "true" : void 0,
          disableListWrap: true
        }, MenuProps.MenuListProps),
        slotProps: {
          paper: _extends({}, paperProps, {
            style: _extends({
              minWidth: menuMinWidth
            }, paperProps != null ? paperProps.style : null)
          })
        },
        children: items
      }))]
    });
  });
  true ? SelectInput.propTypes = {
    /**
     * @ignore
     */
    "aria-describedby": import_prop_types133.default.string,
    /**
     * @ignore
     */
    "aria-label": import_prop_types133.default.string,
    /**
     * @ignore
     */
    autoFocus: import_prop_types133.default.bool,
    /**
     * If `true`, the width of the popover will automatically be set according to the items inside the
     * menu, otherwise it will be at least the width of the select input.
     */
    autoWidth: import_prop_types133.default.bool,
    /**
     * The option elements to populate the select with.
     * Can be some `<MenuItem>` elements.
     */
    children: import_prop_types133.default.node,
    /**
     * Override or extend the styles applied to the component.
     * See [CSS API](#css) below for more details.
     */
    classes: import_prop_types133.default.object,
    /**
     * The CSS class name of the select element.
     */
    className: import_prop_types133.default.string,
    /**
     * If `true`, the component is toggled on mount. Use when the component open state is not controlled.
     * You can only use it when the `native` prop is `false` (default).
     */
    defaultOpen: import_prop_types133.default.bool,
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types133.default.any,
    /**
     * If `true`, the select is disabled.
     */
    disabled: import_prop_types133.default.bool,
    /**
     * If `true`, the selected item is displayed even if its value is empty.
     */
    displayEmpty: import_prop_types133.default.bool,
    /**
     * If `true`, the `select input` will indicate an error.
     */
    error: import_prop_types133.default.bool,
    /**
     * The icon that displays the arrow.
     */
    IconComponent: import_prop_types133.default.elementType.isRequired,
    /**
     * Imperative handle implementing `{ value: T, node: HTMLElement, focus(): void }`
     * Equivalent to `ref`
     */
    inputRef: import_utils230.refType,
    /**
     * The ID of an element that acts as an additional label. The Select will
     * be labelled by the additional label and the selected value.
     */
    labelId: import_prop_types133.default.string,
    /**
     * Props applied to the [`Menu`](/material-ui/api/menu/) element.
     */
    MenuProps: import_prop_types133.default.object,
    /**
     * If `true`, `value` must be an array and the menu will support multiple selections.
     */
    multiple: import_prop_types133.default.bool,
    /**
     * Name attribute of the `select` or hidden `input` element.
     */
    name: import_prop_types133.default.string,
    /**
     * @ignore
     */
    onBlur: import_prop_types133.default.func,
    /**
     * Callback fired when a menu item is selected.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (any).
     * @param {object} [child] The react element that was selected.
     */
    onChange: import_prop_types133.default.func,
    /**
     * Callback fired when the component requests to be closed.
     * Use in controlled mode (see open).
     *
     * @param {object} event The event source of the callback.
     */
    onClose: import_prop_types133.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types133.default.func,
    /**
     * Callback fired when the component requests to be opened.
     * Use in controlled mode (see open).
     *
     * @param {object} event The event source of the callback.
     */
    onOpen: import_prop_types133.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types133.default.bool,
    /**
     * @ignore
     */
    readOnly: import_prop_types133.default.bool,
    /**
     * Render the selected value.
     *
     * @param {any} value The `value` provided to the component.
     * @returns {ReactNode}
     */
    renderValue: import_prop_types133.default.func,
    /**
     * Props applied to the clickable div element.
     */
    SelectDisplayProps: import_prop_types133.default.object,
    /**
     * @ignore
     */
    tabIndex: import_prop_types133.default.oneOfType([import_prop_types133.default.number, import_prop_types133.default.string]),
    /**
     * @ignore
     */
    type: import_prop_types133.default.any,
    /**
     * The input value.
     */
    value: import_prop_types133.default.any,
    /**
     * The variant to use.
     */
    variant: import_prop_types133.default.oneOf(["standard", "outlined", "filled"])
  } : void 0;
  var SelectInput_default = SelectInput;

  // node_modules/@mui/material/Select/Select.js
  var import_jsx_runtime195 = __toESM(require_jsx_runtime());
  var _excluded131 = ["autoWidth", "children", "classes", "className", "defaultOpen", "displayEmpty", "IconComponent", "id", "input", "inputProps", "label", "labelId", "MenuProps", "multiple", "native", "onClose", "onOpen", "open", "renderValue", "SelectDisplayProps", "variant"];
  var _excluded218 = ["root"];
  var useUtilityClasses103 = (ownerState) => {
    const {
      classes
    } = ownerState;
    return classes;
  };
  var styledRootConfig = {
    name: "MuiSelect",
    overridesResolver: (props, styles7) => styles7.root,
    shouldForwardProp: (prop) => rootShouldForwardProp(prop) && prop !== "variant",
    slot: "Root"
  };
  var StyledInput = styled_default(Input_default, styledRootConfig)("");
  var StyledOutlinedInput = styled_default(OutlinedInput_default, styledRootConfig)("");
  var StyledFilledInput = styled_default(FilledInput_default, styledRootConfig)("");
  var Select3 = /* @__PURE__ */ React211.forwardRef(function Select4(inProps, ref) {
    const props = useThemeProps({
      name: "MuiSelect",
      props: inProps
    });
    const {
      autoWidth = false,
      children,
      classes: classesProp = {},
      className,
      defaultOpen = false,
      displayEmpty = false,
      IconComponent = ArrowDropDown_default,
      id,
      input,
      inputProps,
      label,
      labelId,
      MenuProps,
      multiple = false,
      native = false,
      onClose,
      onOpen,
      open,
      renderValue,
      SelectDisplayProps,
      variant: variantProp = "outlined"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded131);
    const inputComponent = native ? NativeSelectInput_default : SelectInput_default;
    const muiFormControl = useFormControl();
    const fcs = formControlState({
      props,
      muiFormControl,
      states: ["variant", "error"]
    });
    const variant = fcs.variant || variantProp;
    const ownerState = _extends({}, props, {
      variant,
      classes: classesProp
    });
    const classes = useUtilityClasses103(ownerState);
    const restOfClasses = _objectWithoutPropertiesLoose(classes, _excluded218);
    const InputComponent = input || {
      standard: /* @__PURE__ */ (0, import_jsx_runtime195.jsx)(StyledInput, {
        ownerState
      }),
      outlined: /* @__PURE__ */ (0, import_jsx_runtime195.jsx)(StyledOutlinedInput, {
        label,
        ownerState
      }),
      filled: /* @__PURE__ */ (0, import_jsx_runtime195.jsx)(StyledFilledInput, {
        ownerState
      })
    }[variant];
    const inputComponentRef = useForkRef_default(ref, InputComponent.ref);
    return /* @__PURE__ */ (0, import_jsx_runtime195.jsx)(React211.Fragment, {
      children: /* @__PURE__ */ React211.cloneElement(InputComponent, _extends({
        // Most of the logic is implemented in `SelectInput`.
        // The `Select` component is a simple API wrapper to expose something better to play with.
        inputComponent,
        inputProps: _extends({
          children,
          error: fcs.error,
          IconComponent,
          variant,
          type: void 0,
          // We render a select. We can ignore the type provided by the `Input`.
          multiple
        }, native ? {
          id
        } : {
          autoWidth,
          defaultOpen,
          displayEmpty,
          labelId,
          MenuProps,
          onClose,
          onOpen,
          open,
          renderValue,
          SelectDisplayProps: _extends({
            id
          }, SelectDisplayProps)
        }, inputProps, {
          classes: inputProps ? (0, import_utils232.deepmerge)(restOfClasses, inputProps.classes) : restOfClasses
        }, input ? input.props.inputProps : {})
      }, multiple && native && variant === "outlined" ? {
        notched: true
      } : {}, {
        ref: inputComponentRef,
        className: clsx_default(InputComponent.props.className, className, classes.root)
      }, !input && {
        variant
      }, other))
    });
  });
  true ? Select3.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * If `true`, the width of the popover will automatically be set according to the items inside the
     * menu, otherwise it will be at least the width of the select input.
     * @default false
     */
    autoWidth: import_prop_types134.default.bool,
    /**
     * The option elements to populate the select with.
     * Can be some `MenuItem` when `native` is false and `option` when `native` is true.
     *
     * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.
     */
    children: import_prop_types134.default.node,
    /**
     * Override or extend the styles applied to the component.
     * @default {}
     */
    classes: import_prop_types134.default.object,
    /**
     * @ignore
     */
    className: import_prop_types134.default.string,
    /**
     * If `true`, the component is initially open. Use when the component open state is not controlled (i.e. the `open` prop is not defined).
     * You can only use it when the `native` prop is `false` (default).
     * @default false
     */
    defaultOpen: import_prop_types134.default.bool,
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types134.default.any,
    /**
     * If `true`, a value is displayed even if no items are selected.
     *
     * In order to display a meaningful value, a function can be passed to the `renderValue` prop which
     * returns the value to be displayed when no items are selected.
     *
     * ⚠️ When using this prop, make sure the label doesn't overlap with the empty displayed value.
     * The label should either be hidden or forced to a shrunk state.
     * @default false
     */
    displayEmpty: import_prop_types134.default.bool,
    /**
     * The icon that displays the arrow.
     * @default ArrowDropDownIcon
     */
    IconComponent: import_prop_types134.default.elementType,
    /**
     * The `id` of the wrapper element or the `select` element when `native`.
     */
    id: import_prop_types134.default.string,
    /**
     * An `Input` element; does not have to be a material-ui specific `Input`.
     */
    input: import_prop_types134.default.element,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     * When `native` is `true`, the attributes are applied on the `select` element.
     */
    inputProps: import_prop_types134.default.object,
    /**
     * See [OutlinedInput#label](/material-ui/api/outlined-input/#props)
     */
    label: import_prop_types134.default.node,
    /**
     * The ID of an element that acts as an additional label. The Select will
     * be labelled by the additional label and the selected value.
     */
    labelId: import_prop_types134.default.string,
    /**
     * Props applied to the [`Menu`](/material-ui/api/menu/) element.
     */
    MenuProps: import_prop_types134.default.object,
    /**
     * If `true`, `value` must be an array and the menu will support multiple selections.
     * @default false
     */
    multiple: import_prop_types134.default.bool,
    /**
     * If `true`, the component uses a native `select` element.
     * @default false
     */
    native: import_prop_types134.default.bool,
    /**
     * Callback fired when a menu item is selected.
     *
     * @param {SelectChangeEvent<Value>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (any).
     * **Warning**: This is a generic event, not a change event, unless the change event is caused by browser autofill.
     * @param {object} [child] The react element that was selected when `native` is `false` (default).
     */
    onChange: import_prop_types134.default.func,
    /**
     * Callback fired when the component requests to be closed.
     * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select collapses).
     *
     * @param {object} event The event source of the callback.
     */
    onClose: import_prop_types134.default.func,
    /**
     * Callback fired when the component requests to be opened.
     * Use it in either controlled (see the `open` prop), or uncontrolled mode (to detect when the Select expands).
     *
     * @param {object} event The event source of the callback.
     */
    onOpen: import_prop_types134.default.func,
    /**
     * If `true`, the component is shown.
     * You can only use it when the `native` prop is `false` (default).
     */
    open: import_prop_types134.default.bool,
    /**
     * Render the selected value.
     * You can only use it when the `native` prop is `false` (default).
     *
     * @param {any} value The `value` provided to the component.
     * @returns {ReactNode}
     */
    renderValue: import_prop_types134.default.func,
    /**
     * Props applied to the clickable div element.
     */
    SelectDisplayProps: import_prop_types134.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types134.default.oneOfType([import_prop_types134.default.arrayOf(import_prop_types134.default.oneOfType([import_prop_types134.default.func, import_prop_types134.default.object, import_prop_types134.default.bool])), import_prop_types134.default.func, import_prop_types134.default.object]),
    /**
     * The `input` value. Providing an empty string will select no options.
     * Set to an empty string `''` if you don't want any of the available options to be selected.
     *
     * If the value is an object it must have reference equality with the option in order to be selected.
     * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.
     */
    value: import_prop_types134.default.oneOfType([import_prop_types134.default.oneOf([""]), import_prop_types134.default.any]),
    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: import_prop_types134.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  Select3.muiName = "Select";
  var Select_default = Select3;

  // node_modules/@mui/material/Skeleton/Skeleton.js
  init_extends();
  var React212 = __toESM(require_react());
  var import_prop_types135 = __toESM(require_prop_types());
  var import_system40 = __toESM(require_system());
  var import_composeClasses98 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/Skeleton/skeletonClasses.js
  var import_utils233 = __toESM(require_utils());
  var import_generateUtilityClass106 = __toESM(require_generateUtilityClass3());
  function getSkeletonUtilityClass(slot) {
    return (0, import_generateUtilityClass106.default)("MuiSkeleton", slot);
  }
  var skeletonClasses = (0, import_utils233.unstable_generateUtilityClasses)("MuiSkeleton", ["root", "text", "rectangular", "rounded", "circular", "pulse", "wave", "withChildren", "fitContent", "heightAuto"]);
  var skeletonClasses_default = skeletonClasses;

  // node_modules/@mui/material/Skeleton/Skeleton.js
  var import_jsx_runtime196 = __toESM(require_jsx_runtime());
  var _excluded132 = ["animation", "className", "component", "height", "style", "variant", "width"];
  var _4 = (t) => t;
  var _t7;
  var _t24;
  var _t34;
  var _t44;
  var useUtilityClasses104 = (ownerState) => {
    const {
      classes,
      variant,
      animation,
      hasChildren,
      width,
      height
    } = ownerState;
    const slots = {
      root: ["root", variant, animation, hasChildren && "withChildren", hasChildren && !width && "fitContent", hasChildren && !height && "heightAuto"]
    };
    return (0, import_composeClasses98.unstable_composeClasses)(slots, getSkeletonUtilityClass, classes);
  };
  var pulseKeyframe = (0, import_system40.keyframes)(_t7 || (_t7 = _4`
  0% {
    opacity: 1;
  }

  50% {
    opacity: 0.4;
  }

  100% {
    opacity: 1;
  }
`));
  var waveKeyframe = (0, import_system40.keyframes)(_t24 || (_t24 = _4`
  0% {
    transform: translateX(-100%);
  }

  50% {
    /* +0.5s of delay between each loop */
    transform: translateX(100%);
  }

  100% {
    transform: translateX(100%);
  }
`));
  var SkeletonRoot = styled_default("span", {
    name: "MuiSkeleton",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, styles7[ownerState.variant], ownerState.animation !== false && styles7[ownerState.animation], ownerState.hasChildren && styles7.withChildren, ownerState.hasChildren && !ownerState.width && styles7.fitContent, ownerState.hasChildren && !ownerState.height && styles7.heightAuto];
    }
  })(({
    theme,
    ownerState
  }) => {
    const radiusUnit = getUnit(theme.shape.borderRadius) || "px";
    const radiusValue = toUnitless(theme.shape.borderRadius);
    return _extends({
      display: "block",
      // Create a "on paper" color with sufficient contrast retaining the color
      backgroundColor: theme.vars ? theme.vars.palette.Skeleton.bg : (0, import_system10.alpha)(theme.palette.text.primary, theme.palette.mode === "light" ? 0.11 : 0.13),
      height: "1.2em"
    }, ownerState.variant === "text" && {
      marginTop: 0,
      marginBottom: 0,
      height: "auto",
      transformOrigin: "0 55%",
      transform: "scale(1, 0.60)",
      borderRadius: `${radiusValue}${radiusUnit}/${Math.round(radiusValue / 0.6 * 10) / 10}${radiusUnit}`,
      "&:empty:before": {
        content: '"\\00a0"'
      }
    }, ownerState.variant === "circular" && {
      borderRadius: "50%"
    }, ownerState.variant === "rounded" && {
      borderRadius: (theme.vars || theme).shape.borderRadius
    }, ownerState.hasChildren && {
      "& > *": {
        visibility: "hidden"
      }
    }, ownerState.hasChildren && !ownerState.width && {
      maxWidth: "fit-content"
    }, ownerState.hasChildren && !ownerState.height && {
      height: "auto"
    });
  }, ({
    ownerState
  }) => ownerState.animation === "pulse" && (0, import_system40.css)(_t34 || (_t34 = _4`
      animation: ${0} 2s ease-in-out 0.5s infinite;
    `), pulseKeyframe), ({
    ownerState,
    theme
  }) => ownerState.animation === "wave" && (0, import_system40.css)(_t44 || (_t44 = _4`
      position: relative;
      overflow: hidden;

      /* Fix bug in Safari https://bugs.webkit.org/show_bug.cgi?id=68196 */
      -webkit-mask-image: -webkit-radial-gradient(white, black);

      &::after {
        animation: ${0} 2s linear 0.5s infinite;
        background: linear-gradient(
          90deg,
          transparent,
          ${0},
          transparent
        );
        content: '';
        position: absolute;
        transform: translateX(-100%); /* Avoid flash during server-side hydration */
        bottom: 0;
        left: 0;
        right: 0;
        top: 0;
      }
    `), waveKeyframe, (theme.vars || theme).palette.action.hover));
  var Skeleton = /* @__PURE__ */ React212.forwardRef(function Skeleton2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiSkeleton"
    });
    const {
      animation = "pulse",
      className,
      component = "span",
      height,
      style,
      variant = "text",
      width
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded132);
    const ownerState = _extends({}, props, {
      animation,
      component,
      variant,
      hasChildren: Boolean(other.children)
    });
    const classes = useUtilityClasses104(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime196.jsx)(SkeletonRoot, _extends({
      as: component,
      ref,
      className: clsx_default(classes.root, className),
      ownerState
    }, other, {
      style: _extends({
        width,
        height
      }, style)
    }));
  });
  true ? Skeleton.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The animation.
     * If `false` the animation effect is disabled.
     * @default 'pulse'
     */
    animation: import_prop_types135.default.oneOf(["pulse", "wave", false]),
    /**
     * Optional children to infer width and height from.
     */
    children: import_prop_types135.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types135.default.object,
    /**
     * @ignore
     */
    className: import_prop_types135.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types135.default.elementType,
    /**
     * Height of the skeleton.
     * Useful when you don't want to adapt the skeleton to a text element but for instance a card.
     */
    height: import_prop_types135.default.oneOfType([import_prop_types135.default.number, import_prop_types135.default.string]),
    /**
     * @ignore
     */
    style: import_prop_types135.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types135.default.oneOfType([import_prop_types135.default.arrayOf(import_prop_types135.default.oneOfType([import_prop_types135.default.func, import_prop_types135.default.object, import_prop_types135.default.bool])), import_prop_types135.default.func, import_prop_types135.default.object]),
    /**
     * The type of content that will be rendered.
     * @default 'text'
     */
    variant: import_prop_types135.default.oneOfType([import_prop_types135.default.oneOf(["circular", "rectangular", "rounded", "text"]), import_prop_types135.default.string]),
    /**
     * Width of the skeleton.
     * Useful when the skeleton is inside an inline element with no width of its own.
     */
    width: import_prop_types135.default.oneOfType([import_prop_types135.default.number, import_prop_types135.default.string])
  } : void 0;
  var Skeleton_default = Skeleton;

  // node_modules/@mui/material/Slider/Slider.js
  init_extends();
  var React214 = __toESM(require_react());
  var import_prop_types137 = __toESM(require_prop_types());
  var import_utils235 = __toESM(require_utils());
  var import_system41 = __toESM(require_system());

  // node_modules/@mui/material/utils/shouldSpreadAdditionalProps.js
  var shouldSpreadAdditionalProps = (Slot) => {
    return !Slot || !isHostComponent(Slot);
  };
  var shouldSpreadAdditionalProps_default = shouldSpreadAdditionalProps;

  // node_modules/@mui/material/Slider/SliderValueLabel.js
  var React213 = __toESM(require_react());
  var import_prop_types136 = __toESM(require_prop_types());

  // node_modules/@mui/material/Slider/sliderClasses.js
  var import_utils234 = __toESM(require_utils());
  var import_generateUtilityClass107 = __toESM(require_generateUtilityClass3());
  function getSliderUtilityClass2(slot) {
    return (0, import_generateUtilityClass107.default)("MuiSlider", slot);
  }
  var sliderClasses2 = (0, import_utils234.unstable_generateUtilityClasses)("MuiSlider", ["root", "active", "colorPrimary", "colorSecondary", "disabled", "dragging", "focusVisible", "mark", "markActive", "marked", "markLabel", "markLabelActive", "rail", "sizeSmall", "thumb", "thumbColorPrimary", "thumbColorSecondary", "track", "trackInverted", "trackFalse", "thumbSizeSmall", "valueLabel", "valueLabelOpen", "valueLabelCircle", "valueLabelLabel", "vertical"]);
  var sliderClasses_default = sliderClasses2;

  // node_modules/@mui/material/Slider/SliderValueLabel.js
  var import_jsx_runtime197 = __toESM(require_jsx_runtime());
  var import_jsx_runtime198 = __toESM(require_jsx_runtime());
  var useValueLabelClasses = (props) => {
    const {
      open
    } = props;
    const utilityClasses = {
      offset: clsx_default(open && sliderClasses_default.valueLabelOpen),
      circle: sliderClasses_default.valueLabelCircle,
      label: sliderClasses_default.valueLabelLabel
    };
    return utilityClasses;
  };
  function SliderValueLabel(props) {
    const {
      children,
      className,
      value
    } = props;
    const classes = useValueLabelClasses(props);
    if (!children) {
      return null;
    }
    return /* @__PURE__ */ React213.cloneElement(children, {
      className: clsx_default(children.props.className)
    }, /* @__PURE__ */ (0, import_jsx_runtime198.jsxs)(React213.Fragment, {
      children: [children.props.children, /* @__PURE__ */ (0, import_jsx_runtime197.jsx)("span", {
        className: clsx_default(classes.offset, className),
        "aria-hidden": true,
        children: /* @__PURE__ */ (0, import_jsx_runtime197.jsx)("span", {
          className: classes.circle,
          children: /* @__PURE__ */ (0, import_jsx_runtime197.jsx)("span", {
            className: classes.label,
            children: value
          })
        })
      })]
    }));
  }
  true ? SliderValueLabel.propTypes = {
    children: import_prop_types136.default.element.isRequired,
    className: import_prop_types136.default.string,
    value: import_prop_types136.default.node
  } : void 0;

  // node_modules/@mui/material/Slider/Slider.js
  var import_jsx_runtime199 = __toESM(require_jsx_runtime());
  var import_jsx_runtime200 = __toESM(require_jsx_runtime());
  var _excluded133 = ["aria-label", "aria-valuetext", "aria-labelledby", "component", "components", "componentsProps", "color", "classes", "className", "disableSwap", "disabled", "getAriaLabel", "getAriaValueText", "marks", "max", "min", "name", "onChange", "onChangeCommitted", "orientation", "size", "step", "scale", "slotProps", "slots", "tabIndex", "track", "value", "valueLabelDisplay", "valueLabelFormat"];
  function Identity3(x) {
    return x;
  }
  var SliderRoot = styled_default("span", {
    name: "MuiSlider",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, styles7[`color${capitalize_default(ownerState.color)}`], ownerState.size !== "medium" && styles7[`size${capitalize_default(ownerState.size)}`], ownerState.marked && styles7.marked, ownerState.orientation === "vertical" && styles7.vertical, ownerState.track === "inverted" && styles7.trackInverted, ownerState.track === false && styles7.trackFalse];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    borderRadius: 12,
    boxSizing: "content-box",
    display: "inline-block",
    position: "relative",
    cursor: "pointer",
    touchAction: "none",
    color: (theme.vars || theme).palette[ownerState.color].main,
    WebkitTapHighlightColor: "transparent"
  }, ownerState.orientation === "horizontal" && _extends({
    height: 4,
    width: "100%",
    padding: "13px 0",
    // The primary input mechanism of the device includes a pointing device of limited accuracy.
    "@media (pointer: coarse)": {
      // Reach 42px touch target, about ~8mm on screen.
      padding: "20px 0"
    }
  }, ownerState.size === "small" && {
    height: 2
  }, ownerState.marked && {
    marginBottom: 20
  }), ownerState.orientation === "vertical" && _extends({
    height: "100%",
    width: 4,
    padding: "0 13px",
    // The primary input mechanism of the device includes a pointing device of limited accuracy.
    "@media (pointer: coarse)": {
      // Reach 42px touch target, about ~8mm on screen.
      padding: "0 20px"
    }
  }, ownerState.size === "small" && {
    width: 2
  }, ownerState.marked && {
    marginRight: 44
  }), {
    "@media print": {
      colorAdjust: "exact"
    },
    [`&.${sliderClasses_default.disabled}`]: {
      pointerEvents: "none",
      cursor: "default",
      color: (theme.vars || theme).palette.grey[400]
    },
    [`&.${sliderClasses_default.dragging}`]: {
      [`& .${sliderClasses_default.thumb}, & .${sliderClasses_default.track}`]: {
        transition: "none"
      }
    }
  }));
  var SliderRail = styled_default("span", {
    name: "MuiSlider",
    slot: "Rail",
    overridesResolver: (props, styles7) => styles7.rail
  })(({
    ownerState
  }) => _extends({
    display: "block",
    position: "absolute",
    borderRadius: "inherit",
    backgroundColor: "currentColor",
    opacity: 0.38
  }, ownerState.orientation === "horizontal" && {
    width: "100%",
    height: "inherit",
    top: "50%",
    transform: "translateY(-50%)"
  }, ownerState.orientation === "vertical" && {
    height: "100%",
    width: "inherit",
    left: "50%",
    transform: "translateX(-50%)"
  }, ownerState.track === "inverted" && {
    opacity: 1
  }));
  var SliderTrack = styled_default("span", {
    name: "MuiSlider",
    slot: "Track",
    overridesResolver: (props, styles7) => styles7.track
  })(({
    theme,
    ownerState
  }) => {
    const color = (
      // Same logic as the LinearProgress track color
      theme.palette.mode === "light" ? (0, import_system41.lighten)(theme.palette[ownerState.color].main, 0.62) : (0, import_system41.darken)(theme.palette[ownerState.color].main, 0.5)
    );
    return _extends({
      display: "block",
      position: "absolute",
      borderRadius: "inherit",
      border: "1px solid currentColor",
      backgroundColor: "currentColor",
      transition: theme.transitions.create(["left", "width", "bottom", "height"], {
        duration: theme.transitions.duration.shortest
      })
    }, ownerState.size === "small" && {
      border: "none"
    }, ownerState.orientation === "horizontal" && {
      height: "inherit",
      top: "50%",
      transform: "translateY(-50%)"
    }, ownerState.orientation === "vertical" && {
      width: "inherit",
      left: "50%",
      transform: "translateX(-50%)"
    }, ownerState.track === false && {
      display: "none"
    }, ownerState.track === "inverted" && {
      backgroundColor: theme.vars ? theme.vars.palette.Slider[`${ownerState.color}Track`] : color,
      borderColor: theme.vars ? theme.vars.palette.Slider[`${ownerState.color}Track`] : color
    });
  });
  var SliderThumb = styled_default("span", {
    name: "MuiSlider",
    slot: "Thumb",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.thumb, styles7[`thumbColor${capitalize_default(ownerState.color)}`], ownerState.size !== "medium" && styles7[`thumbSize${capitalize_default(ownerState.size)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    position: "absolute",
    width: 20,
    height: 20,
    boxSizing: "border-box",
    borderRadius: "50%",
    outline: 0,
    backgroundColor: "currentColor",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    transition: theme.transitions.create(["box-shadow", "left", "bottom"], {
      duration: theme.transitions.duration.shortest
    })
  }, ownerState.size === "small" && {
    width: 12,
    height: 12
  }, ownerState.orientation === "horizontal" && {
    top: "50%",
    transform: "translate(-50%, -50%)"
  }, ownerState.orientation === "vertical" && {
    left: "50%",
    transform: "translate(-50%, 50%)"
  }, {
    "&:before": _extends({
      position: "absolute",
      content: '""',
      borderRadius: "inherit",
      width: "100%",
      height: "100%",
      boxShadow: (theme.vars || theme).shadows[2]
    }, ownerState.size === "small" && {
      boxShadow: "none"
    }),
    "&::after": {
      position: "absolute",
      content: '""',
      borderRadius: "50%",
      // 42px is the hit target
      width: 42,
      height: 42,
      top: "50%",
      left: "50%",
      transform: "translate(-50%, -50%)"
    },
    [`&:hover, &.${sliderClasses_default.focusVisible}`]: {
      boxShadow: `0px 0px 0px 8px ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.16)` : (0, import_system41.alpha)(theme.palette[ownerState.color].main, 0.16)}`,
      "@media (hover: none)": {
        boxShadow: "none"
      }
    },
    [`&.${sliderClasses_default.active}`]: {
      boxShadow: `0px 0px 0px 14px ${theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / 0.16)` : (0, import_system41.alpha)(theme.palette[ownerState.color].main, 0.16)}`
    },
    [`&.${sliderClasses_default.disabled}`]: {
      "&:hover": {
        boxShadow: "none"
      }
    }
  }));
  var SliderValueLabel2 = styled_default(SliderValueLabel, {
    name: "MuiSlider",
    slot: "ValueLabel",
    overridesResolver: (props, styles7) => styles7.valueLabel
  })(({
    theme,
    ownerState
  }) => _extends({
    [`&.${sliderClasses_default.valueLabelOpen}`]: {
      transform: `${ownerState.orientation === "vertical" ? "translateY(-50%)" : "translateY(-100%)"} scale(1)`
    },
    zIndex: 1,
    whiteSpace: "nowrap"
  }, theme.typography.body2, {
    fontWeight: 500,
    transition: theme.transitions.create(["transform"], {
      duration: theme.transitions.duration.shortest
    }),
    transform: `${ownerState.orientation === "vertical" ? "translateY(-50%)" : "translateY(-100%)"} scale(0)`,
    position: "absolute",
    backgroundColor: (theme.vars || theme).palette.grey[600],
    borderRadius: 2,
    color: (theme.vars || theme).palette.common.white,
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    padding: "0.25rem 0.75rem"
  }, ownerState.orientation === "horizontal" && {
    top: "-10px",
    transformOrigin: "bottom center",
    "&:before": {
      position: "absolute",
      content: '""',
      width: 8,
      height: 8,
      transform: "translate(-50%, 50%) rotate(45deg)",
      backgroundColor: "inherit",
      bottom: 0,
      left: "50%"
    }
  }, ownerState.orientation === "vertical" && {
    right: ownerState.size === "small" ? "20px" : "30px",
    top: "50%",
    transformOrigin: "right center",
    "&:before": {
      position: "absolute",
      content: '""',
      width: 8,
      height: 8,
      transform: "translate(-50%, -50%) rotate(45deg)",
      backgroundColor: "inherit",
      right: -8,
      top: "50%"
    }
  }, ownerState.size === "small" && {
    fontSize: theme.typography.pxToRem(12),
    padding: "0.25rem 0.5rem"
  }));
  var SliderMark = styled_default("span", {
    name: "MuiSlider",
    slot: "Mark",
    shouldForwardProp: (prop) => slotShouldForwardProp(prop) && prop !== "markActive",
    overridesResolver: (props, styles7) => {
      const {
        markActive
      } = props;
      return [styles7.mark, markActive && styles7.markActive];
    }
  })(({
    theme,
    ownerState,
    markActive
  }) => _extends({
    position: "absolute",
    width: 2,
    height: 2,
    borderRadius: 1,
    backgroundColor: "currentColor"
  }, ownerState.orientation === "horizontal" && {
    top: "50%",
    transform: "translate(-1px, -50%)"
  }, ownerState.orientation === "vertical" && {
    left: "50%",
    transform: "translate(-50%, 1px)"
  }, markActive && {
    backgroundColor: (theme.vars || theme).palette.background.paper,
    opacity: 0.8
  }));
  var SliderMarkLabel = styled_default("span", {
    name: "MuiSlider",
    slot: "MarkLabel",
    shouldForwardProp: (prop) => slotShouldForwardProp(prop) && prop !== "markLabelActive",
    overridesResolver: (props, styles7) => styles7.markLabel
  })(({
    theme,
    ownerState,
    markLabelActive
  }) => _extends({}, theme.typography.body2, {
    color: (theme.vars || theme).palette.text.secondary,
    position: "absolute",
    whiteSpace: "nowrap"
  }, ownerState.orientation === "horizontal" && {
    top: 30,
    transform: "translateX(-50%)",
    "@media (pointer: coarse)": {
      top: 40
    }
  }, ownerState.orientation === "vertical" && {
    left: 36,
    transform: "translateY(50%)",
    "@media (pointer: coarse)": {
      left: 44
    }
  }, markLabelActive && {
    color: (theme.vars || theme).palette.text.primary
  }));
  var useUtilityClasses105 = (ownerState) => {
    const {
      disabled,
      dragging,
      marked,
      orientation,
      track,
      classes,
      color,
      size: size2
    } = ownerState;
    const slots = {
      root: ["root", disabled && "disabled", dragging && "dragging", marked && "marked", orientation === "vertical" && "vertical", track === "inverted" && "trackInverted", track === false && "trackFalse", color && `color${capitalize_default(color)}`, size2 && `size${capitalize_default(size2)}`],
      rail: ["rail"],
      track: ["track"],
      mark: ["mark"],
      markActive: ["markActive"],
      markLabel: ["markLabel"],
      markLabelActive: ["markLabelActive"],
      valueLabel: ["valueLabel"],
      thumb: ["thumb", disabled && "disabled", size2 && `thumbSize${capitalize_default(size2)}`, color && `thumbColor${capitalize_default(color)}`],
      active: ["active"],
      disabled: ["disabled"],
      focusVisible: ["focusVisible"]
    };
    return (0, base_exports.unstable_composeClasses)(slots, getSliderUtilityClass2, classes);
  };
  var Forward = ({
    children
  }) => children;
  var Slider3 = /* @__PURE__ */ React214.forwardRef(function Slider4(inputProps, ref) {
    var _ref, _slots$root, _ref2, _slots$rail, _ref3, _slots$track, _ref4, _slots$thumb, _ref5, _slots$valueLabel, _ref6, _slots$mark, _ref7, _slots$markLabel, _ref8, _slots$input, _slotProps$root, _slotProps$rail, _slotProps$track, _slotProps$thumb, _slotProps$valueLabel, _slotProps$mark, _slotProps$markLabel, _slotProps$input;
    const props = useThemeProps({
      props: inputProps,
      name: "MuiSlider"
    });
    const theme = useTheme4();
    const isRtl = theme.direction === "rtl";
    const {
      "aria-label": ariaLabel,
      "aria-valuetext": ariaValuetext,
      "aria-labelledby": ariaLabelledby,
      // eslint-disable-next-line react/prop-types
      component = "span",
      components = {},
      componentsProps = {},
      color = "primary",
      classes: classesProp,
      className,
      disableSwap = false,
      disabled = false,
      getAriaLabel,
      getAriaValueText,
      marks: marksProp = false,
      max: max3 = 100,
      min: min3 = 0,
      orientation = "horizontal",
      size: size2 = "medium",
      step = 1,
      scale = Identity3,
      slotProps,
      slots,
      track = "normal",
      valueLabelDisplay = "off",
      valueLabelFormat = Identity3
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded133);
    const ownerState = _extends({}, props, {
      isRtl,
      max: max3,
      min: min3,
      classes: classesProp,
      disabled,
      disableSwap,
      orientation,
      marks: marksProp,
      color,
      size: size2,
      step,
      scale,
      track,
      valueLabelDisplay,
      valueLabelFormat
    });
    const {
      axisProps: axisProps2,
      getRootProps,
      getHiddenInputProps,
      getThumbProps,
      open,
      active,
      axis,
      focusedThumbIndex,
      range,
      dragging,
      marks,
      values: values2,
      trackOffset,
      trackLeap,
      getThumbStyle
    } = useSlider(_extends({}, ownerState, {
      rootRef: ref
    }));
    ownerState.marked = marks.length > 0 && marks.some((mark) => mark.label);
    ownerState.dragging = dragging;
    ownerState.focusedThumbIndex = focusedThumbIndex;
    const classes = useUtilityClasses105(ownerState);
    const RootSlot = (_ref = (_slots$root = slots == null ? void 0 : slots.root) != null ? _slots$root : components.Root) != null ? _ref : SliderRoot;
    const RailSlot = (_ref2 = (_slots$rail = slots == null ? void 0 : slots.rail) != null ? _slots$rail : components.Rail) != null ? _ref2 : SliderRail;
    const TrackSlot = (_ref3 = (_slots$track = slots == null ? void 0 : slots.track) != null ? _slots$track : components.Track) != null ? _ref3 : SliderTrack;
    const ThumbSlot = (_ref4 = (_slots$thumb = slots == null ? void 0 : slots.thumb) != null ? _slots$thumb : components.Thumb) != null ? _ref4 : SliderThumb;
    const ValueLabelSlot = (_ref5 = (_slots$valueLabel = slots == null ? void 0 : slots.valueLabel) != null ? _slots$valueLabel : components.ValueLabel) != null ? _ref5 : SliderValueLabel2;
    const MarkSlot = (_ref6 = (_slots$mark = slots == null ? void 0 : slots.mark) != null ? _slots$mark : components.Mark) != null ? _ref6 : SliderMark;
    const MarkLabelSlot = (_ref7 = (_slots$markLabel = slots == null ? void 0 : slots.markLabel) != null ? _slots$markLabel : components.MarkLabel) != null ? _ref7 : SliderMarkLabel;
    const InputSlot = (_ref8 = (_slots$input = slots == null ? void 0 : slots.input) != null ? _slots$input : components.Input) != null ? _ref8 : "input";
    const rootSlotProps = (_slotProps$root = slotProps == null ? void 0 : slotProps.root) != null ? _slotProps$root : componentsProps.root;
    const railSlotProps = (_slotProps$rail = slotProps == null ? void 0 : slotProps.rail) != null ? _slotProps$rail : componentsProps.rail;
    const trackSlotProps = (_slotProps$track = slotProps == null ? void 0 : slotProps.track) != null ? _slotProps$track : componentsProps.track;
    const thumbSlotProps = (_slotProps$thumb = slotProps == null ? void 0 : slotProps.thumb) != null ? _slotProps$thumb : componentsProps.thumb;
    const valueLabelSlotProps = (_slotProps$valueLabel = slotProps == null ? void 0 : slotProps.valueLabel) != null ? _slotProps$valueLabel : componentsProps.valueLabel;
    const markSlotProps = (_slotProps$mark = slotProps == null ? void 0 : slotProps.mark) != null ? _slotProps$mark : componentsProps.mark;
    const markLabelSlotProps = (_slotProps$markLabel = slotProps == null ? void 0 : slotProps.markLabel) != null ? _slotProps$markLabel : componentsProps.markLabel;
    const inputSlotProps = (_slotProps$input = slotProps == null ? void 0 : slotProps.input) != null ? _slotProps$input : componentsProps.input;
    const rootProps = useSlotProps({
      elementType: RootSlot,
      getSlotProps: getRootProps,
      externalSlotProps: rootSlotProps,
      externalForwardedProps: other,
      additionalProps: _extends({}, shouldSpreadAdditionalProps_default(RootSlot) && {
        as: component
      }),
      ownerState: _extends({}, ownerState, rootSlotProps == null ? void 0 : rootSlotProps.ownerState),
      className: [classes.root, className]
    });
    const railProps = useSlotProps({
      elementType: RailSlot,
      externalSlotProps: railSlotProps,
      ownerState,
      className: classes.rail
    });
    const trackProps = useSlotProps({
      elementType: TrackSlot,
      externalSlotProps: trackSlotProps,
      additionalProps: {
        style: _extends({}, axisProps2[axis].offset(trackOffset), axisProps2[axis].leap(trackLeap))
      },
      ownerState: _extends({}, ownerState, trackSlotProps == null ? void 0 : trackSlotProps.ownerState),
      className: classes.track
    });
    const thumbProps = useSlotProps({
      elementType: ThumbSlot,
      getSlotProps: getThumbProps,
      externalSlotProps: thumbSlotProps,
      ownerState: _extends({}, ownerState, thumbSlotProps == null ? void 0 : thumbSlotProps.ownerState),
      className: classes.thumb
    });
    const valueLabelProps = useSlotProps({
      elementType: ValueLabelSlot,
      externalSlotProps: valueLabelSlotProps,
      ownerState: _extends({}, ownerState, valueLabelSlotProps == null ? void 0 : valueLabelSlotProps.ownerState),
      className: classes.valueLabel
    });
    const markProps = useSlotProps({
      elementType: MarkSlot,
      externalSlotProps: markSlotProps,
      ownerState,
      className: classes.mark
    });
    const markLabelProps = useSlotProps({
      elementType: MarkLabelSlot,
      externalSlotProps: markLabelSlotProps,
      ownerState,
      className: classes.markLabel
    });
    const inputSliderProps = useSlotProps({
      elementType: InputSlot,
      getSlotProps: getHiddenInputProps,
      externalSlotProps: inputSlotProps,
      ownerState
    });
    return /* @__PURE__ */ (0, import_jsx_runtime200.jsxs)(RootSlot, _extends({}, rootProps, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime199.jsx)(RailSlot, _extends({}, railProps)), /* @__PURE__ */ (0, import_jsx_runtime199.jsx)(TrackSlot, _extends({}, trackProps)), marks.filter((mark) => mark.value >= min3 && mark.value <= max3).map((mark, index3) => {
        const percent2 = valueToPercent(mark.value, min3, max3);
        const style = axisProps2[axis].offset(percent2);
        let markActive;
        if (track === false) {
          markActive = values2.indexOf(mark.value) !== -1;
        } else {
          markActive = track === "normal" && (range ? mark.value >= values2[0] && mark.value <= values2[values2.length - 1] : mark.value <= values2[0]) || track === "inverted" && (range ? mark.value <= values2[0] || mark.value >= values2[values2.length - 1] : mark.value >= values2[0]);
        }
        return /* @__PURE__ */ (0, import_jsx_runtime200.jsxs)(React214.Fragment, {
          children: [/* @__PURE__ */ (0, import_jsx_runtime199.jsx)(MarkSlot, _extends({
            "data-index": index3
          }, markProps, !isHostComponent(MarkSlot) && {
            markActive
          }, {
            style: _extends({}, style, markProps.style),
            className: clsx_default(markProps.className, markActive && classes.markActive)
          })), mark.label != null ? /* @__PURE__ */ (0, import_jsx_runtime199.jsx)(MarkLabelSlot, _extends({
            "aria-hidden": true,
            "data-index": index3
          }, markLabelProps, !isHostComponent(MarkLabelSlot) && {
            markLabelActive: markActive
          }, {
            style: _extends({}, style, markLabelProps.style),
            className: clsx_default(classes.markLabel, markLabelProps.className, markActive && classes.markLabelActive),
            children: mark.label
          })) : null]
        }, index3);
      }), values2.map((value, index3) => {
        const percent2 = valueToPercent(value, min3, max3);
        const style = axisProps2[axis].offset(percent2);
        const ValueLabelComponent = valueLabelDisplay === "off" ? Forward : ValueLabelSlot;
        return (
          /* TODO v6: Change component structure. It will help in avoiding the complicated React.cloneElement API added in SliderValueLabel component. Should be: Thumb -> Input, ValueLabel. Follow Joy UI's Slider structure. */
          /* @__PURE__ */ (0, import_jsx_runtime199.jsx)(ValueLabelComponent, _extends({}, !isHostComponent(ValueLabelComponent) && {
            valueLabelFormat,
            valueLabelDisplay,
            value: typeof valueLabelFormat === "function" ? valueLabelFormat(scale(value), index3) : valueLabelFormat,
            index: index3,
            open: open === index3 || active === index3 || valueLabelDisplay === "on",
            disabled
          }, valueLabelProps, {
            children: /* @__PURE__ */ (0, import_jsx_runtime199.jsx)(ThumbSlot, _extends({
              "data-index": index3
            }, thumbProps, {
              className: clsx_default(classes.thumb, thumbProps.className, active === index3 && classes.active, focusedThumbIndex === index3 && classes.focusVisible),
              style: _extends({}, style, getThumbStyle(index3), thumbProps.style),
              children: /* @__PURE__ */ (0, import_jsx_runtime199.jsx)(InputSlot, _extends({
                "data-index": index3,
                "aria-label": getAriaLabel ? getAriaLabel(index3) : ariaLabel,
                "aria-valuenow": scale(value),
                "aria-labelledby": ariaLabelledby,
                "aria-valuetext": getAriaValueText ? getAriaValueText(scale(value), index3) : ariaValuetext,
                value: values2[index3]
              }, inputSliderProps))
            }))
          }), index3)
        );
      })]
    }));
  });
  true ? Slider3.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The label of the slider.
     */
    "aria-label": (0, import_utils235.chainPropTypes)(import_prop_types137.default.string, (props) => {
      const range = Array.isArray(props.value || props.defaultValue);
      if (range && props["aria-label"] != null) {
        return new Error("MUI: You need to use the `getAriaLabel` prop instead of `aria-label` when using a range slider.");
      }
      return null;
    }),
    /**
     * The id of the element containing a label for the slider.
     */
    "aria-labelledby": import_prop_types137.default.string,
    /**
     * A string value that provides a user-friendly name for the current value of the slider.
     */
    "aria-valuetext": (0, import_utils235.chainPropTypes)(import_prop_types137.default.string, (props) => {
      const range = Array.isArray(props.value || props.defaultValue);
      if (range && props["aria-valuetext"] != null) {
        return new Error("MUI: You need to use the `getAriaValueText` prop instead of `aria-valuetext` when using a range slider.");
      }
      return null;
    }),
    /**
     * @ignore
     */
    children: import_prop_types137.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types137.default.object,
    /**
     * @ignore
     */
    className: import_prop_types137.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'primary'
     */
    color: import_prop_types137.default.oneOfType([import_prop_types137.default.oneOf(["primary", "secondary"]), import_prop_types137.default.string]),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types137.default.shape({
      Input: import_prop_types137.default.elementType,
      Mark: import_prop_types137.default.elementType,
      MarkLabel: import_prop_types137.default.elementType,
      Rail: import_prop_types137.default.elementType,
      Root: import_prop_types137.default.elementType,
      Thumb: import_prop_types137.default.elementType,
      Track: import_prop_types137.default.elementType,
      ValueLabel: import_prop_types137.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types137.default.shape({
      input: import_prop_types137.default.oneOfType([import_prop_types137.default.func, import_prop_types137.default.object]),
      mark: import_prop_types137.default.oneOfType([import_prop_types137.default.func, import_prop_types137.default.object]),
      markLabel: import_prop_types137.default.oneOfType([import_prop_types137.default.func, import_prop_types137.default.object]),
      rail: import_prop_types137.default.oneOfType([import_prop_types137.default.func, import_prop_types137.default.object]),
      root: import_prop_types137.default.oneOfType([import_prop_types137.default.func, import_prop_types137.default.object]),
      thumb: import_prop_types137.default.oneOfType([import_prop_types137.default.func, import_prop_types137.default.object]),
      track: import_prop_types137.default.oneOfType([import_prop_types137.default.func, import_prop_types137.default.object]),
      valueLabel: import_prop_types137.default.oneOfType([import_prop_types137.default.func, import_prop_types137.default.shape({
        children: import_prop_types137.default.element,
        className: import_prop_types137.default.string,
        open: import_prop_types137.default.bool,
        style: import_prop_types137.default.object,
        value: import_prop_types137.default.number,
        valueLabelDisplay: import_prop_types137.default.oneOf(["auto", "off", "on"])
      })])
    }),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types137.default.oneOfType([import_prop_types137.default.arrayOf(import_prop_types137.default.number), import_prop_types137.default.number]),
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types137.default.bool,
    /**
     * If `true`, the active thumb doesn't swap when moving pointer over a thumb while dragging another thumb.
     * @default false
     */
    disableSwap: import_prop_types137.default.bool,
    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the thumb labels of the slider.
     * This is important for screen reader users.
     * @param {number} index The thumb label's index to format.
     * @returns {string}
     */
    getAriaLabel: import_prop_types137.default.func,
    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the current value of the slider.
     * This is important for screen reader users.
     * @param {number} value The thumb label's value to format.
     * @param {number} index The thumb label's index to format.
     * @returns {string}
     */
    getAriaValueText: import_prop_types137.default.func,
    /**
     * Marks indicate predetermined values to which the user can move the slider.
     * If `true` the marks are spaced according the value of the `step` prop.
     * If an array, it should contain objects with `value` and an optional `label` keys.
     * @default false
     */
    marks: import_prop_types137.default.oneOfType([import_prop_types137.default.arrayOf(import_prop_types137.default.shape({
      label: import_prop_types137.default.node,
      value: import_prop_types137.default.number.isRequired
    })), import_prop_types137.default.bool]),
    /**
     * The maximum allowed value of the slider.
     * Should not be equal to min.
     * @default 100
     */
    max: import_prop_types137.default.number,
    /**
     * The minimum allowed value of the slider.
     * Should not be equal to max.
     * @default 0
     */
    min: import_prop_types137.default.number,
    /**
     * Name attribute of the hidden `input` element.
     */
    name: import_prop_types137.default.string,
    /**
     * Callback function that is fired when the slider's value changed.
     *
     * @param {Event} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (any).
     * **Warning**: This is a generic event not a change event.
     * @param {number | number[]} value The new value.
     * @param {number} activeThumb Index of the currently moved thumb.
     */
    onChange: import_prop_types137.default.func,
    /**
     * Callback function that is fired when the `mouseup` is triggered.
     *
     * @param {React.SyntheticEvent | Event} event The event source of the callback. **Warning**: This is a generic event not a change event.
     * @param {number | number[]} value The new value.
     */
    onChangeCommitted: import_prop_types137.default.func,
    /**
     * The component orientation.
     * @default 'horizontal'
     */
    orientation: import_prop_types137.default.oneOf(["horizontal", "vertical"]),
    /**
     * A transformation function, to change the scale of the slider.
     * @param {any} x
     * @returns {any}
     * @default function Identity(x) {
     *   return x;
     * }
     */
    scale: import_prop_types137.default.func,
    /**
     * The size of the slider.
     * @default 'medium'
     */
    size: import_prop_types137.default.oneOfType([import_prop_types137.default.oneOf(["small", "medium"]), import_prop_types137.default.string]),
    /**
     * The props used for each slot inside the Slider.
     * @default {}
     */
    slotProps: import_prop_types137.default.shape({
      input: import_prop_types137.default.oneOfType([import_prop_types137.default.func, import_prop_types137.default.object]),
      mark: import_prop_types137.default.oneOfType([import_prop_types137.default.func, import_prop_types137.default.object]),
      markLabel: import_prop_types137.default.oneOfType([import_prop_types137.default.func, import_prop_types137.default.object]),
      rail: import_prop_types137.default.oneOfType([import_prop_types137.default.func, import_prop_types137.default.object]),
      root: import_prop_types137.default.oneOfType([import_prop_types137.default.func, import_prop_types137.default.object]),
      thumb: import_prop_types137.default.oneOfType([import_prop_types137.default.func, import_prop_types137.default.object]),
      track: import_prop_types137.default.oneOfType([import_prop_types137.default.func, import_prop_types137.default.object]),
      valueLabel: import_prop_types137.default.oneOfType([import_prop_types137.default.func, import_prop_types137.default.shape({
        children: import_prop_types137.default.element,
        className: import_prop_types137.default.string,
        open: import_prop_types137.default.bool,
        style: import_prop_types137.default.object,
        value: import_prop_types137.default.number,
        valueLabelDisplay: import_prop_types137.default.oneOf(["auto", "off", "on"])
      })])
    }),
    /**
     * The components used for each slot inside the Slider.
     * Either a string to use a HTML element or a component.
     * @default {}
     */
    slots: import_prop_types137.default.shape({
      input: import_prop_types137.default.elementType,
      mark: import_prop_types137.default.elementType,
      markLabel: import_prop_types137.default.elementType,
      rail: import_prop_types137.default.elementType,
      root: import_prop_types137.default.elementType,
      thumb: import_prop_types137.default.elementType,
      track: import_prop_types137.default.elementType,
      valueLabel: import_prop_types137.default.elementType
    }),
    /**
     * The granularity with which the slider can step through values. (A "discrete" slider.)
     * The `min` prop serves as the origin for the valid values.
     * We recommend (max - min) to be evenly divisible by the step.
     *
     * When step is `null`, the thumb can only be slid onto marks provided with the `marks` prop.
     * @default 1
     */
    step: import_prop_types137.default.number,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types137.default.oneOfType([import_prop_types137.default.arrayOf(import_prop_types137.default.oneOfType([import_prop_types137.default.func, import_prop_types137.default.object, import_prop_types137.default.bool])), import_prop_types137.default.func, import_prop_types137.default.object]),
    /**
     * Tab index attribute of the hidden `input` element.
     */
    tabIndex: import_prop_types137.default.number,
    /**
     * The track presentation:
     *
     * - `normal` the track will render a bar representing the slider value.
     * - `inverted` the track will render a bar representing the remaining slider value.
     * - `false` the track will render without a bar.
     * @default 'normal'
     */
    track: import_prop_types137.default.oneOf(["inverted", "normal", false]),
    /**
     * The value of the slider.
     * For ranged sliders, provide an array with two values.
     */
    value: import_prop_types137.default.oneOfType([import_prop_types137.default.arrayOf(import_prop_types137.default.number), import_prop_types137.default.number]),
    /**
     * Controls when the value label is displayed:
     *
     * - `auto` the value label will display when the thumb is hovered or focused.
     * - `on` will display persistently.
     * - `off` will never display.
     * @default 'off'
     */
    valueLabelDisplay: import_prop_types137.default.oneOf(["auto", "off", "on"]),
    /**
     * The format function the value label's value.
     *
     * When a function is provided, it should have the following signature:
     *
     * - {number} value The value label's value to format
     * - {number} index The value label's index to format
     * @param {any} x
     * @returns {any}
     * @default function Identity(x) {
     *   return x;
     * }
     */
    valueLabelFormat: import_prop_types137.default.oneOfType([import_prop_types137.default.func, import_prop_types137.default.string])
  } : void 0;
  var Slider_default = Slider3;

  // node_modules/@mui/material/Snackbar/Snackbar.js
  init_extends();
  var React216 = __toESM(require_react());
  var import_prop_types139 = __toESM(require_prop_types());

  // node_modules/@mui/material/SnackbarContent/SnackbarContent.js
  init_extends();
  var React215 = __toESM(require_react());
  var import_prop_types138 = __toESM(require_prop_types());
  var import_composeClasses99 = __toESM(require_composeClasses3());
  var import_system42 = __toESM(require_system());

  // node_modules/@mui/material/SnackbarContent/snackbarContentClasses.js
  var import_utils236 = __toESM(require_utils());
  var import_generateUtilityClass108 = __toESM(require_generateUtilityClass3());
  function getSnackbarContentUtilityClass(slot) {
    return (0, import_generateUtilityClass108.default)("MuiSnackbarContent", slot);
  }
  var snackbarContentClasses = (0, import_utils236.unstable_generateUtilityClasses)("MuiSnackbarContent", ["root", "message", "action"]);
  var snackbarContentClasses_default = snackbarContentClasses;

  // node_modules/@mui/material/SnackbarContent/SnackbarContent.js
  var import_jsx_runtime201 = __toESM(require_jsx_runtime());
  var import_jsx_runtime202 = __toESM(require_jsx_runtime());
  var _excluded134 = ["action", "className", "message", "role"];
  var useUtilityClasses106 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      action: ["action"],
      message: ["message"]
    };
    return (0, import_composeClasses99.unstable_composeClasses)(slots, getSnackbarContentUtilityClass, classes);
  };
  var SnackbarContentRoot = styled_default(Paper_default, {
    name: "MuiSnackbarContent",
    slot: "Root",
    overridesResolver: (props, styles7) => styles7.root
  })(({
    theme
  }) => {
    const emphasis = theme.palette.mode === "light" ? 0.8 : 0.98;
    const backgroundColor = (0, import_system42.emphasize)(theme.palette.background.default, emphasis);
    return _extends({}, theme.typography.body2, {
      color: theme.vars ? theme.vars.palette.SnackbarContent.color : theme.palette.getContrastText(backgroundColor),
      backgroundColor: theme.vars ? theme.vars.palette.SnackbarContent.bg : backgroundColor,
      display: "flex",
      alignItems: "center",
      flexWrap: "wrap",
      padding: "6px 16px",
      borderRadius: (theme.vars || theme).shape.borderRadius,
      flexGrow: 1,
      [theme.breakpoints.up("sm")]: {
        flexGrow: "initial",
        minWidth: 288
      }
    });
  });
  var SnackbarContentMessage = styled_default("div", {
    name: "MuiSnackbarContent",
    slot: "Message",
    overridesResolver: (props, styles7) => styles7.message
  })({
    padding: "8px 0"
  });
  var SnackbarContentAction = styled_default("div", {
    name: "MuiSnackbarContent",
    slot: "Action",
    overridesResolver: (props, styles7) => styles7.action
  })({
    display: "flex",
    alignItems: "center",
    marginLeft: "auto",
    paddingLeft: 16,
    marginRight: -8
  });
  var SnackbarContent = /* @__PURE__ */ React215.forwardRef(function SnackbarContent2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiSnackbarContent"
    });
    const {
      action,
      className,
      message,
      role = "alert"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded134);
    const ownerState = props;
    const classes = useUtilityClasses106(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime202.jsxs)(SnackbarContentRoot, _extends({
      role,
      square: true,
      elevation: 6,
      className: clsx_default(classes.root, className),
      ownerState,
      ref
    }, other, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime201.jsx)(SnackbarContentMessage, {
        className: classes.message,
        ownerState,
        children: message
      }), action ? /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(SnackbarContentAction, {
        className: classes.action,
        ownerState,
        children: action
      }) : null]
    }));
  });
  true ? SnackbarContent.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The action to display. It renders after the message, at the end of the snackbar.
     */
    action: import_prop_types138.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types138.default.object,
    /**
     * @ignore
     */
    className: import_prop_types138.default.string,
    /**
     * The message to display.
     */
    message: import_prop_types138.default.node,
    /**
     * The ARIA role attribute of the element.
     * @default 'alert'
     */
    role: import_prop_types138.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types138.default.oneOfType([import_prop_types138.default.arrayOf(import_prop_types138.default.oneOfType([import_prop_types138.default.func, import_prop_types138.default.object, import_prop_types138.default.bool])), import_prop_types138.default.func, import_prop_types138.default.object])
  } : void 0;
  var SnackbarContent_default = SnackbarContent;

  // node_modules/@mui/material/Snackbar/snackbarClasses.js
  var import_utils237 = __toESM(require_utils());
  var import_generateUtilityClass109 = __toESM(require_generateUtilityClass3());
  function getSnackbarUtilityClass2(slot) {
    return (0, import_generateUtilityClass109.default)("MuiSnackbar", slot);
  }
  var snackbarClasses2 = (0, import_utils237.unstable_generateUtilityClasses)("MuiSnackbar", ["root", "anchorOriginTopCenter", "anchorOriginBottomCenter", "anchorOriginTopRight", "anchorOriginBottomRight", "anchorOriginTopLeft", "anchorOriginBottomLeft"]);
  var snackbarClasses_default = snackbarClasses2;

  // node_modules/@mui/material/Snackbar/Snackbar.js
  var import_jsx_runtime203 = __toESM(require_jsx_runtime());
  var _excluded135 = ["onEnter", "onExited"];
  var _excluded219 = ["action", "anchorOrigin", "autoHideDuration", "children", "className", "ClickAwayListenerProps", "ContentProps", "disableWindowBlurListener", "message", "onBlur", "onClose", "onFocus", "onMouseEnter", "onMouseLeave", "open", "resumeHideDuration", "TransitionComponent", "transitionDuration", "TransitionProps"];
  var useUtilityClasses107 = (ownerState) => {
    const {
      classes,
      anchorOrigin
    } = ownerState;
    const slots = {
      root: ["root", `anchorOrigin${capitalize_default(anchorOrigin.vertical)}${capitalize_default(anchorOrigin.horizontal)}`]
    };
    return (0, base_exports.unstable_composeClasses)(slots, getSnackbarUtilityClass2, classes);
  };
  var SnackbarRoot = styled_default("div", {
    name: "MuiSnackbar",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, styles7[`anchorOrigin${capitalize_default(ownerState.anchorOrigin.vertical)}${capitalize_default(ownerState.anchorOrigin.horizontal)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    const center = {
      left: "50%",
      right: "auto",
      transform: "translateX(-50%)"
    };
    return _extends({
      zIndex: (theme.vars || theme).zIndex.snackbar,
      position: "fixed",
      display: "flex",
      left: 8,
      right: 8,
      justifyContent: "center",
      alignItems: "center"
    }, ownerState.anchorOrigin.vertical === "top" ? {
      top: 8
    } : {
      bottom: 8
    }, ownerState.anchorOrigin.horizontal === "left" && {
      justifyContent: "flex-start"
    }, ownerState.anchorOrigin.horizontal === "right" && {
      justifyContent: "flex-end"
    }, {
      [theme.breakpoints.up("sm")]: _extends({}, ownerState.anchorOrigin.vertical === "top" ? {
        top: 24
      } : {
        bottom: 24
      }, ownerState.anchorOrigin.horizontal === "center" && center, ownerState.anchorOrigin.horizontal === "left" && {
        left: 24,
        right: "auto"
      }, ownerState.anchorOrigin.horizontal === "right" && {
        right: 24,
        left: "auto"
      })
    });
  });
  var Snackbar3 = /* @__PURE__ */ React216.forwardRef(function Snackbar4(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiSnackbar"
    });
    const theme = useTheme4();
    const defaultTransitionDuration = {
      enter: theme.transitions.duration.enteringScreen,
      exit: theme.transitions.duration.leavingScreen
    };
    const {
      action,
      anchorOrigin: {
        vertical,
        horizontal
      } = {
        vertical: "bottom",
        horizontal: "left"
      },
      autoHideDuration = null,
      children,
      className,
      ClickAwayListenerProps,
      ContentProps,
      disableWindowBlurListener = false,
      message,
      open,
      TransitionComponent = Grow_default,
      transitionDuration = defaultTransitionDuration,
      TransitionProps: {
        onEnter,
        onExited
      } = {}
    } = props, TransitionProps = _objectWithoutPropertiesLoose(props.TransitionProps, _excluded135), other = _objectWithoutPropertiesLoose(props, _excluded219);
    const ownerState = _extends({}, props, {
      anchorOrigin: {
        vertical,
        horizontal
      },
      autoHideDuration,
      disableWindowBlurListener,
      TransitionComponent,
      transitionDuration
    });
    const classes = useUtilityClasses107(ownerState);
    const {
      getRootProps,
      onClickAway
    } = useSnackbar(_extends({}, ownerState));
    const [exited, setExited] = React216.useState(true);
    const rootProps = useSlotProps({
      elementType: SnackbarRoot,
      getSlotProps: getRootProps,
      externalForwardedProps: other,
      ownerState,
      additionalProps: {
        ref
      },
      className: [classes.root, className]
    });
    const handleExited = (node2) => {
      setExited(true);
      if (onExited) {
        onExited(node2);
      }
    };
    const handleEnter = (node2, isAppearing) => {
      setExited(false);
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    };
    if (!open && exited) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime203.jsx)(ClickAwayListener, _extends({
      onClickAway
    }, ClickAwayListenerProps, {
      children: /* @__PURE__ */ (0, import_jsx_runtime203.jsx)(SnackbarRoot, _extends({}, rootProps, {
        children: /* @__PURE__ */ (0, import_jsx_runtime203.jsx)(TransitionComponent, _extends({
          appear: true,
          in: open,
          timeout: transitionDuration,
          direction: vertical === "top" ? "down" : "up",
          onEnter: handleEnter,
          onExited: handleExited
        }, TransitionProps, {
          children: children || /* @__PURE__ */ (0, import_jsx_runtime203.jsx)(SnackbarContent_default, _extends({
            message,
            action
          }, ContentProps))
        }))
      }))
    }));
  });
  true ? Snackbar3.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The action to display. It renders after the message, at the end of the snackbar.
     */
    action: import_prop_types139.default.node,
    /**
     * The anchor of the `Snackbar`.
     * On smaller screens, the component grows to occupy all the available width,
     * the horizontal alignment is ignored.
     * @default { vertical: 'bottom', horizontal: 'left' }
     */
    anchorOrigin: import_prop_types139.default.shape({
      horizontal: import_prop_types139.default.oneOf(["center", "left", "right"]).isRequired,
      vertical: import_prop_types139.default.oneOf(["bottom", "top"]).isRequired
    }),
    /**
     * The number of milliseconds to wait before automatically calling the
     * `onClose` function. `onClose` should then set the state of the `open`
     * prop to hide the Snackbar. This behavior is disabled by default with
     * the `null` value.
     * @default null
     */
    autoHideDuration: import_prop_types139.default.number,
    /**
     * Replace the `SnackbarContent` component.
     */
    children: import_prop_types139.default.element,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types139.default.object,
    /**
     * @ignore
     */
    className: import_prop_types139.default.string,
    /**
     * Props applied to the `ClickAwayListener` element.
     */
    ClickAwayListenerProps: import_prop_types139.default.object,
    /**
     * Props applied to the [`SnackbarContent`](/material-ui/api/snackbar-content/) element.
     */
    ContentProps: import_prop_types139.default.object,
    /**
     * If `true`, the `autoHideDuration` timer will expire even if the window is not focused.
     * @default false
     */
    disableWindowBlurListener: import_prop_types139.default.bool,
    /**
     * When displaying multiple consecutive snackbars using a single parent-rendered
     * `<Snackbar/>`, add the `key` prop to ensure independent treatment of each message.
     * For instance, use `<Snackbar key={message} />`. Otherwise, messages might update
     * in place, and features like `autoHideDuration` could be affected.
     */
    key: () => null,
    /**
     * The message to display.
     */
    message: import_prop_types139.default.node,
    /**
     * @ignore
     */
    onBlur: import_prop_types139.default.func,
    /**
     * Callback fired when the component requests to be closed.
     * Typically `onClose` is used to set state in the parent component,
     * which is used to control the `Snackbar` `open` prop.
     * The `reason` parameter can optionally be used to control the response to `onClose`,
     * for example ignoring `clickaway`.
     *
     * @param {React.SyntheticEvent<any> | Event} event The event source of the callback.
     * @param {string} reason Can be: `"timeout"` (`autoHideDuration` expired), `"clickaway"`, or `"escapeKeyDown"`.
     */
    onClose: import_prop_types139.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types139.default.func,
    /**
     * @ignore
     */
    onMouseEnter: import_prop_types139.default.func,
    /**
     * @ignore
     */
    onMouseLeave: import_prop_types139.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types139.default.bool,
    /**
     * The number of milliseconds to wait before dismissing after user interaction.
     * If `autoHideDuration` prop isn't specified, it does nothing.
     * If `autoHideDuration` prop is specified but `resumeHideDuration` isn't,
     * we default to `autoHideDuration / 2` ms.
     */
    resumeHideDuration: import_prop_types139.default.number,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types139.default.oneOfType([import_prop_types139.default.arrayOf(import_prop_types139.default.oneOfType([import_prop_types139.default.func, import_prop_types139.default.object, import_prop_types139.default.bool])), import_prop_types139.default.func, import_prop_types139.default.object]),
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Grow
     */
    TransitionComponent: import_prop_types139.default.elementType,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: theme.transitions.duration.enteringScreen,
     *   exit: theme.transitions.duration.leavingScreen,
     * }
     */
    transitionDuration: import_prop_types139.default.oneOfType([import_prop_types139.default.number, import_prop_types139.default.shape({
      appear: import_prop_types139.default.number,
      enter: import_prop_types139.default.number,
      exit: import_prop_types139.default.number
    })]),
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
     * @default {}
     */
    TransitionProps: import_prop_types139.default.object
  } : void 0;
  var Snackbar_default = Snackbar3;

  // node_modules/@mui/material/SpeedDial/SpeedDial.js
  init_extends();
  var React218 = __toESM(require_react());
  var import_react_is9 = __toESM(require_react_is3());
  var import_prop_types141 = __toESM(require_prop_types());
  var import_composeClasses100 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/Zoom/Zoom.js
  init_extends();
  var React217 = __toESM(require_react());
  var import_prop_types140 = __toESM(require_prop_types());
  var import_utils238 = __toESM(require_utils());
  var import_jsx_runtime204 = __toESM(require_jsx_runtime());
  var _excluded136 = ["addEndListener", "appear", "children", "easing", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"];
  var styles5 = {
    entering: {
      transform: "none"
    },
    entered: {
      transform: "none"
    }
  };
  var Zoom = /* @__PURE__ */ React217.forwardRef(function Zoom2(props, ref) {
    const theme = useTheme4();
    const defaultTimeout = {
      enter: theme.transitions.duration.enteringScreen,
      exit: theme.transitions.duration.leavingScreen
    };
    const {
      addEndListener,
      appear = true,
      children,
      easing: easing2,
      in: inProp,
      onEnter,
      onEntered,
      onEntering,
      onExit,
      onExited,
      onExiting,
      style,
      timeout: timeout2 = defaultTimeout,
      // eslint-disable-next-line react/prop-types
      TransitionComponent = Transition_default
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded136);
    const nodeRef = React217.useRef(null);
    const handleRef = useForkRef_default(nodeRef, children.ref, ref);
    const normalizedTransitionCallback = (callback) => (maybeIsAppearing) => {
      if (callback) {
        const node2 = nodeRef.current;
        if (maybeIsAppearing === void 0) {
          callback(node2);
        } else {
          callback(node2, maybeIsAppearing);
        }
      }
    };
    const handleEntering = normalizedTransitionCallback(onEntering);
    const handleEnter = normalizedTransitionCallback((node2, isAppearing) => {
      reflow(node2);
      const transitionProps = getTransitionProps({
        style,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "enter"
      });
      node2.style.webkitTransition = theme.transitions.create("transform", transitionProps);
      node2.style.transition = theme.transitions.create("transform", transitionProps);
      if (onEnter) {
        onEnter(node2, isAppearing);
      }
    });
    const handleEntered = normalizedTransitionCallback(onEntered);
    const handleExiting = normalizedTransitionCallback(onExiting);
    const handleExit = normalizedTransitionCallback((node2) => {
      const transitionProps = getTransitionProps({
        style,
        timeout: timeout2,
        easing: easing2
      }, {
        mode: "exit"
      });
      node2.style.webkitTransition = theme.transitions.create("transform", transitionProps);
      node2.style.transition = theme.transitions.create("transform", transitionProps);
      if (onExit) {
        onExit(node2);
      }
    });
    const handleExited = normalizedTransitionCallback(onExited);
    const handleAddEndListener = (next2) => {
      if (addEndListener) {
        addEndListener(nodeRef.current, next2);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime204.jsx)(TransitionComponent, _extends({
      appear,
      in: inProp,
      nodeRef,
      onEnter: handleEnter,
      onEntered: handleEntered,
      onEntering: handleEntering,
      onExit: handleExit,
      onExited: handleExited,
      onExiting: handleExiting,
      addEndListener: handleAddEndListener,
      timeout: timeout2
    }, other, {
      children: (state, childProps) => {
        return /* @__PURE__ */ React217.cloneElement(children, _extends({
          style: _extends({
            transform: "scale(0)",
            visibility: state === "exited" && !inProp ? "hidden" : void 0
          }, styles5[state], style, children.props.style),
          ref: handleRef
        }, childProps));
      }
    }));
  });
  true ? Zoom.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Add a custom transition end trigger. Called with the transitioning DOM
     * node and a done callback. Allows for more fine grained transition end
     * logic. Note: Timeouts are still used as a fallback if provided.
     */
    addEndListener: import_prop_types140.default.func,
    /**
     * Perform the enter transition when it first mounts if `in` is also `true`.
     * Set this to `false` to disable this behavior.
     * @default true
     */
    appear: import_prop_types140.default.bool,
    /**
     * A single child content element.
     */
    children: import_utils238.elementAcceptingRef.isRequired,
    /**
     * The transition timing function.
     * You may specify a single easing or a object containing enter and exit values.
     */
    easing: import_prop_types140.default.oneOfType([import_prop_types140.default.shape({
      enter: import_prop_types140.default.string,
      exit: import_prop_types140.default.string
    }), import_prop_types140.default.string]),
    /**
     * If `true`, the component will transition in.
     */
    in: import_prop_types140.default.bool,
    /**
     * @ignore
     */
    onEnter: import_prop_types140.default.func,
    /**
     * @ignore
     */
    onEntered: import_prop_types140.default.func,
    /**
     * @ignore
     */
    onEntering: import_prop_types140.default.func,
    /**
     * @ignore
     */
    onExit: import_prop_types140.default.func,
    /**
     * @ignore
     */
    onExited: import_prop_types140.default.func,
    /**
     * @ignore
     */
    onExiting: import_prop_types140.default.func,
    /**
     * @ignore
     */
    style: import_prop_types140.default.object,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: theme.transitions.duration.enteringScreen,
     *   exit: theme.transitions.duration.leavingScreen,
     * }
     */
    timeout: import_prop_types140.default.oneOfType([import_prop_types140.default.number, import_prop_types140.default.shape({
      appear: import_prop_types140.default.number,
      enter: import_prop_types140.default.number,
      exit: import_prop_types140.default.number
    })])
  } : void 0;
  var Zoom_default = Zoom;

  // node_modules/@mui/material/SpeedDial/speedDialClasses.js
  var import_utils240 = __toESM(require_utils());
  var import_generateUtilityClass110 = __toESM(require_generateUtilityClass3());
  function getSpeedDialUtilityClass(slot) {
    return (0, import_generateUtilityClass110.default)("MuiSpeedDial", slot);
  }
  var speedDialClasses = (0, import_utils240.unstable_generateUtilityClasses)("MuiSpeedDial", ["root", "fab", "directionUp", "directionDown", "directionLeft", "directionRight", "actions", "actionsClosed"]);
  var speedDialClasses_default = speedDialClasses;

  // node_modules/@mui/material/SpeedDial/SpeedDial.js
  var import_jsx_runtime205 = __toESM(require_jsx_runtime());
  var import_jsx_runtime206 = __toESM(require_jsx_runtime());
  var _excluded137 = ["ref"];
  var _excluded220 = ["ariaLabel", "FabProps", "children", "className", "direction", "hidden", "icon", "onBlur", "onClose", "onFocus", "onKeyDown", "onMouseEnter", "onMouseLeave", "onOpen", "open", "openIcon", "TransitionComponent", "transitionDuration", "TransitionProps"];
  var _excluded311 = ["ref"];
  var useUtilityClasses108 = (ownerState) => {
    const {
      classes,
      open,
      direction
    } = ownerState;
    const slots = {
      root: ["root", `direction${capitalize_default(direction)}`],
      fab: ["fab"],
      actions: ["actions", !open && "actionsClosed"]
    };
    return (0, import_composeClasses100.unstable_composeClasses)(slots, getSpeedDialUtilityClass, classes);
  };
  function getOrientation(direction) {
    if (direction === "up" || direction === "down") {
      return "vertical";
    }
    if (direction === "right" || direction === "left") {
      return "horizontal";
    }
    return void 0;
  }
  function clamp5(value, min3, max3) {
    if (value < min3) {
      return min3;
    }
    if (value > max3) {
      return max3;
    }
    return value;
  }
  var dialRadius = 32;
  var spacingActions = 16;
  var SpeedDialRoot = styled_default("div", {
    name: "MuiSpeedDial",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, styles7[`direction${capitalize_default(ownerState.direction)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    zIndex: (theme.vars || theme).zIndex.speedDial,
    display: "flex",
    alignItems: "center",
    pointerEvents: "none"
  }, ownerState.direction === "up" && {
    flexDirection: "column-reverse",
    [`& .${speedDialClasses_default.actions}`]: {
      flexDirection: "column-reverse",
      marginBottom: -dialRadius,
      paddingBottom: spacingActions + dialRadius
    }
  }, ownerState.direction === "down" && {
    flexDirection: "column",
    [`& .${speedDialClasses_default.actions}`]: {
      flexDirection: "column",
      marginTop: -dialRadius,
      paddingTop: spacingActions + dialRadius
    }
  }, ownerState.direction === "left" && {
    flexDirection: "row-reverse",
    [`& .${speedDialClasses_default.actions}`]: {
      flexDirection: "row-reverse",
      marginRight: -dialRadius,
      paddingRight: spacingActions + dialRadius
    }
  }, ownerState.direction === "right" && {
    flexDirection: "row",
    [`& .${speedDialClasses_default.actions}`]: {
      flexDirection: "row",
      marginLeft: -dialRadius,
      paddingLeft: spacingActions + dialRadius
    }
  }));
  var SpeedDialFab = styled_default(Fab_default, {
    name: "MuiSpeedDial",
    slot: "Fab",
    overridesResolver: (props, styles7) => styles7.fab
  })(() => ({
    pointerEvents: "auto"
  }));
  var SpeedDialActions = styled_default("div", {
    name: "MuiSpeedDial",
    slot: "Actions",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.actions, !ownerState.open && styles7.actionsClosed];
    }
  })(({
    ownerState
  }) => _extends({
    display: "flex",
    pointerEvents: "auto"
  }, !ownerState.open && {
    transition: "top 0s linear 0.2s",
    pointerEvents: "none"
  }));
  var SpeedDial = /* @__PURE__ */ React218.forwardRef(function SpeedDial2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiSpeedDial"
    });
    const theme = useTheme4();
    const defaultTransitionDuration = {
      enter: theme.transitions.duration.enteringScreen,
      exit: theme.transitions.duration.leavingScreen
    };
    const {
      ariaLabel,
      FabProps: {
        ref: origDialButtonRef
      } = {},
      children: childrenProp,
      className,
      direction = "up",
      hidden = false,
      icon,
      onBlur,
      onClose,
      onFocus,
      onKeyDown,
      onMouseEnter,
      onMouseLeave,
      onOpen,
      open: openProp,
      TransitionComponent = Zoom_default,
      transitionDuration = defaultTransitionDuration,
      TransitionProps
    } = props, FabProps = _objectWithoutPropertiesLoose(props.FabProps, _excluded137), other = _objectWithoutPropertiesLoose(props, _excluded220);
    const [open, setOpenState] = useControlled_default({
      controlled: openProp,
      default: false,
      name: "SpeedDial",
      state: "open"
    });
    const ownerState = _extends({}, props, {
      open,
      direction
    });
    const classes = useUtilityClasses108(ownerState);
    const eventTimer = React218.useRef();
    React218.useEffect(() => {
      return () => {
        clearTimeout(eventTimer.current);
      };
    }, []);
    const focusedAction = React218.useRef(0);
    const nextItemArrowKey = React218.useRef();
    const actions = React218.useRef([]);
    actions.current = [actions.current[0]];
    const handleOwnFabRef = React218.useCallback((fabFef) => {
      actions.current[0] = fabFef;
    }, []);
    const handleFabRef = useForkRef_default(origDialButtonRef, handleOwnFabRef);
    const createHandleSpeedDialActionButtonRef = (dialActionIndex, origButtonRef) => {
      return (buttonRef) => {
        actions.current[dialActionIndex + 1] = buttonRef;
        if (origButtonRef) {
          origButtonRef(buttonRef);
        }
      };
    };
    const handleKeyDown2 = (event) => {
      if (onKeyDown) {
        onKeyDown(event);
      }
      const key = event.key.replace("Arrow", "").toLowerCase();
      const {
        current: nextItemArrowKeyCurrent = key
      } = nextItemArrowKey;
      if (event.key === "Escape") {
        setOpenState(false);
        actions.current[0].focus();
        if (onClose) {
          onClose(event, "escapeKeyDown");
        }
        return;
      }
      if (getOrientation(key) === getOrientation(nextItemArrowKeyCurrent) && getOrientation(key) !== void 0) {
        event.preventDefault();
        const actionStep = key === nextItemArrowKeyCurrent ? 1 : -1;
        const nextAction = clamp5(focusedAction.current + actionStep, 0, actions.current.length - 1);
        actions.current[nextAction].focus();
        focusedAction.current = nextAction;
        nextItemArrowKey.current = nextItemArrowKeyCurrent;
      }
    };
    React218.useEffect(() => {
      if (!open) {
        focusedAction.current = 0;
        nextItemArrowKey.current = void 0;
      }
    }, [open]);
    const handleClose = (event) => {
      if (event.type === "mouseleave" && onMouseLeave) {
        onMouseLeave(event);
      }
      if (event.type === "blur" && onBlur) {
        onBlur(event);
      }
      clearTimeout(eventTimer.current);
      if (event.type === "blur") {
        eventTimer.current = setTimeout(() => {
          setOpenState(false);
          if (onClose) {
            onClose(event, "blur");
          }
        });
      } else {
        setOpenState(false);
        if (onClose) {
          onClose(event, "mouseLeave");
        }
      }
    };
    const handleClick = (event) => {
      if (FabProps.onClick) {
        FabProps.onClick(event);
      }
      clearTimeout(eventTimer.current);
      if (open) {
        setOpenState(false);
        if (onClose) {
          onClose(event, "toggle");
        }
      } else {
        setOpenState(true);
        if (onOpen) {
          onOpen(event, "toggle");
        }
      }
    };
    const handleOpen = (event) => {
      if (event.type === "mouseenter" && onMouseEnter) {
        onMouseEnter(event);
      }
      if (event.type === "focus" && onFocus) {
        onFocus(event);
      }
      clearTimeout(eventTimer.current);
      if (!open) {
        eventTimer.current = setTimeout(() => {
          setOpenState(true);
          if (onOpen) {
            const eventMap = {
              focus: "focus",
              mouseenter: "mouseEnter"
            };
            onOpen(event, eventMap[event.type]);
          }
        });
      }
    };
    const id = ariaLabel.replace(/^[^a-z]+|[^\w:.-]+/gi, "");
    const allItems = React218.Children.toArray(childrenProp).filter((child) => {
      if (true) {
        if ((0, import_react_is9.isFragment)(child)) {
          console.error(["MUI: The SpeedDial component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      return /* @__PURE__ */ React218.isValidElement(child);
    });
    const children = allItems.map((child, index3) => {
      const _child$props = child.props, {
        FabProps: {
          ref: origButtonRef
        } = {},
        tooltipPlacement: tooltipPlacementProp
      } = _child$props, ChildFabProps = _objectWithoutPropertiesLoose(_child$props.FabProps, _excluded311);
      const tooltipPlacement = tooltipPlacementProp || (getOrientation(direction) === "vertical" ? "left" : "top");
      return /* @__PURE__ */ React218.cloneElement(child, {
        FabProps: _extends({}, ChildFabProps, {
          ref: createHandleSpeedDialActionButtonRef(index3, origButtonRef)
        }),
        delay: 30 * (open ? index3 : allItems.length - index3),
        open,
        tooltipPlacement,
        id: `${id}-action-${index3}`
      });
    });
    return /* @__PURE__ */ (0, import_jsx_runtime206.jsxs)(SpeedDialRoot, _extends({
      className: clsx_default(classes.root, className),
      ref,
      role: "presentation",
      onKeyDown: handleKeyDown2,
      onBlur: handleClose,
      onFocus: handleOpen,
      onMouseEnter: handleOpen,
      onMouseLeave: handleClose,
      ownerState
    }, other, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime205.jsx)(TransitionComponent, _extends({
        in: !hidden,
        timeout: transitionDuration,
        unmountOnExit: true
      }, TransitionProps, {
        children: /* @__PURE__ */ (0, import_jsx_runtime205.jsx)(SpeedDialFab, _extends({
          color: "primary",
          "aria-label": ariaLabel,
          "aria-haspopup": "true",
          "aria-expanded": open,
          "aria-controls": `${id}-actions`
        }, FabProps, {
          onClick: handleClick,
          className: clsx_default(classes.fab, FabProps.className),
          ref: handleFabRef,
          ownerState,
          children: /* @__PURE__ */ React218.isValidElement(icon) && isMuiElement_default(icon, ["SpeedDialIcon"]) ? /* @__PURE__ */ React218.cloneElement(icon, {
            open
          }) : icon
        }))
      })), /* @__PURE__ */ (0, import_jsx_runtime205.jsx)(SpeedDialActions, {
        id: `${id}-actions`,
        role: "menu",
        "aria-orientation": getOrientation(direction),
        className: clsx_default(classes.actions, !open && classes.actionsClosed),
        ownerState,
        children
      })]
    }));
  });
  true ? SpeedDial.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The aria-label of the button element.
     * Also used to provide the `id` for the `SpeedDial` element and its children.
     */
    ariaLabel: import_prop_types141.default.string.isRequired,
    /**
     * SpeedDialActions to display when the SpeedDial is `open`.
     */
    children: import_prop_types141.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types141.default.object,
    /**
     * @ignore
     */
    className: import_prop_types141.default.string,
    /**
     * The direction the actions open relative to the floating action button.
     * @default 'up'
     */
    direction: import_prop_types141.default.oneOf(["down", "left", "right", "up"]),
    /**
     * Props applied to the [`Fab`](/material-ui/api/fab/) element.
     * @default {}
     */
    FabProps: import_prop_types141.default.object,
    /**
     * If `true`, the SpeedDial is hidden.
     * @default false
     */
    hidden: import_prop_types141.default.bool,
    /**
     * The icon to display in the SpeedDial Fab. The `SpeedDialIcon` component
     * provides a default Icon with animation.
     */
    icon: import_prop_types141.default.node,
    /**
     * @ignore
     */
    onBlur: import_prop_types141.default.func,
    /**
     * Callback fired when the component requests to be closed.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"toggle"`, `"blur"`, `"mouseLeave"`, `"escapeKeyDown"`.
     */
    onClose: import_prop_types141.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types141.default.func,
    /**
     * @ignore
     */
    onKeyDown: import_prop_types141.default.func,
    /**
     * @ignore
     */
    onMouseEnter: import_prop_types141.default.func,
    /**
     * @ignore
     */
    onMouseLeave: import_prop_types141.default.func,
    /**
     * Callback fired when the component requests to be open.
     *
     * @param {object} event The event source of the callback.
     * @param {string} reason Can be: `"toggle"`, `"focus"`, `"mouseEnter"`.
     */
    onOpen: import_prop_types141.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types141.default.bool,
    /**
     * The icon to display in the SpeedDial Fab when the SpeedDial is open.
     */
    openIcon: import_prop_types141.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types141.default.oneOfType([import_prop_types141.default.arrayOf(import_prop_types141.default.oneOfType([import_prop_types141.default.func, import_prop_types141.default.object, import_prop_types141.default.bool])), import_prop_types141.default.func, import_prop_types141.default.object]),
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Zoom
     */
    TransitionComponent: import_prop_types141.default.elementType,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: theme.transitions.duration.enteringScreen,
     *   exit: theme.transitions.duration.leavingScreen,
     * }
     */
    transitionDuration: import_prop_types141.default.oneOfType([import_prop_types141.default.number, import_prop_types141.default.shape({
      appear: import_prop_types141.default.number,
      enter: import_prop_types141.default.number,
      exit: import_prop_types141.default.number
    })]),
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
     */
    TransitionProps: import_prop_types141.default.object
  } : void 0;
  var SpeedDial_default = SpeedDial;

  // node_modules/@mui/material/SpeedDialAction/SpeedDialAction.js
  init_extends();
  var React220 = __toESM(require_react());
  var import_prop_types143 = __toESM(require_prop_types());
  var import_composeClasses101 = __toESM(require_composeClasses3());
  var import_system44 = __toESM(require_system());

  // node_modules/@mui/material/Tooltip/Tooltip.js
  init_extends();
  var React219 = __toESM(require_react());
  var import_prop_types142 = __toESM(require_prop_types());
  var import_utils242 = __toESM(require_utils());
  var import_system43 = __toESM(require_system());

  // node_modules/@mui/material/Tooltip/tooltipClasses.js
  var import_utils241 = __toESM(require_utils());
  var import_generateUtilityClass111 = __toESM(require_generateUtilityClass3());
  function getTooltipUtilityClass(slot) {
    return (0, import_generateUtilityClass111.default)("MuiTooltip", slot);
  }
  var tooltipClasses = (0, import_utils241.unstable_generateUtilityClasses)("MuiTooltip", ["popper", "popperInteractive", "popperArrow", "popperClose", "tooltip", "tooltipArrow", "touch", "tooltipPlacementLeft", "tooltipPlacementRight", "tooltipPlacementTop", "tooltipPlacementBottom", "arrow"]);
  var tooltipClasses_default = tooltipClasses;

  // node_modules/@mui/material/Tooltip/Tooltip.js
  var import_jsx_runtime207 = __toESM(require_jsx_runtime());
  var import_jsx_runtime208 = __toESM(require_jsx_runtime());
  var _excluded138 = ["arrow", "children", "classes", "components", "componentsProps", "describeChild", "disableFocusListener", "disableHoverListener", "disableInteractive", "disableTouchListener", "enterDelay", "enterNextDelay", "enterTouchDelay", "followCursor", "id", "leaveDelay", "leaveTouchDelay", "onClose", "onOpen", "open", "placement", "PopperComponent", "PopperProps", "slotProps", "slots", "title", "TransitionComponent", "TransitionProps"];
  function round4(value) {
    return Math.round(value * 1e5) / 1e5;
  }
  var useUtilityClasses109 = (ownerState) => {
    const {
      classes,
      disableInteractive,
      arrow: arrow3,
      touch,
      placement
    } = ownerState;
    const slots = {
      popper: ["popper", !disableInteractive && "popperInteractive", arrow3 && "popperArrow"],
      tooltip: ["tooltip", arrow3 && "tooltipArrow", touch && "touch", `tooltipPlacement${capitalize_default(placement.split("-")[0])}`],
      arrow: ["arrow"]
    };
    return (0, base_exports.unstable_composeClasses)(slots, getTooltipUtilityClass, classes);
  };
  var TooltipPopper = styled_default(Popper_default, {
    name: "MuiTooltip",
    slot: "Popper",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.popper, !ownerState.disableInteractive && styles7.popperInteractive, ownerState.arrow && styles7.popperArrow, !ownerState.open && styles7.popperClose];
    }
  })(({
    theme,
    ownerState,
    open
  }) => _extends({
    zIndex: (theme.vars || theme).zIndex.tooltip,
    pointerEvents: "none"
  }, !ownerState.disableInteractive && {
    pointerEvents: "auto"
  }, !open && {
    pointerEvents: "none"
  }, ownerState.arrow && {
    [`&[data-popper-placement*="bottom"] .${tooltipClasses_default.arrow}`]: {
      top: 0,
      marginTop: "-0.71em",
      "&::before": {
        transformOrigin: "0 100%"
      }
    },
    [`&[data-popper-placement*="top"] .${tooltipClasses_default.arrow}`]: {
      bottom: 0,
      marginBottom: "-0.71em",
      "&::before": {
        transformOrigin: "100% 0"
      }
    },
    [`&[data-popper-placement*="right"] .${tooltipClasses_default.arrow}`]: _extends({}, !ownerState.isRtl ? {
      left: 0,
      marginLeft: "-0.71em"
    } : {
      right: 0,
      marginRight: "-0.71em"
    }, {
      height: "1em",
      width: "0.71em",
      "&::before": {
        transformOrigin: "100% 100%"
      }
    }),
    [`&[data-popper-placement*="left"] .${tooltipClasses_default.arrow}`]: _extends({}, !ownerState.isRtl ? {
      right: 0,
      marginRight: "-0.71em"
    } : {
      left: 0,
      marginLeft: "-0.71em"
    }, {
      height: "1em",
      width: "0.71em",
      "&::before": {
        transformOrigin: "0 0"
      }
    })
  }));
  var TooltipTooltip = styled_default("div", {
    name: "MuiTooltip",
    slot: "Tooltip",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.tooltip, ownerState.touch && styles7.touch, ownerState.arrow && styles7.tooltipArrow, styles7[`tooltipPlacement${capitalize_default(ownerState.placement.split("-")[0])}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    backgroundColor: theme.vars ? theme.vars.palette.Tooltip.bg : (0, import_system43.alpha)(theme.palette.grey[700], 0.92),
    borderRadius: (theme.vars || theme).shape.borderRadius,
    color: (theme.vars || theme).palette.common.white,
    fontFamily: theme.typography.fontFamily,
    padding: "4px 8px",
    fontSize: theme.typography.pxToRem(11),
    maxWidth: 300,
    margin: 2,
    wordWrap: "break-word",
    fontWeight: theme.typography.fontWeightMedium
  }, ownerState.arrow && {
    position: "relative",
    margin: 0
  }, ownerState.touch && {
    padding: "8px 16px",
    fontSize: theme.typography.pxToRem(14),
    lineHeight: `${round4(16 / 14)}em`,
    fontWeight: theme.typography.fontWeightRegular
  }, {
    [`.${tooltipClasses_default.popper}[data-popper-placement*="left"] &`]: _extends({
      transformOrigin: "right center"
    }, !ownerState.isRtl ? _extends({
      marginRight: "14px"
    }, ownerState.touch && {
      marginRight: "24px"
    }) : _extends({
      marginLeft: "14px"
    }, ownerState.touch && {
      marginLeft: "24px"
    })),
    [`.${tooltipClasses_default.popper}[data-popper-placement*="right"] &`]: _extends({
      transformOrigin: "left center"
    }, !ownerState.isRtl ? _extends({
      marginLeft: "14px"
    }, ownerState.touch && {
      marginLeft: "24px"
    }) : _extends({
      marginRight: "14px"
    }, ownerState.touch && {
      marginRight: "24px"
    })),
    [`.${tooltipClasses_default.popper}[data-popper-placement*="top"] &`]: _extends({
      transformOrigin: "center bottom",
      marginBottom: "14px"
    }, ownerState.touch && {
      marginBottom: "24px"
    }),
    [`.${tooltipClasses_default.popper}[data-popper-placement*="bottom"] &`]: _extends({
      transformOrigin: "center top",
      marginTop: "14px"
    }, ownerState.touch && {
      marginTop: "24px"
    })
  }));
  var TooltipArrow = styled_default("span", {
    name: "MuiTooltip",
    slot: "Arrow",
    overridesResolver: (props, styles7) => styles7.arrow
  })(({
    theme
  }) => ({
    overflow: "hidden",
    position: "absolute",
    width: "1em",
    height: "0.71em",
    boxSizing: "border-box",
    color: theme.vars ? theme.vars.palette.Tooltip.bg : (0, import_system43.alpha)(theme.palette.grey[700], 0.9),
    "&::before": {
      content: '""',
      margin: "auto",
      display: "block",
      width: "100%",
      height: "100%",
      backgroundColor: "currentColor",
      transform: "rotate(45deg)"
    }
  }));
  var hystersisOpen = false;
  var hystersisTimer = null;
  var cursorPosition = {
    x: 0,
    y: 0
  };
  function composeEventHandler(handler, eventHandler) {
    return (event) => {
      if (eventHandler) {
        eventHandler(event);
      }
      handler(event);
    };
  }
  var Tooltip = /* @__PURE__ */ React219.forwardRef(function Tooltip2(inProps, ref) {
    var _ref, _slots$popper, _ref2, _ref3, _slots$transition, _ref4, _slots$tooltip, _ref5, _slots$arrow, _slotProps$popper, _ref6, _slotProps$popper2, _slotProps$transition, _slotProps$tooltip, _ref7, _slotProps$tooltip2, _slotProps$arrow, _ref8, _slotProps$arrow2;
    const props = useThemeProps({
      props: inProps,
      name: "MuiTooltip"
    });
    const {
      arrow: arrow3 = false,
      children: childrenProp,
      components = {},
      componentsProps = {},
      describeChild = false,
      disableFocusListener = false,
      disableHoverListener = false,
      disableInteractive: disableInteractiveProp = false,
      disableTouchListener = false,
      enterDelay = 100,
      enterNextDelay = 0,
      enterTouchDelay = 700,
      followCursor = false,
      id: idProp,
      leaveDelay = 0,
      leaveTouchDelay = 1500,
      onClose,
      onOpen,
      open: openProp,
      placement = "bottom",
      PopperComponent: PopperComponentProp,
      PopperProps = {},
      slotProps = {},
      slots = {},
      title,
      TransitionComponent: TransitionComponentProp = Grow_default,
      TransitionProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded138);
    const children = /* @__PURE__ */ React219.isValidElement(childrenProp) ? childrenProp : /* @__PURE__ */ (0, import_jsx_runtime207.jsx)("span", {
      children: childrenProp
    });
    const theme = useTheme4();
    const isRtl = theme.direction === "rtl";
    const [childNode, setChildNode] = React219.useState();
    const [arrowRef, setArrowRef] = React219.useState(null);
    const ignoreNonTouchEvents = React219.useRef(false);
    const disableInteractive = disableInteractiveProp || followCursor;
    const closeTimer = React219.useRef();
    const enterTimer = React219.useRef();
    const leaveTimer = React219.useRef();
    const touchTimer = React219.useRef();
    const [openState, setOpenState] = useControlled_default({
      controlled: openProp,
      default: false,
      name: "Tooltip",
      state: "open"
    });
    let open = openState;
    if (true) {
      const {
        current: isControlled
      } = React219.useRef(openProp !== void 0);
      React219.useEffect(() => {
        if (childNode && childNode.disabled && !isControlled && title !== "" && childNode.tagName.toLowerCase() === "button") {
          console.error(["MUI: You are providing a disabled `button` child to the Tooltip component.", "A disabled element does not fire events.", "Tooltip needs to listen to the child element's events to display the title.", "", "Add a simple wrapper element, such as a `span`."].join("\n"));
        }
      }, [title, childNode, isControlled]);
    }
    const id = useId_default(idProp);
    const prevUserSelect = React219.useRef();
    const stopTouchInteraction = React219.useCallback(() => {
      if (prevUserSelect.current !== void 0) {
        document.body.style.WebkitUserSelect = prevUserSelect.current;
        prevUserSelect.current = void 0;
      }
      clearTimeout(touchTimer.current);
    }, []);
    React219.useEffect(() => {
      return () => {
        clearTimeout(closeTimer.current);
        clearTimeout(enterTimer.current);
        clearTimeout(leaveTimer.current);
        stopTouchInteraction();
      };
    }, [stopTouchInteraction]);
    const handleOpen = (event) => {
      clearTimeout(hystersisTimer);
      hystersisOpen = true;
      setOpenState(true);
      if (onOpen && !open) {
        onOpen(event);
      }
    };
    const handleClose = useEventCallback_default(
      /**
       * @param {React.SyntheticEvent | Event} event
       */
      (event) => {
        clearTimeout(hystersisTimer);
        hystersisTimer = setTimeout(() => {
          hystersisOpen = false;
        }, 800 + leaveDelay);
        setOpenState(false);
        if (onClose && open) {
          onClose(event);
        }
        clearTimeout(closeTimer.current);
        closeTimer.current = setTimeout(() => {
          ignoreNonTouchEvents.current = false;
        }, theme.transitions.duration.shortest);
      }
    );
    const handleEnter = (event) => {
      if (ignoreNonTouchEvents.current && event.type !== "touchstart") {
        return;
      }
      if (childNode) {
        childNode.removeAttribute("title");
      }
      clearTimeout(enterTimer.current);
      clearTimeout(leaveTimer.current);
      if (enterDelay || hystersisOpen && enterNextDelay) {
        enterTimer.current = setTimeout(() => {
          handleOpen(event);
        }, hystersisOpen ? enterNextDelay : enterDelay);
      } else {
        handleOpen(event);
      }
    };
    const handleLeave = (event) => {
      clearTimeout(enterTimer.current);
      clearTimeout(leaveTimer.current);
      leaveTimer.current = setTimeout(() => {
        handleClose(event);
      }, leaveDelay);
    };
    const {
      isFocusVisibleRef,
      onBlur: handleBlurVisible,
      onFocus: handleFocusVisible,
      ref: focusVisibleRef
    } = useIsFocusVisible_default();
    const [, setChildIsFocusVisible] = React219.useState(false);
    const handleBlur2 = (event) => {
      handleBlurVisible(event);
      if (isFocusVisibleRef.current === false) {
        setChildIsFocusVisible(false);
        handleLeave(event);
      }
    };
    const handleFocus = (event) => {
      if (!childNode) {
        setChildNode(event.currentTarget);
      }
      handleFocusVisible(event);
      if (isFocusVisibleRef.current === true) {
        setChildIsFocusVisible(true);
        handleEnter(event);
      }
    };
    const detectTouchStart = (event) => {
      ignoreNonTouchEvents.current = true;
      const childrenProps2 = children.props;
      if (childrenProps2.onTouchStart) {
        childrenProps2.onTouchStart(event);
      }
    };
    const handleMouseOver = handleEnter;
    const handleMouseLeave = handleLeave;
    const handleTouchStart = (event) => {
      detectTouchStart(event);
      clearTimeout(leaveTimer.current);
      clearTimeout(closeTimer.current);
      stopTouchInteraction();
      prevUserSelect.current = document.body.style.WebkitUserSelect;
      document.body.style.WebkitUserSelect = "none";
      touchTimer.current = setTimeout(() => {
        document.body.style.WebkitUserSelect = prevUserSelect.current;
        handleEnter(event);
      }, enterTouchDelay);
    };
    const handleTouchEnd = (event) => {
      if (children.props.onTouchEnd) {
        children.props.onTouchEnd(event);
      }
      stopTouchInteraction();
      clearTimeout(leaveTimer.current);
      leaveTimer.current = setTimeout(() => {
        handleClose(event);
      }, leaveTouchDelay);
    };
    React219.useEffect(() => {
      if (!open) {
        return void 0;
      }
      function handleKeyDown2(nativeEvent) {
        if (nativeEvent.key === "Escape" || nativeEvent.key === "Esc") {
          handleClose(nativeEvent);
        }
      }
      document.addEventListener("keydown", handleKeyDown2);
      return () => {
        document.removeEventListener("keydown", handleKeyDown2);
      };
    }, [handleClose, open]);
    const handleRef = useForkRef_default(children.ref, focusVisibleRef, setChildNode, ref);
    if (!title && title !== 0) {
      open = false;
    }
    const popperRef = React219.useRef();
    const handleMouseMove = (event) => {
      const childrenProps2 = children.props;
      if (childrenProps2.onMouseMove) {
        childrenProps2.onMouseMove(event);
      }
      cursorPosition = {
        x: event.clientX,
        y: event.clientY
      };
      if (popperRef.current) {
        popperRef.current.update();
      }
    };
    const nameOrDescProps = {};
    const titleIsString = typeof title === "string";
    if (describeChild) {
      nameOrDescProps.title = !open && titleIsString && !disableHoverListener ? title : null;
      nameOrDescProps["aria-describedby"] = open ? id : null;
    } else {
      nameOrDescProps["aria-label"] = titleIsString ? title : null;
      nameOrDescProps["aria-labelledby"] = open && !titleIsString ? id : null;
    }
    const childrenProps = _extends({}, nameOrDescProps, other, children.props, {
      className: clsx_default(other.className, children.props.className),
      onTouchStart: detectTouchStart,
      ref: handleRef
    }, followCursor ? {
      onMouseMove: handleMouseMove
    } : {});
    if (true) {
      childrenProps["data-mui-internal-clone-element"] = true;
      React219.useEffect(() => {
        if (childNode && !childNode.getAttribute("data-mui-internal-clone-element")) {
          console.error(["MUI: The `children` component of the Tooltip is not forwarding its props correctly.", "Please make sure that props are spread on the same element that the ref is applied to."].join("\n"));
        }
      }, [childNode]);
    }
    const interactiveWrapperListeners = {};
    if (!disableTouchListener) {
      childrenProps.onTouchStart = handleTouchStart;
      childrenProps.onTouchEnd = handleTouchEnd;
    }
    if (!disableHoverListener) {
      childrenProps.onMouseOver = composeEventHandler(handleMouseOver, childrenProps.onMouseOver);
      childrenProps.onMouseLeave = composeEventHandler(handleMouseLeave, childrenProps.onMouseLeave);
      if (!disableInteractive) {
        interactiveWrapperListeners.onMouseOver = handleMouseOver;
        interactiveWrapperListeners.onMouseLeave = handleMouseLeave;
      }
    }
    if (!disableFocusListener) {
      childrenProps.onFocus = composeEventHandler(handleFocus, childrenProps.onFocus);
      childrenProps.onBlur = composeEventHandler(handleBlur2, childrenProps.onBlur);
      if (!disableInteractive) {
        interactiveWrapperListeners.onFocus = handleFocus;
        interactiveWrapperListeners.onBlur = handleBlur2;
      }
    }
    if (true) {
      if (children.props.title) {
        console.error(["MUI: You have provided a `title` prop to the child of <Tooltip />.", `Remove this title prop \`${children.props.title}\` or the Tooltip component.`].join("\n"));
      }
    }
    const popperOptions = React219.useMemo(() => {
      var _PopperProps$popperOp;
      let tooltipModifiers = [{
        name: "arrow",
        enabled: Boolean(arrowRef),
        options: {
          element: arrowRef,
          padding: 4
        }
      }];
      if ((_PopperProps$popperOp = PopperProps.popperOptions) != null && _PopperProps$popperOp.modifiers) {
        tooltipModifiers = tooltipModifiers.concat(PopperProps.popperOptions.modifiers);
      }
      return _extends({}, PopperProps.popperOptions, {
        modifiers: tooltipModifiers
      });
    }, [arrowRef, PopperProps]);
    const ownerState = _extends({}, props, {
      isRtl,
      arrow: arrow3,
      disableInteractive,
      placement,
      PopperComponentProp,
      touch: ignoreNonTouchEvents.current
    });
    const classes = useUtilityClasses109(ownerState);
    const PopperComponent = (_ref = (_slots$popper = slots.popper) != null ? _slots$popper : components.Popper) != null ? _ref : TooltipPopper;
    const TransitionComponent = (_ref2 = (_ref3 = (_slots$transition = slots.transition) != null ? _slots$transition : components.Transition) != null ? _ref3 : TransitionComponentProp) != null ? _ref2 : Grow_default;
    const TooltipComponent = (_ref4 = (_slots$tooltip = slots.tooltip) != null ? _slots$tooltip : components.Tooltip) != null ? _ref4 : TooltipTooltip;
    const ArrowComponent = (_ref5 = (_slots$arrow = slots.arrow) != null ? _slots$arrow : components.Arrow) != null ? _ref5 : TooltipArrow;
    const popperProps = appendOwnerState(PopperComponent, _extends({}, PopperProps, (_slotProps$popper = slotProps.popper) != null ? _slotProps$popper : componentsProps.popper, {
      className: clsx_default(classes.popper, PopperProps == null ? void 0 : PopperProps.className, (_ref6 = (_slotProps$popper2 = slotProps.popper) != null ? _slotProps$popper2 : componentsProps.popper) == null ? void 0 : _ref6.className)
    }), ownerState);
    const transitionProps = appendOwnerState(TransitionComponent, _extends({}, TransitionProps, (_slotProps$transition = slotProps.transition) != null ? _slotProps$transition : componentsProps.transition), ownerState);
    const tooltipProps = appendOwnerState(TooltipComponent, _extends({}, (_slotProps$tooltip = slotProps.tooltip) != null ? _slotProps$tooltip : componentsProps.tooltip, {
      className: clsx_default(classes.tooltip, (_ref7 = (_slotProps$tooltip2 = slotProps.tooltip) != null ? _slotProps$tooltip2 : componentsProps.tooltip) == null ? void 0 : _ref7.className)
    }), ownerState);
    const tooltipArrowProps = appendOwnerState(ArrowComponent, _extends({}, (_slotProps$arrow = slotProps.arrow) != null ? _slotProps$arrow : componentsProps.arrow, {
      className: clsx_default(classes.arrow, (_ref8 = (_slotProps$arrow2 = slotProps.arrow) != null ? _slotProps$arrow2 : componentsProps.arrow) == null ? void 0 : _ref8.className)
    }), ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime208.jsxs)(React219.Fragment, {
      children: [/* @__PURE__ */ React219.cloneElement(children, childrenProps), /* @__PURE__ */ (0, import_jsx_runtime207.jsx)(PopperComponent, _extends({
        as: PopperComponentProp != null ? PopperComponentProp : Popper_default,
        placement,
        anchorEl: followCursor ? {
          getBoundingClientRect: () => ({
            top: cursorPosition.y,
            left: cursorPosition.x,
            right: cursorPosition.x,
            bottom: cursorPosition.y,
            width: 0,
            height: 0
          })
        } : childNode,
        popperRef,
        open: childNode ? open : false,
        id,
        transition: true
      }, interactiveWrapperListeners, popperProps, {
        popperOptions,
        children: ({
          TransitionProps: TransitionPropsInner
        }) => /* @__PURE__ */ (0, import_jsx_runtime207.jsx)(TransitionComponent, _extends({
          timeout: theme.transitions.duration.shorter
        }, TransitionPropsInner, transitionProps, {
          children: /* @__PURE__ */ (0, import_jsx_runtime208.jsxs)(TooltipComponent, _extends({}, tooltipProps, {
            children: [title, arrow3 ? /* @__PURE__ */ (0, import_jsx_runtime207.jsx)(ArrowComponent, _extends({}, tooltipArrowProps, {
              ref: setArrowRef
            })) : null]
          }))
        }))
      }))]
    });
  });
  true ? Tooltip.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * If `true`, adds an arrow to the tooltip.
     * @default false
     */
    arrow: import_prop_types142.default.bool,
    /**
     * Tooltip reference element.
     */
    children: import_utils242.elementAcceptingRef.isRequired,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types142.default.object,
    /**
     * @ignore
     */
    className: import_prop_types142.default.string,
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `slots` prop.
     * It's recommended to use the `slots` prop instead.
     *
     * @default {}
     */
    components: import_prop_types142.default.shape({
      Arrow: import_prop_types142.default.elementType,
      Popper: import_prop_types142.default.elementType,
      Tooltip: import_prop_types142.default.elementType,
      Transition: import_prop_types142.default.elementType
    }),
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `slotProps` prop.
     * It's recommended to use the `slotProps` prop instead, as `componentsProps` will be deprecated in the future.
     *
     * @default {}
     */
    componentsProps: import_prop_types142.default.shape({
      arrow: import_prop_types142.default.object,
      popper: import_prop_types142.default.object,
      tooltip: import_prop_types142.default.object,
      transition: import_prop_types142.default.object
    }),
    /**
     * Set to `true` if the `title` acts as an accessible description.
     * By default the `title` acts as an accessible label for the child.
     * @default false
     */
    describeChild: import_prop_types142.default.bool,
    /**
     * Do not respond to focus-visible events.
     * @default false
     */
    disableFocusListener: import_prop_types142.default.bool,
    /**
     * Do not respond to hover events.
     * @default false
     */
    disableHoverListener: import_prop_types142.default.bool,
    /**
     * Makes a tooltip not interactive, i.e. it will close when the user
     * hovers over the tooltip before the `leaveDelay` is expired.
     * @default false
     */
    disableInteractive: import_prop_types142.default.bool,
    /**
     * Do not respond to long press touch events.
     * @default false
     */
    disableTouchListener: import_prop_types142.default.bool,
    /**
     * The number of milliseconds to wait before showing the tooltip.
     * This prop won't impact the enter touch delay (`enterTouchDelay`).
     * @default 100
     */
    enterDelay: import_prop_types142.default.number,
    /**
     * The number of milliseconds to wait before showing the tooltip when one was already recently opened.
     * @default 0
     */
    enterNextDelay: import_prop_types142.default.number,
    /**
     * The number of milliseconds a user must touch the element before showing the tooltip.
     * @default 700
     */
    enterTouchDelay: import_prop_types142.default.number,
    /**
     * If `true`, the tooltip follow the cursor over the wrapped element.
     * @default false
     */
    followCursor: import_prop_types142.default.bool,
    /**
     * This prop is used to help implement the accessibility logic.
     * If you don't provide this prop. It falls back to a randomly generated id.
     */
    id: import_prop_types142.default.string,
    /**
     * The number of milliseconds to wait before hiding the tooltip.
     * This prop won't impact the leave touch delay (`leaveTouchDelay`).
     * @default 0
     */
    leaveDelay: import_prop_types142.default.number,
    /**
     * The number of milliseconds after the user stops touching an element before hiding the tooltip.
     * @default 1500
     */
    leaveTouchDelay: import_prop_types142.default.number,
    /**
     * Callback fired when the component requests to be closed.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     */
    onClose: import_prop_types142.default.func,
    /**
     * Callback fired when the component requests to be open.
     *
     * @param {React.SyntheticEvent} event The event source of the callback.
     */
    onOpen: import_prop_types142.default.func,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types142.default.bool,
    /**
     * Tooltip placement.
     * @default 'bottom'
     */
    placement: import_prop_types142.default.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    /**
     * The component used for the popper.
     * @default Popper
     */
    PopperComponent: import_prop_types142.default.elementType,
    /**
     * Props applied to the [`Popper`](/material-ui/api/popper/) element.
     * @default {}
     */
    PopperProps: import_prop_types142.default.object,
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     *
     * This prop is an alias for the `componentsProps` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slotProps: import_prop_types142.default.shape({
      arrow: import_prop_types142.default.object,
      popper: import_prop_types142.default.object,
      tooltip: import_prop_types142.default.object,
      transition: import_prop_types142.default.object
    }),
    /**
     * The components used for each slot inside.
     *
     * This prop is an alias for the `components` prop, which will be deprecated in the future.
     *
     * @default {}
     */
    slots: import_prop_types142.default.shape({
      arrow: import_prop_types142.default.elementType,
      popper: import_prop_types142.default.elementType,
      tooltip: import_prop_types142.default.elementType,
      transition: import_prop_types142.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types142.default.oneOfType([import_prop_types142.default.arrayOf(import_prop_types142.default.oneOfType([import_prop_types142.default.func, import_prop_types142.default.object, import_prop_types142.default.bool])), import_prop_types142.default.func, import_prop_types142.default.object]),
    /**
     * Tooltip title. Zero-length titles string, undefined, null and false are never displayed.
     */
    title: import_prop_types142.default.node,
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Grow
     */
    TransitionComponent: import_prop_types142.default.elementType,
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
     */
    TransitionProps: import_prop_types142.default.object
  } : void 0;
  var Tooltip_default = Tooltip;

  // node_modules/@mui/material/SpeedDialAction/speedDialActionClasses.js
  var import_utils243 = __toESM(require_utils());
  var import_generateUtilityClass112 = __toESM(require_generateUtilityClass3());
  function getSpeedDialActionUtilityClass(slot) {
    return (0, import_generateUtilityClass112.default)("MuiSpeedDialAction", slot);
  }
  var speedDialActionClasses = (0, import_utils243.unstable_generateUtilityClasses)("MuiSpeedDialAction", ["fab", "fabClosed", "staticTooltip", "staticTooltipClosed", "staticTooltipLabel", "tooltipPlacementLeft", "tooltipPlacementRight"]);
  var speedDialActionClasses_default = speedDialActionClasses;

  // node_modules/@mui/material/SpeedDialAction/SpeedDialAction.js
  var import_jsx_runtime209 = __toESM(require_jsx_runtime());
  var import_jsx_runtime210 = __toESM(require_jsx_runtime());
  var _excluded139 = ["className", "delay", "FabProps", "icon", "id", "open", "TooltipClasses", "tooltipOpen", "tooltipPlacement", "tooltipTitle"];
  var useUtilityClasses110 = (ownerState) => {
    const {
      open,
      tooltipPlacement,
      classes
    } = ownerState;
    const slots = {
      fab: ["fab", !open && "fabClosed"],
      staticTooltip: ["staticTooltip", `tooltipPlacement${capitalize_default(tooltipPlacement)}`, !open && "staticTooltipClosed"],
      staticTooltipLabel: ["staticTooltipLabel"]
    };
    return (0, import_composeClasses101.unstable_composeClasses)(slots, getSpeedDialActionUtilityClass, classes);
  };
  var SpeedDialActionFab = styled_default(Fab_default, {
    name: "MuiSpeedDialAction",
    slot: "Fab",
    skipVariantsResolver: false,
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.fab, !ownerState.open && styles7.fabClosed];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    margin: 8,
    color: (theme.vars || theme).palette.text.secondary,
    backgroundColor: (theme.vars || theme).palette.background.paper,
    "&:hover": {
      backgroundColor: theme.vars ? theme.vars.palette.SpeedDialAction.fabHoverBg : (0, import_system44.emphasize)(theme.palette.background.paper, 0.15)
    },
    transition: `${theme.transitions.create("transform", {
      duration: theme.transitions.duration.shorter
    })}, opacity 0.8s`,
    opacity: 1
  }, !ownerState.open && {
    opacity: 0,
    transform: "scale(0)"
  }));
  var SpeedDialActionStaticTooltip = styled_default("span", {
    name: "MuiSpeedDialAction",
    slot: "StaticTooltip",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.staticTooltip, !ownerState.open && styles7.staticTooltipClosed, styles7[`tooltipPlacement${capitalize_default(ownerState.tooltipPlacement)}`]];
    }
  })(({
    theme,
    ownerState
  }) => ({
    position: "relative",
    display: "flex",
    alignItems: "center",
    [`& .${speedDialActionClasses_default.staticTooltipLabel}`]: _extends({
      transition: theme.transitions.create(["transform", "opacity"], {
        duration: theme.transitions.duration.shorter
      }),
      opacity: 1
    }, !ownerState.open && {
      opacity: 0,
      transform: "scale(0.5)"
    }, ownerState.tooltipPlacement === "left" && {
      transformOrigin: "100% 50%",
      right: "100%",
      marginRight: 8
    }, ownerState.tooltipPlacement === "right" && {
      transformOrigin: "0% 50%",
      left: "100%",
      marginLeft: 8
    })
  }));
  var SpeedDialActionStaticTooltipLabel = styled_default("span", {
    name: "MuiSpeedDialAction",
    slot: "StaticTooltipLabel",
    overridesResolver: (props, styles7) => styles7.staticTooltipLabel
  })(({
    theme
  }) => _extends({
    position: "absolute"
  }, theme.typography.body1, {
    backgroundColor: (theme.vars || theme).palette.background.paper,
    borderRadius: (theme.vars || theme).shape.borderRadius,
    boxShadow: (theme.vars || theme).shadows[1],
    color: (theme.vars || theme).palette.text.secondary,
    padding: "4px 16px",
    wordBreak: "keep-all"
  }));
  var SpeedDialAction = /* @__PURE__ */ React220.forwardRef(function SpeedDialAction2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiSpeedDialAction"
    });
    const {
      className,
      delay = 0,
      FabProps = {},
      icon,
      id,
      open,
      TooltipClasses,
      tooltipOpen: tooltipOpenProp = false,
      tooltipPlacement = "left",
      tooltipTitle
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded139);
    const ownerState = _extends({}, props, {
      tooltipPlacement
    });
    const classes = useUtilityClasses110(ownerState);
    const [tooltipOpen, setTooltipOpen] = React220.useState(tooltipOpenProp);
    const handleTooltipClose = () => {
      setTooltipOpen(false);
    };
    const handleTooltipOpen = () => {
      setTooltipOpen(true);
    };
    const transitionStyle = {
      transitionDelay: `${delay}ms`
    };
    const fab = /* @__PURE__ */ (0, import_jsx_runtime209.jsx)(SpeedDialActionFab, _extends({
      size: "small",
      className: clsx_default(classes.fab, className),
      tabIndex: -1,
      role: "menuitem",
      ownerState
    }, FabProps, {
      style: _extends({}, transitionStyle, FabProps.style),
      children: icon
    }));
    if (tooltipOpenProp) {
      return /* @__PURE__ */ (0, import_jsx_runtime210.jsxs)(SpeedDialActionStaticTooltip, _extends({
        id,
        ref,
        className: classes.staticTooltip,
        ownerState
      }, other, {
        children: [/* @__PURE__ */ (0, import_jsx_runtime209.jsx)(SpeedDialActionStaticTooltipLabel, {
          style: transitionStyle,
          id: `${id}-label`,
          className: classes.staticTooltipLabel,
          ownerState,
          children: tooltipTitle
        }), /* @__PURE__ */ React220.cloneElement(fab, {
          "aria-labelledby": `${id}-label`
        })]
      }));
    }
    if (!open && tooltipOpen) {
      setTooltipOpen(false);
    }
    return /* @__PURE__ */ (0, import_jsx_runtime209.jsx)(Tooltip_default, _extends({
      id,
      ref,
      title: tooltipTitle,
      placement: tooltipPlacement,
      onClose: handleTooltipClose,
      onOpen: handleTooltipOpen,
      open: open && tooltipOpen,
      classes: TooltipClasses
    }, other, {
      children: fab
    }));
  });
  true ? SpeedDialAction.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types143.default.object,
    /**
     * @ignore
     */
    className: import_prop_types143.default.string,
    /**
     * Adds a transition delay, to allow a series of SpeedDialActions to be animated.
     * @default 0
     */
    delay: import_prop_types143.default.number,
    /**
     * Props applied to the [`Fab`](/material-ui/api/fab/) component.
     * @default {}
     */
    FabProps: import_prop_types143.default.object,
    /**
     * The icon to display in the SpeedDial Fab.
     */
    icon: import_prop_types143.default.node,
    /**
     * This prop is used to help implement the accessibility logic.
     * If you don't provide this prop. It falls back to a randomly generated id.
     */
    id: import_prop_types143.default.string,
    /**
     * If `true`, the component is shown.
     */
    open: import_prop_types143.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types143.default.oneOfType([import_prop_types143.default.arrayOf(import_prop_types143.default.oneOfType([import_prop_types143.default.func, import_prop_types143.default.object, import_prop_types143.default.bool])), import_prop_types143.default.func, import_prop_types143.default.object]),
    /**
     * `classes` prop applied to the [`Tooltip`](/material-ui/api/tooltip/) element.
     */
    TooltipClasses: import_prop_types143.default.object,
    /**
     * Make the tooltip always visible when the SpeedDial is open.
     * @default false
     */
    tooltipOpen: import_prop_types143.default.bool,
    /**
     * Placement of the tooltip.
     * @default 'left'
     */
    tooltipPlacement: import_prop_types143.default.oneOf(["bottom-end", "bottom-start", "bottom", "left-end", "left-start", "left", "right-end", "right-start", "right", "top-end", "top-start", "top"]),
    /**
     * Label to display in the tooltip.
     */
    tooltipTitle: import_prop_types143.default.node
  } : void 0;
  var SpeedDialAction_default = SpeedDialAction;

  // node_modules/@mui/material/SpeedDialIcon/SpeedDialIcon.js
  init_extends();
  var React222 = __toESM(require_react());
  var import_prop_types144 = __toESM(require_prop_types());
  var import_composeClasses102 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/internal/svg-icons/Add.js
  var React221 = __toESM(require_react());
  var import_utils244 = __toESM(require_utils2());
  var import_jsx_runtime211 = __toESM(require_jsx_runtime());
  var Add_default = (0, import_utils244.createSvgIcon)(/* @__PURE__ */ (0, import_jsx_runtime211.jsx)("path", {
    d: "M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
  }), "Add");

  // node_modules/@mui/material/SpeedDialIcon/speedDialIconClasses.js
  var import_utils245 = __toESM(require_utils());
  var import_generateUtilityClass113 = __toESM(require_generateUtilityClass3());
  function getSpeedDialIconUtilityClass(slot) {
    return (0, import_generateUtilityClass113.default)("MuiSpeedDialIcon", slot);
  }
  var speedDialIconClasses = (0, import_utils245.unstable_generateUtilityClasses)("MuiSpeedDialIcon", ["root", "icon", "iconOpen", "iconWithOpenIconOpen", "openIcon", "openIconOpen"]);
  var speedDialIconClasses_default = speedDialIconClasses;

  // node_modules/@mui/material/SpeedDialIcon/SpeedDialIcon.js
  var import_jsx_runtime212 = __toESM(require_jsx_runtime());
  var import_jsx_runtime213 = __toESM(require_jsx_runtime());
  var _excluded140 = ["className", "icon", "open", "openIcon"];
  var useUtilityClasses111 = (ownerState) => {
    const {
      classes,
      open,
      openIcon
    } = ownerState;
    const slots = {
      root: ["root"],
      icon: ["icon", open && "iconOpen", openIcon && open && "iconWithOpenIconOpen"],
      openIcon: ["openIcon", open && "openIconOpen"]
    };
    return (0, import_composeClasses102.unstable_composeClasses)(slots, getSpeedDialIconUtilityClass, classes);
  };
  var SpeedDialIconRoot = styled_default("span", {
    name: "MuiSpeedDialIcon",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${speedDialIconClasses_default.icon}`]: styles7.icon
      }, {
        [`& .${speedDialIconClasses_default.icon}`]: ownerState.open && styles7.iconOpen
      }, {
        [`& .${speedDialIconClasses_default.icon}`]: ownerState.open && ownerState.openIcon && styles7.iconWithOpenIconOpen
      }, {
        [`& .${speedDialIconClasses_default.openIcon}`]: styles7.openIcon
      }, {
        [`& .${speedDialIconClasses_default.openIcon}`]: ownerState.open && styles7.openIconOpen
      }, styles7.root];
    }
  })(({
    theme,
    ownerState
  }) => ({
    height: 24,
    [`& .${speedDialIconClasses_default.icon}`]: _extends({
      transition: theme.transitions.create(["transform", "opacity"], {
        duration: theme.transitions.duration.short
      })
    }, ownerState.open && _extends({
      transform: "rotate(45deg)"
    }, ownerState.openIcon && {
      opacity: 0
    })),
    [`& .${speedDialIconClasses_default.openIcon}`]: _extends({
      position: "absolute",
      transition: theme.transitions.create(["transform", "opacity"], {
        duration: theme.transitions.duration.short
      }),
      opacity: 0,
      transform: "rotate(-45deg)"
    }, ownerState.open && {
      transform: "rotate(0deg)",
      opacity: 1
    })
  }));
  var SpeedDialIcon = /* @__PURE__ */ React222.forwardRef(function SpeedDialIcon2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiSpeedDialIcon"
    });
    const {
      className,
      icon: iconProp,
      openIcon: openIconProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded140);
    const ownerState = props;
    const classes = useUtilityClasses111(ownerState);
    function formatIcon(icon, newClassName) {
      if (/* @__PURE__ */ React222.isValidElement(icon)) {
        return /* @__PURE__ */ React222.cloneElement(icon, {
          className: newClassName
        });
      }
      return icon;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime213.jsxs)(SpeedDialIconRoot, _extends({
      className: clsx_default(classes.root, className),
      ref,
      ownerState
    }, other, {
      children: [openIconProp ? formatIcon(openIconProp, classes.openIcon) : null, iconProp ? formatIcon(iconProp, classes.icon) : /* @__PURE__ */ (0, import_jsx_runtime212.jsx)(Add_default, {
        className: classes.icon
      })]
    }));
  });
  true ? SpeedDialIcon.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types144.default.object,
    /**
     * @ignore
     */
    className: import_prop_types144.default.string,
    /**
     * The icon to display.
     */
    icon: import_prop_types144.default.node,
    /**
     * @ignore
     * If `true`, the component is shown.
     */
    open: import_prop_types144.default.bool,
    /**
     * The icon to display in the SpeedDial Floating Action Button when the SpeedDial is open.
     */
    openIcon: import_prop_types144.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types144.default.oneOfType([import_prop_types144.default.arrayOf(import_prop_types144.default.oneOfType([import_prop_types144.default.func, import_prop_types144.default.object, import_prop_types144.default.bool])), import_prop_types144.default.func, import_prop_types144.default.object])
  } : void 0;
  SpeedDialIcon.muiName = "SpeedDialIcon";
  var SpeedDialIcon_default = SpeedDialIcon;

  // node_modules/@mui/material/Step/Step.js
  init_extends();
  var React225 = __toESM(require_react());
  var import_prop_types145 = __toESM(require_prop_types());
  var import_utils247 = __toESM(require_utils());
  var import_composeClasses103 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/Stepper/StepperContext.js
  var React223 = __toESM(require_react());
  var StepperContext = /* @__PURE__ */ React223.createContext({});
  if (true) {
    StepperContext.displayName = "StepperContext";
  }
  function useStepperContext() {
    return React223.useContext(StepperContext);
  }
  var StepperContext_default = StepperContext;

  // node_modules/@mui/material/Step/StepContext.js
  var React224 = __toESM(require_react());
  var StepContext = /* @__PURE__ */ React224.createContext({});
  if (true) {
    StepContext.displayName = "StepContext";
  }
  function useStepContext() {
    return React224.useContext(StepContext);
  }
  var StepContext_default = StepContext;

  // node_modules/@mui/material/Step/stepClasses.js
  var import_utils246 = __toESM(require_utils());
  var import_generateUtilityClass114 = __toESM(require_generateUtilityClass3());
  function getStepUtilityClass(slot) {
    return (0, import_generateUtilityClass114.default)("MuiStep", slot);
  }
  var stepClasses = (0, import_utils246.unstable_generateUtilityClasses)("MuiStep", ["root", "horizontal", "vertical", "alternativeLabel", "completed"]);
  var stepClasses_default = stepClasses;

  // node_modules/@mui/material/Step/Step.js
  var import_jsx_runtime214 = __toESM(require_jsx_runtime());
  var import_jsx_runtime215 = __toESM(require_jsx_runtime());
  var _excluded141 = ["active", "children", "className", "component", "completed", "disabled", "expanded", "index", "last"];
  var useUtilityClasses112 = (ownerState) => {
    const {
      classes,
      orientation,
      alternativeLabel,
      completed
    } = ownerState;
    const slots = {
      root: ["root", orientation, alternativeLabel && "alternativeLabel", completed && "completed"]
    };
    return (0, import_composeClasses103.unstable_composeClasses)(slots, getStepUtilityClass, classes);
  };
  var StepRoot = styled_default("div", {
    name: "MuiStep",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, styles7[ownerState.orientation], ownerState.alternativeLabel && styles7.alternativeLabel, ownerState.completed && styles7.completed];
    }
  })(({
    ownerState
  }) => _extends({}, ownerState.orientation === "horizontal" && {
    paddingLeft: 8,
    paddingRight: 8
  }, ownerState.alternativeLabel && {
    flex: 1,
    position: "relative"
  }));
  var Step = /* @__PURE__ */ React225.forwardRef(function Step2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiStep"
    });
    const {
      active: activeProp,
      children,
      className,
      component = "div",
      completed: completedProp,
      disabled: disabledProp,
      expanded = false,
      index: index3,
      last
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded141);
    const {
      activeStep,
      connector,
      alternativeLabel,
      orientation,
      nonLinear
    } = React225.useContext(StepperContext_default);
    let [active = false, completed = false, disabled = false] = [activeProp, completedProp, disabledProp];
    if (activeStep === index3) {
      active = activeProp !== void 0 ? activeProp : true;
    } else if (!nonLinear && activeStep > index3) {
      completed = completedProp !== void 0 ? completedProp : true;
    } else if (!nonLinear && activeStep < index3) {
      disabled = disabledProp !== void 0 ? disabledProp : true;
    }
    const contextValue = React225.useMemo(() => ({
      index: index3,
      last,
      expanded,
      icon: index3 + 1,
      active,
      completed,
      disabled
    }), [index3, last, expanded, active, completed, disabled]);
    const ownerState = _extends({}, props, {
      active,
      orientation,
      alternativeLabel,
      completed,
      disabled,
      expanded,
      component
    });
    const classes = useUtilityClasses112(ownerState);
    const newChildren = /* @__PURE__ */ (0, import_jsx_runtime214.jsxs)(StepRoot, _extends({
      as: component,
      className: clsx_default(classes.root, className),
      ref,
      ownerState
    }, other, {
      children: [connector && alternativeLabel && index3 !== 0 ? connector : null, children]
    }));
    return /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(StepContext_default.Provider, {
      value: contextValue,
      children: connector && !alternativeLabel && index3 !== 0 ? /* @__PURE__ */ (0, import_jsx_runtime214.jsxs)(React225.Fragment, {
        children: [connector, newChildren]
      }) : newChildren
    });
  });
  true ? Step.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Sets the step as active. Is passed to child components.
     */
    active: import_prop_types145.default.bool,
    /**
     * Should be `Step` sub-components such as `StepLabel`, `StepContent`.
     */
    children: import_prop_types145.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types145.default.object,
    /**
     * @ignore
     */
    className: import_prop_types145.default.string,
    /**
     * Mark the step as completed. Is passed to child components.
     */
    completed: import_prop_types145.default.bool,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types145.default.elementType,
    /**
     * If `true`, the step is disabled, will also disable the button if
     * `StepButton` is a child of `Step`. Is passed to child components.
     */
    disabled: import_prop_types145.default.bool,
    /**
     * Expand the step.
     * @default false
     */
    expanded: import_prop_types145.default.bool,
    /**
     * The position of the step.
     * The prop defaults to the value inherited from the parent Stepper component.
     */
    index: import_utils247.integerPropType,
    /**
     * If `true`, the Step is displayed as rendered last.
     * The prop defaults to the value inherited from the parent Stepper component.
     */
    last: import_prop_types145.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types145.default.oneOfType([import_prop_types145.default.arrayOf(import_prop_types145.default.oneOfType([import_prop_types145.default.func, import_prop_types145.default.object, import_prop_types145.default.bool])), import_prop_types145.default.func, import_prop_types145.default.object])
  } : void 0;
  var Step_default = Step;

  // node_modules/@mui/material/StepButton/StepButton.js
  init_extends();
  var React230 = __toESM(require_react());
  var import_prop_types148 = __toESM(require_prop_types());
  var import_composeClasses106 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/StepLabel/StepLabel.js
  init_extends();
  var React229 = __toESM(require_react());
  var import_prop_types147 = __toESM(require_prop_types());
  var import_composeClasses105 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/StepIcon/StepIcon.js
  init_extends();
  var React228 = __toESM(require_react());
  var import_prop_types146 = __toESM(require_prop_types());
  var import_composeClasses104 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/internal/svg-icons/CheckCircle.js
  var React226 = __toESM(require_react());
  var import_jsx_runtime216 = __toESM(require_jsx_runtime());
  var CheckCircle_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime216.jsx)("path", {
    d: "M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24zm-2 17l-5-5 1.4-1.4 3.6 3.6 7.6-7.6L19 8l-9 9z"
  }), "CheckCircle");

  // node_modules/@mui/material/internal/svg-icons/Warning.js
  var React227 = __toESM(require_react());
  var import_jsx_runtime217 = __toESM(require_jsx_runtime());
  var Warning_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime217.jsx)("path", {
    d: "M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"
  }), "Warning");

  // node_modules/@mui/material/StepIcon/StepIcon.js
  var import_SvgIcon2 = __toESM(require_SvgIcon2());

  // node_modules/@mui/material/StepIcon/stepIconClasses.js
  var import_utils248 = __toESM(require_utils());
  var import_generateUtilityClass115 = __toESM(require_generateUtilityClass3());
  function getStepIconUtilityClass(slot) {
    return (0, import_generateUtilityClass115.default)("MuiStepIcon", slot);
  }
  var stepIconClasses = (0, import_utils248.unstable_generateUtilityClasses)("MuiStepIcon", ["root", "active", "completed", "error", "text"]);
  var stepIconClasses_default = stepIconClasses;

  // node_modules/@mui/material/StepIcon/StepIcon.js
  var import_jsx_runtime218 = __toESM(require_jsx_runtime());
  var import_jsx_runtime219 = __toESM(require_jsx_runtime());
  var _circle;
  var _excluded142 = ["active", "className", "completed", "error", "icon"];
  var useUtilityClasses113 = (ownerState) => {
    const {
      classes,
      active,
      completed,
      error
    } = ownerState;
    const slots = {
      root: ["root", active && "active", completed && "completed", error && "error"],
      text: ["text"]
    };
    return (0, import_composeClasses104.unstable_composeClasses)(slots, getStepIconUtilityClass, classes);
  };
  var StepIconRoot = styled_default(import_SvgIcon2.default, {
    name: "MuiStepIcon",
    slot: "Root",
    overridesResolver: (props, styles7) => styles7.root
  })(({
    theme
  }) => ({
    display: "block",
    transition: theme.transitions.create("color", {
      duration: theme.transitions.duration.shortest
    }),
    color: (theme.vars || theme).palette.text.disabled,
    [`&.${stepIconClasses_default.completed}`]: {
      color: (theme.vars || theme).palette.primary.main
    },
    [`&.${stepIconClasses_default.active}`]: {
      color: (theme.vars || theme).palette.primary.main
    },
    [`&.${stepIconClasses_default.error}`]: {
      color: (theme.vars || theme).palette.error.main
    }
  }));
  var StepIconText = styled_default("text", {
    name: "MuiStepIcon",
    slot: "Text",
    overridesResolver: (props, styles7) => styles7.text
  })(({
    theme
  }) => ({
    fill: (theme.vars || theme).palette.primary.contrastText,
    fontSize: theme.typography.caption.fontSize,
    fontFamily: theme.typography.fontFamily
  }));
  var StepIcon = /* @__PURE__ */ React228.forwardRef(function StepIcon2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiStepIcon"
    });
    const {
      active = false,
      className: classNameProp,
      completed = false,
      error = false,
      icon
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded142);
    const ownerState = _extends({}, props, {
      active,
      completed,
      error
    });
    const classes = useUtilityClasses113(ownerState);
    if (typeof icon === "number" || typeof icon === "string") {
      const className = clsx_default(classNameProp, classes.root);
      if (error) {
        return /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(StepIconRoot, _extends({
          as: Warning_default,
          className,
          ref,
          ownerState
        }, other));
      }
      if (completed) {
        return /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(StepIconRoot, _extends({
          as: CheckCircle_default,
          className,
          ref,
          ownerState
        }, other));
      }
      return /* @__PURE__ */ (0, import_jsx_runtime219.jsxs)(StepIconRoot, _extends({
        className,
        ref,
        ownerState
      }, other, {
        children: [_circle || (_circle = /* @__PURE__ */ (0, import_jsx_runtime218.jsx)("circle", {
          cx: "12",
          cy: "12",
          r: "12"
        })), /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(StepIconText, {
          className: classes.text,
          x: "12",
          y: "12",
          textAnchor: "middle",
          dominantBaseline: "central",
          ownerState,
          children: icon
        })]
      }));
    }
    return icon;
  });
  true ? StepIcon.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Whether this step is active.
     * @default false
     */
    active: import_prop_types146.default.bool,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types146.default.object,
    /**
     * @ignore
     */
    className: import_prop_types146.default.string,
    /**
     * Mark the step as completed. Is passed to child components.
     * @default false
     */
    completed: import_prop_types146.default.bool,
    /**
     * If `true`, the step is marked as failed.
     * @default false
     */
    error: import_prop_types146.default.bool,
    /**
     * The label displayed in the step icon.
     */
    icon: import_prop_types146.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types146.default.oneOfType([import_prop_types146.default.arrayOf(import_prop_types146.default.oneOfType([import_prop_types146.default.func, import_prop_types146.default.object, import_prop_types146.default.bool])), import_prop_types146.default.func, import_prop_types146.default.object])
  } : void 0;
  var StepIcon_default = StepIcon;

  // node_modules/@mui/material/StepLabel/stepLabelClasses.js
  var import_utils249 = __toESM(require_utils());
  var import_generateUtilityClass116 = __toESM(require_generateUtilityClass3());
  function getStepLabelUtilityClass(slot) {
    return (0, import_generateUtilityClass116.default)("MuiStepLabel", slot);
  }
  var stepLabelClasses = (0, import_utils249.unstable_generateUtilityClasses)("MuiStepLabel", ["root", "horizontal", "vertical", "label", "active", "completed", "error", "disabled", "iconContainer", "alternativeLabel", "labelContainer"]);
  var stepLabelClasses_default = stepLabelClasses;

  // node_modules/@mui/material/StepLabel/StepLabel.js
  var import_jsx_runtime220 = __toESM(require_jsx_runtime());
  var import_jsx_runtime221 = __toESM(require_jsx_runtime());
  var _excluded143 = ["children", "className", "componentsProps", "error", "icon", "optional", "slotProps", "StepIconComponent", "StepIconProps"];
  var useUtilityClasses114 = (ownerState) => {
    const {
      classes,
      orientation,
      active,
      completed,
      error,
      disabled,
      alternativeLabel
    } = ownerState;
    const slots = {
      root: ["root", orientation, error && "error", disabled && "disabled", alternativeLabel && "alternativeLabel"],
      label: ["label", active && "active", completed && "completed", error && "error", disabled && "disabled", alternativeLabel && "alternativeLabel"],
      iconContainer: ["iconContainer", active && "active", completed && "completed", error && "error", disabled && "disabled", alternativeLabel && "alternativeLabel"],
      labelContainer: ["labelContainer", alternativeLabel && "alternativeLabel"]
    };
    return (0, import_composeClasses105.unstable_composeClasses)(slots, getStepLabelUtilityClass, classes);
  };
  var StepLabelRoot = styled_default("span", {
    name: "MuiStepLabel",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, styles7[ownerState.orientation]];
    }
  })(({
    ownerState
  }) => _extends({
    display: "flex",
    alignItems: "center",
    [`&.${stepLabelClasses_default.alternativeLabel}`]: {
      flexDirection: "column"
    },
    [`&.${stepLabelClasses_default.disabled}`]: {
      cursor: "default"
    }
  }, ownerState.orientation === "vertical" && {
    textAlign: "left",
    padding: "8px 0"
  }));
  var StepLabelLabel = styled_default("span", {
    name: "MuiStepLabel",
    slot: "Label",
    overridesResolver: (props, styles7) => styles7.label
  })(({
    theme
  }) => _extends({}, theme.typography.body2, {
    display: "block",
    transition: theme.transitions.create("color", {
      duration: theme.transitions.duration.shortest
    }),
    [`&.${stepLabelClasses_default.active}`]: {
      color: (theme.vars || theme).palette.text.primary,
      fontWeight: 500
    },
    [`&.${stepLabelClasses_default.completed}`]: {
      color: (theme.vars || theme).palette.text.primary,
      fontWeight: 500
    },
    [`&.${stepLabelClasses_default.alternativeLabel}`]: {
      marginTop: 16
    },
    [`&.${stepLabelClasses_default.error}`]: {
      color: (theme.vars || theme).palette.error.main
    }
  }));
  var StepLabelIconContainer = styled_default("span", {
    name: "MuiStepLabel",
    slot: "IconContainer",
    overridesResolver: (props, styles7) => styles7.iconContainer
  })(() => ({
    flexShrink: 0,
    // Fix IE11 issue
    display: "flex",
    paddingRight: 8,
    [`&.${stepLabelClasses_default.alternativeLabel}`]: {
      paddingRight: 0
    }
  }));
  var StepLabelLabelContainer = styled_default("span", {
    name: "MuiStepLabel",
    slot: "LabelContainer",
    overridesResolver: (props, styles7) => styles7.labelContainer
  })(({
    theme
  }) => ({
    width: "100%",
    color: (theme.vars || theme).palette.text.secondary,
    [`&.${stepLabelClasses_default.alternativeLabel}`]: {
      textAlign: "center"
    }
  }));
  var StepLabel = /* @__PURE__ */ React229.forwardRef(function StepLabel2(inProps, ref) {
    var _slotProps$label;
    const props = useThemeProps({
      props: inProps,
      name: "MuiStepLabel"
    });
    const {
      children,
      className,
      componentsProps = {},
      error = false,
      icon: iconProp,
      optional,
      slotProps = {},
      StepIconComponent: StepIconComponentProp,
      StepIconProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded143);
    const {
      alternativeLabel,
      orientation
    } = React229.useContext(StepperContext_default);
    const {
      active,
      disabled,
      completed,
      icon: iconContext
    } = React229.useContext(StepContext_default);
    const icon = iconProp || iconContext;
    let StepIconComponent = StepIconComponentProp;
    if (icon && !StepIconComponent) {
      StepIconComponent = StepIcon_default;
    }
    const ownerState = _extends({}, props, {
      active,
      alternativeLabel,
      completed,
      disabled,
      error,
      orientation
    });
    const classes = useUtilityClasses114(ownerState);
    const labelSlotProps = (_slotProps$label = slotProps.label) != null ? _slotProps$label : componentsProps.label;
    return /* @__PURE__ */ (0, import_jsx_runtime221.jsxs)(StepLabelRoot, _extends({
      className: clsx_default(classes.root, className),
      ref,
      ownerState
    }, other, {
      children: [icon || StepIconComponent ? /* @__PURE__ */ (0, import_jsx_runtime220.jsx)(StepLabelIconContainer, {
        className: classes.iconContainer,
        ownerState,
        children: /* @__PURE__ */ (0, import_jsx_runtime220.jsx)(StepIconComponent, _extends({
          completed,
          active,
          error,
          icon
        }, StepIconProps))
      }) : null, /* @__PURE__ */ (0, import_jsx_runtime221.jsxs)(StepLabelLabelContainer, {
        className: classes.labelContainer,
        ownerState,
        children: [children ? /* @__PURE__ */ (0, import_jsx_runtime220.jsx)(StepLabelLabel, _extends({
          ownerState
        }, labelSlotProps, {
          className: clsx_default(classes.label, labelSlotProps == null ? void 0 : labelSlotProps.className),
          children
        })) : null, optional]
      })]
    }));
  });
  true ? StepLabel.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * In most cases will simply be a string containing a title for the label.
     */
    children: import_prop_types147.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types147.default.object,
    /**
     * @ignore
     */
    className: import_prop_types147.default.string,
    /**
     * The props used for each slot inside.
     * @default {}
     */
    componentsProps: import_prop_types147.default.shape({
      label: import_prop_types147.default.object
    }),
    /**
     * If `true`, the step is marked as failed.
     * @default false
     */
    error: import_prop_types147.default.bool,
    /**
     * Override the default label of the step icon.
     */
    icon: import_prop_types147.default.node,
    /**
     * The optional node to display.
     */
    optional: import_prop_types147.default.node,
    /**
     * The props used for each slot inside.
     * @default {}
     */
    slotProps: import_prop_types147.default.shape({
      label: import_prop_types147.default.object
    }),
    /**
     * The component to render in place of the [`StepIcon`](/material-ui/api/step-icon/).
     */
    StepIconComponent: import_prop_types147.default.elementType,
    /**
     * Props applied to the [`StepIcon`](/material-ui/api/step-icon/) element.
     */
    StepIconProps: import_prop_types147.default.object,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types147.default.oneOfType([import_prop_types147.default.arrayOf(import_prop_types147.default.oneOfType([import_prop_types147.default.func, import_prop_types147.default.object, import_prop_types147.default.bool])), import_prop_types147.default.func, import_prop_types147.default.object])
  } : void 0;
  StepLabel.muiName = "StepLabel";
  var StepLabel_default = StepLabel;

  // node_modules/@mui/material/StepButton/stepButtonClasses.js
  var import_utils250 = __toESM(require_utils());
  var import_generateUtilityClass117 = __toESM(require_generateUtilityClass3());
  function getStepButtonUtilityClass(slot) {
    return (0, import_generateUtilityClass117.default)("MuiStepButton", slot);
  }
  var stepButtonClasses = (0, import_utils250.unstable_generateUtilityClasses)("MuiStepButton", ["root", "horizontal", "vertical", "touchRipple"]);
  var stepButtonClasses_default = stepButtonClasses;

  // node_modules/@mui/material/StepButton/StepButton.js
  var import_jsx_runtime222 = __toESM(require_jsx_runtime());
  var _excluded144 = ["children", "className", "icon", "optional"];
  var useUtilityClasses115 = (ownerState) => {
    const {
      classes,
      orientation
    } = ownerState;
    const slots = {
      root: ["root", orientation],
      touchRipple: ["touchRipple"]
    };
    return (0, import_composeClasses106.unstable_composeClasses)(slots, getStepButtonUtilityClass, classes);
  };
  var StepButtonRoot = styled_default(ButtonBase_default, {
    name: "MuiStepButton",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${stepButtonClasses_default.touchRipple}`]: styles7.touchRipple
      }, styles7.root, styles7[ownerState.orientation]];
    }
  })(({
    ownerState
  }) => _extends({
    width: "100%",
    padding: "24px 16px",
    margin: "-24px -16px",
    boxSizing: "content-box"
  }, ownerState.orientation === "vertical" && {
    justifyContent: "flex-start",
    padding: "8px",
    margin: "-8px"
  }, {
    [`& .${stepButtonClasses_default.touchRipple}`]: {
      color: "rgba(0, 0, 0, 0.3)"
    }
  }));
  var StepButton = /* @__PURE__ */ React230.forwardRef(function StepButton2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiStepButton"
    });
    const {
      children,
      className,
      icon,
      optional
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded144);
    const {
      disabled,
      active
    } = React230.useContext(StepContext_default);
    const {
      orientation
    } = React230.useContext(StepperContext_default);
    const ownerState = _extends({}, props, {
      orientation
    });
    const classes = useUtilityClasses115(ownerState);
    const childProps = {
      icon,
      optional
    };
    const child = isMuiElement_default(children, ["StepLabel"]) ? /* @__PURE__ */ React230.cloneElement(children, childProps) : /* @__PURE__ */ (0, import_jsx_runtime222.jsx)(StepLabel_default, _extends({}, childProps, {
      children
    }));
    return /* @__PURE__ */ (0, import_jsx_runtime222.jsx)(StepButtonRoot, _extends({
      focusRipple: true,
      disabled,
      TouchRippleProps: {
        className: classes.touchRipple
      },
      className: clsx_default(classes.root, className),
      ref,
      ownerState,
      "aria-current": active ? "step" : void 0
    }, other, {
      children: child
    }));
  });
  true ? StepButton.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Can be a `StepLabel` or a node to place inside `StepLabel` as children.
     */
    children: import_prop_types148.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types148.default.object,
    /**
     * @ignore
     */
    className: import_prop_types148.default.string,
    /**
     * The icon displayed by the step label.
     */
    icon: import_prop_types148.default.node,
    /**
     * The optional node to display.
     */
    optional: import_prop_types148.default.node,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types148.default.oneOfType([import_prop_types148.default.arrayOf(import_prop_types148.default.oneOfType([import_prop_types148.default.func, import_prop_types148.default.object, import_prop_types148.default.bool])), import_prop_types148.default.func, import_prop_types148.default.object])
  } : void 0;
  var StepButton_default = StepButton;

  // node_modules/@mui/material/StepConnector/StepConnector.js
  init_extends();
  var React231 = __toESM(require_react());
  var import_prop_types149 = __toESM(require_prop_types());
  var import_composeClasses107 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/StepConnector/stepConnectorClasses.js
  var import_utils251 = __toESM(require_utils());
  var import_generateUtilityClass118 = __toESM(require_generateUtilityClass3());
  function getStepConnectorUtilityClass(slot) {
    return (0, import_generateUtilityClass118.default)("MuiStepConnector", slot);
  }
  var stepConnectorClasses = (0, import_utils251.unstable_generateUtilityClasses)("MuiStepConnector", ["root", "horizontal", "vertical", "alternativeLabel", "active", "completed", "disabled", "line", "lineHorizontal", "lineVertical"]);
  var stepConnectorClasses_default = stepConnectorClasses;

  // node_modules/@mui/material/StepConnector/StepConnector.js
  var import_jsx_runtime223 = __toESM(require_jsx_runtime());
  var _excluded145 = ["className"];
  var useUtilityClasses116 = (ownerState) => {
    const {
      classes,
      orientation,
      alternativeLabel,
      active,
      completed,
      disabled
    } = ownerState;
    const slots = {
      root: ["root", orientation, alternativeLabel && "alternativeLabel", active && "active", completed && "completed", disabled && "disabled"],
      line: ["line", `line${capitalize_default(orientation)}`]
    };
    return (0, import_composeClasses107.unstable_composeClasses)(slots, getStepConnectorUtilityClass, classes);
  };
  var StepConnectorRoot = styled_default("div", {
    name: "MuiStepConnector",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, styles7[ownerState.orientation], ownerState.alternativeLabel && styles7.alternativeLabel, ownerState.completed && styles7.completed];
    }
  })(({
    ownerState
  }) => _extends({
    flex: "1 1 auto"
  }, ownerState.orientation === "vertical" && {
    marginLeft: 12
    // half icon
  }, ownerState.alternativeLabel && {
    position: "absolute",
    top: 8 + 4,
    left: "calc(-50% + 20px)",
    right: "calc(50% + 20px)"
  }));
  var StepConnectorLine = styled_default("span", {
    name: "MuiStepConnector",
    slot: "Line",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.line, styles7[`line${capitalize_default(ownerState.orientation)}`]];
    }
  })(({
    ownerState,
    theme
  }) => {
    const borderColor = theme.palette.mode === "light" ? theme.palette.grey[400] : theme.palette.grey[600];
    return _extends({
      display: "block",
      borderColor: theme.vars ? theme.vars.palette.StepConnector.border : borderColor
    }, ownerState.orientation === "horizontal" && {
      borderTopStyle: "solid",
      borderTopWidth: 1
    }, ownerState.orientation === "vertical" && {
      borderLeftStyle: "solid",
      borderLeftWidth: 1,
      minHeight: 24
    });
  });
  var StepConnector = /* @__PURE__ */ React231.forwardRef(function StepConnector2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiStepConnector"
    });
    const {
      className
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded145);
    const {
      alternativeLabel,
      orientation = "horizontal"
    } = React231.useContext(StepperContext_default);
    const {
      active,
      disabled,
      completed
    } = React231.useContext(StepContext_default);
    const ownerState = _extends({}, props, {
      alternativeLabel,
      orientation,
      active,
      completed,
      disabled
    });
    const classes = useUtilityClasses116(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(StepConnectorRoot, _extends({
      className: clsx_default(classes.root, className),
      ref,
      ownerState
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(StepConnectorLine, {
        className: classes.line,
        ownerState
      })
    }));
  });
  true ? StepConnector.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types149.default.object,
    /**
     * @ignore
     */
    className: import_prop_types149.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types149.default.oneOfType([import_prop_types149.default.arrayOf(import_prop_types149.default.oneOfType([import_prop_types149.default.func, import_prop_types149.default.object, import_prop_types149.default.bool])), import_prop_types149.default.func, import_prop_types149.default.object])
  } : void 0;
  var StepConnector_default = StepConnector;

  // node_modules/@mui/material/StepContent/StepContent.js
  init_extends();
  var React232 = __toESM(require_react());
  var import_prop_types150 = __toESM(require_prop_types());
  var import_composeClasses108 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/StepContent/stepContentClasses.js
  var import_utils252 = __toESM(require_utils());
  var import_generateUtilityClass119 = __toESM(require_generateUtilityClass3());
  function getStepContentUtilityClass(slot) {
    return (0, import_generateUtilityClass119.default)("MuiStepContent", slot);
  }
  var stepContentClasses = (0, import_utils252.unstable_generateUtilityClasses)("MuiStepContent", ["root", "last", "transition"]);
  var stepContentClasses_default = stepContentClasses;

  // node_modules/@mui/material/StepContent/StepContent.js
  var import_jsx_runtime224 = __toESM(require_jsx_runtime());
  var _excluded146 = ["children", "className", "TransitionComponent", "transitionDuration", "TransitionProps"];
  var useUtilityClasses117 = (ownerState) => {
    const {
      classes,
      last
    } = ownerState;
    const slots = {
      root: ["root", last && "last"],
      transition: ["transition"]
    };
    return (0, import_composeClasses108.unstable_composeClasses)(slots, getStepContentUtilityClass, classes);
  };
  var StepContentRoot = styled_default("div", {
    name: "MuiStepContent",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, ownerState.last && styles7.last];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    marginLeft: 12,
    // half icon
    paddingLeft: 8 + 12,
    // margin + half icon
    paddingRight: 8,
    borderLeft: theme.vars ? `1px solid ${theme.vars.palette.StepContent.border}` : `1px solid ${theme.palette.mode === "light" ? theme.palette.grey[400] : theme.palette.grey[600]}`
  }, ownerState.last && {
    borderLeft: "none"
  }));
  var StepContentTransition = styled_default(Collapse_default, {
    name: "MuiStepContent",
    slot: "Transition",
    overridesResolver: (props, styles7) => styles7.transition
  })({});
  var StepContent = /* @__PURE__ */ React232.forwardRef(function StepContent2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiStepContent"
    });
    const {
      children,
      className,
      TransitionComponent = Collapse_default,
      transitionDuration: transitionDurationProp = "auto",
      TransitionProps
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded146);
    const {
      orientation
    } = React232.useContext(StepperContext_default);
    const {
      active,
      last,
      expanded
    } = React232.useContext(StepContext_default);
    const ownerState = _extends({}, props, {
      last
    });
    const classes = useUtilityClasses117(ownerState);
    if (true) {
      if (orientation !== "vertical") {
        console.error("MUI: <StepContent /> is only designed for use with the vertical stepper.");
      }
    }
    let transitionDuration = transitionDurationProp;
    if (transitionDurationProp === "auto" && !TransitionComponent.muiSupportAuto) {
      transitionDuration = void 0;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime224.jsx)(StepContentRoot, _extends({
      className: clsx_default(classes.root, className),
      ref,
      ownerState
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime224.jsx)(StepContentTransition, _extends({
        as: TransitionComponent,
        in: active || expanded,
        className: classes.transition,
        ownerState,
        timeout: transitionDuration,
        unmountOnExit: true
      }, TransitionProps, {
        children
      }))
    }));
  });
  true ? StepContent.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types150.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types150.default.object,
    /**
     * @ignore
     */
    className: import_prop_types150.default.string,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types150.default.oneOfType([import_prop_types150.default.arrayOf(import_prop_types150.default.oneOfType([import_prop_types150.default.func, import_prop_types150.default.object, import_prop_types150.default.bool])), import_prop_types150.default.func, import_prop_types150.default.object]),
    /**
     * The component used for the transition.
     * [Follow this guide](/material-ui/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
     * @default Collapse
     */
    TransitionComponent: import_prop_types150.default.elementType,
    /**
     * Adjust the duration of the content expand transition.
     * Passed as a prop to the transition component.
     *
     * Set to 'auto' to automatically calculate transition time based on height.
     * @default 'auto'
     */
    transitionDuration: import_prop_types150.default.oneOfType([import_prop_types150.default.oneOf(["auto"]), import_prop_types150.default.number, import_prop_types150.default.shape({
      appear: import_prop_types150.default.number,
      enter: import_prop_types150.default.number,
      exit: import_prop_types150.default.number
    })]),
    /**
     * Props applied to the transition element.
     * By default, the element is based on this [`Transition`](http://reactcommunity.org/react-transition-group/transition/) component.
     */
    TransitionProps: import_prop_types150.default.object
  } : void 0;
  var StepContent_default = StepContent;

  // node_modules/@mui/material/Stepper/Stepper.js
  init_extends();
  var React233 = __toESM(require_react());
  var import_prop_types151 = __toESM(require_prop_types());
  var import_utils254 = __toESM(require_utils());
  var import_composeClasses109 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/Stepper/stepperClasses.js
  var import_utils253 = __toESM(require_utils());
  var import_generateUtilityClass120 = __toESM(require_generateUtilityClass3());
  function getStepperUtilityClass(slot) {
    return (0, import_generateUtilityClass120.default)("MuiStepper", slot);
  }
  var stepperClasses = (0, import_utils253.unstable_generateUtilityClasses)("MuiStepper", ["root", "horizontal", "vertical", "alternativeLabel"]);
  var stepperClasses_default = stepperClasses;

  // node_modules/@mui/material/Stepper/Stepper.js
  var import_jsx_runtime225 = __toESM(require_jsx_runtime());
  var _excluded147 = ["activeStep", "alternativeLabel", "children", "className", "component", "connector", "nonLinear", "orientation"];
  var useUtilityClasses118 = (ownerState) => {
    const {
      orientation,
      alternativeLabel,
      classes
    } = ownerState;
    const slots = {
      root: ["root", orientation, alternativeLabel && "alternativeLabel"]
    };
    return (0, import_composeClasses109.unstable_composeClasses)(slots, getStepperUtilityClass, classes);
  };
  var StepperRoot = styled_default("div", {
    name: "MuiStepper",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, styles7[ownerState.orientation], ownerState.alternativeLabel && styles7.alternativeLabel];
    }
  })(({
    ownerState
  }) => _extends({
    display: "flex"
  }, ownerState.orientation === "horizontal" && {
    flexDirection: "row",
    alignItems: "center"
  }, ownerState.orientation === "vertical" && {
    flexDirection: "column"
  }, ownerState.alternativeLabel && {
    alignItems: "flex-start"
  }));
  var defaultConnector = /* @__PURE__ */ (0, import_jsx_runtime225.jsx)(StepConnector_default, {});
  var Stepper = /* @__PURE__ */ React233.forwardRef(function Stepper2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiStepper"
    });
    const {
      activeStep = 0,
      alternativeLabel = false,
      children,
      className,
      component = "div",
      connector = defaultConnector,
      nonLinear = false,
      orientation = "horizontal"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded147);
    const ownerState = _extends({}, props, {
      alternativeLabel,
      orientation,
      component
    });
    const classes = useUtilityClasses118(ownerState);
    const childrenArray = React233.Children.toArray(children).filter(Boolean);
    const steps = childrenArray.map((step, index3) => {
      return /* @__PURE__ */ React233.cloneElement(step, _extends({
        index: index3,
        last: index3 + 1 === childrenArray.length
      }, step.props));
    });
    const contextValue = React233.useMemo(() => ({
      activeStep,
      alternativeLabel,
      connector,
      nonLinear,
      orientation
    }), [activeStep, alternativeLabel, connector, nonLinear, orientation]);
    return /* @__PURE__ */ (0, import_jsx_runtime225.jsx)(StepperContext_default.Provider, {
      value: contextValue,
      children: /* @__PURE__ */ (0, import_jsx_runtime225.jsx)(StepperRoot, _extends({
        as: component,
        ownerState,
        className: clsx_default(classes.root, className),
        ref
      }, other, {
        children: steps
      }))
    });
  });
  true ? Stepper.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Set the active step (zero based index).
     * Set to -1 to disable all the steps.
     * @default 0
     */
    activeStep: import_utils254.integerPropType,
    /**
     * If set to 'true' and orientation is horizontal,
     * then the step label will be positioned under the icon.
     * @default false
     */
    alternativeLabel: import_prop_types151.default.bool,
    /**
     * Two or more `<Step />` components.
     */
    children: import_prop_types151.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types151.default.object,
    /**
     * @ignore
     */
    className: import_prop_types151.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types151.default.elementType,
    /**
     * An element to be placed between each step.
     * @default <StepConnector />
     */
    connector: import_prop_types151.default.element,
    /**
     * If set the `Stepper` will not assist in controlling steps for linear flow.
     * @default false
     */
    nonLinear: import_prop_types151.default.bool,
    /**
     * The component orientation (layout flow direction).
     * @default 'horizontal'
     */
    orientation: import_prop_types151.default.oneOf(["horizontal", "vertical"]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types151.default.oneOfType([import_prop_types151.default.arrayOf(import_prop_types151.default.oneOfType([import_prop_types151.default.func, import_prop_types151.default.object, import_prop_types151.default.bool])), import_prop_types151.default.func, import_prop_types151.default.object])
  } : void 0;
  var Stepper_default = Stepper;

  // node_modules/@mui/material/index.js
  var import_SvgIcon3 = __toESM(require_SvgIcon2());
  __reExport(material_exports, __toESM(require_SvgIcon2()));

  // node_modules/@mui/material/SwipeableDrawer/SwipeableDrawer.js
  init_extends();
  var React235 = __toESM(require_react());
  var ReactDOM5 = __toESM(require_react_dom());
  var import_prop_types153 = __toESM(require_prop_types());
  var import_utils255 = __toESM(require_utils());
  var import_system45 = __toESM(require_system());

  // node_modules/@mui/material/SwipeableDrawer/SwipeArea.js
  init_extends();
  var React234 = __toESM(require_react());
  var import_prop_types152 = __toESM(require_prop_types());
  var import_jsx_runtime226 = __toESM(require_jsx_runtime());
  var _excluded148 = ["anchor", "classes", "className", "width", "style"];
  var SwipeAreaRoot = styled_default("div")(({
    theme,
    ownerState
  }) => _extends({
    position: "fixed",
    top: 0,
    left: 0,
    bottom: 0,
    zIndex: theme.zIndex.drawer - 1
  }, ownerState.anchor === "left" && {
    right: "auto"
  }, ownerState.anchor === "right" && {
    left: "auto",
    right: 0
  }, ownerState.anchor === "top" && {
    bottom: "auto",
    right: 0
  }, ownerState.anchor === "bottom" && {
    top: "auto",
    bottom: 0,
    right: 0
  }));
  var SwipeArea = /* @__PURE__ */ React234.forwardRef(function SwipeArea2(props, ref) {
    const {
      anchor,
      classes = {},
      className,
      width,
      style
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded148);
    const ownerState = props;
    return /* @__PURE__ */ (0, import_jsx_runtime226.jsx)(SwipeAreaRoot, _extends({
      className: clsx_default("PrivateSwipeArea-root", classes.root, classes[`anchor${capitalize_default(anchor)}`], className),
      ref,
      style: _extends({
        [isHorizontal(anchor) ? "width" : "height"]: width
      }, style),
      ownerState
    }, other));
  });
  true ? SwipeArea.propTypes = {
    /**
     * Side on which to attach the discovery area.
     */
    anchor: import_prop_types152.default.oneOf(["left", "top", "right", "bottom"]).isRequired,
    /**
     * @ignore
     */
    classes: import_prop_types152.default.object,
    /**
     * @ignore
     */
    className: import_prop_types152.default.string,
    /**
     * @ignore
     */
    style: import_prop_types152.default.object,
    /**
     * The width of the left most (or right most) area in `px` where the
     * drawer can be swiped open from.
     */
    width: import_prop_types152.default.number.isRequired
  } : void 0;
  var SwipeArea_default = SwipeArea;

  // node_modules/@mui/material/SwipeableDrawer/SwipeableDrawer.js
  var import_jsx_runtime227 = __toESM(require_jsx_runtime());
  var import_jsx_runtime228 = __toESM(require_jsx_runtime());
  var _excluded149 = ["BackdropProps"];
  var _excluded221 = ["anchor", "disableBackdropTransition", "disableDiscovery", "disableSwipeToOpen", "hideBackdrop", "hysteresis", "allowSwipeInChildren", "minFlingVelocity", "ModalProps", "onClose", "onOpen", "open", "PaperProps", "SwipeAreaProps", "swipeAreaWidth", "transitionDuration", "variant"];
  var UNCERTAINTY_THRESHOLD = 3;
  var DRAG_STARTED_SIGNAL = 20;
  var claimedSwipeInstance = null;
  function calculateCurrentX(anchor, touches, doc) {
    return anchor === "right" ? doc.body.offsetWidth - touches[0].pageX : touches[0].pageX;
  }
  function calculateCurrentY(anchor, touches, containerWindow) {
    return anchor === "bottom" ? containerWindow.innerHeight - touches[0].clientY : touches[0].clientY;
  }
  function getMaxTranslate(horizontalSwipe, paperInstance) {
    return horizontalSwipe ? paperInstance.clientWidth : paperInstance.clientHeight;
  }
  function getTranslate(currentTranslate, startLocation, open, maxTranslate) {
    return Math.min(Math.max(open ? startLocation - currentTranslate : maxTranslate + startLocation - currentTranslate, 0), maxTranslate);
  }
  function getDomTreeShapes(element, rootNode) {
    const domTreeShapes = [];
    while (element && element !== rootNode.parentElement) {
      const style = ownerWindow_default(rootNode).getComputedStyle(element);
      if (
        // Ignore the scroll children if the element is absolute positioned.
        style.getPropertyValue("position") === "absolute" || // Ignore the scroll children if the element has an overflowX hidden
        style.getPropertyValue("overflow-x") === "hidden"
      ) {
      } else if (element.clientWidth > 0 && element.scrollWidth > element.clientWidth || element.clientHeight > 0 && element.scrollHeight > element.clientHeight) {
        domTreeShapes.push(element);
      }
      element = element.parentElement;
    }
    return domTreeShapes;
  }
  function computeHasNativeHandler({
    domTreeShapes,
    start: start2,
    current,
    anchor
  }) {
    const axisProperties = {
      scrollPosition: {
        x: "scrollLeft",
        y: "scrollTop"
      },
      scrollLength: {
        x: "scrollWidth",
        y: "scrollHeight"
      },
      clientLength: {
        x: "clientWidth",
        y: "clientHeight"
      }
    };
    return domTreeShapes.some((shape) => {
      let goingForward = current >= start2;
      if (anchor === "top" || anchor === "left") {
        goingForward = !goingForward;
      }
      const axis = anchor === "left" || anchor === "right" ? "x" : "y";
      const scrollPosition = Math.round(shape[axisProperties.scrollPosition[axis]]);
      const areNotAtStart = scrollPosition > 0;
      const areNotAtEnd = scrollPosition + shape[axisProperties.clientLength[axis]] < shape[axisProperties.scrollLength[axis]];
      if (goingForward && areNotAtEnd || !goingForward && areNotAtStart) {
        return true;
      }
      return false;
    });
  }
  var iOS = typeof navigator !== "undefined" && /iPad|iPhone|iPod/.test(navigator.userAgent);
  var SwipeableDrawer = /* @__PURE__ */ React235.forwardRef(function SwipeableDrawer2(inProps, ref) {
    const props = (0, import_system45.useThemeProps)({
      name: "MuiSwipeableDrawer",
      props: inProps
    });
    const theme = useTheme4();
    const transitionDurationDefault = {
      enter: theme.transitions.duration.enteringScreen,
      exit: theme.transitions.duration.leavingScreen
    };
    const {
      anchor = "left",
      disableBackdropTransition = false,
      disableDiscovery = false,
      disableSwipeToOpen = iOS,
      hideBackdrop,
      hysteresis = 0.52,
      allowSwipeInChildren = false,
      minFlingVelocity = 450,
      ModalProps: {
        BackdropProps
      } = {},
      onClose,
      onOpen,
      open = false,
      PaperProps = {},
      SwipeAreaProps,
      swipeAreaWidth = 20,
      transitionDuration = transitionDurationDefault,
      variant = "temporary"
      // Mobile first.
    } = props, ModalPropsProp = _objectWithoutPropertiesLoose(props.ModalProps, _excluded149), other = _objectWithoutPropertiesLoose(props, _excluded221);
    const [maybeSwiping, setMaybeSwiping] = React235.useState(false);
    const swipeInstance = React235.useRef({
      isSwiping: null
    });
    const swipeAreaRef = React235.useRef();
    const backdropRef = React235.useRef();
    const paperRef = React235.useRef();
    const handleRef = useForkRef_default(PaperProps.ref, paperRef);
    const touchDetected = React235.useRef(false);
    const calculatedDurationRef = React235.useRef();
    useEnhancedEffect_default(() => {
      calculatedDurationRef.current = null;
    }, [open]);
    const setPosition = React235.useCallback((translate, options = {}) => {
      const {
        mode = null,
        changeTransition = true
      } = options;
      const anchorRtl = getAnchor(theme, anchor);
      const rtlTranslateMultiplier = ["right", "bottom"].indexOf(anchorRtl) !== -1 ? 1 : -1;
      const horizontalSwipe = isHorizontal(anchor);
      const transform2 = horizontalSwipe ? `translate(${rtlTranslateMultiplier * translate}px, 0)` : `translate(0, ${rtlTranslateMultiplier * translate}px)`;
      const drawerStyle = paperRef.current.style;
      drawerStyle.webkitTransform = transform2;
      drawerStyle.transform = transform2;
      let transition2 = "";
      if (mode) {
        transition2 = theme.transitions.create("all", getTransitionProps({
          easing: void 0,
          style: void 0,
          timeout: transitionDuration
        }, {
          mode
        }));
      }
      if (changeTransition) {
        drawerStyle.webkitTransition = transition2;
        drawerStyle.transition = transition2;
      }
      if (!disableBackdropTransition && !hideBackdrop) {
        const backdropStyle = backdropRef.current.style;
        backdropStyle.opacity = 1 - translate / getMaxTranslate(horizontalSwipe, paperRef.current);
        if (changeTransition) {
          backdropStyle.webkitTransition = transition2;
          backdropStyle.transition = transition2;
        }
      }
    }, [anchor, disableBackdropTransition, hideBackdrop, theme, transitionDuration]);
    const handleBodyTouchEnd = useEventCallback_default((nativeEvent) => {
      if (!touchDetected.current) {
        return;
      }
      claimedSwipeInstance = null;
      touchDetected.current = false;
      ReactDOM5.flushSync(() => {
        setMaybeSwiping(false);
      });
      if (!swipeInstance.current.isSwiping) {
        swipeInstance.current.isSwiping = null;
        return;
      }
      swipeInstance.current.isSwiping = null;
      const anchorRtl = getAnchor(theme, anchor);
      const horizontal = isHorizontal(anchor);
      let current;
      if (horizontal) {
        current = calculateCurrentX(anchorRtl, nativeEvent.changedTouches, ownerDocument_default(nativeEvent.currentTarget));
      } else {
        current = calculateCurrentY(anchorRtl, nativeEvent.changedTouches, ownerWindow_default(nativeEvent.currentTarget));
      }
      const startLocation = horizontal ? swipeInstance.current.startX : swipeInstance.current.startY;
      const maxTranslate = getMaxTranslate(horizontal, paperRef.current);
      const currentTranslate = getTranslate(current, startLocation, open, maxTranslate);
      const translateRatio = currentTranslate / maxTranslate;
      if (Math.abs(swipeInstance.current.velocity) > minFlingVelocity) {
        calculatedDurationRef.current = Math.abs((maxTranslate - currentTranslate) / swipeInstance.current.velocity) * 1e3;
      }
      if (open) {
        if (swipeInstance.current.velocity > minFlingVelocity || translateRatio > hysteresis) {
          onClose();
        } else {
          setPosition(0, {
            mode: "exit"
          });
        }
        return;
      }
      if (swipeInstance.current.velocity < -minFlingVelocity || 1 - translateRatio > hysteresis) {
        onOpen();
      } else {
        setPosition(getMaxTranslate(horizontal, paperRef.current), {
          mode: "enter"
        });
      }
    });
    const startMaybeSwiping = (force = false) => {
      if (!maybeSwiping) {
        if (force || !(disableDiscovery && allowSwipeInChildren)) {
          ReactDOM5.flushSync(() => {
            setMaybeSwiping(true);
          });
        }
        const horizontalSwipe = isHorizontal(anchor);
        if (!open && paperRef.current) {
          setPosition(getMaxTranslate(horizontalSwipe, paperRef.current) + (disableDiscovery ? 15 : -DRAG_STARTED_SIGNAL), {
            changeTransition: false
          });
        }
        swipeInstance.current.velocity = 0;
        swipeInstance.current.lastTime = null;
        swipeInstance.current.lastTranslate = null;
        swipeInstance.current.paperHit = false;
        touchDetected.current = true;
      }
    };
    const handleBodyTouchMove = useEventCallback_default((nativeEvent) => {
      if (!paperRef.current || !touchDetected.current) {
        return;
      }
      if (claimedSwipeInstance !== null && claimedSwipeInstance !== swipeInstance.current) {
        return;
      }
      startMaybeSwiping(true);
      const anchorRtl = getAnchor(theme, anchor);
      const horizontalSwipe = isHorizontal(anchor);
      const currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument_default(nativeEvent.currentTarget));
      const currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow_default(nativeEvent.currentTarget));
      if (open && paperRef.current.contains(nativeEvent.target) && claimedSwipeInstance === null) {
        const domTreeShapes = getDomTreeShapes(nativeEvent.target, paperRef.current);
        const hasNativeHandler = computeHasNativeHandler({
          domTreeShapes,
          start: horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY,
          current: horizontalSwipe ? currentX : currentY,
          anchor
        });
        if (hasNativeHandler) {
          claimedSwipeInstance = true;
          return;
        }
        claimedSwipeInstance = swipeInstance.current;
      }
      if (swipeInstance.current.isSwiping == null) {
        const dx = Math.abs(currentX - swipeInstance.current.startX);
        const dy = Math.abs(currentY - swipeInstance.current.startY);
        const definitelySwiping = horizontalSwipe ? dx > dy && dx > UNCERTAINTY_THRESHOLD : dy > dx && dy > UNCERTAINTY_THRESHOLD;
        if (definitelySwiping && nativeEvent.cancelable) {
          nativeEvent.preventDefault();
        }
        if (definitelySwiping === true || (horizontalSwipe ? dy > UNCERTAINTY_THRESHOLD : dx > UNCERTAINTY_THRESHOLD)) {
          swipeInstance.current.isSwiping = definitelySwiping;
          if (!definitelySwiping) {
            handleBodyTouchEnd(nativeEvent);
            return;
          }
          swipeInstance.current.startX = currentX;
          swipeInstance.current.startY = currentY;
          if (!disableDiscovery && !open) {
            if (horizontalSwipe) {
              swipeInstance.current.startX -= DRAG_STARTED_SIGNAL;
            } else {
              swipeInstance.current.startY -= DRAG_STARTED_SIGNAL;
            }
          }
        }
      }
      if (!swipeInstance.current.isSwiping) {
        return;
      }
      const maxTranslate = getMaxTranslate(horizontalSwipe, paperRef.current);
      let startLocation = horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY;
      if (open && !swipeInstance.current.paperHit) {
        startLocation = Math.min(startLocation, maxTranslate);
      }
      const translate = getTranslate(horizontalSwipe ? currentX : currentY, startLocation, open, maxTranslate);
      if (open) {
        if (!swipeInstance.current.paperHit) {
          const paperHit = horizontalSwipe ? currentX < maxTranslate : currentY < maxTranslate;
          if (paperHit) {
            swipeInstance.current.paperHit = true;
            swipeInstance.current.startX = currentX;
            swipeInstance.current.startY = currentY;
          } else {
            return;
          }
        } else if (translate === 0) {
          swipeInstance.current.startX = currentX;
          swipeInstance.current.startY = currentY;
        }
      }
      if (swipeInstance.current.lastTranslate === null) {
        swipeInstance.current.lastTranslate = translate;
        swipeInstance.current.lastTime = performance.now() + 1;
      }
      const velocity = (translate - swipeInstance.current.lastTranslate) / (performance.now() - swipeInstance.current.lastTime) * 1e3;
      swipeInstance.current.velocity = swipeInstance.current.velocity * 0.4 + velocity * 0.6;
      swipeInstance.current.lastTranslate = translate;
      swipeInstance.current.lastTime = performance.now();
      if (nativeEvent.cancelable) {
        nativeEvent.preventDefault();
      }
      setPosition(translate);
    });
    const handleBodyTouchStart = useEventCallback_default((nativeEvent) => {
      if (nativeEvent.defaultPrevented) {
        return;
      }
      if (nativeEvent.defaultMuiPrevented) {
        return;
      }
      if (open && (hideBackdrop || !backdropRef.current.contains(nativeEvent.target)) && !paperRef.current.contains(nativeEvent.target)) {
        return;
      }
      const anchorRtl = getAnchor(theme, anchor);
      const horizontalSwipe = isHorizontal(anchor);
      const currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument_default(nativeEvent.currentTarget));
      const currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow_default(nativeEvent.currentTarget));
      if (!open) {
        var _paperRef$current;
        if (disableSwipeToOpen || !(nativeEvent.target === swipeAreaRef.current || (_paperRef$current = paperRef.current) != null && _paperRef$current.contains(nativeEvent.target) && (typeof allowSwipeInChildren === "function" ? allowSwipeInChildren(nativeEvent, swipeAreaRef.current, paperRef.current) : allowSwipeInChildren))) {
          return;
        }
        if (horizontalSwipe) {
          if (currentX > swipeAreaWidth) {
            return;
          }
        } else if (currentY > swipeAreaWidth) {
          return;
        }
      }
      nativeEvent.defaultMuiPrevented = true;
      claimedSwipeInstance = null;
      swipeInstance.current.startX = currentX;
      swipeInstance.current.startY = currentY;
      startMaybeSwiping();
    });
    React235.useEffect(() => {
      if (variant === "temporary") {
        const doc = ownerDocument_default(paperRef.current);
        doc.addEventListener("touchstart", handleBodyTouchStart);
        doc.addEventListener("touchmove", handleBodyTouchMove, {
          passive: !open
        });
        doc.addEventListener("touchend", handleBodyTouchEnd);
        return () => {
          doc.removeEventListener("touchstart", handleBodyTouchStart);
          doc.removeEventListener("touchmove", handleBodyTouchMove, {
            passive: !open
          });
          doc.removeEventListener("touchend", handleBodyTouchEnd);
        };
      }
      return void 0;
    }, [variant, open, handleBodyTouchStart, handleBodyTouchMove, handleBodyTouchEnd]);
    React235.useEffect(() => () => {
      if (claimedSwipeInstance === swipeInstance.current) {
        claimedSwipeInstance = null;
      }
    }, []);
    React235.useEffect(() => {
      if (!open) {
        setMaybeSwiping(false);
      }
    }, [open]);
    return /* @__PURE__ */ (0, import_jsx_runtime228.jsxs)(React235.Fragment, {
      children: [/* @__PURE__ */ (0, import_jsx_runtime227.jsx)(Drawer_default, _extends({
        open: variant === "temporary" && maybeSwiping ? true : open,
        variant,
        ModalProps: _extends({
          BackdropProps: _extends({}, BackdropProps, {
            ref: backdropRef
          })
        }, variant === "temporary" && {
          keepMounted: true
        }, ModalPropsProp),
        hideBackdrop,
        PaperProps: _extends({}, PaperProps, {
          style: _extends({
            pointerEvents: variant === "temporary" && !open && !allowSwipeInChildren ? "none" : ""
          }, PaperProps.style),
          ref: handleRef
        }),
        anchor,
        transitionDuration: calculatedDurationRef.current || transitionDuration,
        onClose,
        ref
      }, other)), !disableSwipeToOpen && variant === "temporary" && /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(NoSsr, {
        children: /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(SwipeArea_default, _extends({
          anchor,
          ref: swipeAreaRef,
          width: swipeAreaWidth
        }, SwipeAreaProps))
      })]
    });
  });
  true ? SwipeableDrawer.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * If set to true, the swipe event will open the drawer even if the user begins the swipe on one of the drawer's children.
     * This can be useful in scenarios where the drawer is partially visible.
     * You can customize it further with a callback that determines which children the user can drag over to open the drawer
     * (for example, to ignore other elements that handle touch move events, like sliders).
     *
     * @param {TouchEvent} event The 'touchstart' event
     * @param {HTMLDivElement} swipeArea The swipe area element
     * @param {HTMLDivElement} paper The drawer's paper element
     *
     * @default false
     */
    allowSwipeInChildren: import_prop_types153.default.oneOfType([import_prop_types153.default.func, import_prop_types153.default.bool]),
    /**
     * @ignore
     */
    anchor: import_prop_types153.default.oneOf(["bottom", "left", "right", "top"]),
    /**
     * The content of the component.
     */
    children: import_prop_types153.default.node,
    /**
     * Disable the backdrop transition.
     * This can improve the FPS on low-end devices.
     * @default false
     */
    disableBackdropTransition: import_prop_types153.default.bool,
    /**
     * If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit
     * to promote accidental discovery of the swipe gesture.
     * @default false
     */
    disableDiscovery: import_prop_types153.default.bool,
    /**
     * If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers
     * navigation actions. Swipe to open is disabled on iOS browsers by default.
     * @default typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent)
     */
    disableSwipeToOpen: import_prop_types153.default.bool,
    /**
     * @ignore
     */
    hideBackdrop: import_prop_types153.default.bool,
    /**
     * Affects how far the drawer must be opened/closed to change its state.
     * Specified as percent (0-1) of the width of the drawer
     * @default 0.52
     */
    hysteresis: import_prop_types153.default.number,
    /**
     * Defines, from which (average) velocity on, the swipe is
     * defined as complete although hysteresis isn't reached.
     * Good threshold is between 250 - 1000 px/s
     * @default 450
     */
    minFlingVelocity: import_prop_types153.default.number,
    /**
     * @ignore
     */
    ModalProps: import_prop_types153.default.shape({
      BackdropProps: import_prop_types153.default.shape({
        component: import_utils255.elementTypeAcceptingRef
      })
    }),
    /**
     * Callback fired when the component requests to be closed.
     *
     * @param {React.SyntheticEvent<{}>} event The event source of the callback.
     */
    onClose: import_prop_types153.default.func.isRequired,
    /**
     * Callback fired when the component requests to be opened.
     *
     * @param {React.SyntheticEvent<{}>} event The event source of the callback.
     */
    onOpen: import_prop_types153.default.func.isRequired,
    /**
     * If `true`, the component is shown.
     * @default false
     */
    open: import_prop_types153.default.bool,
    /**
     * @ignore
     */
    PaperProps: import_prop_types153.default.shape({
      component: import_utils255.elementTypeAcceptingRef,
      style: import_prop_types153.default.object
    }),
    /**
     * The element is used to intercept the touch events on the edge.
     */
    SwipeAreaProps: import_prop_types153.default.object,
    /**
     * The width of the left most (or right most) area in `px` that
     * the drawer can be swiped open from.
     * @default 20
     */
    swipeAreaWidth: import_prop_types153.default.number,
    /**
     * The duration for the transition, in milliseconds.
     * You may specify a single timeout for all transitions, or individually with an object.
     * @default {
     *   enter: theme.transitions.duration.enteringScreen,
     *   exit: theme.transitions.duration.leavingScreen,
     * }
     */
    transitionDuration: import_prop_types153.default.oneOfType([import_prop_types153.default.number, import_prop_types153.default.shape({
      appear: import_prop_types153.default.number,
      enter: import_prop_types153.default.number,
      exit: import_prop_types153.default.number
    })]),
    /**
     * @ignore
     */
    variant: import_prop_types153.default.oneOf(["permanent", "persistent", "temporary"])
  } : void 0;
  var SwipeableDrawer_default = SwipeableDrawer;

  // node_modules/@mui/material/Switch/Switch.js
  init_extends();
  var React236 = __toESM(require_react());
  var import_prop_types154 = __toESM(require_prop_types());
  var import_utils258 = __toESM(require_utils());
  var import_composeClasses110 = __toESM(require_composeClasses3());
  var import_system46 = __toESM(require_system());

  // node_modules/@mui/material/Switch/switchClasses.js
  var import_utils257 = __toESM(require_utils());
  var import_generateUtilityClass121 = __toESM(require_generateUtilityClass3());
  function getSwitchUtilityClass2(slot) {
    return (0, import_generateUtilityClass121.default)("MuiSwitch", slot);
  }
  var switchClasses2 = (0, import_utils257.unstable_generateUtilityClasses)("MuiSwitch", ["root", "edgeStart", "edgeEnd", "switchBase", "colorPrimary", "colorSecondary", "sizeSmall", "sizeMedium", "checked", "disabled", "input", "thumb", "track"]);
  var switchClasses_default = switchClasses2;

  // node_modules/@mui/material/Switch/Switch.js
  var import_jsx_runtime229 = __toESM(require_jsx_runtime());
  var import_jsx_runtime230 = __toESM(require_jsx_runtime());
  var _excluded150 = ["className", "color", "edge", "size", "sx"];
  var useUtilityClasses119 = (ownerState) => {
    const {
      classes,
      edge,
      size: size2,
      color,
      checked,
      disabled
    } = ownerState;
    const slots = {
      root: ["root", edge && `edge${capitalize_default(edge)}`, `size${capitalize_default(size2)}`],
      switchBase: ["switchBase", `color${capitalize_default(color)}`, checked && "checked", disabled && "disabled"],
      thumb: ["thumb"],
      track: ["track"],
      input: ["input"]
    };
    const composedClasses = (0, import_composeClasses110.unstable_composeClasses)(slots, getSwitchUtilityClass2, classes);
    return _extends({}, classes, composedClasses);
  };
  var SwitchRoot = styled_default("span", {
    name: "MuiSwitch",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, ownerState.edge && styles7[`edge${capitalize_default(ownerState.edge)}`], styles7[`size${capitalize_default(ownerState.size)}`]];
    }
  })(({
    ownerState
  }) => _extends({
    display: "inline-flex",
    width: 34 + 12 * 2,
    height: 14 + 12 * 2,
    overflow: "hidden",
    padding: 12,
    boxSizing: "border-box",
    position: "relative",
    flexShrink: 0,
    zIndex: 0,
    // Reset the stacking context.
    verticalAlign: "middle",
    // For correct alignment with the text.
    "@media print": {
      colorAdjust: "exact"
    }
  }, ownerState.edge === "start" && {
    marginLeft: -8
  }, ownerState.edge === "end" && {
    marginRight: -8
  }, ownerState.size === "small" && {
    width: 40,
    height: 24,
    padding: 7,
    [`& .${switchClasses_default.thumb}`]: {
      width: 16,
      height: 16
    },
    [`& .${switchClasses_default.switchBase}`]: {
      padding: 4,
      [`&.${switchClasses_default.checked}`]: {
        transform: "translateX(16px)"
      }
    }
  }));
  var SwitchSwitchBase = styled_default(SwitchBase_default, {
    name: "MuiSwitch",
    slot: "SwitchBase",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.switchBase, {
        [`& .${switchClasses_default.input}`]: styles7.input
      }, ownerState.color !== "default" && styles7[`color${capitalize_default(ownerState.color)}`]];
    }
  })(({
    theme
  }) => ({
    position: "absolute",
    top: 0,
    left: 0,
    zIndex: 1,
    // Render above the focus ripple.
    color: theme.vars ? theme.vars.palette.Switch.defaultColor : `${theme.palette.mode === "light" ? theme.palette.common.white : theme.palette.grey[300]}`,
    transition: theme.transitions.create(["left", "transform"], {
      duration: theme.transitions.duration.shortest
    }),
    [`&.${switchClasses_default.checked}`]: {
      transform: "translateX(20px)"
    },
    [`&.${switchClasses_default.disabled}`]: {
      color: theme.vars ? theme.vars.palette.Switch.defaultDisabledColor : `${theme.palette.mode === "light" ? theme.palette.grey[100] : theme.palette.grey[600]}`
    },
    [`&.${switchClasses_default.checked} + .${switchClasses_default.track}`]: {
      opacity: 0.5
    },
    [`&.${switchClasses_default.disabled} + .${switchClasses_default.track}`]: {
      opacity: theme.vars ? theme.vars.opacity.switchTrackDisabled : `${theme.palette.mode === "light" ? 0.12 : 0.2}`
    },
    [`& .${switchClasses_default.input}`]: {
      left: "-100%",
      width: "300%"
    }
  }), ({
    theme,
    ownerState
  }) => _extends({
    "&:hover": {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.action.activeChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_system46.alpha)(theme.palette.action.active, theme.palette.action.hoverOpacity),
      // Reset on touch devices, it doesn't add specificity
      "@media (hover: none)": {
        backgroundColor: "transparent"
      }
    }
  }, ownerState.color !== "default" && {
    [`&.${switchClasses_default.checked}`]: {
      color: (theme.vars || theme).palette[ownerState.color].main,
      "&:hover": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette[ownerState.color].mainChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_system46.alpha)(theme.palette[ownerState.color].main, theme.palette.action.hoverOpacity),
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      },
      [`&.${switchClasses_default.disabled}`]: {
        color: theme.vars ? theme.vars.palette.Switch[`${ownerState.color}DisabledColor`] : `${theme.palette.mode === "light" ? (0, import_system46.lighten)(theme.palette[ownerState.color].main, 0.62) : (0, import_system46.darken)(theme.palette[ownerState.color].main, 0.55)}`
      }
    },
    [`&.${switchClasses_default.checked} + .${switchClasses_default.track}`]: {
      backgroundColor: (theme.vars || theme).palette[ownerState.color].main
    }
  }));
  var SwitchTrack = styled_default("span", {
    name: "MuiSwitch",
    slot: "Track",
    overridesResolver: (props, styles7) => styles7.track
  })(({
    theme
  }) => ({
    height: "100%",
    width: "100%",
    borderRadius: 14 / 2,
    zIndex: -1,
    transition: theme.transitions.create(["opacity", "background-color"], {
      duration: theme.transitions.duration.shortest
    }),
    backgroundColor: theme.vars ? theme.vars.palette.common.onBackground : `${theme.palette.mode === "light" ? theme.palette.common.black : theme.palette.common.white}`,
    opacity: theme.vars ? theme.vars.opacity.switchTrack : `${theme.palette.mode === "light" ? 0.38 : 0.3}`
  }));
  var SwitchThumb = styled_default("span", {
    name: "MuiSwitch",
    slot: "Thumb",
    overridesResolver: (props, styles7) => styles7.thumb
  })(({
    theme
  }) => ({
    boxShadow: (theme.vars || theme).shadows[1],
    backgroundColor: "currentColor",
    width: 20,
    height: 20,
    borderRadius: "50%"
  }));
  var Switch3 = /* @__PURE__ */ React236.forwardRef(function Switch4(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiSwitch"
    });
    const {
      className,
      color = "primary",
      edge = false,
      size: size2 = "medium",
      sx
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded150);
    const ownerState = _extends({}, props, {
      color,
      edge,
      size: size2
    });
    const classes = useUtilityClasses119(ownerState);
    const icon = /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(SwitchThumb, {
      className: classes.thumb,
      ownerState
    });
    return /* @__PURE__ */ (0, import_jsx_runtime230.jsxs)(SwitchRoot, {
      className: clsx_default(classes.root, className),
      sx,
      ownerState,
      children: [/* @__PURE__ */ (0, import_jsx_runtime229.jsx)(SwitchSwitchBase, _extends({
        type: "checkbox",
        icon,
        checkedIcon: icon,
        ref,
        ownerState
      }, other, {
        classes: _extends({}, classes, {
          root: classes.switchBase
        })
      })), /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(SwitchTrack, {
        className: classes.track,
        ownerState
      })]
    });
  });
  true ? Switch3.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * If `true`, the component is checked.
     */
    checked: import_prop_types154.default.bool,
    /**
     * The icon to display when the component is checked.
     */
    checkedIcon: import_prop_types154.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types154.default.object,
    /**
     * @ignore
     */
    className: import_prop_types154.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'primary'
     */
    color: import_prop_types154.default.oneOfType([import_prop_types154.default.oneOf(["default", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types154.default.string]),
    /**
     * The default checked state. Use when the component is not controlled.
     */
    defaultChecked: import_prop_types154.default.bool,
    /**
     * If `true`, the component is disabled.
     */
    disabled: import_prop_types154.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     * @default false
     */
    disableRipple: import_prop_types154.default.bool,
    /**
     * If given, uses a negative margin to counteract the padding on one
     * side (this is often helpful for aligning the left or right
     * side of the icon with content above or below, without ruining the border
     * size and shape).
     * @default false
     */
    edge: import_prop_types154.default.oneOf(["end", "start", false]),
    /**
     * The icon to display when the component is unchecked.
     */
    icon: import_prop_types154.default.node,
    /**
     * The id of the `input` element.
     */
    id: import_prop_types154.default.string,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: import_prop_types154.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: import_utils258.refType,
    /**
     * Callback fired when the state is changed.
     *
     * @param {React.ChangeEvent<HTMLInputElement>} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     * You can pull out the new checked state by accessing `event.target.checked` (boolean).
     */
    onChange: import_prop_types154.default.func,
    /**
     * If `true`, the `input` element is required.
     * @default false
     */
    required: import_prop_types154.default.bool,
    /**
     * The size of the component.
     * `small` is equivalent to the dense switch styling.
     * @default 'medium'
     */
    size: import_prop_types154.default.oneOfType([import_prop_types154.default.oneOf(["medium", "small"]), import_prop_types154.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types154.default.oneOfType([import_prop_types154.default.arrayOf(import_prop_types154.default.oneOfType([import_prop_types154.default.func, import_prop_types154.default.object, import_prop_types154.default.bool])), import_prop_types154.default.func, import_prop_types154.default.object]),
    /**
     * The value of the component. The DOM API casts this to a string.
     * The browser uses "on" as the default value.
     */
    value: import_prop_types154.default.any
  } : void 0;
  var Switch_default = Switch3;

  // node_modules/@mui/material/Tab/Tab.js
  init_extends();
  var React237 = __toESM(require_react());
  var import_prop_types155 = __toESM(require_prop_types());
  var import_composeClasses111 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/Tab/tabClasses.js
  var import_utils259 = __toESM(require_utils());
  var import_generateUtilityClass122 = __toESM(require_generateUtilityClass3());
  function getTabUtilityClass2(slot) {
    return (0, import_generateUtilityClass122.default)("MuiTab", slot);
  }
  var tabClasses2 = (0, import_utils259.unstable_generateUtilityClasses)("MuiTab", ["root", "labelIcon", "textColorInherit", "textColorPrimary", "textColorSecondary", "selected", "disabled", "fullWidth", "wrapped", "iconWrapper"]);
  var tabClasses_default = tabClasses2;

  // node_modules/@mui/material/Tab/Tab.js
  var import_jsx_runtime231 = __toESM(require_jsx_runtime());
  var _excluded151 = ["className", "disabled", "disableFocusRipple", "fullWidth", "icon", "iconPosition", "indicator", "label", "onChange", "onClick", "onFocus", "selected", "selectionFollowsFocus", "textColor", "value", "wrapped"];
  var useUtilityClasses120 = (ownerState) => {
    const {
      classes,
      textColor,
      fullWidth,
      wrapped,
      icon,
      label,
      selected,
      disabled
    } = ownerState;
    const slots = {
      root: ["root", icon && label && "labelIcon", `textColor${capitalize_default(textColor)}`, fullWidth && "fullWidth", wrapped && "wrapped", selected && "selected", disabled && "disabled"],
      iconWrapper: ["iconWrapper"]
    };
    return (0, import_composeClasses111.unstable_composeClasses)(slots, getTabUtilityClass2, classes);
  };
  var TabRoot = styled_default(ButtonBase_default, {
    name: "MuiTab",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, ownerState.label && ownerState.icon && styles7.labelIcon, styles7[`textColor${capitalize_default(ownerState.textColor)}`], ownerState.fullWidth && styles7.fullWidth, ownerState.wrapped && styles7.wrapped];
    }
  })(({
    theme,
    ownerState
  }) => _extends({}, theme.typography.button, {
    maxWidth: 360,
    minWidth: 90,
    position: "relative",
    minHeight: 48,
    flexShrink: 0,
    padding: "12px 16px",
    overflow: "hidden",
    whiteSpace: "normal",
    textAlign: "center"
  }, ownerState.label && {
    flexDirection: ownerState.iconPosition === "top" || ownerState.iconPosition === "bottom" ? "column" : "row"
  }, {
    lineHeight: 1.25
  }, ownerState.icon && ownerState.label && {
    minHeight: 72,
    paddingTop: 9,
    paddingBottom: 9,
    [`& > .${tabClasses_default.iconWrapper}`]: _extends({}, ownerState.iconPosition === "top" && {
      marginBottom: 6
    }, ownerState.iconPosition === "bottom" && {
      marginTop: 6
    }, ownerState.iconPosition === "start" && {
      marginRight: theme.spacing(1)
    }, ownerState.iconPosition === "end" && {
      marginLeft: theme.spacing(1)
    })
  }, ownerState.textColor === "inherit" && {
    color: "inherit",
    opacity: 0.6,
    // same opacity as theme.palette.text.secondary
    [`&.${tabClasses_default.selected}`]: {
      opacity: 1
    },
    [`&.${tabClasses_default.disabled}`]: {
      opacity: (theme.vars || theme).palette.action.disabledOpacity
    }
  }, ownerState.textColor === "primary" && {
    color: (theme.vars || theme).palette.text.secondary,
    [`&.${tabClasses_default.selected}`]: {
      color: (theme.vars || theme).palette.primary.main
    },
    [`&.${tabClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.text.disabled
    }
  }, ownerState.textColor === "secondary" && {
    color: (theme.vars || theme).palette.text.secondary,
    [`&.${tabClasses_default.selected}`]: {
      color: (theme.vars || theme).palette.secondary.main
    },
    [`&.${tabClasses_default.disabled}`]: {
      color: (theme.vars || theme).palette.text.disabled
    }
  }, ownerState.fullWidth && {
    flexShrink: 1,
    flexGrow: 1,
    flexBasis: 0,
    maxWidth: "none"
  }, ownerState.wrapped && {
    fontSize: theme.typography.pxToRem(12)
  }));
  var Tab3 = /* @__PURE__ */ React237.forwardRef(function Tab4(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiTab"
    });
    const {
      className,
      disabled = false,
      disableFocusRipple = false,
      // eslint-disable-next-line react/prop-types
      fullWidth,
      icon: iconProp,
      iconPosition = "top",
      // eslint-disable-next-line react/prop-types
      indicator,
      label,
      onChange,
      onClick,
      onFocus,
      // eslint-disable-next-line react/prop-types
      selected,
      // eslint-disable-next-line react/prop-types
      selectionFollowsFocus,
      // eslint-disable-next-line react/prop-types
      textColor = "inherit",
      value,
      wrapped = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded151);
    const ownerState = _extends({}, props, {
      disabled,
      disableFocusRipple,
      selected,
      icon: !!iconProp,
      iconPosition,
      label: !!label,
      fullWidth,
      textColor,
      wrapped
    });
    const classes = useUtilityClasses120(ownerState);
    const icon = iconProp && label && /* @__PURE__ */ React237.isValidElement(iconProp) ? /* @__PURE__ */ React237.cloneElement(iconProp, {
      className: clsx_default(classes.iconWrapper, iconProp.props.className)
    }) : iconProp;
    const handleClick = (event) => {
      if (!selected && onChange) {
        onChange(event, value);
      }
      if (onClick) {
        onClick(event);
      }
    };
    const handleFocus = (event) => {
      if (selectionFollowsFocus && !selected && onChange) {
        onChange(event, value);
      }
      if (onFocus) {
        onFocus(event);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime231.jsxs)(TabRoot, _extends({
      focusRipple: !disableFocusRipple,
      className: clsx_default(classes.root, className),
      ref,
      role: "tab",
      "aria-selected": selected,
      disabled,
      onClick: handleClick,
      onFocus: handleFocus,
      ownerState,
      tabIndex: selected ? 0 : -1
    }, other, {
      children: [iconPosition === "top" || iconPosition === "start" ? /* @__PURE__ */ (0, import_jsx_runtime231.jsxs)(React237.Fragment, {
        children: [icon, label]
      }) : /* @__PURE__ */ (0, import_jsx_runtime231.jsxs)(React237.Fragment, {
        children: [label, icon]
      }), indicator]
    }));
  });
  true ? Tab3.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * This prop isn't supported.
     * Use the `component` prop if you need to change the children structure.
     */
    children: unsupportedProp_default,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types155.default.object,
    /**
     * @ignore
     */
    className: import_prop_types155.default.string,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types155.default.bool,
    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: import_prop_types155.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: import_prop_types155.default.bool,
    /**
     * The icon to display.
     */
    icon: import_prop_types155.default.oneOfType([import_prop_types155.default.element, import_prop_types155.default.string]),
    /**
     * The position of the icon relative to the label.
     * @default 'top'
     */
    iconPosition: import_prop_types155.default.oneOf(["bottom", "end", "start", "top"]),
    /**
     * The label element.
     */
    label: import_prop_types155.default.node,
    /**
     * @ignore
     */
    onChange: import_prop_types155.default.func,
    /**
     * @ignore
     */
    onClick: import_prop_types155.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types155.default.func,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types155.default.oneOfType([import_prop_types155.default.arrayOf(import_prop_types155.default.oneOfType([import_prop_types155.default.func, import_prop_types155.default.object, import_prop_types155.default.bool])), import_prop_types155.default.func, import_prop_types155.default.object]),
    /**
     * You can provide your own value. Otherwise, we fallback to the child position index.
     */
    value: import_prop_types155.default.any,
    /**
     * Tab labels appear in a single row.
     * They can use a second line if needed.
     * @default false
     */
    wrapped: import_prop_types155.default.bool
  } : void 0;
  var Tab_default = Tab3;

  // node_modules/@mui/material/Table/Table.js
  init_extends();
  var React239 = __toESM(require_react());
  var import_prop_types156 = __toESM(require_prop_types());
  var import_composeClasses112 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/Table/TableContext.js
  var React238 = __toESM(require_react());
  var TableContext = /* @__PURE__ */ React238.createContext();
  if (true) {
    TableContext.displayName = "TableContext";
  }
  var TableContext_default = TableContext;

  // node_modules/@mui/material/Table/tableClasses.js
  var import_utils260 = __toESM(require_utils());
  var import_generateUtilityClass123 = __toESM(require_generateUtilityClass3());
  function getTableUtilityClass(slot) {
    return (0, import_generateUtilityClass123.default)("MuiTable", slot);
  }
  var tableClasses = (0, import_utils260.unstable_generateUtilityClasses)("MuiTable", ["root", "stickyHeader"]);
  var tableClasses_default = tableClasses;

  // node_modules/@mui/material/Table/Table.js
  var import_jsx_runtime232 = __toESM(require_jsx_runtime());
  var _excluded152 = ["className", "component", "padding", "size", "stickyHeader"];
  var useUtilityClasses121 = (ownerState) => {
    const {
      classes,
      stickyHeader
    } = ownerState;
    const slots = {
      root: ["root", stickyHeader && "stickyHeader"]
    };
    return (0, import_composeClasses112.unstable_composeClasses)(slots, getTableUtilityClass, classes);
  };
  var TableRoot = styled_default("table", {
    name: "MuiTable",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, ownerState.stickyHeader && styles7.stickyHeader];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    display: "table",
    width: "100%",
    borderCollapse: "collapse",
    borderSpacing: 0,
    "& caption": _extends({}, theme.typography.body2, {
      padding: theme.spacing(2),
      color: (theme.vars || theme).palette.text.secondary,
      textAlign: "left",
      captionSide: "bottom"
    })
  }, ownerState.stickyHeader && {
    borderCollapse: "separate"
  }));
  var defaultComponent = "table";
  var Table = /* @__PURE__ */ React239.forwardRef(function Table2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiTable"
    });
    const {
      className,
      component = defaultComponent,
      padding = "normal",
      size: size2 = "medium",
      stickyHeader = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded152);
    const ownerState = _extends({}, props, {
      component,
      padding,
      size: size2,
      stickyHeader
    });
    const classes = useUtilityClasses121(ownerState);
    const table = React239.useMemo(() => ({
      padding,
      size: size2,
      stickyHeader
    }), [padding, size2, stickyHeader]);
    return /* @__PURE__ */ (0, import_jsx_runtime232.jsx)(TableContext_default.Provider, {
      value: table,
      children: /* @__PURE__ */ (0, import_jsx_runtime232.jsx)(TableRoot, _extends({
        as: component,
        role: component === defaultComponent ? null : "table",
        ref,
        className: clsx_default(classes.root, className),
        ownerState
      }, other))
    });
  });
  true ? Table.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the table, normally `TableHead` and `TableBody`.
     */
    children: import_prop_types156.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types156.default.object,
    /**
     * @ignore
     */
    className: import_prop_types156.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types156.default.elementType,
    /**
     * Allows TableCells to inherit padding of the Table.
     * @default 'normal'
     */
    padding: import_prop_types156.default.oneOf(["checkbox", "none", "normal"]),
    /**
     * Allows TableCells to inherit size of the Table.
     * @default 'medium'
     */
    size: import_prop_types156.default.oneOfType([import_prop_types156.default.oneOf(["medium", "small"]), import_prop_types156.default.string]),
    /**
     * Set the header sticky.
     *
     * ⚠️ It doesn't work with IE11.
     * @default false
     */
    stickyHeader: import_prop_types156.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types156.default.oneOfType([import_prop_types156.default.arrayOf(import_prop_types156.default.oneOfType([import_prop_types156.default.func, import_prop_types156.default.object, import_prop_types156.default.bool])), import_prop_types156.default.func, import_prop_types156.default.object])
  } : void 0;
  var Table_default = Table;

  // node_modules/@mui/material/TableBody/TableBody.js
  init_extends();
  var React241 = __toESM(require_react());
  var import_prop_types157 = __toESM(require_prop_types());
  var import_composeClasses113 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/Table/Tablelvl2Context.js
  var React240 = __toESM(require_react());
  var Tablelvl2Context = /* @__PURE__ */ React240.createContext();
  if (true) {
    Tablelvl2Context.displayName = "Tablelvl2Context";
  }
  var Tablelvl2Context_default = Tablelvl2Context;

  // node_modules/@mui/material/TableBody/tableBodyClasses.js
  var import_utils261 = __toESM(require_utils());
  var import_generateUtilityClass124 = __toESM(require_generateUtilityClass3());
  function getTableBodyUtilityClass(slot) {
    return (0, import_generateUtilityClass124.default)("MuiTableBody", slot);
  }
  var tableBodyClasses = (0, import_utils261.unstable_generateUtilityClasses)("MuiTableBody", ["root"]);
  var tableBodyClasses_default = tableBodyClasses;

  // node_modules/@mui/material/TableBody/TableBody.js
  var import_jsx_runtime233 = __toESM(require_jsx_runtime());
  var _excluded153 = ["className", "component"];
  var useUtilityClasses122 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return (0, import_composeClasses113.unstable_composeClasses)(slots, getTableBodyUtilityClass, classes);
  };
  var TableBodyRoot = styled_default("tbody", {
    name: "MuiTableBody",
    slot: "Root",
    overridesResolver: (props, styles7) => styles7.root
  })({
    display: "table-row-group"
  });
  var tablelvl2 = {
    variant: "body"
  };
  var defaultComponent2 = "tbody";
  var TableBody = /* @__PURE__ */ React241.forwardRef(function TableBody2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiTableBody"
    });
    const {
      className,
      component = defaultComponent2
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded153);
    const ownerState = _extends({}, props, {
      component
    });
    const classes = useUtilityClasses122(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime233.jsx)(Tablelvl2Context_default.Provider, {
      value: tablelvl2,
      children: /* @__PURE__ */ (0, import_jsx_runtime233.jsx)(TableBodyRoot, _extends({
        className: clsx_default(classes.root, className),
        as: component,
        ref,
        role: component === defaultComponent2 ? null : "rowgroup",
        ownerState
      }, other))
    });
  });
  true ? TableBody.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component, normally `TableRow`.
     */
    children: import_prop_types157.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types157.default.object,
    /**
     * @ignore
     */
    className: import_prop_types157.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types157.default.elementType,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types157.default.oneOfType([import_prop_types157.default.arrayOf(import_prop_types157.default.oneOfType([import_prop_types157.default.func, import_prop_types157.default.object, import_prop_types157.default.bool])), import_prop_types157.default.func, import_prop_types157.default.object])
  } : void 0;
  var TableBody_default = TableBody;

  // node_modules/@mui/material/TableCell/TableCell.js
  init_extends();
  var React242 = __toESM(require_react());
  var import_prop_types158 = __toESM(require_prop_types());
  var import_composeClasses114 = __toESM(require_composeClasses3());
  var import_system47 = __toESM(require_system());

  // node_modules/@mui/material/TableCell/tableCellClasses.js
  var import_utils262 = __toESM(require_utils());
  var import_generateUtilityClass125 = __toESM(require_generateUtilityClass3());
  function getTableCellUtilityClass(slot) {
    return (0, import_generateUtilityClass125.default)("MuiTableCell", slot);
  }
  var tableCellClasses = (0, import_utils262.unstable_generateUtilityClasses)("MuiTableCell", ["root", "head", "body", "footer", "sizeSmall", "sizeMedium", "paddingCheckbox", "paddingNone", "alignLeft", "alignCenter", "alignRight", "alignJustify", "stickyHeader"]);
  var tableCellClasses_default = tableCellClasses;

  // node_modules/@mui/material/TableCell/TableCell.js
  var import_jsx_runtime234 = __toESM(require_jsx_runtime());
  var _excluded154 = ["align", "className", "component", "padding", "scope", "size", "sortDirection", "variant"];
  var useUtilityClasses123 = (ownerState) => {
    const {
      classes,
      variant,
      align,
      padding,
      size: size2,
      stickyHeader
    } = ownerState;
    const slots = {
      root: ["root", variant, stickyHeader && "stickyHeader", align !== "inherit" && `align${capitalize_default(align)}`, padding !== "normal" && `padding${capitalize_default(padding)}`, `size${capitalize_default(size2)}`]
    };
    return (0, import_composeClasses114.unstable_composeClasses)(slots, getTableCellUtilityClass, classes);
  };
  var TableCellRoot = styled_default("td", {
    name: "MuiTableCell",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, styles7[ownerState.variant], styles7[`size${capitalize_default(ownerState.size)}`], ownerState.padding !== "normal" && styles7[`padding${capitalize_default(ownerState.padding)}`], ownerState.align !== "inherit" && styles7[`align${capitalize_default(ownerState.align)}`], ownerState.stickyHeader && styles7.stickyHeader];
    }
  })(({
    theme,
    ownerState
  }) => _extends({}, theme.typography.body2, {
    display: "table-cell",
    verticalAlign: "inherit",
    // Workaround for a rendering bug with spanned columns in Chrome 62.0.
    // Removes the alpha (sets it to 1), and lightens or darkens the theme color.
    borderBottom: theme.vars ? `1px solid ${theme.vars.palette.TableCell.border}` : `1px solid
    ${theme.palette.mode === "light" ? (0, import_system47.lighten)((0, import_system47.alpha)(theme.palette.divider, 1), 0.88) : (0, import_system47.darken)((0, import_system47.alpha)(theme.palette.divider, 1), 0.68)}`,
    textAlign: "left",
    padding: 16
  }, ownerState.variant === "head" && {
    color: (theme.vars || theme).palette.text.primary,
    lineHeight: theme.typography.pxToRem(24),
    fontWeight: theme.typography.fontWeightMedium
  }, ownerState.variant === "body" && {
    color: (theme.vars || theme).palette.text.primary
  }, ownerState.variant === "footer" && {
    color: (theme.vars || theme).palette.text.secondary,
    lineHeight: theme.typography.pxToRem(21),
    fontSize: theme.typography.pxToRem(12)
  }, ownerState.size === "small" && {
    padding: "6px 16px",
    [`&.${tableCellClasses_default.paddingCheckbox}`]: {
      width: 24,
      // prevent the checkbox column from growing
      padding: "0 12px 0 16px",
      "& > *": {
        padding: 0
      }
    }
  }, ownerState.padding === "checkbox" && {
    width: 48,
    // prevent the checkbox column from growing
    padding: "0 0 0 4px"
  }, ownerState.padding === "none" && {
    padding: 0
  }, ownerState.align === "left" && {
    textAlign: "left"
  }, ownerState.align === "center" && {
    textAlign: "center"
  }, ownerState.align === "right" && {
    textAlign: "right",
    flexDirection: "row-reverse"
  }, ownerState.align === "justify" && {
    textAlign: "justify"
  }, ownerState.stickyHeader && {
    position: "sticky",
    top: 0,
    zIndex: 2,
    backgroundColor: (theme.vars || theme).palette.background.default
  }));
  var TableCell = /* @__PURE__ */ React242.forwardRef(function TableCell2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiTableCell"
    });
    const {
      align = "inherit",
      className,
      component: componentProp,
      padding: paddingProp,
      scope: scopeProp,
      size: sizeProp,
      sortDirection,
      variant: variantProp
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded154);
    const table = React242.useContext(TableContext_default);
    const tablelvl24 = React242.useContext(Tablelvl2Context_default);
    const isHeadCell = tablelvl24 && tablelvl24.variant === "head";
    let component;
    if (componentProp) {
      component = componentProp;
    } else {
      component = isHeadCell ? "th" : "td";
    }
    let scope = scopeProp;
    if (component === "td") {
      scope = void 0;
    } else if (!scope && isHeadCell) {
      scope = "col";
    }
    const variant = variantProp || tablelvl24 && tablelvl24.variant;
    const ownerState = _extends({}, props, {
      align,
      component,
      padding: paddingProp || (table && table.padding ? table.padding : "normal"),
      size: sizeProp || (table && table.size ? table.size : "medium"),
      sortDirection,
      stickyHeader: variant === "head" && table && table.stickyHeader,
      variant
    });
    const classes = useUtilityClasses123(ownerState);
    let ariaSort = null;
    if (sortDirection) {
      ariaSort = sortDirection === "asc" ? "ascending" : "descending";
    }
    return /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(TableCellRoot, _extends({
      as: component,
      ref,
      className: clsx_default(classes.root, className),
      "aria-sort": ariaSort,
      scope,
      ownerState
    }, other));
  });
  true ? TableCell.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Set the text-align on the table cell content.
     *
     * Monetary or generally number fields **should be right aligned** as that allows
     * you to add them up quickly in your head without having to worry about decimals.
     * @default 'inherit'
     */
    align: import_prop_types158.default.oneOf(["center", "inherit", "justify", "left", "right"]),
    /**
     * The content of the component.
     */
    children: import_prop_types158.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types158.default.object,
    /**
     * @ignore
     */
    className: import_prop_types158.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types158.default.elementType,
    /**
     * Sets the padding applied to the cell.
     * The prop defaults to the value (`'default'`) inherited from the parent Table component.
     */
    padding: import_prop_types158.default.oneOf(["checkbox", "none", "normal"]),
    /**
     * Set scope attribute.
     */
    scope: import_prop_types158.default.string,
    /**
     * Specify the size of the cell.
     * The prop defaults to the value (`'medium'`) inherited from the parent Table component.
     */
    size: import_prop_types158.default.oneOfType([import_prop_types158.default.oneOf(["medium", "small"]), import_prop_types158.default.string]),
    /**
     * Set aria-sort direction.
     */
    sortDirection: import_prop_types158.default.oneOf(["asc", "desc", false]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types158.default.oneOfType([import_prop_types158.default.arrayOf(import_prop_types158.default.oneOfType([import_prop_types158.default.func, import_prop_types158.default.object, import_prop_types158.default.bool])), import_prop_types158.default.func, import_prop_types158.default.object]),
    /**
     * Specify the cell type.
     * The prop defaults to the value inherited from the parent TableHead, TableBody, or TableFooter components.
     */
    variant: import_prop_types158.default.oneOfType([import_prop_types158.default.oneOf(["body", "footer", "head"]), import_prop_types158.default.string])
  } : void 0;
  var TableCell_default = TableCell;

  // node_modules/@mui/material/TableContainer/TableContainer.js
  init_extends();
  var React243 = __toESM(require_react());
  var import_prop_types159 = __toESM(require_prop_types());
  var import_composeClasses115 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/TableContainer/tableContainerClasses.js
  var import_utils263 = __toESM(require_utils());
  var import_generateUtilityClass126 = __toESM(require_generateUtilityClass3());
  function getTableContainerUtilityClass(slot) {
    return (0, import_generateUtilityClass126.default)("MuiTableContainer", slot);
  }
  var tableContainerClasses = (0, import_utils263.unstable_generateUtilityClasses)("MuiTableContainer", ["root"]);
  var tableContainerClasses_default = tableContainerClasses;

  // node_modules/@mui/material/TableContainer/TableContainer.js
  var import_jsx_runtime235 = __toESM(require_jsx_runtime());
  var _excluded155 = ["className", "component"];
  var useUtilityClasses124 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return (0, import_composeClasses115.unstable_composeClasses)(slots, getTableContainerUtilityClass, classes);
  };
  var TableContainerRoot = styled_default("div", {
    name: "MuiTableContainer",
    slot: "Root",
    overridesResolver: (props, styles7) => styles7.root
  })({
    width: "100%",
    overflowX: "auto"
  });
  var TableContainer = /* @__PURE__ */ React243.forwardRef(function TableContainer2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiTableContainer"
    });
    const {
      className,
      component = "div"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded155);
    const ownerState = _extends({}, props, {
      component
    });
    const classes = useUtilityClasses124(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(TableContainerRoot, _extends({
      ref,
      as: component,
      className: clsx_default(classes.root, className),
      ownerState
    }, other));
  });
  true ? TableContainer.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component, normally `Table`.
     */
    children: import_prop_types159.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types159.default.object,
    /**
     * @ignore
     */
    className: import_prop_types159.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types159.default.elementType,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types159.default.oneOfType([import_prop_types159.default.arrayOf(import_prop_types159.default.oneOfType([import_prop_types159.default.func, import_prop_types159.default.object, import_prop_types159.default.bool])), import_prop_types159.default.func, import_prop_types159.default.object])
  } : void 0;
  var TableContainer_default = TableContainer;

  // node_modules/@mui/material/TableFooter/TableFooter.js
  init_extends();
  var React244 = __toESM(require_react());
  var import_prop_types160 = __toESM(require_prop_types());
  var import_composeClasses116 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/TableFooter/tableFooterClasses.js
  var import_utils264 = __toESM(require_utils());
  var import_generateUtilityClass127 = __toESM(require_generateUtilityClass3());
  function getTableFooterUtilityClass(slot) {
    return (0, import_generateUtilityClass127.default)("MuiTableFooter", slot);
  }
  var tableFooterClasses = (0, import_utils264.unstable_generateUtilityClasses)("MuiTableFooter", ["root"]);
  var tableFooterClasses_default = tableFooterClasses;

  // node_modules/@mui/material/TableFooter/TableFooter.js
  var import_jsx_runtime236 = __toESM(require_jsx_runtime());
  var _excluded156 = ["className", "component"];
  var useUtilityClasses125 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return (0, import_composeClasses116.unstable_composeClasses)(slots, getTableFooterUtilityClass, classes);
  };
  var TableFooterRoot = styled_default("tfoot", {
    name: "MuiTableFooter",
    slot: "Root",
    overridesResolver: (props, styles7) => styles7.root
  })({
    display: "table-footer-group"
  });
  var tablelvl22 = {
    variant: "footer"
  };
  var defaultComponent3 = "tfoot";
  var TableFooter = /* @__PURE__ */ React244.forwardRef(function TableFooter2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiTableFooter"
    });
    const {
      className,
      component = defaultComponent3
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded156);
    const ownerState = _extends({}, props, {
      component
    });
    const classes = useUtilityClasses125(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime236.jsx)(Tablelvl2Context_default.Provider, {
      value: tablelvl22,
      children: /* @__PURE__ */ (0, import_jsx_runtime236.jsx)(TableFooterRoot, _extends({
        as: component,
        className: clsx_default(classes.root, className),
        ref,
        role: component === defaultComponent3 ? null : "rowgroup",
        ownerState
      }, other))
    });
  });
  true ? TableFooter.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component, normally `TableRow`.
     */
    children: import_prop_types160.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types160.default.object,
    /**
     * @ignore
     */
    className: import_prop_types160.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types160.default.elementType,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types160.default.oneOfType([import_prop_types160.default.arrayOf(import_prop_types160.default.oneOfType([import_prop_types160.default.func, import_prop_types160.default.object, import_prop_types160.default.bool])), import_prop_types160.default.func, import_prop_types160.default.object])
  } : void 0;
  var TableFooter_default = TableFooter;

  // node_modules/@mui/material/TableHead/TableHead.js
  init_extends();
  var React245 = __toESM(require_react());
  var import_prop_types161 = __toESM(require_prop_types());
  var import_composeClasses117 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/TableHead/tableHeadClasses.js
  var import_utils265 = __toESM(require_utils());
  var import_generateUtilityClass128 = __toESM(require_generateUtilityClass3());
  function getTableHeadUtilityClass(slot) {
    return (0, import_generateUtilityClass128.default)("MuiTableHead", slot);
  }
  var tableHeadClasses = (0, import_utils265.unstable_generateUtilityClasses)("MuiTableHead", ["root"]);
  var tableHeadClasses_default = tableHeadClasses;

  // node_modules/@mui/material/TableHead/TableHead.js
  var import_jsx_runtime237 = __toESM(require_jsx_runtime());
  var _excluded157 = ["className", "component"];
  var useUtilityClasses126 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return (0, import_composeClasses117.unstable_composeClasses)(slots, getTableHeadUtilityClass, classes);
  };
  var TableHeadRoot = styled_default("thead", {
    name: "MuiTableHead",
    slot: "Root",
    overridesResolver: (props, styles7) => styles7.root
  })({
    display: "table-header-group"
  });
  var tablelvl23 = {
    variant: "head"
  };
  var defaultComponent4 = "thead";
  var TableHead = /* @__PURE__ */ React245.forwardRef(function TableHead2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiTableHead"
    });
    const {
      className,
      component = defaultComponent4
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded157);
    const ownerState = _extends({}, props, {
      component
    });
    const classes = useUtilityClasses126(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime237.jsx)(Tablelvl2Context_default.Provider, {
      value: tablelvl23,
      children: /* @__PURE__ */ (0, import_jsx_runtime237.jsx)(TableHeadRoot, _extends({
        as: component,
        className: clsx_default(classes.root, className),
        ref,
        role: component === defaultComponent4 ? null : "rowgroup",
        ownerState
      }, other))
    });
  });
  true ? TableHead.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component, normally `TableRow`.
     */
    children: import_prop_types161.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types161.default.object,
    /**
     * @ignore
     */
    className: import_prop_types161.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types161.default.elementType,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types161.default.oneOfType([import_prop_types161.default.arrayOf(import_prop_types161.default.oneOfType([import_prop_types161.default.func, import_prop_types161.default.object, import_prop_types161.default.bool])), import_prop_types161.default.func, import_prop_types161.default.object])
  } : void 0;
  var TableHead_default = TableHead;

  // node_modules/@mui/material/TablePagination/TablePagination.js
  init_extends();
  var React250 = __toESM(require_react());
  var import_prop_types164 = __toESM(require_prop_types());
  var import_utils268 = __toESM(require_utils());

  // node_modules/@mui/material/Toolbar/Toolbar.js
  init_extends();
  var React246 = __toESM(require_react());
  var import_prop_types162 = __toESM(require_prop_types());
  var import_composeClasses118 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/Toolbar/toolbarClasses.js
  var import_utils266 = __toESM(require_utils());
  var import_generateUtilityClass129 = __toESM(require_generateUtilityClass3());
  function getToolbarUtilityClass(slot) {
    return (0, import_generateUtilityClass129.default)("MuiToolbar", slot);
  }
  var toolbarClasses = (0, import_utils266.unstable_generateUtilityClasses)("MuiToolbar", ["root", "gutters", "regular", "dense"]);
  var toolbarClasses_default = toolbarClasses;

  // node_modules/@mui/material/Toolbar/Toolbar.js
  var import_jsx_runtime238 = __toESM(require_jsx_runtime());
  var _excluded158 = ["className", "component", "disableGutters", "variant"];
  var useUtilityClasses127 = (ownerState) => {
    const {
      classes,
      disableGutters,
      variant
    } = ownerState;
    const slots = {
      root: ["root", !disableGutters && "gutters", variant]
    };
    return (0, import_composeClasses118.unstable_composeClasses)(slots, getToolbarUtilityClass, classes);
  };
  var ToolbarRoot = styled_default("div", {
    name: "MuiToolbar",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, !ownerState.disableGutters && styles7.gutters, styles7[ownerState.variant]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    position: "relative",
    display: "flex",
    alignItems: "center"
  }, !ownerState.disableGutters && {
    paddingLeft: theme.spacing(2),
    paddingRight: theme.spacing(2),
    [theme.breakpoints.up("sm")]: {
      paddingLeft: theme.spacing(3),
      paddingRight: theme.spacing(3)
    }
  }, ownerState.variant === "dense" && {
    minHeight: 48
  }), ({
    theme,
    ownerState
  }) => ownerState.variant === "regular" && theme.mixins.toolbar);
  var Toolbar = /* @__PURE__ */ React246.forwardRef(function Toolbar2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiToolbar"
    });
    const {
      className,
      component = "div",
      disableGutters = false,
      variant = "regular"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded158);
    const ownerState = _extends({}, props, {
      component,
      disableGutters,
      variant
    });
    const classes = useUtilityClasses127(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime238.jsx)(ToolbarRoot, _extends({
      as: component,
      className: clsx_default(classes.root, className),
      ref,
      ownerState
    }, other));
  });
  true ? Toolbar.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`.
     * The Toolbar is a flex container, allowing flex item properties to be used to lay out the children.
     */
    children: import_prop_types162.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types162.default.object,
    /**
     * @ignore
     */
    className: import_prop_types162.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types162.default.elementType,
    /**
     * If `true`, disables gutter padding.
     * @default false
     */
    disableGutters: import_prop_types162.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types162.default.oneOfType([import_prop_types162.default.arrayOf(import_prop_types162.default.oneOfType([import_prop_types162.default.func, import_prop_types162.default.object, import_prop_types162.default.bool])), import_prop_types162.default.func, import_prop_types162.default.object]),
    /**
     * The variant to use.
     * @default 'regular'
     */
    variant: import_prop_types162.default.oneOfType([import_prop_types162.default.oneOf(["dense", "regular"]), import_prop_types162.default.string])
  } : void 0;
  var Toolbar_default = Toolbar;

  // node_modules/@mui/material/TablePagination/TablePaginationActions.js
  init_extends();
  var React249 = __toESM(require_react());
  var import_prop_types163 = __toESM(require_prop_types());

  // node_modules/@mui/material/internal/svg-icons/KeyboardArrowLeft.js
  var React247 = __toESM(require_react());
  var import_jsx_runtime239 = __toESM(require_jsx_runtime());
  var KeyboardArrowLeft_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime239.jsx)("path", {
    d: "M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"
  }), "KeyboardArrowLeft");

  // node_modules/@mui/material/internal/svg-icons/KeyboardArrowRight.js
  var React248 = __toESM(require_react());
  var import_jsx_runtime240 = __toESM(require_jsx_runtime());
  var KeyboardArrowRight_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime240.jsx)("path", {
    d: "M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"
  }), "KeyboardArrowRight");

  // node_modules/@mui/material/TablePagination/TablePaginationActions.js
  var import_jsx_runtime241 = __toESM(require_jsx_runtime());
  var import_jsx_runtime242 = __toESM(require_jsx_runtime());
  var _LastPageIcon;
  var _FirstPageIcon;
  var _KeyboardArrowRight;
  var _KeyboardArrowLeft;
  var _KeyboardArrowLeft2;
  var _KeyboardArrowRight2;
  var _FirstPageIcon2;
  var _LastPageIcon2;
  var _excluded159 = ["backIconButtonProps", "count", "getItemAriaLabel", "nextIconButtonProps", "onPageChange", "page", "rowsPerPage", "showFirstButton", "showLastButton"];
  var TablePaginationActions3 = /* @__PURE__ */ React249.forwardRef(function TablePaginationActions4(props, ref) {
    const {
      backIconButtonProps,
      count,
      getItemAriaLabel,
      nextIconButtonProps,
      onPageChange,
      page,
      rowsPerPage,
      showFirstButton,
      showLastButton
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded159);
    const theme = useTheme4();
    const handleFirstPageButtonClick = (event) => {
      onPageChange(event, 0);
    };
    const handleBackButtonClick = (event) => {
      onPageChange(event, page - 1);
    };
    const handleNextButtonClick = (event) => {
      onPageChange(event, page + 1);
    };
    const handleLastPageButtonClick = (event) => {
      onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));
    };
    return /* @__PURE__ */ (0, import_jsx_runtime242.jsxs)("div", _extends({
      ref
    }, other, {
      children: [showFirstButton && /* @__PURE__ */ (0, import_jsx_runtime241.jsx)(IconButton_default, {
        onClick: handleFirstPageButtonClick,
        disabled: page === 0,
        "aria-label": getItemAriaLabel("first", page),
        title: getItemAriaLabel("first", page),
        children: theme.direction === "rtl" ? _LastPageIcon || (_LastPageIcon = /* @__PURE__ */ (0, import_jsx_runtime241.jsx)(LastPage_default, {})) : _FirstPageIcon || (_FirstPageIcon = /* @__PURE__ */ (0, import_jsx_runtime241.jsx)(FirstPage_default, {}))
      }), /* @__PURE__ */ (0, import_jsx_runtime241.jsx)(IconButton_default, _extends({
        onClick: handleBackButtonClick,
        disabled: page === 0,
        color: "inherit",
        "aria-label": getItemAriaLabel("previous", page),
        title: getItemAriaLabel("previous", page)
      }, backIconButtonProps, {
        children: theme.direction === "rtl" ? _KeyboardArrowRight || (_KeyboardArrowRight = /* @__PURE__ */ (0, import_jsx_runtime241.jsx)(KeyboardArrowRight_default, {})) : _KeyboardArrowLeft || (_KeyboardArrowLeft = /* @__PURE__ */ (0, import_jsx_runtime241.jsx)(KeyboardArrowLeft_default, {}))
      })), /* @__PURE__ */ (0, import_jsx_runtime241.jsx)(IconButton_default, _extends({
        onClick: handleNextButtonClick,
        disabled: count !== -1 ? page >= Math.ceil(count / rowsPerPage) - 1 : false,
        color: "inherit",
        "aria-label": getItemAriaLabel("next", page),
        title: getItemAriaLabel("next", page)
      }, nextIconButtonProps, {
        children: theme.direction === "rtl" ? _KeyboardArrowLeft2 || (_KeyboardArrowLeft2 = /* @__PURE__ */ (0, import_jsx_runtime241.jsx)(KeyboardArrowLeft_default, {})) : _KeyboardArrowRight2 || (_KeyboardArrowRight2 = /* @__PURE__ */ (0, import_jsx_runtime241.jsx)(KeyboardArrowRight_default, {}))
      })), showLastButton && /* @__PURE__ */ (0, import_jsx_runtime241.jsx)(IconButton_default, {
        onClick: handleLastPageButtonClick,
        disabled: page >= Math.ceil(count / rowsPerPage) - 1,
        "aria-label": getItemAriaLabel("last", page),
        title: getItemAriaLabel("last", page),
        children: theme.direction === "rtl" ? _FirstPageIcon2 || (_FirstPageIcon2 = /* @__PURE__ */ (0, import_jsx_runtime241.jsx)(FirstPage_default, {})) : _LastPageIcon2 || (_LastPageIcon2 = /* @__PURE__ */ (0, import_jsx_runtime241.jsx)(LastPage_default, {}))
      })]
    }));
  });
  true ? TablePaginationActions3.propTypes = {
    /**
     * Props applied to the back arrow [`IconButton`](/material-ui/api/icon-button/) element.
     */
    backIconButtonProps: import_prop_types163.default.object,
    /**
     * The total number of rows.
     */
    count: import_prop_types163.default.number.isRequired,
    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the current page.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     *
     * @param {string} type The link or button type to format ('page' | 'first' | 'last' | 'next' | 'previous'). Defaults to 'page'.
     * @param {number} page The page number to format.
     * @returns {string}
     */
    getItemAriaLabel: import_prop_types163.default.func.isRequired,
    /**
     * Props applied to the next arrow [`IconButton`](/material-ui/api/icon-button/) element.
     */
    nextIconButtonProps: import_prop_types163.default.object,
    /**
     * Callback fired when the page is changed.
     *
     * @param {object} event The event source of the callback.
     * @param {number} page The page selected.
     */
    onPageChange: import_prop_types163.default.func.isRequired,
    /**
     * The zero-based index of the current page.
     */
    page: import_prop_types163.default.number.isRequired,
    /**
     * The number of rows per page.
     */
    rowsPerPage: import_prop_types163.default.number.isRequired,
    /**
     * If `true`, show the first-page button.
     */
    showFirstButton: import_prop_types163.default.bool.isRequired,
    /**
     * If `true`, show the last-page button.
     */
    showLastButton: import_prop_types163.default.bool.isRequired
  } : void 0;
  var TablePaginationActions_default = TablePaginationActions3;

  // node_modules/@mui/material/TablePagination/tablePaginationClasses.js
  var import_utils267 = __toESM(require_utils());
  var import_generateUtilityClass130 = __toESM(require_generateUtilityClass3());
  function getTablePaginationUtilityClass2(slot) {
    return (0, import_generateUtilityClass130.default)("MuiTablePagination", slot);
  }
  var tablePaginationClasses2 = (0, import_utils267.unstable_generateUtilityClasses)("MuiTablePagination", ["root", "toolbar", "spacer", "selectLabel", "selectRoot", "select", "selectIcon", "input", "menuItem", "displayedRows", "actions"]);
  var tablePaginationClasses_default = tablePaginationClasses2;

  // node_modules/@mui/material/TablePagination/TablePagination.js
  var import_jsx_runtime243 = __toESM(require_jsx_runtime());
  var import_react10 = __toESM(require_react());
  var import_jsx_runtime244 = __toESM(require_jsx_runtime());
  var _InputBase;
  var _excluded160 = ["ActionsComponent", "backIconButtonProps", "className", "colSpan", "component", "count", "getItemAriaLabel", "labelDisplayedRows", "labelRowsPerPage", "nextIconButtonProps", "onPageChange", "onRowsPerPageChange", "page", "rowsPerPage", "rowsPerPageOptions", "SelectProps", "showFirstButton", "showLastButton"];
  var TablePaginationRoot = styled_default(TableCell_default, {
    name: "MuiTablePagination",
    slot: "Root",
    overridesResolver: (props, styles7) => styles7.root
  })(({
    theme
  }) => ({
    overflow: "auto",
    color: (theme.vars || theme).palette.text.primary,
    fontSize: theme.typography.pxToRem(14),
    // Increase the specificity to override TableCell.
    "&:last-child": {
      padding: 0
    }
  }));
  var TablePaginationToolbar = styled_default(Toolbar_default, {
    name: "MuiTablePagination",
    slot: "Toolbar",
    overridesResolver: (props, styles7) => _extends({
      [`& .${tablePaginationClasses_default.actions}`]: styles7.actions
    }, styles7.toolbar)
  })(({
    theme
  }) => ({
    minHeight: 52,
    paddingRight: 2,
    [`${theme.breakpoints.up("xs")} and (orientation: landscape)`]: {
      minHeight: 52
    },
    [theme.breakpoints.up("sm")]: {
      minHeight: 52,
      paddingRight: 2
    },
    [`& .${tablePaginationClasses_default.actions}`]: {
      flexShrink: 0,
      marginLeft: 20
    }
  }));
  var TablePaginationSpacer = styled_default("div", {
    name: "MuiTablePagination",
    slot: "Spacer",
    overridesResolver: (props, styles7) => styles7.spacer
  })({
    flex: "1 1 100%"
  });
  var TablePaginationSelectLabel = styled_default("p", {
    name: "MuiTablePagination",
    slot: "SelectLabel",
    overridesResolver: (props, styles7) => styles7.selectLabel
  })(({
    theme
  }) => _extends({}, theme.typography.body2, {
    flexShrink: 0
  }));
  var TablePaginationSelect = styled_default(Select_default, {
    name: "MuiTablePagination",
    slot: "Select",
    overridesResolver: (props, styles7) => _extends({
      [`& .${tablePaginationClasses_default.selectIcon}`]: styles7.selectIcon,
      [`& .${tablePaginationClasses_default.select}`]: styles7.select
    }, styles7.input, styles7.selectRoot)
  })({
    color: "inherit",
    fontSize: "inherit",
    flexShrink: 0,
    marginRight: 32,
    marginLeft: 8,
    [`& .${tablePaginationClasses_default.select}`]: {
      paddingLeft: 8,
      paddingRight: 24,
      textAlign: "right",
      textAlignLast: "right"
      // Align <select> on Chrome.
    }
  });
  var TablePaginationMenuItem = styled_default(MenuItem_default, {
    name: "MuiTablePagination",
    slot: "MenuItem",
    overridesResolver: (props, styles7) => styles7.menuItem
  })({});
  var TablePaginationDisplayedRows = styled_default("p", {
    name: "MuiTablePagination",
    slot: "DisplayedRows",
    overridesResolver: (props, styles7) => styles7.displayedRows
  })(({
    theme
  }) => _extends({}, theme.typography.body2, {
    flexShrink: 0
  }));
  function defaultLabelDisplayedRows2({
    from: from2,
    to,
    count
  }) {
    return `${from2}\u2013${to} of ${count !== -1 ? count : `more than ${to}`}`;
  }
  function defaultGetAriaLabel4(type) {
    return `Go to ${type} page`;
  }
  var useUtilityClasses128 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"],
      toolbar: ["toolbar"],
      spacer: ["spacer"],
      selectLabel: ["selectLabel"],
      select: ["select"],
      input: ["input"],
      selectIcon: ["selectIcon"],
      menuItem: ["menuItem"],
      displayedRows: ["displayedRows"],
      actions: ["actions"]
    };
    return (0, base_exports.unstable_composeClasses)(slots, getTablePaginationUtilityClass2, classes);
  };
  var TablePagination3 = /* @__PURE__ */ React250.forwardRef(function TablePagination4(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiTablePagination"
    });
    const {
      ActionsComponent = TablePaginationActions_default,
      backIconButtonProps,
      className,
      colSpan: colSpanProp,
      component = TableCell_default,
      count,
      getItemAriaLabel = defaultGetAriaLabel4,
      labelDisplayedRows = defaultLabelDisplayedRows2,
      labelRowsPerPage = "Rows per page:",
      nextIconButtonProps,
      onPageChange,
      onRowsPerPageChange,
      page,
      rowsPerPage,
      rowsPerPageOptions = [10, 25, 50, 100],
      SelectProps = {},
      showFirstButton = false,
      showLastButton = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded160);
    const ownerState = props;
    const classes = useUtilityClasses128(ownerState);
    const MenuItemComponent = SelectProps.native ? "option" : TablePaginationMenuItem;
    let colSpan;
    if (component === TableCell_default || component === "td") {
      colSpan = colSpanProp || 1e3;
    }
    const selectId = useId_default(SelectProps.id);
    const labelId = useId_default(SelectProps.labelId);
    const getLabelDisplayedRowsTo = () => {
      if (count === -1) {
        return (page + 1) * rowsPerPage;
      }
      return rowsPerPage === -1 ? count : Math.min(count, (page + 1) * rowsPerPage);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(TablePaginationRoot, _extends({
      colSpan,
      ref,
      as: component,
      ownerState,
      className: clsx_default(classes.root, className)
    }, other, {
      children: /* @__PURE__ */ (0, import_jsx_runtime244.jsxs)(TablePaginationToolbar, {
        className: classes.toolbar,
        children: [/* @__PURE__ */ (0, import_jsx_runtime243.jsx)(TablePaginationSpacer, {
          className: classes.spacer
        }), rowsPerPageOptions.length > 1 && /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(TablePaginationSelectLabel, {
          className: classes.selectLabel,
          id: labelId,
          children: labelRowsPerPage
        }), rowsPerPageOptions.length > 1 && /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(TablePaginationSelect, _extends({
          variant: "standard"
        }, !SelectProps.variant && {
          input: _InputBase || (_InputBase = /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(InputBase_default, {}))
        }, {
          value: rowsPerPage,
          onChange: onRowsPerPageChange,
          id: selectId,
          labelId
        }, SelectProps, {
          classes: _extends({}, SelectProps.classes, {
            // TODO v5 remove `classes.input`
            root: clsx_default(classes.input, classes.selectRoot, (SelectProps.classes || {}).root),
            select: clsx_default(classes.select, (SelectProps.classes || {}).select),
            // TODO v5 remove `selectIcon`
            icon: clsx_default(classes.selectIcon, (SelectProps.classes || {}).icon)
          }),
          children: rowsPerPageOptions.map((rowsPerPageOption) => /* @__PURE__ */ (0, import_react10.createElement)(MenuItemComponent, _extends({}, !isHostComponent(MenuItemComponent) && {
            ownerState
          }, {
            className: classes.menuItem,
            key: rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption,
            value: rowsPerPageOption.value ? rowsPerPageOption.value : rowsPerPageOption
          }), rowsPerPageOption.label ? rowsPerPageOption.label : rowsPerPageOption))
        })), /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(TablePaginationDisplayedRows, {
          className: classes.displayedRows,
          children: labelDisplayedRows({
            from: count === 0 ? 0 : page * rowsPerPage + 1,
            to: getLabelDisplayedRowsTo(),
            count: count === -1 ? -1 : count,
            page
          })
        }), /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(ActionsComponent, {
          className: classes.actions,
          backIconButtonProps,
          count,
          nextIconButtonProps,
          onPageChange,
          page,
          rowsPerPage,
          showFirstButton,
          showLastButton,
          getItemAriaLabel
        })]
      })
    }));
  });
  true ? TablePagination3.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The component used for displaying the actions.
     * Either a string to use a HTML element or a component.
     * @default TablePaginationActions
     */
    ActionsComponent: import_prop_types164.default.elementType,
    /**
     * Props applied to the back arrow [`IconButton`](/material-ui/api/icon-button/) component.
     */
    backIconButtonProps: import_prop_types164.default.object,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types164.default.object,
    /**
     * @ignore
     */
    className: import_prop_types164.default.string,
    /**
     * @ignore
     */
    colSpan: import_prop_types164.default.number,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types164.default.elementType,
    /**
     * The total number of rows.
     *
     * To enable server side pagination for an unknown number of items, provide -1.
     */
    count: import_utils268.integerPropType.isRequired,
    /**
     * Accepts a function which returns a string value that provides a user-friendly name for the current page.
     * This is important for screen reader users.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @param {string} type The link or button type to format ('first' | 'last' | 'next' | 'previous').
     * @returns {string}
     * @default function defaultGetAriaLabel(type) {
     *   return `Go to ${type} page`;
     * }
     */
    getItemAriaLabel: import_prop_types164.default.func,
    /**
     * Customize the displayed rows label. Invoked with a `{ from, to, count, page }`
     * object.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default function defaultLabelDisplayedRows({ from, to, count }) {
     *   return `${from}–${to} of ${count !== -1 ? count : `more than ${to}`}`;
     * }
     */
    labelDisplayedRows: import_prop_types164.default.func,
    /**
     * Customize the rows per page label.
     *
     * For localization purposes, you can use the provided [translations](/material-ui/guides/localization/).
     * @default 'Rows per page:'
     */
    labelRowsPerPage: import_prop_types164.default.node,
    /**
     * Props applied to the next arrow [`IconButton`](/material-ui/api/icon-button/) element.
     */
    nextIconButtonProps: import_prop_types164.default.object,
    /**
     * Callback fired when the page is changed.
     *
     * @param {React.MouseEvent<HTMLButtonElement> | null} event The event source of the callback.
     * @param {number} page The page selected.
     */
    onPageChange: import_prop_types164.default.func.isRequired,
    /**
     * Callback fired when the number of rows per page is changed.
     *
     * @param {React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>} event The event source of the callback.
     */
    onRowsPerPageChange: import_prop_types164.default.func,
    /**
     * The zero-based index of the current page.
     */
    page: (0, import_utils268.chainPropTypes)(import_utils268.integerPropType.isRequired, (props) => {
      const {
        count,
        page,
        rowsPerPage
      } = props;
      if (count === -1) {
        return null;
      }
      const newLastPage = Math.max(0, Math.ceil(count / rowsPerPage) - 1);
      if (page < 0 || page > newLastPage) {
        return new Error(`MUI: The page prop of a TablePagination is out of range (0 to ${newLastPage}, but page is ${page}).`);
      }
      return null;
    }),
    /**
     * The number of rows per page.
     *
     * Set -1 to display all the rows.
     */
    rowsPerPage: import_utils268.integerPropType.isRequired,
    /**
     * Customizes the options of the rows per page select field. If less than two options are
     * available, no select field will be displayed.
     * Use -1 for the value with a custom label to show all the rows.
     * @default [10, 25, 50, 100]
     */
    rowsPerPageOptions: import_prop_types164.default.arrayOf(import_prop_types164.default.oneOfType([import_prop_types164.default.number, import_prop_types164.default.shape({
      label: import_prop_types164.default.string.isRequired,
      value: import_prop_types164.default.number.isRequired
    })]).isRequired),
    /**
     * Props applied to the rows per page [`Select`](/material-ui/api/select/) element.
     * @default {}
     */
    SelectProps: import_prop_types164.default.object,
    /**
     * If `true`, show the first-page button.
     * @default false
     */
    showFirstButton: import_prop_types164.default.bool,
    /**
     * If `true`, show the last-page button.
     * @default false
     */
    showLastButton: import_prop_types164.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types164.default.oneOfType([import_prop_types164.default.arrayOf(import_prop_types164.default.oneOfType([import_prop_types164.default.func, import_prop_types164.default.object, import_prop_types164.default.bool])), import_prop_types164.default.func, import_prop_types164.default.object])
  } : void 0;
  var TablePagination_default = TablePagination3;

  // node_modules/@mui/material/TableRow/TableRow.js
  init_extends();
  var React251 = __toESM(require_react());
  var import_prop_types165 = __toESM(require_prop_types());
  var import_composeClasses119 = __toESM(require_composeClasses3());
  var import_system48 = __toESM(require_system());

  // node_modules/@mui/material/TableRow/tableRowClasses.js
  var import_utils269 = __toESM(require_utils());
  var import_generateUtilityClass131 = __toESM(require_generateUtilityClass3());
  function getTableRowUtilityClass(slot) {
    return (0, import_generateUtilityClass131.default)("MuiTableRow", slot);
  }
  var tableRowClasses = (0, import_utils269.unstable_generateUtilityClasses)("MuiTableRow", ["root", "selected", "hover", "head", "footer"]);
  var tableRowClasses_default = tableRowClasses;

  // node_modules/@mui/material/TableRow/TableRow.js
  var import_jsx_runtime245 = __toESM(require_jsx_runtime());
  var _excluded161 = ["className", "component", "hover", "selected"];
  var useUtilityClasses129 = (ownerState) => {
    const {
      classes,
      selected,
      hover,
      head,
      footer
    } = ownerState;
    const slots = {
      root: ["root", selected && "selected", hover && "hover", head && "head", footer && "footer"]
    };
    return (0, import_composeClasses119.unstable_composeClasses)(slots, getTableRowUtilityClass, classes);
  };
  var TableRowRoot = styled_default("tr", {
    name: "MuiTableRow",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, ownerState.head && styles7.head, ownerState.footer && styles7.footer];
    }
  })(({
    theme
  }) => ({
    color: "inherit",
    display: "table-row",
    verticalAlign: "middle",
    // We disable the focus ring for mouse, touch and keyboard users.
    outline: 0,
    [`&.${tableRowClasses_default.hover}:hover`]: {
      backgroundColor: (theme.vars || theme).palette.action.hover
    },
    [`&.${tableRowClasses_default.selected}`]: {
      backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, import_system48.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity),
      "&:hover": {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : (0, import_system48.alpha)(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity)
      }
    }
  }));
  var defaultComponent5 = "tr";
  var TableRow = /* @__PURE__ */ React251.forwardRef(function TableRow2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiTableRow"
    });
    const {
      className,
      component = defaultComponent5,
      hover = false,
      selected = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded161);
    const tablelvl24 = React251.useContext(Tablelvl2Context_default);
    const ownerState = _extends({}, props, {
      component,
      hover,
      selected,
      head: tablelvl24 && tablelvl24.variant === "head",
      footer: tablelvl24 && tablelvl24.variant === "footer"
    });
    const classes = useUtilityClasses129(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime245.jsx)(TableRowRoot, _extends({
      as: component,
      ref,
      className: clsx_default(classes.root, className),
      role: component === defaultComponent5 ? null : "row",
      ownerState
    }, other));
  });
  true ? TableRow.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Should be valid <tr> children such as `TableCell`.
     */
    children: import_prop_types165.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types165.default.object,
    /**
     * @ignore
     */
    className: import_prop_types165.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types165.default.elementType,
    /**
     * If `true`, the table row will shade on hover.
     * @default false
     */
    hover: import_prop_types165.default.bool,
    /**
     * If `true`, the table row will have the selected shading.
     * @default false
     */
    selected: import_prop_types165.default.bool,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types165.default.oneOfType([import_prop_types165.default.arrayOf(import_prop_types165.default.oneOfType([import_prop_types165.default.func, import_prop_types165.default.object, import_prop_types165.default.bool])), import_prop_types165.default.func, import_prop_types165.default.object])
  } : void 0;
  var TableRow_default = TableRow;

  // node_modules/@mui/material/TableSortLabel/TableSortLabel.js
  init_extends();
  var import_composeClasses120 = __toESM(require_composeClasses3());
  var import_prop_types166 = __toESM(require_prop_types());
  var React253 = __toESM(require_react());

  // node_modules/@mui/material/internal/svg-icons/ArrowDownward.js
  var React252 = __toESM(require_react());
  var import_jsx_runtime246 = __toESM(require_jsx_runtime());
  var ArrowDownward_default = createSvgIcon(/* @__PURE__ */ (0, import_jsx_runtime246.jsx)("path", {
    d: "M20 12l-1.41-1.41L13 16.17V4h-2v12.17l-5.58-5.59L4 12l8 8 8-8z"
  }), "ArrowDownward");

  // node_modules/@mui/material/TableSortLabel/tableSortLabelClasses.js
  var import_utils270 = __toESM(require_utils());
  var import_generateUtilityClass132 = __toESM(require_generateUtilityClass3());
  function getTableSortLabelUtilityClass(slot) {
    return (0, import_generateUtilityClass132.default)("MuiTableSortLabel", slot);
  }
  var tableSortLabelClasses = (0, import_utils270.unstable_generateUtilityClasses)("MuiTableSortLabel", ["root", "active", "icon", "iconDirectionDesc", "iconDirectionAsc"]);
  var tableSortLabelClasses_default = tableSortLabelClasses;

  // node_modules/@mui/material/TableSortLabel/TableSortLabel.js
  var import_jsx_runtime247 = __toESM(require_jsx_runtime());
  var import_jsx_runtime248 = __toESM(require_jsx_runtime());
  var _excluded162 = ["active", "children", "className", "direction", "hideSortIcon", "IconComponent"];
  var useUtilityClasses130 = (ownerState) => {
    const {
      classes,
      direction,
      active
    } = ownerState;
    const slots = {
      root: ["root", active && "active"],
      icon: ["icon", `iconDirection${capitalize_default(direction)}`]
    };
    return (0, import_composeClasses120.unstable_composeClasses)(slots, getTableSortLabelUtilityClass, classes);
  };
  var TableSortLabelRoot = styled_default(ButtonBase_default, {
    name: "MuiTableSortLabel",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, ownerState.active && styles7.active];
    }
  })(({
    theme
  }) => ({
    cursor: "pointer",
    display: "inline-flex",
    justifyContent: "flex-start",
    flexDirection: "inherit",
    alignItems: "center",
    "&:focus": {
      color: (theme.vars || theme).palette.text.secondary
    },
    "&:hover": {
      color: (theme.vars || theme).palette.text.secondary,
      [`& .${tableSortLabelClasses_default.icon}`]: {
        opacity: 0.5
      }
    },
    [`&.${tableSortLabelClasses_default.active}`]: {
      color: (theme.vars || theme).palette.text.primary,
      [`& .${tableSortLabelClasses_default.icon}`]: {
        opacity: 1,
        color: (theme.vars || theme).palette.text.secondary
      }
    }
  }));
  var TableSortLabelIcon = styled_default("span", {
    name: "MuiTableSortLabel",
    slot: "Icon",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.icon, styles7[`iconDirection${capitalize_default(ownerState.direction)}`]];
    }
  })(({
    theme,
    ownerState
  }) => _extends({
    fontSize: 18,
    marginRight: 4,
    marginLeft: 4,
    opacity: 0,
    transition: theme.transitions.create(["opacity", "transform"], {
      duration: theme.transitions.duration.shorter
    }),
    userSelect: "none"
  }, ownerState.direction === "desc" && {
    transform: "rotate(0deg)"
  }, ownerState.direction === "asc" && {
    transform: "rotate(180deg)"
  }));
  var TableSortLabel = /* @__PURE__ */ React253.forwardRef(function TableSortLabel2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiTableSortLabel"
    });
    const {
      active = false,
      children,
      className,
      direction = "asc",
      hideSortIcon = false,
      IconComponent = ArrowDownward_default
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded162);
    const ownerState = _extends({}, props, {
      active,
      direction,
      hideSortIcon,
      IconComponent
    });
    const classes = useUtilityClasses130(ownerState);
    return /* @__PURE__ */ (0, import_jsx_runtime248.jsxs)(TableSortLabelRoot, _extends({
      className: clsx_default(classes.root, className),
      component: "span",
      disableRipple: true,
      ownerState,
      ref
    }, other, {
      children: [children, hideSortIcon && !active ? null : /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(TableSortLabelIcon, {
        as: IconComponent,
        className: clsx_default(classes.icon),
        ownerState
      })]
    }));
  });
  true ? TableSortLabel.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * If `true`, the label will have the active styling (should be true for the sorted column).
     * @default false
     */
    active: import_prop_types166.default.bool,
    /**
     * Label contents, the arrow will be appended automatically.
     */
    children: import_prop_types166.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types166.default.object,
    /**
     * @ignore
     */
    className: import_prop_types166.default.string,
    /**
     * The current sort direction.
     * @default 'asc'
     */
    direction: import_prop_types166.default.oneOf(["asc", "desc"]),
    /**
     * Hide sort icon when active is false.
     * @default false
     */
    hideSortIcon: import_prop_types166.default.bool,
    /**
     * Sort icon to use.
     * @default ArrowDownwardIcon
     */
    IconComponent: import_prop_types166.default.elementType,
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types166.default.oneOfType([import_prop_types166.default.arrayOf(import_prop_types166.default.oneOfType([import_prop_types166.default.func, import_prop_types166.default.object, import_prop_types166.default.bool])), import_prop_types166.default.func, import_prop_types166.default.object])
  } : void 0;
  var TableSortLabel_default = TableSortLabel;

  // node_modules/@mui/material/Tabs/Tabs.js
  init_extends();
  var React256 = __toESM(require_react());
  var import_react_is10 = __toESM(require_react_is3());
  var import_prop_types169 = __toESM(require_prop_types());
  var import_utils275 = __toESM(require_utils());

  // node_modules/@mui/material/utils/scrollLeft.js
  var import_utils271 = __toESM(require_utils());

  // node_modules/@mui/material/internal/animate.js
  function easeInOutSin(time) {
    return (1 + Math.sin(Math.PI * time - Math.PI / 2)) / 2;
  }
  function animate(property, element, to, options = {}, cb = () => {
  }) {
    const {
      ease = easeInOutSin,
      duration: duration2 = 300
      // standard
    } = options;
    let start2 = null;
    const from2 = element[property];
    let cancelled = false;
    const cancel = () => {
      cancelled = true;
    };
    const step = (timestamp) => {
      if (cancelled) {
        cb(new Error("Animation cancelled"));
        return;
      }
      if (start2 === null) {
        start2 = timestamp;
      }
      const time = Math.min(1, (timestamp - start2) / duration2);
      element[property] = ease(time) * (to - from2) + from2;
      if (time >= 1) {
        requestAnimationFrame(() => {
          cb(null);
        });
        return;
      }
      requestAnimationFrame(step);
    };
    if (from2 === to) {
      cb(new Error("Element already at target position"));
      return cancel;
    }
    requestAnimationFrame(step);
    return cancel;
  }

  // node_modules/@mui/material/Tabs/ScrollbarSize.js
  init_extends();
  var React254 = __toESM(require_react());
  var import_prop_types167 = __toESM(require_prop_types());
  var import_utils272 = __toESM(require_utils2());
  var import_jsx_runtime249 = __toESM(require_jsx_runtime());
  var _excluded163 = ["onChange"];
  var styles6 = {
    width: 99,
    height: 99,
    position: "absolute",
    top: -9999,
    overflow: "scroll"
  };
  function ScrollbarSize(props) {
    const {
      onChange
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded163);
    const scrollbarHeight = React254.useRef();
    const nodeRef = React254.useRef(null);
    const setMeasurements = () => {
      scrollbarHeight.current = nodeRef.current.offsetHeight - nodeRef.current.clientHeight;
    };
    (0, import_utils272.unstable_useEnhancedEffect)(() => {
      const handleResize = debounce_default(() => {
        const prevHeight = scrollbarHeight.current;
        setMeasurements();
        if (prevHeight !== scrollbarHeight.current) {
          onChange(scrollbarHeight.current);
        }
      });
      const containerWindow = (0, import_utils272.ownerWindow)(nodeRef.current);
      containerWindow.addEventListener("resize", handleResize);
      return () => {
        handleResize.clear();
        containerWindow.removeEventListener("resize", handleResize);
      };
    }, [onChange]);
    React254.useEffect(() => {
      setMeasurements();
      onChange(scrollbarHeight.current);
    }, [onChange]);
    return /* @__PURE__ */ (0, import_jsx_runtime249.jsx)("div", _extends({
      style: styles6,
      ref: nodeRef
    }, other));
  }
  true ? ScrollbarSize.propTypes = {
    onChange: import_prop_types167.default.func.isRequired
  } : void 0;

  // node_modules/@mui/material/TabScrollButton/TabScrollButton.js
  init_extends();
  var React255 = __toESM(require_react());
  var import_prop_types168 = __toESM(require_prop_types());

  // node_modules/@mui/material/TabScrollButton/tabScrollButtonClasses.js
  var import_utils273 = __toESM(require_utils());
  var import_generateUtilityClass133 = __toESM(require_generateUtilityClass3());
  function getTabScrollButtonUtilityClass(slot) {
    return (0, import_generateUtilityClass133.default)("MuiTabScrollButton", slot);
  }
  var tabScrollButtonClasses = (0, import_utils273.unstable_generateUtilityClasses)("MuiTabScrollButton", ["root", "vertical", "horizontal", "disabled"]);
  var tabScrollButtonClasses_default = tabScrollButtonClasses;

  // node_modules/@mui/material/TabScrollButton/TabScrollButton.js
  var import_jsx_runtime250 = __toESM(require_jsx_runtime());
  var _excluded164 = ["className", "slots", "slotProps", "direction", "orientation", "disabled"];
  var useUtilityClasses131 = (ownerState) => {
    const {
      classes,
      orientation,
      disabled
    } = ownerState;
    const slots = {
      root: ["root", orientation, disabled && "disabled"]
    };
    return (0, base_exports.unstable_composeClasses)(slots, getTabScrollButtonUtilityClass, classes);
  };
  var TabScrollButtonRoot = styled_default(ButtonBase_default, {
    name: "MuiTabScrollButton",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, ownerState.orientation && styles7[ownerState.orientation]];
    }
  })(({
    ownerState
  }) => _extends({
    width: 40,
    flexShrink: 0,
    opacity: 0.8,
    [`&.${tabScrollButtonClasses_default.disabled}`]: {
      opacity: 0
    }
  }, ownerState.orientation === "vertical" && {
    width: "100%",
    height: 40,
    "& svg": {
      transform: `rotate(${ownerState.isRtl ? -90 : 90}deg)`
    }
  }));
  var TabScrollButton = /* @__PURE__ */ React255.forwardRef(function TabScrollButton2(inProps, ref) {
    var _slots$StartScrollBut, _slots$EndScrollButto;
    const props = useThemeProps({
      props: inProps,
      name: "MuiTabScrollButton"
    });
    const {
      className,
      slots = {},
      slotProps = {},
      direction
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded164);
    const theme = useTheme4();
    const isRtl = theme.direction === "rtl";
    const ownerState = _extends({
      isRtl
    }, props);
    const classes = useUtilityClasses131(ownerState);
    const StartButtonIcon = (_slots$StartScrollBut = slots.StartScrollButtonIcon) != null ? _slots$StartScrollBut : KeyboardArrowLeft_default;
    const EndButtonIcon = (_slots$EndScrollButto = slots.EndScrollButtonIcon) != null ? _slots$EndScrollButto : KeyboardArrowRight_default;
    const startButtonIconProps = useSlotProps({
      elementType: StartButtonIcon,
      externalSlotProps: slotProps.startScrollButtonIcon,
      additionalProps: {
        fontSize: "small"
      },
      ownerState
    });
    const endButtonIconProps = useSlotProps({
      elementType: EndButtonIcon,
      externalSlotProps: slotProps.endScrollButtonIcon,
      additionalProps: {
        fontSize: "small"
      },
      ownerState
    });
    return /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(TabScrollButtonRoot, _extends({
      component: "div",
      className: clsx_default(classes.root, className),
      ref,
      role: null,
      ownerState,
      tabIndex: null
    }, other, {
      children: direction === "left" ? /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(StartButtonIcon, _extends({}, startButtonIconProps)) : /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(EndButtonIcon, _extends({}, endButtonIconProps))
    }));
  });
  true ? TabScrollButton.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types168.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types168.default.object,
    /**
     * @ignore
     */
    className: import_prop_types168.default.string,
    /**
     * The direction the button should indicate.
     */
    direction: import_prop_types168.default.oneOf(["left", "right"]).isRequired,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types168.default.bool,
    /**
     * The component orientation (layout flow direction).
     */
    orientation: import_prop_types168.default.oneOf(["horizontal", "vertical"]).isRequired,
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     * @default {}
     */
    slotProps: import_prop_types168.default.shape({
      endScrollButtonIcon: import_prop_types168.default.oneOfType([import_prop_types168.default.func, import_prop_types168.default.object]),
      startScrollButtonIcon: import_prop_types168.default.oneOfType([import_prop_types168.default.func, import_prop_types168.default.object])
    }),
    /**
     * The components used for each slot inside.
     * @default {}
     */
    slots: import_prop_types168.default.shape({
      EndScrollButtonIcon: import_prop_types168.default.elementType,
      StartScrollButtonIcon: import_prop_types168.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types168.default.oneOfType([import_prop_types168.default.arrayOf(import_prop_types168.default.oneOfType([import_prop_types168.default.func, import_prop_types168.default.object, import_prop_types168.default.bool])), import_prop_types168.default.func, import_prop_types168.default.object])
  } : void 0;
  var TabScrollButton_default = TabScrollButton;

  // node_modules/@mui/material/Tabs/tabsClasses.js
  var import_utils274 = __toESM(require_utils());
  var import_generateUtilityClass134 = __toESM(require_generateUtilityClass3());
  function getTabsUtilityClass2(slot) {
    return (0, import_generateUtilityClass134.default)("MuiTabs", slot);
  }
  var tabsClasses2 = (0, import_utils274.unstable_generateUtilityClasses)("MuiTabs", ["root", "vertical", "flexContainer", "flexContainerVertical", "centered", "scroller", "fixed", "scrollableX", "scrollableY", "hideScrollbar", "scrollButtons", "scrollButtonsHideMobile", "indicator"]);
  var tabsClasses_default = tabsClasses2;

  // node_modules/@mui/material/Tabs/Tabs.js
  var import_jsx_runtime251 = __toESM(require_jsx_runtime());
  var import_jsx_runtime252 = __toESM(require_jsx_runtime());
  var _excluded165 = ["aria-label", "aria-labelledby", "action", "centered", "children", "className", "component", "allowScrollButtonsMobile", "indicatorColor", "onChange", "orientation", "ScrollButtonComponent", "scrollButtons", "selectionFollowsFocus", "slots", "slotProps", "TabIndicatorProps", "TabScrollButtonProps", "textColor", "value", "variant", "visibleScrollbar"];
  var nextItem2 = (list, item) => {
    if (list === item) {
      return list.firstChild;
    }
    if (item && item.nextElementSibling) {
      return item.nextElementSibling;
    }
    return list.firstChild;
  };
  var previousItem2 = (list, item) => {
    if (list === item) {
      return list.lastChild;
    }
    if (item && item.previousElementSibling) {
      return item.previousElementSibling;
    }
    return list.lastChild;
  };
  var moveFocus2 = (list, currentFocus, traversalFunction) => {
    let wrappedOnce = false;
    let nextFocus = traversalFunction(list, currentFocus);
    while (nextFocus) {
      if (nextFocus === list.firstChild) {
        if (wrappedOnce) {
          return;
        }
        wrappedOnce = true;
      }
      const nextFocusDisabled = nextFocus.disabled || nextFocus.getAttribute("aria-disabled") === "true";
      if (!nextFocus.hasAttribute("tabindex") || nextFocusDisabled) {
        nextFocus = traversalFunction(list, nextFocus);
      } else {
        nextFocus.focus();
        return;
      }
    }
  };
  var useUtilityClasses132 = (ownerState) => {
    const {
      vertical,
      fixed,
      hideScrollbar,
      scrollableX,
      scrollableY,
      centered,
      scrollButtonsHideMobile,
      classes
    } = ownerState;
    const slots = {
      root: ["root", vertical && "vertical"],
      scroller: ["scroller", fixed && "fixed", hideScrollbar && "hideScrollbar", scrollableX && "scrollableX", scrollableY && "scrollableY"],
      flexContainer: ["flexContainer", vertical && "flexContainerVertical", centered && "centered"],
      indicator: ["indicator"],
      scrollButtons: ["scrollButtons", scrollButtonsHideMobile && "scrollButtonsHideMobile"],
      scrollableX: [scrollableX && "scrollableX"],
      hideScrollbar: [hideScrollbar && "hideScrollbar"]
    };
    return (0, base_exports.unstable_composeClasses)(slots, getTabsUtilityClass2, classes);
  };
  var TabsRoot = styled_default("div", {
    name: "MuiTabs",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${tabsClasses_default.scrollButtons}`]: styles7.scrollButtons
      }, {
        [`& .${tabsClasses_default.scrollButtons}`]: ownerState.scrollButtonsHideMobile && styles7.scrollButtonsHideMobile
      }, styles7.root, ownerState.vertical && styles7.vertical];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    overflow: "hidden",
    minHeight: 48,
    // Add iOS momentum scrolling for iOS < 13.0
    WebkitOverflowScrolling: "touch",
    display: "flex"
  }, ownerState.vertical && {
    flexDirection: "column"
  }, ownerState.scrollButtonsHideMobile && {
    [`& .${tabsClasses_default.scrollButtons}`]: {
      [theme.breakpoints.down("sm")]: {
        display: "none"
      }
    }
  }));
  var TabsScroller = styled_default("div", {
    name: "MuiTabs",
    slot: "Scroller",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.scroller, ownerState.fixed && styles7.fixed, ownerState.hideScrollbar && styles7.hideScrollbar, ownerState.scrollableX && styles7.scrollableX, ownerState.scrollableY && styles7.scrollableY];
    }
  })(({
    ownerState
  }) => _extends({
    position: "relative",
    display: "inline-block",
    flex: "1 1 auto",
    whiteSpace: "nowrap"
  }, ownerState.fixed && {
    overflowX: "hidden",
    width: "100%"
  }, ownerState.hideScrollbar && {
    // Hide dimensionless scrollbar on macOS
    scrollbarWidth: "none",
    // Firefox
    "&::-webkit-scrollbar": {
      display: "none"
      // Safari + Chrome
    }
  }, ownerState.scrollableX && {
    overflowX: "auto",
    overflowY: "hidden"
  }, ownerState.scrollableY && {
    overflowY: "auto",
    overflowX: "hidden"
  }));
  var FlexContainer = styled_default("div", {
    name: "MuiTabs",
    slot: "FlexContainer",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.flexContainer, ownerState.vertical && styles7.flexContainerVertical, ownerState.centered && styles7.centered];
    }
  })(({
    ownerState
  }) => _extends({
    display: "flex"
  }, ownerState.vertical && {
    flexDirection: "column"
  }, ownerState.centered && {
    justifyContent: "center"
  }));
  var TabsIndicator = styled_default("span", {
    name: "MuiTabs",
    slot: "Indicator",
    overridesResolver: (props, styles7) => styles7.indicator
  })(({
    ownerState,
    theme
  }) => _extends({
    position: "absolute",
    height: 2,
    bottom: 0,
    width: "100%",
    transition: theme.transitions.create()
  }, ownerState.indicatorColor === "primary" && {
    backgroundColor: (theme.vars || theme).palette.primary.main
  }, ownerState.indicatorColor === "secondary" && {
    backgroundColor: (theme.vars || theme).palette.secondary.main
  }, ownerState.vertical && {
    height: "100%",
    width: 2,
    right: 0
  }));
  var TabsScrollbarSize = styled_default(ScrollbarSize)({
    overflowX: "auto",
    overflowY: "hidden",
    // Hide dimensionless scrollbar on macOS
    scrollbarWidth: "none",
    // Firefox
    "&::-webkit-scrollbar": {
      display: "none"
      // Safari + Chrome
    }
  });
  var defaultIndicatorStyle = {};
  var warnedOnceTabPresent = false;
  var Tabs3 = /* @__PURE__ */ React256.forwardRef(function Tabs4(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiTabs"
    });
    const theme = useTheme4();
    const isRtl = theme.direction === "rtl";
    const {
      "aria-label": ariaLabel,
      "aria-labelledby": ariaLabelledBy,
      action,
      centered = false,
      children: childrenProp,
      className,
      component = "div",
      allowScrollButtonsMobile = false,
      indicatorColor = "primary",
      onChange,
      orientation = "horizontal",
      ScrollButtonComponent = TabScrollButton_default,
      scrollButtons = "auto",
      selectionFollowsFocus,
      slots = {},
      slotProps = {},
      TabIndicatorProps = {},
      TabScrollButtonProps = {},
      textColor = "primary",
      value,
      variant = "standard",
      visibleScrollbar = false
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded165);
    const scrollable = variant === "scrollable";
    const vertical = orientation === "vertical";
    const scrollStart = vertical ? "scrollTop" : "scrollLeft";
    const start2 = vertical ? "top" : "left";
    const end2 = vertical ? "bottom" : "right";
    const clientSize = vertical ? "clientHeight" : "clientWidth";
    const size2 = vertical ? "height" : "width";
    const ownerState = _extends({}, props, {
      component,
      allowScrollButtonsMobile,
      indicatorColor,
      orientation,
      vertical,
      scrollButtons,
      textColor,
      variant,
      visibleScrollbar,
      fixed: !scrollable,
      hideScrollbar: scrollable && !visibleScrollbar,
      scrollableX: scrollable && !vertical,
      scrollableY: scrollable && vertical,
      centered: centered && !scrollable,
      scrollButtonsHideMobile: !allowScrollButtonsMobile
    });
    const classes = useUtilityClasses132(ownerState);
    const startScrollButtonIconProps = useSlotProps({
      elementType: slots.StartScrollButtonIcon,
      externalSlotProps: slotProps.startScrollButtonIcon,
      ownerState
    });
    const endScrollButtonIconProps = useSlotProps({
      elementType: slots.EndScrollButtonIcon,
      externalSlotProps: slotProps.endScrollButtonIcon,
      ownerState
    });
    if (true) {
      if (centered && scrollable) {
        console.error('MUI: You can not use the `centered={true}` and `variant="scrollable"` properties at the same time on a `Tabs` component.');
      }
    }
    const [mounted, setMounted] = React256.useState(false);
    const [indicatorStyle, setIndicatorStyle] = React256.useState(defaultIndicatorStyle);
    const [displayStartScroll, setDisplayStartScroll] = React256.useState(false);
    const [displayEndScroll, setDisplayEndScroll] = React256.useState(false);
    const [updateScrollObserver, setUpdateScrollObserver] = React256.useState(false);
    const [scrollerStyle, setScrollerStyle] = React256.useState({
      overflow: "hidden",
      scrollbarWidth: 0
    });
    const valueToIndex = /* @__PURE__ */ new Map();
    const tabsRef = React256.useRef(null);
    const tabListRef = React256.useRef(null);
    const getTabsMeta = () => {
      const tabsNode = tabsRef.current;
      let tabsMeta;
      if (tabsNode) {
        const rect = tabsNode.getBoundingClientRect();
        tabsMeta = {
          clientWidth: tabsNode.clientWidth,
          scrollLeft: tabsNode.scrollLeft,
          scrollTop: tabsNode.scrollTop,
          scrollLeftNormalized: (0, import_utils271.unstable_getNormalizedScrollLeft)(tabsNode, theme.direction),
          scrollWidth: tabsNode.scrollWidth,
          top: rect.top,
          bottom: rect.bottom,
          left: rect.left,
          right: rect.right
        };
      }
      let tabMeta;
      if (tabsNode && value !== false) {
        const children2 = tabListRef.current.children;
        if (children2.length > 0) {
          const tab = children2[valueToIndex.get(value)];
          if (true) {
            if (!tab) {
              console.error([`MUI: The \`value\` provided to the Tabs component is invalid.`, `None of the Tabs' children match with "${value}".`, valueToIndex.keys ? `You can provide one of the following values: ${Array.from(valueToIndex.keys()).join(", ")}.` : null].join("\n"));
            }
          }
          tabMeta = tab ? tab.getBoundingClientRect() : null;
          if (true) {
            if (!warnedOnceTabPresent && tabMeta && tabMeta.width === 0 && tabMeta.height === 0 && // if the whole Tabs component is hidden, don't warn
            tabsMeta.clientWidth !== 0) {
              tabsMeta = null;
              console.error(["MUI: The `value` provided to the Tabs component is invalid.", `The Tab with this \`value\` ("${value}") is not part of the document layout.`, "Make sure the tab item is present in the document or that it's not `display: none`."].join("\n"));
              warnedOnceTabPresent = true;
            }
          }
        }
      }
      return {
        tabsMeta,
        tabMeta
      };
    };
    const updateIndicatorState = useEventCallback_default(() => {
      const {
        tabsMeta,
        tabMeta
      } = getTabsMeta();
      let startValue = 0;
      let startIndicator;
      if (vertical) {
        startIndicator = "top";
        if (tabMeta && tabsMeta) {
          startValue = tabMeta.top - tabsMeta.top + tabsMeta.scrollTop;
        }
      } else {
        startIndicator = isRtl ? "right" : "left";
        if (tabMeta && tabsMeta) {
          const correction = isRtl ? tabsMeta.scrollLeftNormalized + tabsMeta.clientWidth - tabsMeta.scrollWidth : tabsMeta.scrollLeft;
          startValue = (isRtl ? -1 : 1) * (tabMeta[startIndicator] - tabsMeta[startIndicator] + correction);
        }
      }
      const newIndicatorStyle = {
        [startIndicator]: startValue,
        // May be wrong until the font is loaded.
        [size2]: tabMeta ? tabMeta[size2] : 0
      };
      if (isNaN(indicatorStyle[startIndicator]) || isNaN(indicatorStyle[size2])) {
        setIndicatorStyle(newIndicatorStyle);
      } else {
        const dStart = Math.abs(indicatorStyle[startIndicator] - newIndicatorStyle[startIndicator]);
        const dSize = Math.abs(indicatorStyle[size2] - newIndicatorStyle[size2]);
        if (dStart >= 1 || dSize >= 1) {
          setIndicatorStyle(newIndicatorStyle);
        }
      }
    });
    const scroll = (scrollValue, {
      animation = true
    } = {}) => {
      if (animation) {
        animate(scrollStart, tabsRef.current, scrollValue, {
          duration: theme.transitions.duration.standard
        });
      } else {
        tabsRef.current[scrollStart] = scrollValue;
      }
    };
    const moveTabsScroll = (delta) => {
      let scrollValue = tabsRef.current[scrollStart];
      if (vertical) {
        scrollValue += delta;
      } else {
        scrollValue += delta * (isRtl ? -1 : 1);
        scrollValue *= isRtl && (0, import_utils271.unstable_detectScrollType)() === "reverse" ? -1 : 1;
      }
      scroll(scrollValue);
    };
    const getScrollSize = () => {
      const containerSize = tabsRef.current[clientSize];
      let totalSize = 0;
      const children2 = Array.from(tabListRef.current.children);
      for (let i = 0; i < children2.length; i += 1) {
        const tab = children2[i];
        if (totalSize + tab[clientSize] > containerSize) {
          if (i === 0) {
            totalSize = containerSize;
          }
          break;
        }
        totalSize += tab[clientSize];
      }
      return totalSize;
    };
    const handleStartScrollClick = () => {
      moveTabsScroll(-1 * getScrollSize());
    };
    const handleEndScrollClick = () => {
      moveTabsScroll(getScrollSize());
    };
    const handleScrollbarSizeChange = React256.useCallback((scrollbarWidth) => {
      setScrollerStyle({
        overflow: null,
        scrollbarWidth
      });
    }, []);
    const getConditionalElements = () => {
      const conditionalElements2 = {};
      conditionalElements2.scrollbarSizeListener = scrollable ? /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(TabsScrollbarSize, {
        onChange: handleScrollbarSizeChange,
        className: clsx_default(classes.scrollableX, classes.hideScrollbar)
      }) : null;
      const scrollButtonsActive = displayStartScroll || displayEndScroll;
      const showScrollButtons = scrollable && (scrollButtons === "auto" && scrollButtonsActive || scrollButtons === true);
      conditionalElements2.scrollButtonStart = showScrollButtons ? /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(ScrollButtonComponent, _extends({
        slots: {
          StartScrollButtonIcon: slots.StartScrollButtonIcon
        },
        slotProps: {
          startScrollButtonIcon: startScrollButtonIconProps
        },
        orientation,
        direction: isRtl ? "right" : "left",
        onClick: handleStartScrollClick,
        disabled: !displayStartScroll
      }, TabScrollButtonProps, {
        className: clsx_default(classes.scrollButtons, TabScrollButtonProps.className)
      })) : null;
      conditionalElements2.scrollButtonEnd = showScrollButtons ? /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(ScrollButtonComponent, _extends({
        slots: {
          EndScrollButtonIcon: slots.EndScrollButtonIcon
        },
        slotProps: {
          endScrollButtonIcon: endScrollButtonIconProps
        },
        orientation,
        direction: isRtl ? "left" : "right",
        onClick: handleEndScrollClick,
        disabled: !displayEndScroll
      }, TabScrollButtonProps, {
        className: clsx_default(classes.scrollButtons, TabScrollButtonProps.className)
      })) : null;
      return conditionalElements2;
    };
    const scrollSelectedIntoView = useEventCallback_default((animation) => {
      const {
        tabsMeta,
        tabMeta
      } = getTabsMeta();
      if (!tabMeta || !tabsMeta) {
        return;
      }
      if (tabMeta[start2] < tabsMeta[start2]) {
        const nextScrollStart = tabsMeta[scrollStart] + (tabMeta[start2] - tabsMeta[start2]);
        scroll(nextScrollStart, {
          animation
        });
      } else if (tabMeta[end2] > tabsMeta[end2]) {
        const nextScrollStart = tabsMeta[scrollStart] + (tabMeta[end2] - tabsMeta[end2]);
        scroll(nextScrollStart, {
          animation
        });
      }
    });
    const updateScrollButtonState = useEventCallback_default(() => {
      if (scrollable && scrollButtons !== false) {
        setUpdateScrollObserver(!updateScrollObserver);
      }
    });
    React256.useEffect(() => {
      const handleResize = debounce_default(() => {
        if (tabsRef.current) {
          updateIndicatorState();
        }
      });
      const win = ownerWindow_default(tabsRef.current);
      win.addEventListener("resize", handleResize);
      let resizeObserver;
      if (typeof ResizeObserver !== "undefined") {
        resizeObserver = new ResizeObserver(handleResize);
        Array.from(tabListRef.current.children).forEach((child) => {
          resizeObserver.observe(child);
        });
      }
      return () => {
        handleResize.clear();
        win.removeEventListener("resize", handleResize);
        if (resizeObserver) {
          resizeObserver.disconnect();
        }
      };
    }, [updateIndicatorState]);
    React256.useEffect(() => {
      const tabListChildren = Array.from(tabListRef.current.children);
      const length2 = tabListChildren.length;
      if (typeof IntersectionObserver !== "undefined" && length2 > 0 && scrollable && scrollButtons !== false) {
        const firstTab = tabListChildren[0];
        const lastTab = tabListChildren[length2 - 1];
        const observerOptions = {
          root: tabsRef.current,
          threshold: 0.99
        };
        const handleScrollButtonStart = (entries) => {
          setDisplayStartScroll(!entries[0].isIntersecting);
        };
        const firstObserver = new IntersectionObserver(handleScrollButtonStart, observerOptions);
        firstObserver.observe(firstTab);
        const handleScrollButtonEnd = (entries) => {
          setDisplayEndScroll(!entries[0].isIntersecting);
        };
        const lastObserver = new IntersectionObserver(handleScrollButtonEnd, observerOptions);
        lastObserver.observe(lastTab);
        return () => {
          firstObserver.disconnect();
          lastObserver.disconnect();
        };
      }
      return void 0;
    }, [scrollable, scrollButtons, updateScrollObserver, childrenProp == null ? void 0 : childrenProp.length]);
    React256.useEffect(() => {
      setMounted(true);
    }, []);
    React256.useEffect(() => {
      updateIndicatorState();
    });
    React256.useEffect(() => {
      scrollSelectedIntoView(defaultIndicatorStyle !== indicatorStyle);
    }, [scrollSelectedIntoView, indicatorStyle]);
    React256.useImperativeHandle(action, () => ({
      updateIndicator: updateIndicatorState,
      updateScrollButtons: updateScrollButtonState
    }), [updateIndicatorState, updateScrollButtonState]);
    const indicator = /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(TabsIndicator, _extends({}, TabIndicatorProps, {
      className: clsx_default(classes.indicator, TabIndicatorProps.className),
      ownerState,
      style: _extends({}, indicatorStyle, TabIndicatorProps.style)
    }));
    let childIndex = 0;
    const children = React256.Children.map(childrenProp, (child) => {
      if (!/* @__PURE__ */ React256.isValidElement(child)) {
        return null;
      }
      if (true) {
        if ((0, import_react_is10.isFragment)(child)) {
          console.error(["MUI: The Tabs component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
        }
      }
      const childValue = child.props.value === void 0 ? childIndex : child.props.value;
      valueToIndex.set(childValue, childIndex);
      const selected = childValue === value;
      childIndex += 1;
      return /* @__PURE__ */ React256.cloneElement(child, _extends({
        fullWidth: variant === "fullWidth",
        indicator: selected && !mounted && indicator,
        selected,
        selectionFollowsFocus,
        onChange,
        textColor,
        value: childValue
      }, childIndex === 1 && value === false && !child.props.tabIndex ? {
        tabIndex: 0
      } : {}));
    });
    const handleKeyDown2 = (event) => {
      const list = tabListRef.current;
      const currentFocus = ownerDocument_default(list).activeElement;
      const role = currentFocus.getAttribute("role");
      if (role !== "tab") {
        return;
      }
      let previousItemKey = orientation === "horizontal" ? "ArrowLeft" : "ArrowUp";
      let nextItemKey = orientation === "horizontal" ? "ArrowRight" : "ArrowDown";
      if (orientation === "horizontal" && isRtl) {
        previousItemKey = "ArrowRight";
        nextItemKey = "ArrowLeft";
      }
      switch (event.key) {
        case previousItemKey:
          event.preventDefault();
          moveFocus2(list, currentFocus, previousItem2);
          break;
        case nextItemKey:
          event.preventDefault();
          moveFocus2(list, currentFocus, nextItem2);
          break;
        case "Home":
          event.preventDefault();
          moveFocus2(list, null, nextItem2);
          break;
        case "End":
          event.preventDefault();
          moveFocus2(list, null, previousItem2);
          break;
        default:
          break;
      }
    };
    const conditionalElements = getConditionalElements();
    return /* @__PURE__ */ (0, import_jsx_runtime252.jsxs)(TabsRoot, _extends({
      className: clsx_default(classes.root, className),
      ownerState,
      ref,
      as: component
    }, other, {
      children: [conditionalElements.scrollButtonStart, conditionalElements.scrollbarSizeListener, /* @__PURE__ */ (0, import_jsx_runtime252.jsxs)(TabsScroller, {
        className: classes.scroller,
        ownerState,
        style: {
          overflow: scrollerStyle.overflow,
          [vertical ? `margin${isRtl ? "Left" : "Right"}` : "marginBottom"]: visibleScrollbar ? void 0 : -scrollerStyle.scrollbarWidth
        },
        ref: tabsRef,
        children: [/* @__PURE__ */ (0, import_jsx_runtime251.jsx)(FlexContainer, {
          "aria-label": ariaLabel,
          "aria-labelledby": ariaLabelledBy,
          "aria-orientation": orientation === "vertical" ? "vertical" : null,
          className: classes.flexContainer,
          ownerState,
          onKeyDown: handleKeyDown2,
          ref: tabListRef,
          role: "tablist",
          children
        }), mounted && indicator]
      }), conditionalElements.scrollButtonEnd]
    }));
  });
  true ? Tabs3.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * Callback fired when the component mounts.
     * This is useful when you want to trigger an action programmatically.
     * It supports two actions: `updateIndicator()` and `updateScrollButtons()`
     *
     * @param {object} actions This object contains all possible actions
     * that can be triggered programmatically.
     */
    action: import_utils275.refType,
    /**
     * If `true`, the scroll buttons aren't forced hidden on mobile.
     * By default the scroll buttons are hidden on mobile and takes precedence over `scrollButtons`.
     * @default false
     */
    allowScrollButtonsMobile: import_prop_types169.default.bool,
    /**
     * The label for the Tabs as a string.
     */
    "aria-label": import_prop_types169.default.string,
    /**
     * An id or list of ids separated by a space that label the Tabs.
     */
    "aria-labelledby": import_prop_types169.default.string,
    /**
     * If `true`, the tabs are centered.
     * This prop is intended for large views.
     * @default false
     */
    centered: import_prop_types169.default.bool,
    /**
     * The content of the component.
     */
    children: import_prop_types169.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types169.default.object,
    /**
     * @ignore
     */
    className: import_prop_types169.default.string,
    /**
     * The component used for the root node.
     * Either a string to use a HTML element or a component.
     */
    component: import_prop_types169.default.elementType,
    /**
     * Determines the color of the indicator.
     * @default 'primary'
     */
    indicatorColor: import_prop_types169.default.oneOfType([import_prop_types169.default.oneOf(["primary", "secondary"]), import_prop_types169.default.string]),
    /**
     * Callback fired when the value changes.
     *
     * @param {React.SyntheticEvent} event The event source of the callback. **Warning**: This is a generic event not a change event.
     * @param {any} value We default to the index of the child (number)
     */
    onChange: import_prop_types169.default.func,
    /**
     * The component orientation (layout flow direction).
     * @default 'horizontal'
     */
    orientation: import_prop_types169.default.oneOf(["horizontal", "vertical"]),
    /**
     * The component used to render the scroll buttons.
     * @default TabScrollButton
     */
    ScrollButtonComponent: import_prop_types169.default.elementType,
    /**
     * Determine behavior of scroll buttons when tabs are set to scroll:
     *
     * - `auto` will only present them when not all the items are visible.
     * - `true` will always present them.
     * - `false` will never present them.
     *
     * By default the scroll buttons are hidden on mobile.
     * This behavior can be disabled with `allowScrollButtonsMobile`.
     * @default 'auto'
     */
    scrollButtons: import_prop_types169.default.oneOf(["auto", false, true]),
    /**
     * If `true` the selected tab changes on focus. Otherwise it only
     * changes on activation.
     */
    selectionFollowsFocus: import_prop_types169.default.bool,
    /**
     * The extra props for the slot components.
     * You can override the existing props or add new ones.
     * @default {}
     */
    slotProps: import_prop_types169.default.shape({
      endScrollButtonIcon: import_prop_types169.default.oneOfType([import_prop_types169.default.func, import_prop_types169.default.object]),
      startScrollButtonIcon: import_prop_types169.default.oneOfType([import_prop_types169.default.func, import_prop_types169.default.object])
    }),
    /**
     * The components used for each slot inside.
     * @default {}
     */
    slots: import_prop_types169.default.shape({
      EndScrollButtonIcon: import_prop_types169.default.elementType,
      StartScrollButtonIcon: import_prop_types169.default.elementType
    }),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types169.default.oneOfType([import_prop_types169.default.arrayOf(import_prop_types169.default.oneOfType([import_prop_types169.default.func, import_prop_types169.default.object, import_prop_types169.default.bool])), import_prop_types169.default.func, import_prop_types169.default.object]),
    /**
     * Props applied to the tab indicator element.
     * @default  {}
     */
    TabIndicatorProps: import_prop_types169.default.object,
    /**
     * Props applied to the [`TabScrollButton`](/material-ui/api/tab-scroll-button/) element.
     * @default {}
     */
    TabScrollButtonProps: import_prop_types169.default.object,
    /**
     * Determines the color of the `Tab`.
     * @default 'primary'
     */
    textColor: import_prop_types169.default.oneOf(["inherit", "primary", "secondary"]),
    /**
     * The value of the currently selected `Tab`.
     * If you don't want any selected `Tab`, you can set this prop to `false`.
     */
    value: import_prop_types169.default.any,
    /**
     * Determines additional display behavior of the tabs:
     *
     *  - `scrollable` will invoke scrolling properties and allow for horizontally
     *  scrolling (or swiping) of the tab bar.
     *  - `fullWidth` will make the tabs grow to use all the available space,
     *  which should be used for small views, like on mobile.
     *  - `standard` will render the default state.
     * @default 'standard'
     */
    variant: import_prop_types169.default.oneOf(["fullWidth", "scrollable", "standard"]),
    /**
     * If `true`, the scrollbar is visible. It can be useful when displaying
     * a long vertical list of tabs.
     * @default false
     */
    visibleScrollbar: import_prop_types169.default.bool
  } : void 0;
  var Tabs_default = Tabs3;

  // node_modules/@mui/material/TextField/TextField.js
  init_extends();
  var React257 = __toESM(require_react());
  var import_prop_types170 = __toESM(require_prop_types());
  var import_composeClasses121 = __toESM(require_composeClasses3());
  var import_utils277 = __toESM(require_utils());

  // node_modules/@mui/material/TextField/textFieldClasses.js
  var import_utils276 = __toESM(require_utils());
  var import_generateUtilityClass135 = __toESM(require_generateUtilityClass3());
  function getTextFieldUtilityClass(slot) {
    return (0, import_generateUtilityClass135.default)("MuiTextField", slot);
  }
  var textFieldClasses = (0, import_utils276.unstable_generateUtilityClasses)("MuiTextField", ["root"]);
  var textFieldClasses_default = textFieldClasses;

  // node_modules/@mui/material/TextField/TextField.js
  var import_jsx_runtime253 = __toESM(require_jsx_runtime());
  var import_jsx_runtime254 = __toESM(require_jsx_runtime());
  var _excluded166 = ["autoComplete", "autoFocus", "children", "className", "color", "defaultValue", "disabled", "error", "FormHelperTextProps", "fullWidth", "helperText", "id", "InputLabelProps", "inputProps", "InputProps", "inputRef", "label", "maxRows", "minRows", "multiline", "name", "onBlur", "onChange", "onFocus", "placeholder", "required", "rows", "select", "SelectProps", "type", "value", "variant"];
  var variantComponent = {
    standard: Input_default,
    filled: FilledInput_default,
    outlined: OutlinedInput_default
  };
  var useUtilityClasses133 = (ownerState) => {
    const {
      classes
    } = ownerState;
    const slots = {
      root: ["root"]
    };
    return (0, import_composeClasses121.unstable_composeClasses)(slots, getTextFieldUtilityClass, classes);
  };
  var TextFieldRoot = styled_default(FormControl_default, {
    name: "MuiTextField",
    slot: "Root",
    overridesResolver: (props, styles7) => styles7.root
  })({});
  var TextField = /* @__PURE__ */ React257.forwardRef(function TextField2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiTextField"
    });
    const {
      autoComplete,
      autoFocus = false,
      children,
      className,
      color = "primary",
      defaultValue,
      disabled = false,
      error = false,
      FormHelperTextProps,
      fullWidth = false,
      helperText,
      id: idOverride,
      InputLabelProps,
      inputProps,
      InputProps,
      inputRef,
      label,
      maxRows,
      minRows,
      multiline = false,
      name,
      onBlur,
      onChange,
      onFocus,
      placeholder,
      required = false,
      rows,
      select = false,
      SelectProps,
      type,
      value,
      variant = "outlined"
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded166);
    const ownerState = _extends({}, props, {
      autoFocus,
      color,
      disabled,
      error,
      fullWidth,
      multiline,
      required,
      select,
      variant
    });
    const classes = useUtilityClasses133(ownerState);
    if (true) {
      if (select && !children) {
        console.error("MUI: `children` must be passed when using the `TextField` component with `select`.");
      }
    }
    const InputMore = {};
    if (variant === "outlined") {
      if (InputLabelProps && typeof InputLabelProps.shrink !== "undefined") {
        InputMore.notched = InputLabelProps.shrink;
      }
      InputMore.label = label;
    }
    if (select) {
      if (!SelectProps || !SelectProps.native) {
        InputMore.id = void 0;
      }
      InputMore["aria-describedby"] = void 0;
    }
    const id = (0, import_utils277.unstable_useId)(idOverride);
    const helperTextId = helperText && id ? `${id}-helper-text` : void 0;
    const inputLabelId = label && id ? `${id}-label` : void 0;
    const InputComponent = variantComponent[variant];
    const InputElement = /* @__PURE__ */ (0, import_jsx_runtime253.jsx)(InputComponent, _extends({
      "aria-describedby": helperTextId,
      autoComplete,
      autoFocus,
      defaultValue,
      fullWidth,
      multiline,
      name,
      rows,
      maxRows,
      minRows,
      type,
      value,
      id,
      inputRef,
      onBlur,
      onChange,
      onFocus,
      placeholder,
      inputProps
    }, InputMore, InputProps));
    return /* @__PURE__ */ (0, import_jsx_runtime254.jsxs)(TextFieldRoot, _extends({
      className: clsx_default(classes.root, className),
      disabled,
      error,
      fullWidth,
      ref,
      required,
      color,
      variant,
      ownerState
    }, other, {
      children: [label != null && label !== "" && /* @__PURE__ */ (0, import_jsx_runtime253.jsx)(InputLabel_default, _extends({
        htmlFor: id,
        id: inputLabelId
      }, InputLabelProps, {
        children: label
      })), select ? /* @__PURE__ */ (0, import_jsx_runtime253.jsx)(Select_default, _extends({
        "aria-describedby": helperTextId,
        id,
        labelId: inputLabelId,
        value,
        input: InputElement
      }, SelectProps, {
        children
      })) : InputElement, helperText && /* @__PURE__ */ (0, import_jsx_runtime253.jsx)(FormHelperText_default, _extends({
        id: helperTextId
      }, FormHelperTextProps, {
        children: helperText
      }))]
    }));
  });
  true ? TextField.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * This prop helps users to fill forms faster, especially on mobile devices.
     * The name can be confusing, as it's more like an autofill.
     * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
     */
    autoComplete: import_prop_types170.default.string,
    /**
     * If `true`, the `input` element is focused during the first mount.
     * @default false
     */
    autoFocus: import_prop_types170.default.bool,
    /**
     * @ignore
     */
    children: import_prop_types170.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types170.default.object,
    /**
     * @ignore
     */
    className: import_prop_types170.default.string,
    /**
     * The color of the component.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'primary'
     */
    color: import_prop_types170.default.oneOfType([import_prop_types170.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), import_prop_types170.default.string]),
    /**
     * The default value. Use when the component is not controlled.
     */
    defaultValue: import_prop_types170.default.any,
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types170.default.bool,
    /**
     * If `true`, the label is displayed in an error state.
     * @default false
     */
    error: import_prop_types170.default.bool,
    /**
     * Props applied to the [`FormHelperText`](/material-ui/api/form-helper-text/) element.
     */
    FormHelperTextProps: import_prop_types170.default.object,
    /**
     * If `true`, the input will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types170.default.bool,
    /**
     * The helper text content.
     */
    helperText: import_prop_types170.default.node,
    /**
     * The id of the `input` element.
     * Use this prop to make `label` and `helperText` accessible for screen readers.
     */
    id: import_prop_types170.default.string,
    /**
     * Props applied to the [`InputLabel`](/material-ui/api/input-label/) element.
     * Pointer events like `onClick` are enabled if and only if `shrink` is `true`.
     */
    InputLabelProps: import_prop_types170.default.object,
    /**
     * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
     */
    inputProps: import_prop_types170.default.object,
    /**
     * Props applied to the Input element.
     * It will be a [`FilledInput`](/material-ui/api/filled-input/),
     * [`OutlinedInput`](/material-ui/api/outlined-input/) or [`Input`](/material-ui/api/input/)
     * component depending on the `variant` prop value.
     */
    InputProps: import_prop_types170.default.object,
    /**
     * Pass a ref to the `input` element.
     */
    inputRef: import_utils277.refType,
    /**
     * The label content.
     */
    label: import_prop_types170.default.node,
    /**
     * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
     * @default 'none'
     */
    margin: import_prop_types170.default.oneOf(["dense", "none", "normal"]),
    /**
     * Maximum number of rows to display when multiline option is set to true.
     */
    maxRows: import_prop_types170.default.oneOfType([import_prop_types170.default.number, import_prop_types170.default.string]),
    /**
     * Minimum number of rows to display when multiline option is set to true.
     */
    minRows: import_prop_types170.default.oneOfType([import_prop_types170.default.number, import_prop_types170.default.string]),
    /**
     * If `true`, a `textarea` element is rendered instead of an input.
     * @default false
     */
    multiline: import_prop_types170.default.bool,
    /**
     * Name attribute of the `input` element.
     */
    name: import_prop_types170.default.string,
    /**
     * @ignore
     */
    onBlur: import_prop_types170.default.func,
    /**
     * Callback fired when the value is changed.
     *
     * @param {object} event The event source of the callback.
     * You can pull out the new value by accessing `event.target.value` (string).
     */
    onChange: import_prop_types170.default.func,
    /**
     * @ignore
     */
    onFocus: import_prop_types170.default.func,
    /**
     * The short hint displayed in the `input` before the user enters a value.
     */
    placeholder: import_prop_types170.default.string,
    /**
     * If `true`, the label is displayed as required and the `input` element is required.
     * @default false
     */
    required: import_prop_types170.default.bool,
    /**
     * Number of rows to display when multiline option is set to true.
     */
    rows: import_prop_types170.default.oneOfType([import_prop_types170.default.number, import_prop_types170.default.string]),
    /**
     * Render a [`Select`](/material-ui/api/select/) element while passing the Input element to `Select` as `input` parameter.
     * If this option is set you must pass the options of the select as children.
     * @default false
     */
    select: import_prop_types170.default.bool,
    /**
     * Props applied to the [`Select`](/material-ui/api/select/) element.
     */
    SelectProps: import_prop_types170.default.object,
    /**
     * The size of the component.
     */
    size: import_prop_types170.default.oneOfType([import_prop_types170.default.oneOf(["medium", "small"]), import_prop_types170.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types170.default.oneOfType([import_prop_types170.default.arrayOf(import_prop_types170.default.oneOfType([import_prop_types170.default.func, import_prop_types170.default.object, import_prop_types170.default.bool])), import_prop_types170.default.func, import_prop_types170.default.object]),
    /**
     * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
     */
    type: import_prop_types170.default.string,
    /**
     * The value of the `input` element, required for a controlled component.
     */
    value: import_prop_types170.default.any,
    /**
     * The variant to use.
     * @default 'outlined'
     */
    variant: import_prop_types170.default.oneOf(["filled", "outlined", "standard"])
  } : void 0;
  var TextField_default = TextField;

  // node_modules/@mui/material/ToggleButton/ToggleButton.js
  init_extends();
  var React258 = __toESM(require_react());
  var import_prop_types171 = __toESM(require_prop_types());
  var import_composeClasses122 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/ToggleButton/toggleButtonClasses.js
  var import_utils278 = __toESM(require_utils());
  var import_generateUtilityClass136 = __toESM(require_generateUtilityClass3());
  function getToggleButtonUtilityClass(slot) {
    return (0, import_generateUtilityClass136.default)("MuiToggleButton", slot);
  }
  var toggleButtonClasses = (0, import_utils278.unstable_generateUtilityClasses)("MuiToggleButton", ["root", "disabled", "selected", "standard", "primary", "secondary", "sizeSmall", "sizeMedium", "sizeLarge"]);
  var toggleButtonClasses_default = toggleButtonClasses;

  // node_modules/@mui/material/ToggleButton/ToggleButton.js
  var import_jsx_runtime255 = __toESM(require_jsx_runtime());
  var _excluded167 = ["children", "className", "color", "disabled", "disableFocusRipple", "fullWidth", "onChange", "onClick", "selected", "size", "value"];
  var useUtilityClasses134 = (ownerState) => {
    const {
      classes,
      fullWidth,
      selected,
      disabled,
      size: size2,
      color
    } = ownerState;
    const slots = {
      root: ["root", selected && "selected", disabled && "disabled", fullWidth && "fullWidth", `size${capitalize_default(size2)}`, color]
    };
    return (0, import_composeClasses122.unstable_composeClasses)(slots, getToggleButtonUtilityClass, classes);
  };
  var ToggleButtonRoot = styled_default(ButtonBase_default, {
    name: "MuiToggleButton",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [styles7.root, styles7[`size${capitalize_default(ownerState.size)}`]];
    }
  })(({
    theme,
    ownerState
  }) => {
    let selectedColor = ownerState.color === "standard" ? theme.palette.text.primary : theme.palette[ownerState.color].main;
    let selectedColorChannel;
    if (theme.vars) {
      selectedColor = ownerState.color === "standard" ? theme.vars.palette.text.primary : theme.vars.palette[ownerState.color].main;
      selectedColorChannel = ownerState.color === "standard" ? theme.vars.palette.text.primaryChannel : theme.vars.palette[ownerState.color].mainChannel;
    }
    return _extends({}, theme.typography.button, {
      borderRadius: (theme.vars || theme).shape.borderRadius,
      padding: 11,
      border: `1px solid ${(theme.vars || theme).palette.divider}`,
      color: (theme.vars || theme).palette.action.active
    }, ownerState.fullWidth && {
      width: "100%"
    }, {
      [`&.${toggleButtonClasses_default.disabled}`]: {
        color: (theme.vars || theme).palette.action.disabled,
        border: `1px solid ${(theme.vars || theme).palette.action.disabledBackground}`
      },
      "&:hover": {
        textDecoration: "none",
        // Reset on mouse devices
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.text.primaryChannel} / ${theme.vars.palette.action.hoverOpacity})` : (0, import_system10.alpha)(theme.palette.text.primary, theme.palette.action.hoverOpacity),
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      },
      [`&.${toggleButtonClasses_default.selected}`]: {
        color: selectedColor,
        backgroundColor: theme.vars ? `rgba(${selectedColorChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, import_system10.alpha)(selectedColor, theme.palette.action.selectedOpacity),
        "&:hover": {
          backgroundColor: theme.vars ? `rgba(${selectedColorChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : (0, import_system10.alpha)(selectedColor, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
          // Reset on touch devices, it doesn't add specificity
          "@media (hover: none)": {
            backgroundColor: theme.vars ? `rgba(${selectedColorChannel} / ${theme.vars.palette.action.selectedOpacity})` : (0, import_system10.alpha)(selectedColor, theme.palette.action.selectedOpacity)
          }
        }
      }
    }, ownerState.size === "small" && {
      padding: 7,
      fontSize: theme.typography.pxToRem(13)
    }, ownerState.size === "large" && {
      padding: 15,
      fontSize: theme.typography.pxToRem(15)
    });
  });
  var ToggleButton = /* @__PURE__ */ React258.forwardRef(function ToggleButton2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiToggleButton"
    });
    const {
      children,
      className,
      color = "standard",
      disabled = false,
      disableFocusRipple = false,
      fullWidth = false,
      onChange,
      onClick,
      selected,
      size: size2 = "medium",
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded167);
    const ownerState = _extends({}, props, {
      color,
      disabled,
      disableFocusRipple,
      fullWidth,
      size: size2
    });
    const classes = useUtilityClasses134(ownerState);
    const handleChange = (event) => {
      if (onClick) {
        onClick(event, value);
        if (event.defaultPrevented) {
          return;
        }
      }
      if (onChange) {
        onChange(event, value);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime255.jsx)(ToggleButtonRoot, _extends({
      className: clsx_default(classes.root, className),
      disabled,
      focusRipple: !disableFocusRipple,
      ref,
      onClick: handleChange,
      onChange,
      value,
      ownerState,
      "aria-pressed": selected
    }, other, {
      children
    }));
  });
  true ? ToggleButton.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types171.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types171.default.object,
    /**
     * @ignore
     */
    className: import_prop_types171.default.string,
    /**
     * The color of the button when it is in an active state.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'standard'
     */
    color: import_prop_types171.default.oneOfType([import_prop_types171.default.oneOf(["standard", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types171.default.string]),
    /**
     * If `true`, the component is disabled.
     * @default false
     */
    disabled: import_prop_types171.default.bool,
    /**
     * If `true`, the  keyboard focus ripple is disabled.
     * @default false
     */
    disableFocusRipple: import_prop_types171.default.bool,
    /**
     * If `true`, the ripple effect is disabled.
     *
     * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
     * to highlight the element by applying separate styles with the `.Mui-focusVisible` class.
     * @default false
     */
    disableRipple: import_prop_types171.default.bool,
    /**
     * If `true`, the button will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types171.default.bool,
    /**
     * Callback fired when the state changes.
     *
     * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.
     * @param {any} value of the selected button.
     */
    onChange: import_prop_types171.default.func,
    /**
     * Callback fired when the button is clicked.
     *
     * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.
     * @param {any} value of the selected button.
     */
    onClick: import_prop_types171.default.func,
    /**
     * If `true`, the button is rendered in an active state.
     */
    selected: import_prop_types171.default.bool,
    /**
     * The size of the component.
     * The prop defaults to the value inherited from the parent ToggleButtonGroup component.
     * @default 'medium'
     */
    size: import_prop_types171.default.oneOfType([import_prop_types171.default.oneOf(["small", "medium", "large"]), import_prop_types171.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types171.default.oneOfType([import_prop_types171.default.arrayOf(import_prop_types171.default.oneOfType([import_prop_types171.default.func, import_prop_types171.default.object, import_prop_types171.default.bool])), import_prop_types171.default.func, import_prop_types171.default.object]),
    /**
     * The value to associate with the button when selected in a
     * ToggleButtonGroup.
     */
    value: import_prop_types171.default.any.isRequired
  } : void 0;
  var ToggleButton_default = ToggleButton;

  // node_modules/@mui/material/ToggleButtonGroup/ToggleButtonGroup.js
  init_extends();
  var React259 = __toESM(require_react());
  var import_react_is11 = __toESM(require_react_is3());
  var import_prop_types172 = __toESM(require_prop_types());
  var import_composeClasses123 = __toESM(require_composeClasses3());

  // node_modules/@mui/material/ToggleButtonGroup/isValueSelected.js
  function isValueSelected(value, candidate) {
    if (candidate === void 0 || value === void 0) {
      return false;
    }
    if (Array.isArray(candidate)) {
      return candidate.indexOf(value) >= 0;
    }
    return value === candidate;
  }

  // node_modules/@mui/material/ToggleButtonGroup/toggleButtonGroupClasses.js
  var import_utils279 = __toESM(require_utils());
  var import_generateUtilityClass137 = __toESM(require_generateUtilityClass3());
  function getToggleButtonGroupUtilityClass(slot) {
    return (0, import_generateUtilityClass137.default)("MuiToggleButtonGroup", slot);
  }
  var toggleButtonGroupClasses = (0, import_utils279.unstable_generateUtilityClasses)("MuiToggleButtonGroup", ["root", "selected", "vertical", "disabled", "grouped", "groupedHorizontal", "groupedVertical"]);
  var toggleButtonGroupClasses_default = toggleButtonGroupClasses;

  // node_modules/@mui/material/ToggleButtonGroup/ToggleButtonGroup.js
  var import_jsx_runtime256 = __toESM(require_jsx_runtime());
  var _excluded168 = ["children", "className", "color", "disabled", "exclusive", "fullWidth", "onChange", "orientation", "size", "value"];
  var useUtilityClasses135 = (ownerState) => {
    const {
      classes,
      orientation,
      fullWidth,
      disabled
    } = ownerState;
    const slots = {
      root: ["root", orientation === "vertical" && "vertical", fullWidth && "fullWidth"],
      grouped: ["grouped", `grouped${capitalize_default(orientation)}`, disabled && "disabled"]
    };
    return (0, import_composeClasses123.unstable_composeClasses)(slots, getToggleButtonGroupUtilityClass, classes);
  };
  var ToggleButtonGroupRoot = styled_default("div", {
    name: "MuiToggleButtonGroup",
    slot: "Root",
    overridesResolver: (props, styles7) => {
      const {
        ownerState
      } = props;
      return [{
        [`& .${toggleButtonGroupClasses_default.grouped}`]: styles7.grouped
      }, {
        [`& .${toggleButtonGroupClasses_default.grouped}`]: styles7[`grouped${capitalize_default(ownerState.orientation)}`]
      }, styles7.root, ownerState.orientation === "vertical" && styles7.vertical, ownerState.fullWidth && styles7.fullWidth];
    }
  })(({
    ownerState,
    theme
  }) => _extends({
    display: "inline-flex",
    borderRadius: (theme.vars || theme).shape.borderRadius
  }, ownerState.orientation === "vertical" && {
    flexDirection: "column"
  }, ownerState.fullWidth && {
    width: "100%"
  }, {
    [`& .${toggleButtonGroupClasses_default.grouped}`]: _extends({}, ownerState.orientation === "horizontal" ? {
      "&:not(:first-of-type)": {
        marginLeft: -1,
        borderLeft: "1px solid transparent",
        borderTopLeftRadius: 0,
        borderBottomLeftRadius: 0
      },
      "&:not(:last-of-type)": {
        borderTopRightRadius: 0,
        borderBottomRightRadius: 0
      },
      [`&.${toggleButtonGroupClasses_default.selected} + .${toggleButtonGroupClasses_default.grouped}.${toggleButtonGroupClasses_default.selected}`]: {
        borderLeft: 0,
        marginLeft: 0
      }
    } : {
      "&:not(:first-of-type)": {
        marginTop: -1,
        borderTop: "1px solid transparent",
        borderTopLeftRadius: 0,
        borderTopRightRadius: 0
      },
      "&:not(:last-of-type)": {
        borderBottomLeftRadius: 0,
        borderBottomRightRadius: 0
      },
      [`&.${toggleButtonGroupClasses_default.selected} + .${toggleButtonGroupClasses_default.grouped}.${toggleButtonGroupClasses_default.selected}`]: {
        borderTop: 0,
        marginTop: 0
      }
    })
  }));
  var ToggleButtonGroup = /* @__PURE__ */ React259.forwardRef(function ToggleButtonGroup2(inProps, ref) {
    const props = useThemeProps({
      props: inProps,
      name: "MuiToggleButtonGroup"
    });
    const {
      children,
      className,
      color = "standard",
      disabled = false,
      exclusive = false,
      fullWidth = false,
      onChange,
      orientation = "horizontal",
      size: size2 = "medium",
      value
    } = props, other = _objectWithoutPropertiesLoose(props, _excluded168);
    const ownerState = _extends({}, props, {
      disabled,
      fullWidth,
      orientation,
      size: size2
    });
    const classes = useUtilityClasses135(ownerState);
    const handleChange = (event, buttonValue) => {
      if (!onChange) {
        return;
      }
      const index3 = value && value.indexOf(buttonValue);
      let newValue;
      if (value && index3 >= 0) {
        newValue = value.slice();
        newValue.splice(index3, 1);
      } else {
        newValue = value ? value.concat(buttonValue) : [buttonValue];
      }
      onChange(event, newValue);
    };
    const handleExclusiveChange = (event, buttonValue) => {
      if (!onChange) {
        return;
      }
      onChange(event, value === buttonValue ? null : buttonValue);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime256.jsx)(ToggleButtonGroupRoot, _extends({
      role: "group",
      className: clsx_default(classes.root, className),
      ref,
      ownerState
    }, other, {
      children: React259.Children.map(children, (child) => {
        if (!/* @__PURE__ */ React259.isValidElement(child)) {
          return null;
        }
        if (true) {
          if ((0, import_react_is11.isFragment)(child)) {
            console.error(["MUI: The ToggleButtonGroup component doesn't accept a Fragment as a child.", "Consider providing an array instead."].join("\n"));
          }
        }
        return /* @__PURE__ */ React259.cloneElement(child, {
          className: clsx_default(classes.grouped, child.props.className),
          onChange: exclusive ? handleExclusiveChange : handleChange,
          selected: child.props.selected === void 0 ? isValueSelected(child.props.value, value) : child.props.selected,
          size: child.props.size || size2,
          fullWidth,
          color: child.props.color || color,
          disabled: child.props.disabled || disabled
        });
      })
    }));
  });
  true ? ToggleButtonGroup.propTypes = {
    // ----------------------------- Warning --------------------------------
    // | These PropTypes are generated from the TypeScript type definitions |
    // |     To update them edit the d.ts file and run "yarn proptypes"     |
    // ----------------------------------------------------------------------
    /**
     * The content of the component.
     */
    children: import_prop_types172.default.node,
    /**
     * Override or extend the styles applied to the component.
     */
    classes: import_prop_types172.default.object,
    /**
     * @ignore
     */
    className: import_prop_types172.default.string,
    /**
     * The color of the button when it is selected.
     * It supports both default and custom theme colors, which can be added as shown in the
     * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).
     * @default 'standard'
     */
    color: import_prop_types172.default.oneOfType([import_prop_types172.default.oneOf(["standard", "primary", "secondary", "error", "info", "success", "warning"]), import_prop_types172.default.string]),
    /**
     * If `true`, the component is disabled. This implies that all ToggleButton children will be disabled.
     * @default false
     */
    disabled: import_prop_types172.default.bool,
    /**
     * If `true`, only allow one of the child ToggleButton values to be selected.
     * @default false
     */
    exclusive: import_prop_types172.default.bool,
    /**
     * If `true`, the button group will take up the full width of its container.
     * @default false
     */
    fullWidth: import_prop_types172.default.bool,
    /**
     * Callback fired when the value changes.
     *
     * @param {React.MouseEvent<HTMLElement>} event The event source of the callback.
     * @param {any} value of the selected buttons. When `exclusive` is true
     * this is a single value; when false an array of selected values. If no value
     * is selected and `exclusive` is true the value is null; when false an empty array.
     */
    onChange: import_prop_types172.default.func,
    /**
     * The component orientation (layout flow direction).
     * @default 'horizontal'
     */
    orientation: import_prop_types172.default.oneOf(["horizontal", "vertical"]),
    /**
     * The size of the component.
     * @default 'medium'
     */
    size: import_prop_types172.default.oneOfType([import_prop_types172.default.oneOf(["small", "medium", "large"]), import_prop_types172.default.string]),
    /**
     * The system prop that allows defining system overrides as well as additional CSS styles.
     */
    sx: import_prop_types172.default.oneOfType([import_prop_types172.default.arrayOf(import_prop_types172.default.oneOfType([import_prop_types172.default.func, import_prop_types172.default.object, import_prop_types172.default.bool])), import_prop_types172.default.func, import_prop_types172.default.object]),
    /**
     * The currently selected value within the group or an array of selected
     * values when `exclusive` is false.
     *
     * The value must have reference equality with the option in order to be selected.
     */
    value: import_prop_types172.default.any
  } : void 0;
  var ToggleButtonGroup_default = ToggleButtonGroup;

  // node_modules/@mui/material/useScrollTrigger/useScrollTrigger.js
  init_extends();
  var React260 = __toESM(require_react());
  var _excluded169 = ["getTrigger", "target"];
  function defaultTrigger(store, options) {
    const {
      disableHysteresis = false,
      threshold = 100,
      target
    } = options;
    const previous = store.current;
    if (target) {
      store.current = target.pageYOffset !== void 0 ? target.pageYOffset : target.scrollTop;
    }
    if (!disableHysteresis && previous !== void 0) {
      if (store.current < previous) {
        return false;
      }
    }
    return store.current > threshold;
  }
  var defaultTarget = typeof window !== "undefined" ? window : null;
  function useScrollTrigger(options = {}) {
    const {
      getTrigger = defaultTrigger,
      target = defaultTarget
    } = options, other = _objectWithoutPropertiesLoose(options, _excluded169);
    const store = React260.useRef();
    const [trigger, setTrigger] = React260.useState(() => getTrigger(store, other));
    React260.useEffect(() => {
      const handleScroll = () => {
        setTrigger(getTrigger(store, _extends({
          target
        }, other)));
      };
      handleScroll();
      target.addEventListener("scroll", handleScroll, {
        passive: true
      });
      return () => {
        target.removeEventListener("scroll", handleScroll, {
          passive: true
        });
      };
    }, [target, getTrigger, JSON.stringify(other)]);
    return trigger;
  }

  // node_modules/@mui/material/index.js
  var import_composeClasses124 = __toESM(require_composeClasses3());
  var import_generateUtilityClass138 = __toESM(require_generateUtilityClass3());
  __reExport(material_exports, __toESM(require_generateUtilityClass3()));

  // node_modules/@mui/material/generateUtilityClasses/index.js
  var import_utils280 = __toESM(require_utils());

  // src/app/components/toolTip.tsx
  var import_ArrowForwardIos = __toESM(require_ArrowForwardIos());
  var ToolTip = ({ setShowChatWidget, setShowToolTip, config: config2 }) => {
    const styles7 = styles_default();
    const handleClick = () => {
      setShowChatWidget(true);
      setShowToolTip(false);
    };
    const termsLink = /* @__PURE__ */ React.createElement("a", { href: config2.terms_of_service_link || "#", className: styles7.termsConditionsLink }, "Terms&Conditions");
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Grid_default, { className: styles7.toolTip }, /* @__PURE__ */ React.createElement(Grid_default, { className: styles7.toolTipBlack, item: true }, /* @__PURE__ */ React.createElement(Grid_default, { item: true, className: styles7.logo }, /* @__PURE__ */ React.createElement("img", { src: config2.logo_url, style: { height: "40px", width: "40px", margin: "2em" } })), /* @__PURE__ */ React.createElement(Typography_default, { className: styles7.toolTipText }, config2.widget_headline)), /* @__PURE__ */ React.createElement(Grid_default, { item: true, className: styles7.toolTipWhite }, /* @__PURE__ */ React.createElement(
      Button_default,
      {
        variant: "contained",
        className: styles7.findCrmButton,
        sx: {
          backgroundColor: "#D02DF5",
          textTransform: "none",
          width: 270,
          ":hover": {
            backgroundColor: "#aa32c5",
            borderColor: "#0062cc",
            boxShadow: "none"
          }
        },
        endIcon: /* @__PURE__ */ React.createElement(import_ArrowForwardIos.default, { style: { fontSize: "15px", marginLeft: "5em" } }),
        onClick: () => handleClick()
      },
      config2.cta_button_prompt
    )), /* @__PURE__ */ React.createElement(Typography_default, { className: styles7.termsConditions }, "By continuing you agree to ", termsLink)));
  };
  var toolTip_default = ToolTip;

  // src/app/page.tsx
  var import_react17 = __toESM(require_react());

  // node_modules/axios/lib/helpers/bind.js
  function bind(fn2, thisArg) {
    return function wrap() {
      return fn2.apply(thisArg, arguments);
    };
  }

  // node_modules/axios/lib/utils.js
  var { toString } = Object.prototype;
  var { getPrototypeOf } = Object;
  var kindOf = ((cache3) => (thing) => {
    const str = toString.call(thing);
    return cache3[str] || (cache3[str] = str.slice(8, -1).toLowerCase());
  })(/* @__PURE__ */ Object.create(null));
  var kindOfTest = (type) => {
    type = type.toLowerCase();
    return (thing) => kindOf(thing) === type;
  };
  var typeOfTest = (type) => (thing) => typeof thing === type;
  var { isArray } = Array;
  var isUndefined = typeOfTest("undefined");
  function isBuffer(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
  }
  var isArrayBuffer = kindOfTest("ArrayBuffer");
  function isArrayBufferView(val) {
    let result;
    if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
      result = ArrayBuffer.isView(val);
    } else {
      result = val && val.buffer && isArrayBuffer(val.buffer);
    }
    return result;
  }
  var isString = typeOfTest("string");
  var isFunction = typeOfTest("function");
  var isNumber2 = typeOfTest("number");
  var isObject = (thing) => thing !== null && typeof thing === "object";
  var isBoolean = (thing) => thing === true || thing === false;
  var isPlainObject = (val) => {
    if (kindOf(val) !== "object") {
      return false;
    }
    const prototype3 = getPrototypeOf(val);
    return (prototype3 === null || prototype3 === Object.prototype || Object.getPrototypeOf(prototype3) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
  };
  var isDate = kindOfTest("Date");
  var isFile = kindOfTest("File");
  var isBlob = kindOfTest("Blob");
  var isFileList = kindOfTest("FileList");
  var isStream = (val) => isObject(val) && isFunction(val.pipe);
  var isFormData = (thing) => {
    let kind;
    return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
    kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
  };
  var isURLSearchParams = kindOfTest("URLSearchParams");
  var trim2 = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
  function forEach(obj, fn2, { allOwnKeys = false } = {}) {
    if (obj === null || typeof obj === "undefined") {
      return;
    }
    let i;
    let l;
    if (typeof obj !== "object") {
      obj = [obj];
    }
    if (isArray(obj)) {
      for (i = 0, l = obj.length; i < l; i++) {
        fn2.call(null, obj[i], i, obj);
      }
    } else {
      const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
      const len = keys.length;
      let key;
      for (i = 0; i < len; i++) {
        key = keys[i];
        fn2.call(null, obj[key], key, obj);
      }
    }
  }
  function findKey(obj, key) {
    key = key.toLowerCase();
    const keys = Object.keys(obj);
    let i = keys.length;
    let _key;
    while (i-- > 0) {
      _key = keys[i];
      if (key === _key.toLowerCase()) {
        return _key;
      }
    }
    return null;
  }
  var _global = (() => {
    if (typeof globalThis !== "undefined")
      return globalThis;
    return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
  })();
  var isContextDefined = (context) => !isUndefined(context) && context !== _global;
  function merge2() {
    const { caseless } = isContextDefined(this) && this || {};
    const result = {};
    const assignValue = (val, key) => {
      const targetKey = caseless && findKey(result, key) || key;
      if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
        result[targetKey] = merge2(result[targetKey], val);
      } else if (isPlainObject(val)) {
        result[targetKey] = merge2({}, val);
      } else if (isArray(val)) {
        result[targetKey] = val.slice();
      } else {
        result[targetKey] = val;
      }
    };
    for (let i = 0, l = arguments.length; i < l; i++) {
      arguments[i] && forEach(arguments[i], assignValue);
    }
    return result;
  }
  var extend = (a, b, thisArg, { allOwnKeys } = {}) => {
    forEach(b, (val, key) => {
      if (thisArg && isFunction(val)) {
        a[key] = bind(val, thisArg);
      } else {
        a[key] = val;
      }
    }, { allOwnKeys });
    return a;
  };
  var stripBOM = (content) => {
    if (content.charCodeAt(0) === 65279) {
      content = content.slice(1);
    }
    return content;
  };
  var inherits = (constructor, superConstructor, props, descriptors2) => {
    constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
    constructor.prototype.constructor = constructor;
    Object.defineProperty(constructor, "super", {
      value: superConstructor.prototype
    });
    props && Object.assign(constructor.prototype, props);
  };
  var toFlatObject = (sourceObj, destObj, filter2, propFilter) => {
    let props;
    let i;
    let prop;
    const merged = {};
    destObj = destObj || {};
    if (sourceObj == null)
      return destObj;
    do {
      props = Object.getOwnPropertyNames(sourceObj);
      i = props.length;
      while (i-- > 0) {
        prop = props[i];
        if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
          destObj[prop] = sourceObj[prop];
          merged[prop] = true;
        }
      }
      sourceObj = filter2 !== false && getPrototypeOf(sourceObj);
    } while (sourceObj && (!filter2 || filter2(sourceObj, destObj)) && sourceObj !== Object.prototype);
    return destObj;
  };
  var endsWith = (str, searchString, position2) => {
    str = String(str);
    if (position2 === void 0 || position2 > str.length) {
      position2 = str.length;
    }
    position2 -= searchString.length;
    const lastIndex = str.indexOf(searchString, position2);
    return lastIndex !== -1 && lastIndex === position2;
  };
  var toArray = (thing) => {
    if (!thing)
      return null;
    if (isArray(thing))
      return thing;
    let i = thing.length;
    if (!isNumber2(i))
      return null;
    const arr = new Array(i);
    while (i-- > 0) {
      arr[i] = thing[i];
    }
    return arr;
  };
  var isTypedArray = ((TypedArray) => {
    return (thing) => {
      return TypedArray && thing instanceof TypedArray;
    };
  })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
  var forEachEntry = (obj, fn2) => {
    const generator = obj && obj[Symbol.iterator];
    const iterator = generator.call(obj);
    let result;
    while ((result = iterator.next()) && !result.done) {
      const pair = result.value;
      fn2.call(obj, pair[0], pair[1]);
    }
  };
  var matchAll = (regExp2, str) => {
    let matches;
    const arr = [];
    while ((matches = regExp2.exec(str)) !== null) {
      arr.push(matches);
    }
    return arr;
  };
  var isHTMLForm = kindOfTest("HTMLFormElement");
  var toCamelCase = (str) => {
    return str.toLowerCase().replace(
      /[-_\s]([a-z\d])(\w*)/g,
      function replacer(m, p1, p2) {
        return p1.toUpperCase() + p2;
      }
    );
  };
  var hasOwnProperty2 = (({ hasOwnProperty: hasOwnProperty3 }) => (obj, prop) => hasOwnProperty3.call(obj, prop))(Object.prototype);
  var isRegExp = kindOfTest("RegExp");
  var reduceDescriptors = (obj, reducer) => {
    const descriptors2 = Object.getOwnPropertyDescriptors(obj);
    const reducedDescriptors = {};
    forEach(descriptors2, (descriptor, name) => {
      let ret;
      if ((ret = reducer(descriptor, name, obj)) !== false) {
        reducedDescriptors[name] = ret || descriptor;
      }
    });
    Object.defineProperties(obj, reducedDescriptors);
  };
  var freezeMethods = (obj) => {
    reduceDescriptors(obj, (descriptor, name) => {
      if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
        return false;
      }
      const value = obj[name];
      if (!isFunction(value))
        return;
      descriptor.enumerable = false;
      if ("writable" in descriptor) {
        descriptor.writable = false;
        return;
      }
      if (!descriptor.set) {
        descriptor.set = () => {
          throw Error("Can not rewrite read-only method '" + name + "'");
        };
      }
    });
  };
  var toObjectSet = (arrayOrString, delimiter2) => {
    const obj = {};
    const define2 = (arr) => {
      arr.forEach((value) => {
        obj[value] = true;
      });
    };
    isArray(arrayOrString) ? define2(arrayOrString) : define2(String(arrayOrString).split(delimiter2));
    return obj;
  };
  var noop3 = () => {
  };
  var toFiniteNumber = (value, defaultValue) => {
    value = +value;
    return Number.isFinite(value) ? value : defaultValue;
  };
  var ALPHA = "abcdefghijklmnopqrstuvwxyz";
  var DIGIT = "0123456789";
  var ALPHABET = {
    DIGIT,
    ALPHA,
    ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
  };
  var generateString = (size2 = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
    let str = "";
    const { length: length2 } = alphabet;
    while (size2--) {
      str += alphabet[Math.random() * length2 | 0];
    }
    return str;
  };
  function isSpecCompliantForm(thing) {
    return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
  }
  var toJSONObject = (obj) => {
    const stack = new Array(10);
    const visit = (source, i) => {
      if (isObject(source)) {
        if (stack.indexOf(source) >= 0) {
          return;
        }
        if (!("toJSON" in source)) {
          stack[i] = source;
          const target = isArray(source) ? [] : {};
          forEach(source, (value, key) => {
            const reducedValue = visit(value, i + 1);
            !isUndefined(reducedValue) && (target[key] = reducedValue);
          });
          stack[i] = void 0;
          return target;
        }
      }
      return source;
    };
    return visit(obj, 0);
  };
  var isAsyncFn = kindOfTest("AsyncFunction");
  var isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
  var utils_default = {
    isArray,
    isArrayBuffer,
    isBuffer,
    isFormData,
    isArrayBufferView,
    isString,
    isNumber: isNumber2,
    isBoolean,
    isObject,
    isPlainObject,
    isUndefined,
    isDate,
    isFile,
    isBlob,
    isRegExp,
    isFunction,
    isStream,
    isURLSearchParams,
    isTypedArray,
    isFileList,
    forEach,
    merge: merge2,
    extend,
    trim: trim2,
    stripBOM,
    inherits,
    toFlatObject,
    kindOf,
    kindOfTest,
    endsWith,
    toArray,
    forEachEntry,
    matchAll,
    isHTMLForm,
    hasOwnProperty: hasOwnProperty2,
    hasOwnProp: hasOwnProperty2,
    // an alias to avoid ESLint no-prototype-builtins detection
    reduceDescriptors,
    freezeMethods,
    toObjectSet,
    toCamelCase,
    noop: noop3,
    toFiniteNumber,
    findKey,
    global: _global,
    isContextDefined,
    ALPHABET,
    generateString,
    isSpecCompliantForm,
    toJSONObject,
    isAsyncFn,
    isThenable
  };

  // node_modules/axios/lib/core/AxiosError.js
  function AxiosError(message, code, config2, request, response) {
    Error.call(this);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, this.constructor);
    } else {
      this.stack = new Error().stack;
    }
    this.message = message;
    this.name = "AxiosError";
    code && (this.code = code);
    config2 && (this.config = config2);
    request && (this.request = request);
    response && (this.response = response);
  }
  utils_default.inherits(AxiosError, Error, {
    toJSON: function toJSON() {
      return {
        // Standard
        message: this.message,
        name: this.name,
        // Microsoft
        description: this.description,
        number: this.number,
        // Mozilla
        fileName: this.fileName,
        lineNumber: this.lineNumber,
        columnNumber: this.columnNumber,
        stack: this.stack,
        // Axios
        config: utils_default.toJSONObject(this.config),
        code: this.code,
        status: this.response && this.response.status ? this.response.status : null
      };
    }
  });
  var prototype = AxiosError.prototype;
  var descriptors = {};
  [
    "ERR_BAD_OPTION_VALUE",
    "ERR_BAD_OPTION",
    "ECONNABORTED",
    "ETIMEDOUT",
    "ERR_NETWORK",
    "ERR_FR_TOO_MANY_REDIRECTS",
    "ERR_DEPRECATED",
    "ERR_BAD_RESPONSE",
    "ERR_BAD_REQUEST",
    "ERR_CANCELED",
    "ERR_NOT_SUPPORT",
    "ERR_INVALID_URL"
    // eslint-disable-next-line func-names
  ].forEach((code) => {
    descriptors[code] = { value: code };
  });
  Object.defineProperties(AxiosError, descriptors);
  Object.defineProperty(prototype, "isAxiosError", { value: true });
  AxiosError.from = (error, code, config2, request, response, customProps) => {
    const axiosError = Object.create(prototype);
    utils_default.toFlatObject(error, axiosError, function filter2(obj) {
      return obj !== Error.prototype;
    }, (prop) => {
      return prop !== "isAxiosError";
    });
    AxiosError.call(axiosError, error.message, code, config2, request, response);
    axiosError.cause = error;
    axiosError.name = error.name;
    customProps && Object.assign(axiosError, customProps);
    return axiosError;
  };
  var AxiosError_default = AxiosError;

  // node_modules/axios/lib/helpers/null.js
  var null_default = null;

  // node_modules/axios/lib/helpers/toFormData.js
  function isVisitable(thing) {
    return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
  }
  function removeBrackets(key) {
    return utils_default.endsWith(key, "[]") ? key.slice(0, -2) : key;
  }
  function renderKey(path, key, dots) {
    if (!path)
      return key;
    return path.concat(key).map(function each(token2, i) {
      token2 = removeBrackets(token2);
      return !dots && i ? "[" + token2 + "]" : token2;
    }).join(dots ? "." : "");
  }
  function isFlatArray(arr) {
    return utils_default.isArray(arr) && !arr.some(isVisitable);
  }
  var predicates = utils_default.toFlatObject(utils_default, {}, null, function filter(prop) {
    return /^is[A-Z]/.test(prop);
  });
  function toFormData(obj, formData, options) {
    if (!utils_default.isObject(obj)) {
      throw new TypeError("target must be an object");
    }
    formData = formData || new (null_default || FormData)();
    options = utils_default.toFlatObject(options, {
      metaTokens: true,
      dots: false,
      indexes: false
    }, false, function defined(option, source) {
      return !utils_default.isUndefined(source[option]);
    });
    const metaTokens = options.metaTokens;
    const visitor = options.visitor || defaultVisitor;
    const dots = options.dots;
    const indexes = options.indexes;
    const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
    const useBlob = _Blob && utils_default.isSpecCompliantForm(formData);
    if (!utils_default.isFunction(visitor)) {
      throw new TypeError("visitor must be a function");
    }
    function convertValue(value) {
      if (value === null)
        return "";
      if (utils_default.isDate(value)) {
        return value.toISOString();
      }
      if (!useBlob && utils_default.isBlob(value)) {
        throw new AxiosError_default("Blob is not supported. Use a Buffer instead.");
      }
      if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {
        return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
      }
      return value;
    }
    function defaultVisitor(value, key, path) {
      let arr = value;
      if (value && !path && typeof value === "object") {
        if (utils_default.endsWith(key, "{}")) {
          key = metaTokens ? key : key.slice(0, -2);
          value = JSON.stringify(value);
        } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key, "[]")) && (arr = utils_default.toArray(value))) {
          key = removeBrackets(key);
          arr.forEach(function each(el2, index3) {
            !(utils_default.isUndefined(el2) || el2 === null) && formData.append(
              // eslint-disable-next-line no-nested-ternary
              indexes === true ? renderKey([key], index3, dots) : indexes === null ? key : key + "[]",
              convertValue(el2)
            );
          });
          return false;
        }
      }
      if (isVisitable(value)) {
        return true;
      }
      formData.append(renderKey(path, key, dots), convertValue(value));
      return false;
    }
    const stack = [];
    const exposedHelpers = Object.assign(predicates, {
      defaultVisitor,
      convertValue,
      isVisitable
    });
    function build(value, path) {
      if (utils_default.isUndefined(value))
        return;
      if (stack.indexOf(value) !== -1) {
        throw Error("Circular reference detected in " + path.join("."));
      }
      stack.push(value);
      utils_default.forEach(value, function each(el2, key) {
        const result = !(utils_default.isUndefined(el2) || el2 === null) && visitor.call(
          formData,
          el2,
          utils_default.isString(key) ? key.trim() : key,
          path,
          exposedHelpers
        );
        if (result === true) {
          build(el2, path ? path.concat(key) : [key]);
        }
      });
      stack.pop();
    }
    if (!utils_default.isObject(obj)) {
      throw new TypeError("data must be an object");
    }
    build(obj);
    return formData;
  }
  var toFormData_default = toFormData;

  // node_modules/axios/lib/helpers/AxiosURLSearchParams.js
  function encode(str) {
    const charMap = {
      "!": "%21",
      "'": "%27",
      "(": "%28",
      ")": "%29",
      "~": "%7E",
      "%20": "+",
      "%00": "\0"
    };
    return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match2) {
      return charMap[match2];
    });
  }
  function AxiosURLSearchParams(params, options) {
    this._pairs = [];
    params && toFormData_default(params, this, options);
  }
  var prototype2 = AxiosURLSearchParams.prototype;
  prototype2.append = function append2(name, value) {
    this._pairs.push([name, value]);
  };
  prototype2.toString = function toString2(encoder) {
    const _encode = encoder ? function(value) {
      return encoder.call(this, value, encode);
    } : encode;
    return this._pairs.map(function each(pair) {
      return _encode(pair[0]) + "=" + _encode(pair[1]);
    }, "").join("&");
  };
  var AxiosURLSearchParams_default = AxiosURLSearchParams;

  // node_modules/axios/lib/helpers/buildURL.js
  function encode2(val) {
    return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
  }
  function buildURL(url, params, options) {
    if (!params) {
      return url;
    }
    const _encode = options && options.encode || encode2;
    const serializeFn = options && options.serialize;
    let serializedParams;
    if (serializeFn) {
      serializedParams = serializeFn(params, options);
    } else {
      serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode);
    }
    if (serializedParams) {
      const hashmarkIndex = url.indexOf("#");
      if (hashmarkIndex !== -1) {
        url = url.slice(0, hashmarkIndex);
      }
      url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
    }
    return url;
  }

  // node_modules/axios/lib/core/InterceptorManager.js
  var InterceptorManager = class {
    constructor() {
      this.handlers = [];
    }
    /**
     * Add a new interceptor to the stack
     *
     * @param {Function} fulfilled The function to handle `then` for a `Promise`
     * @param {Function} rejected The function to handle `reject` for a `Promise`
     *
     * @return {Number} An ID used to remove interceptor later
     */
    use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled,
        rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    }
    /**
     * Remove an interceptor from the stack
     *
     * @param {Number} id The ID that was returned by `use`
     *
     * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
     */
    eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    }
    /**
     * Clear all interceptors from the stack
     *
     * @returns {void}
     */
    clear() {
      if (this.handlers) {
        this.handlers = [];
      }
    }
    /**
     * Iterate over all the registered interceptors
     *
     * This method is particularly useful for skipping over any
     * interceptors that may have become `null` calling `eject`.
     *
     * @param {Function} fn The function to call for each interceptor
     *
     * @returns {void}
     */
    forEach(fn2) {
      utils_default.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn2(h);
        }
      });
    }
  };
  var InterceptorManager_default = InterceptorManager;

  // node_modules/axios/lib/defaults/transitional.js
  var transitional_default = {
    silentJSONParsing: true,
    forcedJSONParsing: true,
    clarifyTimeoutError: false
  };

  // node_modules/axios/lib/platform/browser/classes/URLSearchParams.js
  var URLSearchParams_default = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams_default;

  // node_modules/axios/lib/platform/browser/classes/FormData.js
  var FormData_default = typeof FormData !== "undefined" ? FormData : null;

  // node_modules/axios/lib/platform/browser/classes/Blob.js
  var Blob_default = typeof Blob !== "undefined" ? Blob : null;

  // node_modules/axios/lib/platform/browser/index.js
  var isStandardBrowserEnv = (() => {
    let product;
    if (typeof navigator !== "undefined" && ((product = navigator.product) === "ReactNative" || product === "NativeScript" || product === "NS")) {
      return false;
    }
    return typeof window !== "undefined" && typeof document !== "undefined";
  })();
  var isStandardBrowserWebWorkerEnv = (() => {
    return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
    self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
  })();
  var browser_default = {
    isBrowser: true,
    classes: {
      URLSearchParams: URLSearchParams_default,
      FormData: FormData_default,
      Blob: Blob_default
    },
    isStandardBrowserEnv,
    isStandardBrowserWebWorkerEnv,
    protocols: ["http", "https", "file", "blob", "url", "data"]
  };

  // node_modules/axios/lib/helpers/toURLEncodedForm.js
  function toURLEncodedForm(data, options) {
    return toFormData_default(data, new browser_default.classes.URLSearchParams(), Object.assign({
      visitor: function(value, key, path, helpers) {
        if (browser_default.isNode && utils_default.isBuffer(value)) {
          this.append(key, value.toString("base64"));
          return false;
        }
        return helpers.defaultVisitor.apply(this, arguments);
      }
    }, options));
  }

  // node_modules/axios/lib/helpers/formDataToJSON.js
  function parsePropPath(name) {
    return utils_default.matchAll(/\w+|\[(\w*)]/g, name).map((match2) => {
      return match2[0] === "[]" ? "" : match2[1] || match2[0];
    });
  }
  function arrayToObject(arr) {
    const obj = {};
    const keys = Object.keys(arr);
    let i;
    const len = keys.length;
    let key;
    for (i = 0; i < len; i++) {
      key = keys[i];
      obj[key] = arr[key];
    }
    return obj;
  }
  function formDataToJSON(formData) {
    function buildPath(path, value, target, index3) {
      let name = path[index3++];
      const isNumericKey = Number.isFinite(+name);
      const isLast = index3 >= path.length;
      name = !name && utils_default.isArray(target) ? target.length : name;
      if (isLast) {
        if (utils_default.hasOwnProp(target, name)) {
          target[name] = [target[name], value];
        } else {
          target[name] = value;
        }
        return !isNumericKey;
      }
      if (!target[name] || !utils_default.isObject(target[name])) {
        target[name] = [];
      }
      const result = buildPath(path, value, target[name], index3);
      if (result && utils_default.isArray(target[name])) {
        target[name] = arrayToObject(target[name]);
      }
      return !isNumericKey;
    }
    if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
      const obj = {};
      utils_default.forEachEntry(formData, (name, value) => {
        buildPath(parsePropPath(name), value, obj, 0);
      });
      return obj;
    }
    return null;
  }
  var formDataToJSON_default = formDataToJSON;

  // node_modules/axios/lib/defaults/index.js
  function stringifySafely(rawValue, parser, encoder) {
    if (utils_default.isString(rawValue)) {
      try {
        (parser || JSON.parse)(rawValue);
        return utils_default.trim(rawValue);
      } catch (e) {
        if (e.name !== "SyntaxError") {
          throw e;
        }
      }
    }
    return (encoder || JSON.stringify)(rawValue);
  }
  var defaults = {
    transitional: transitional_default,
    adapter: ["xhr", "http"],
    transformRequest: [function transformRequest(data, headers) {
      const contentType = headers.getContentType() || "";
      const hasJSONContentType = contentType.indexOf("application/json") > -1;
      const isObjectPayload = utils_default.isObject(data);
      if (isObjectPayload && utils_default.isHTMLForm(data)) {
        data = new FormData(data);
      }
      const isFormData2 = utils_default.isFormData(data);
      if (isFormData2) {
        if (!hasJSONContentType) {
          return data;
        }
        return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;
      }
      if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data)) {
        return data;
      }
      if (utils_default.isArrayBufferView(data)) {
        return data.buffer;
      }
      if (utils_default.isURLSearchParams(data)) {
        headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
        return data.toString();
      }
      let isFileList2;
      if (isObjectPayload) {
        if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
          return toURLEncodedForm(data, this.formSerializer).toString();
        }
        if ((isFileList2 = utils_default.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
          const _FormData = this.env && this.env.FormData;
          return toFormData_default(
            isFileList2 ? { "files[]": data } : data,
            _FormData && new _FormData(),
            this.formSerializer
          );
        }
      }
      if (isObjectPayload || hasJSONContentType) {
        headers.setContentType("application/json", false);
        return stringifySafely(data);
      }
      return data;
    }],
    transformResponse: [function transformResponse(data) {
      const transitional2 = this.transitional || defaults.transitional;
      const forcedJSONParsing = transitional2 && transitional2.forcedJSONParsing;
      const JSONRequested = this.responseType === "json";
      if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
        const silentJSONParsing = transitional2 && transitional2.silentJSONParsing;
        const strictJSONParsing = !silentJSONParsing && JSONRequested;
        try {
          return JSON.parse(data);
        } catch (e) {
          if (strictJSONParsing) {
            if (e.name === "SyntaxError") {
              throw AxiosError_default.from(e, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
            }
            throw e;
          }
        }
      }
      return data;
    }],
    /**
     * A timeout in milliseconds to abort a request. If set to 0 (default) a
     * timeout is not created.
     */
    timeout: 0,
    xsrfCookieName: "XSRF-TOKEN",
    xsrfHeaderName: "X-XSRF-TOKEN",
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: browser_default.classes.FormData,
      Blob: browser_default.classes.Blob
    },
    validateStatus: function validateStatus(status) {
      return status >= 200 && status < 300;
    },
    headers: {
      common: {
        "Accept": "application/json, text/plain, */*",
        "Content-Type": void 0
      }
    }
  };
  utils_default.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
    defaults.headers[method] = {};
  });
  var defaults_default = defaults;

  // node_modules/axios/lib/helpers/parseHeaders.js
  var ignoreDuplicateOf = utils_default.toObjectSet([
    "age",
    "authorization",
    "content-length",
    "content-type",
    "etag",
    "expires",
    "from",
    "host",
    "if-modified-since",
    "if-unmodified-since",
    "last-modified",
    "location",
    "max-forwards",
    "proxy-authorization",
    "referer",
    "retry-after",
    "user-agent"
  ]);
  var parseHeaders_default = (rawHeaders) => {
    const parsed = {};
    let key;
    let val;
    let i;
    rawHeaders && rawHeaders.split("\n").forEach(function parser(line2) {
      i = line2.indexOf(":");
      key = line2.substring(0, i).trim().toLowerCase();
      val = line2.substring(i + 1).trim();
      if (!key || parsed[key] && ignoreDuplicateOf[key]) {
        return;
      }
      if (key === "set-cookie") {
        if (parsed[key]) {
          parsed[key].push(val);
        } else {
          parsed[key] = [val];
        }
      } else {
        parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
      }
    });
    return parsed;
  };

  // node_modules/axios/lib/core/AxiosHeaders.js
  var $internals = Symbol("internals");
  function normalizeHeader(header) {
    return header && String(header).trim().toLowerCase();
  }
  function normalizeValue(value) {
    if (value === false || value == null) {
      return value;
    }
    return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);
  }
  function parseTokens(str) {
    const tokens = /* @__PURE__ */ Object.create(null);
    const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
    let match2;
    while (match2 = tokensRE.exec(str)) {
      tokens[match2[1]] = match2[2];
    }
    return tokens;
  }
  var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
  function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
    if (utils_default.isFunction(filter2)) {
      return filter2.call(this, value, header);
    }
    if (isHeaderNameFilter) {
      value = header;
    }
    if (!utils_default.isString(value))
      return;
    if (utils_default.isString(filter2)) {
      return value.indexOf(filter2) !== -1;
    }
    if (utils_default.isRegExp(filter2)) {
      return filter2.test(value);
    }
  }
  function formatHeader(header) {
    return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char2, str) => {
      return char2.toUpperCase() + str;
    });
  }
  function buildAccessors(obj, header) {
    const accessorName = utils_default.toCamelCase(" " + header);
    ["get", "set", "has"].forEach((methodName) => {
      Object.defineProperty(obj, methodName + accessorName, {
        value: function(arg1, arg2, arg3) {
          return this[methodName].call(this, header, arg1, arg2, arg3);
        },
        configurable: true
      });
    });
  }
  var AxiosHeaders = class {
    constructor(headers) {
      headers && this.set(headers);
    }
    set(header, valueOrRewrite, rewrite) {
      const self2 = this;
      function setHeader(_value, _header, _rewrite) {
        const lHeader = normalizeHeader(_header);
        if (!lHeader) {
          throw new Error("header name must be a non-empty string");
        }
        const key = utils_default.findKey(self2, lHeader);
        if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
          self2[key || _header] = normalizeValue(_value);
        }
      }
      const setHeaders = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
      if (utils_default.isPlainObject(header) || header instanceof this.constructor) {
        setHeaders(header, valueOrRewrite);
      } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
        setHeaders(parseHeaders_default(header), valueOrRewrite);
      } else {
        header != null && setHeader(valueOrRewrite, header, rewrite);
      }
      return this;
    }
    get(header, parser) {
      header = normalizeHeader(header);
      if (header) {
        const key = utils_default.findKey(this, header);
        if (key) {
          const value = this[key];
          if (!parser) {
            return value;
          }
          if (parser === true) {
            return parseTokens(value);
          }
          if (utils_default.isFunction(parser)) {
            return parser.call(this, value, key);
          }
          if (utils_default.isRegExp(parser)) {
            return parser.exec(value);
          }
          throw new TypeError("parser must be boolean|regexp|function");
        }
      }
    }
    has(header, matcher) {
      header = normalizeHeader(header);
      if (header) {
        const key = utils_default.findKey(this, header);
        return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
      }
      return false;
    }
    delete(header, matcher) {
      const self2 = this;
      let deleted = false;
      function deleteHeader(_header) {
        _header = normalizeHeader(_header);
        if (_header) {
          const key = utils_default.findKey(self2, _header);
          if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
            delete self2[key];
            deleted = true;
          }
        }
      }
      if (utils_default.isArray(header)) {
        header.forEach(deleteHeader);
      } else {
        deleteHeader(header);
      }
      return deleted;
    }
    clear(matcher) {
      const keys = Object.keys(this);
      let i = keys.length;
      let deleted = false;
      while (i--) {
        const key = keys[i];
        if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
          delete this[key];
          deleted = true;
        }
      }
      return deleted;
    }
    normalize(format) {
      const self2 = this;
      const headers = {};
      utils_default.forEach(this, (value, header) => {
        const key = utils_default.findKey(headers, header);
        if (key) {
          self2[key] = normalizeValue(value);
          delete self2[header];
          return;
        }
        const normalized = format ? formatHeader(header) : String(header).trim();
        if (normalized !== header) {
          delete self2[header];
        }
        self2[normalized] = normalizeValue(value);
        headers[normalized] = true;
      });
      return this;
    }
    concat(...targets) {
      return this.constructor.concat(this, ...targets);
    }
    toJSON(asStrings) {
      const obj = /* @__PURE__ */ Object.create(null);
      utils_default.forEach(this, (value, header) => {
        value != null && value !== false && (obj[header] = asStrings && utils_default.isArray(value) ? value.join(", ") : value);
      });
      return obj;
    }
    [Symbol.iterator]() {
      return Object.entries(this.toJSON())[Symbol.iterator]();
    }
    toString() {
      return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
    }
    get [Symbol.toStringTag]() {
      return "AxiosHeaders";
    }
    static from(thing) {
      return thing instanceof this ? thing : new this(thing);
    }
    static concat(first, ...targets) {
      const computed = new this(first);
      targets.forEach((target) => computed.set(target));
      return computed;
    }
    static accessor(header) {
      const internals = this[$internals] = this[$internals] = {
        accessors: {}
      };
      const accessors = internals.accessors;
      const prototype3 = this.prototype;
      function defineAccessor(_header) {
        const lHeader = normalizeHeader(_header);
        if (!accessors[lHeader]) {
          buildAccessors(prototype3, _header);
          accessors[lHeader] = true;
        }
      }
      utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
      return this;
    }
  };
  AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
  utils_default.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
    let mapped = key[0].toUpperCase() + key.slice(1);
    return {
      get: () => value,
      set(headerValue) {
        this[mapped] = headerValue;
      }
    };
  });
  utils_default.freezeMethods(AxiosHeaders);
  var AxiosHeaders_default = AxiosHeaders;

  // node_modules/axios/lib/core/transformData.js
  function transformData(fns, response) {
    const config2 = this || defaults_default;
    const context = response || config2;
    const headers = AxiosHeaders_default.from(context.headers);
    let data = context.data;
    utils_default.forEach(fns, function transform2(fn2) {
      data = fn2.call(config2, data, headers.normalize(), response ? response.status : void 0);
    });
    headers.normalize();
    return data;
  }

  // node_modules/axios/lib/cancel/isCancel.js
  function isCancel(value) {
    return !!(value && value.__CANCEL__);
  }

  // node_modules/axios/lib/cancel/CanceledError.js
  function CanceledError(message, config2, request) {
    AxiosError_default.call(this, message == null ? "canceled" : message, AxiosError_default.ERR_CANCELED, config2, request);
    this.name = "CanceledError";
  }
  utils_default.inherits(CanceledError, AxiosError_default, {
    __CANCEL__: true
  });
  var CanceledError_default = CanceledError;

  // node_modules/axios/lib/core/settle.js
  function settle(resolve, reject, response) {
    const validateStatus2 = response.config.validateStatus;
    if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
      resolve(response);
    } else {
      reject(new AxiosError_default(
        "Request failed with status code " + response.status,
        [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
        response.config,
        response.request,
        response
      ));
    }
  }

  // node_modules/axios/lib/helpers/cookies.js
  var cookies_default = browser_default.isStandardBrowserEnv ? (
    // Standard browser envs support document.cookie
    function standardBrowserEnv() {
      return {
        write: function write2(name, value, expires, path, domain, secure) {
          const cookie = [];
          cookie.push(name + "=" + encodeURIComponent(value));
          if (utils_default.isNumber(expires)) {
            cookie.push("expires=" + new Date(expires).toGMTString());
          }
          if (utils_default.isString(path)) {
            cookie.push("path=" + path);
          }
          if (utils_default.isString(domain)) {
            cookie.push("domain=" + domain);
          }
          if (secure === true) {
            cookie.push("secure");
          }
          document.cookie = cookie.join("; ");
        },
        read: function read2(name) {
          const match2 = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match2 ? decodeURIComponent(match2[3]) : null;
        },
        remove: function remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      };
    }()
  ) : (
    // Non standard browser env (web workers, react-native) lack needed support.
    function nonStandardBrowserEnv() {
      return {
        write: function write2() {
        },
        read: function read2() {
          return null;
        },
        remove: function remove() {
        }
      };
    }()
  );

  // node_modules/axios/lib/helpers/isAbsoluteURL.js
  function isAbsoluteURL(url) {
    return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
  }

  // node_modules/axios/lib/helpers/combineURLs.js
  function combineURLs(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
  }

  // node_modules/axios/lib/core/buildFullPath.js
  function buildFullPath(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL(requestedURL)) {
      return combineURLs(baseURL, requestedURL);
    }
    return requestedURL;
  }

  // node_modules/axios/lib/helpers/isURLSameOrigin.js
  var isURLSameOrigin_default = browser_default.isStandardBrowserEnv ? (
    // Standard browser envs have full support of the APIs needed to test
    // whether the request URL is of the same origin as current location.
    function standardBrowserEnv2() {
      const msie = /(msie|trident)/i.test(navigator.userAgent);
      const urlParsingNode = document.createElement("a");
      let originURL;
      function resolveURL(url) {
        let href = url;
        if (msie) {
          urlParsingNode.setAttribute("href", href);
          href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        return {
          href: urlParsingNode.href,
          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
          host: urlParsingNode.host,
          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
          hostname: urlParsingNode.hostname,
          port: urlParsingNode.port,
          pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
      }
      originURL = resolveURL(window.location.href);
      return function isURLSameOrigin(requestURL) {
        const parsed = utils_default.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
      };
    }()
  ) : (
    // Non standard browser envs (web workers, react-native) lack needed support.
    function nonStandardBrowserEnv2() {
      return function isURLSameOrigin() {
        return true;
      };
    }()
  );

  // node_modules/axios/lib/helpers/parseProtocol.js
  function parseProtocol(url) {
    const match2 = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
    return match2 && match2[1] || "";
  }

  // node_modules/axios/lib/helpers/speedometer.js
  function speedometer(samplesCount, min3) {
    samplesCount = samplesCount || 10;
    const bytes = new Array(samplesCount);
    const timestamps = new Array(samplesCount);
    let head = 0;
    let tail = 0;
    let firstSampleTS;
    min3 = min3 !== void 0 ? min3 : 1e3;
    return function push(chunkLength) {
      const now2 = Date.now();
      const startedAt = timestamps[tail];
      if (!firstSampleTS) {
        firstSampleTS = now2;
      }
      bytes[head] = chunkLength;
      timestamps[head] = now2;
      let i = tail;
      let bytesCount = 0;
      while (i !== head) {
        bytesCount += bytes[i++];
        i = i % samplesCount;
      }
      head = (head + 1) % samplesCount;
      if (head === tail) {
        tail = (tail + 1) % samplesCount;
      }
      if (now2 - firstSampleTS < min3) {
        return;
      }
      const passed = startedAt && now2 - startedAt;
      return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
    };
  }
  var speedometer_default = speedometer;

  // node_modules/axios/lib/adapters/xhr.js
  function progressEventReducer(listener, isDownloadStream) {
    let bytesNotified = 0;
    const _speedometer = speedometer_default(50, 250);
    return (e) => {
      const loaded = e.loaded;
      const total = e.lengthComputable ? e.total : void 0;
      const progressBytes = loaded - bytesNotified;
      const rate = _speedometer(progressBytes);
      const inRange = loaded <= total;
      bytesNotified = loaded;
      const data = {
        loaded,
        total,
        progress: total ? loaded / total : void 0,
        bytes: progressBytes,
        rate: rate ? rate : void 0,
        estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
        event: e
      };
      data[isDownloadStream ? "download" : "upload"] = true;
      listener(data);
    };
  }
  var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
  var xhr_default = isXHRAdapterSupported && function(config2) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
      let requestData = config2.data;
      const requestHeaders = AxiosHeaders_default.from(config2.headers).normalize();
      const responseType = config2.responseType;
      let onCanceled;
      function done() {
        if (config2.cancelToken) {
          config2.cancelToken.unsubscribe(onCanceled);
        }
        if (config2.signal) {
          config2.signal.removeEventListener("abort", onCanceled);
        }
      }
      let contentType;
      if (utils_default.isFormData(requestData)) {
        if (browser_default.isStandardBrowserEnv || browser_default.isStandardBrowserWebWorkerEnv) {
          requestHeaders.setContentType(false);
        } else if (!requestHeaders.getContentType(/^\s*multipart\/form-data/)) {
          requestHeaders.setContentType("multipart/form-data");
        } else if (utils_default.isString(contentType = requestHeaders.getContentType())) {
          requestHeaders.setContentType(contentType.replace(/^\s*(multipart\/form-data);+/, "$1"));
        }
      }
      let request = new XMLHttpRequest();
      if (config2.auth) {
        const username = config2.auth.username || "";
        const password = config2.auth.password ? unescape(encodeURIComponent(config2.auth.password)) : "";
        requestHeaders.set("Authorization", "Basic " + btoa(username + ":" + password));
      }
      const fullPath = buildFullPath(config2.baseURL, config2.url);
      request.open(config2.method.toUpperCase(), buildURL(fullPath, config2.params, config2.paramsSerializer), true);
      request.timeout = config2.timeout;
      function onloadend() {
        if (!request) {
          return;
        }
        const responseHeaders = AxiosHeaders_default.from(
          "getAllResponseHeaders" in request && request.getAllResponseHeaders()
        );
        const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
        const response = {
          data: responseData,
          status: request.status,
          statusText: request.statusText,
          headers: responseHeaders,
          config: config2,
          request
        };
        settle(function _resolve(value) {
          resolve(value);
          done();
        }, function _reject(err) {
          reject(err);
          done();
        }, response);
        request = null;
      }
      if ("onloadend" in request) {
        request.onloadend = onloadend;
      } else {
        request.onreadystatechange = function handleLoad() {
          if (!request || request.readyState !== 4) {
            return;
          }
          if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
            return;
          }
          setTimeout(onloadend);
        };
      }
      request.onabort = function handleAbort() {
        if (!request) {
          return;
        }
        reject(new AxiosError_default("Request aborted", AxiosError_default.ECONNABORTED, config2, request));
        request = null;
      };
      request.onerror = function handleError() {
        reject(new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config2, request));
        request = null;
      };
      request.ontimeout = function handleTimeout() {
        let timeoutErrorMessage = config2.timeout ? "timeout of " + config2.timeout + "ms exceeded" : "timeout exceeded";
        const transitional2 = config2.transitional || transitional_default;
        if (config2.timeoutErrorMessage) {
          timeoutErrorMessage = config2.timeoutErrorMessage;
        }
        reject(new AxiosError_default(
          timeoutErrorMessage,
          transitional2.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED,
          config2,
          request
        ));
        request = null;
      };
      if (browser_default.isStandardBrowserEnv) {
        const xsrfValue = (config2.withCredentials || isURLSameOrigin_default(fullPath)) && config2.xsrfCookieName && cookies_default.read(config2.xsrfCookieName);
        if (xsrfValue) {
          requestHeaders.set(config2.xsrfHeaderName, xsrfValue);
        }
      }
      requestData === void 0 && requestHeaders.setContentType(null);
      if ("setRequestHeader" in request) {
        utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
          request.setRequestHeader(key, val);
        });
      }
      if (!utils_default.isUndefined(config2.withCredentials)) {
        request.withCredentials = !!config2.withCredentials;
      }
      if (responseType && responseType !== "json") {
        request.responseType = config2.responseType;
      }
      if (typeof config2.onDownloadProgress === "function") {
        request.addEventListener("progress", progressEventReducer(config2.onDownloadProgress, true));
      }
      if (typeof config2.onUploadProgress === "function" && request.upload) {
        request.upload.addEventListener("progress", progressEventReducer(config2.onUploadProgress));
      }
      if (config2.cancelToken || config2.signal) {
        onCanceled = (cancel) => {
          if (!request) {
            return;
          }
          reject(!cancel || cancel.type ? new CanceledError_default(null, config2, request) : cancel);
          request.abort();
          request = null;
        };
        config2.cancelToken && config2.cancelToken.subscribe(onCanceled);
        if (config2.signal) {
          config2.signal.aborted ? onCanceled() : config2.signal.addEventListener("abort", onCanceled);
        }
      }
      const protocol = parseProtocol(fullPath);
      if (protocol && browser_default.protocols.indexOf(protocol) === -1) {
        reject(new AxiosError_default("Unsupported protocol " + protocol + ":", AxiosError_default.ERR_BAD_REQUEST, config2));
        return;
      }
      request.send(requestData || null);
    });
  };

  // node_modules/axios/lib/adapters/adapters.js
  var knownAdapters = {
    http: null_default,
    xhr: xhr_default
  };
  utils_default.forEach(knownAdapters, (fn2, value) => {
    if (fn2) {
      try {
        Object.defineProperty(fn2, "name", { value });
      } catch (e) {
      }
      Object.defineProperty(fn2, "adapterName", { value });
    }
  });
  var renderReason = (reason) => `- ${reason}`;
  var isResolvedHandle = (adapter) => utils_default.isFunction(adapter) || adapter === null || adapter === false;
  var adapters_default = {
    getAdapter: (adapters) => {
      adapters = utils_default.isArray(adapters) ? adapters : [adapters];
      const { length: length2 } = adapters;
      let nameOrAdapter;
      let adapter;
      const rejectedReasons = {};
      for (let i = 0; i < length2; i++) {
        nameOrAdapter = adapters[i];
        let id;
        adapter = nameOrAdapter;
        if (!isResolvedHandle(nameOrAdapter)) {
          adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
          if (adapter === void 0) {
            throw new AxiosError_default(`Unknown adapter '${id}'`);
          }
        }
        if (adapter) {
          break;
        }
        rejectedReasons[id || "#" + i] = adapter;
      }
      if (!adapter) {
        const reasons = Object.entries(rejectedReasons).map(
          ([id, state]) => `adapter ${id} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
        );
        let s = length2 ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
        throw new AxiosError_default(
          `There is no suitable adapter to dispatch the request ` + s,
          "ERR_NOT_SUPPORT"
        );
      }
      return adapter;
    },
    adapters: knownAdapters
  };

  // node_modules/axios/lib/core/dispatchRequest.js
  function throwIfCancellationRequested(config2) {
    if (config2.cancelToken) {
      config2.cancelToken.throwIfRequested();
    }
    if (config2.signal && config2.signal.aborted) {
      throw new CanceledError_default(null, config2);
    }
  }
  function dispatchRequest(config2) {
    throwIfCancellationRequested(config2);
    config2.headers = AxiosHeaders_default.from(config2.headers);
    config2.data = transformData.call(
      config2,
      config2.transformRequest
    );
    if (["post", "put", "patch"].indexOf(config2.method) !== -1) {
      config2.headers.setContentType("application/x-www-form-urlencoded", false);
    }
    const adapter = adapters_default.getAdapter(config2.adapter || defaults_default.adapter);
    return adapter(config2).then(function onAdapterResolution(response) {
      throwIfCancellationRequested(config2);
      response.data = transformData.call(
        config2,
        config2.transformResponse,
        response
      );
      response.headers = AxiosHeaders_default.from(response.headers);
      return response;
    }, function onAdapterRejection(reason) {
      if (!isCancel(reason)) {
        throwIfCancellationRequested(config2);
        if (reason && reason.response) {
          reason.response.data = transformData.call(
            config2,
            config2.transformResponse,
            reason.response
          );
          reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
        }
      }
      return Promise.reject(reason);
    });
  }

  // node_modules/axios/lib/core/mergeConfig.js
  var headersToObject = (thing) => thing instanceof AxiosHeaders_default ? thing.toJSON() : thing;
  function mergeConfig(config1, config2) {
    config2 = config2 || {};
    const config3 = {};
    function getMergedValue(target, source, caseless) {
      if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
        return utils_default.merge.call({ caseless }, target, source);
      } else if (utils_default.isPlainObject(source)) {
        return utils_default.merge({}, source);
      } else if (utils_default.isArray(source)) {
        return source.slice();
      }
      return source;
    }
    function mergeDeepProperties(a, b, caseless) {
      if (!utils_default.isUndefined(b)) {
        return getMergedValue(a, b, caseless);
      } else if (!utils_default.isUndefined(a)) {
        return getMergedValue(void 0, a, caseless);
      }
    }
    function valueFromConfig2(a, b) {
      if (!utils_default.isUndefined(b)) {
        return getMergedValue(void 0, b);
      }
    }
    function defaultToConfig2(a, b) {
      if (!utils_default.isUndefined(b)) {
        return getMergedValue(void 0, b);
      } else if (!utils_default.isUndefined(a)) {
        return getMergedValue(void 0, a);
      }
    }
    function mergeDirectKeys(a, b, prop) {
      if (prop in config2) {
        return getMergedValue(a, b);
      } else if (prop in config1) {
        return getMergedValue(void 0, a);
      }
    }
    const mergeMap = {
      url: valueFromConfig2,
      method: valueFromConfig2,
      data: valueFromConfig2,
      baseURL: defaultToConfig2,
      transformRequest: defaultToConfig2,
      transformResponse: defaultToConfig2,
      paramsSerializer: defaultToConfig2,
      timeout: defaultToConfig2,
      timeoutMessage: defaultToConfig2,
      withCredentials: defaultToConfig2,
      adapter: defaultToConfig2,
      responseType: defaultToConfig2,
      xsrfCookieName: defaultToConfig2,
      xsrfHeaderName: defaultToConfig2,
      onUploadProgress: defaultToConfig2,
      onDownloadProgress: defaultToConfig2,
      decompress: defaultToConfig2,
      maxContentLength: defaultToConfig2,
      maxBodyLength: defaultToConfig2,
      beforeRedirect: defaultToConfig2,
      transport: defaultToConfig2,
      httpAgent: defaultToConfig2,
      httpsAgent: defaultToConfig2,
      cancelToken: defaultToConfig2,
      socketPath: defaultToConfig2,
      responseEncoding: defaultToConfig2,
      validateStatus: mergeDirectKeys,
      headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
    };
    utils_default.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
      const merge3 = mergeMap[prop] || mergeDeepProperties;
      const configValue = merge3(config1[prop], config2[prop], prop);
      utils_default.isUndefined(configValue) && merge3 !== mergeDirectKeys || (config3[prop] = configValue);
    });
    return config3;
  }

  // node_modules/axios/lib/env/data.js
  var VERSION = "1.5.1";

  // node_modules/axios/lib/helpers/validator.js
  var validators = {};
  ["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
    validators[type] = function validator(thing) {
      return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
    };
  });
  var deprecatedWarnings = {};
  validators.transitional = function transitional(validator, version, message) {
    function formatMessage(opt, desc) {
      return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
    }
    return (value, opt, opts) => {
      if (validator === false) {
        throw new AxiosError_default(
          formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
          AxiosError_default.ERR_DEPRECATED
        );
      }
      if (version && !deprecatedWarnings[opt]) {
        deprecatedWarnings[opt] = true;
        console.warn(
          formatMessage(
            opt,
            " has been deprecated since v" + version + " and will be removed in the near future"
          )
        );
      }
      return validator ? validator(value, opt, opts) : true;
    };
  };
  function assertOptions(options, schema, allowUnknown) {
    if (typeof options !== "object") {
      throw new AxiosError_default("options must be an object", AxiosError_default.ERR_BAD_OPTION_VALUE);
    }
    const keys = Object.keys(options);
    let i = keys.length;
    while (i-- > 0) {
      const opt = keys[i];
      const validator = schema[opt];
      if (validator) {
        const value = options[opt];
        const result = value === void 0 || validator(value, opt, options);
        if (result !== true) {
          throw new AxiosError_default("option " + opt + " must be " + result, AxiosError_default.ERR_BAD_OPTION_VALUE);
        }
        continue;
      }
      if (allowUnknown !== true) {
        throw new AxiosError_default("Unknown option " + opt, AxiosError_default.ERR_BAD_OPTION);
      }
    }
  }
  var validator_default = {
    assertOptions,
    validators
  };

  // node_modules/axios/lib/core/Axios.js
  var validators2 = validator_default.validators;
  var Axios = class {
    constructor(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager_default(),
        response: new InterceptorManager_default()
      };
    }
    /**
     * Dispatch a request
     *
     * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
     * @param {?Object} config
     *
     * @returns {Promise} The Promise to be fulfilled
     */
    request(configOrUrl, config2) {
      if (typeof configOrUrl === "string") {
        config2 = config2 || {};
        config2.url = configOrUrl;
      } else {
        config2 = configOrUrl || {};
      }
      config2 = mergeConfig(this.defaults, config2);
      const { transitional: transitional2, paramsSerializer, headers } = config2;
      if (transitional2 !== void 0) {
        validator_default.assertOptions(transitional2, {
          silentJSONParsing: validators2.transitional(validators2.boolean),
          forcedJSONParsing: validators2.transitional(validators2.boolean),
          clarifyTimeoutError: validators2.transitional(validators2.boolean)
        }, false);
      }
      if (paramsSerializer != null) {
        if (utils_default.isFunction(paramsSerializer)) {
          config2.paramsSerializer = {
            serialize: paramsSerializer
          };
        } else {
          validator_default.assertOptions(paramsSerializer, {
            encode: validators2.function,
            serialize: validators2.function
          }, true);
        }
      }
      config2.method = (config2.method || this.defaults.method || "get").toLowerCase();
      let contextHeaders = headers && utils_default.merge(
        headers.common,
        headers[config2.method]
      );
      headers && utils_default.forEach(
        ["delete", "get", "head", "post", "put", "patch", "common"],
        (method) => {
          delete headers[method];
        }
      );
      config2.headers = AxiosHeaders_default.concat(contextHeaders, headers);
      const requestInterceptorChain = [];
      let synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config2) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      const responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      let promise;
      let i = 0;
      let len;
      if (!synchronousRequestInterceptors) {
        const chain = [dispatchRequest.bind(this), void 0];
        chain.unshift.apply(chain, requestInterceptorChain);
        chain.push.apply(chain, responseInterceptorChain);
        len = chain.length;
        promise = Promise.resolve(config2);
        while (i < len) {
          promise = promise.then(chain[i++], chain[i++]);
        }
        return promise;
      }
      len = requestInterceptorChain.length;
      let newConfig = config2;
      i = 0;
      while (i < len) {
        const onFulfilled = requestInterceptorChain[i++];
        const onRejected = requestInterceptorChain[i++];
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected.call(this, error);
          break;
        }
      }
      try {
        promise = dispatchRequest.call(this, newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      i = 0;
      len = responseInterceptorChain.length;
      while (i < len) {
        promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
      }
      return promise;
    }
    getUri(config2) {
      config2 = mergeConfig(this.defaults, config2);
      const fullPath = buildFullPath(config2.baseURL, config2.url);
      return buildURL(fullPath, config2.params, config2.paramsSerializer);
    }
  };
  utils_default.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
    Axios.prototype[method] = function(url, config2) {
      return this.request(mergeConfig(config2 || {}, {
        method,
        url,
        data: (config2 || {}).data
      }));
    };
  });
  utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
    function generateHTTPMethod(isForm) {
      return function httpMethod(url, data, config2) {
        return this.request(mergeConfig(config2 || {}, {
          method,
          headers: isForm ? {
            "Content-Type": "multipart/form-data"
          } : {},
          url,
          data
        }));
      };
    }
    Axios.prototype[method] = generateHTTPMethod();
    Axios.prototype[method + "Form"] = generateHTTPMethod(true);
  });
  var Axios_default = Axios;

  // node_modules/axios/lib/cancel/CancelToken.js
  var CancelToken = class _CancelToken {
    constructor(executor) {
      if (typeof executor !== "function") {
        throw new TypeError("executor must be a function.");
      }
      let resolvePromise;
      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });
      const token2 = this;
      this.promise.then((cancel) => {
        if (!token2._listeners)
          return;
        let i = token2._listeners.length;
        while (i-- > 0) {
          token2._listeners[i](cancel);
        }
        token2._listeners = null;
      });
      this.promise.then = (onfulfilled) => {
        let _resolve;
        const promise = new Promise((resolve) => {
          token2.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);
        promise.cancel = function reject() {
          token2.unsubscribe(_resolve);
        };
        return promise;
      };
      executor(function cancel(message, config2, request) {
        if (token2.reason) {
          return;
        }
        token2.reason = new CanceledError_default(message, config2, request);
        resolvePromise(token2.reason);
      });
    }
    /**
     * Throws a `CanceledError` if cancellation has been requested.
     */
    throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    }
    /**
     * Subscribe to the cancel signal
     */
    subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    }
    /**
     * Unsubscribe from the cancel signal
     */
    unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      const index3 = this._listeners.indexOf(listener);
      if (index3 !== -1) {
        this._listeners.splice(index3, 1);
      }
    }
    /**
     * Returns an object that contains a new `CancelToken` and a function that, when called,
     * cancels the `CancelToken`.
     */
    static source() {
      let cancel;
      const token2 = new _CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token: token2,
        cancel
      };
    }
  };
  var CancelToken_default = CancelToken;

  // node_modules/axios/lib/helpers/spread.js
  function spread(callback) {
    return function wrap(arr) {
      return callback.apply(null, arr);
    };
  }

  // node_modules/axios/lib/helpers/isAxiosError.js
  function isAxiosError(payload) {
    return utils_default.isObject(payload) && payload.isAxiosError === true;
  }

  // node_modules/axios/lib/helpers/HttpStatusCode.js
  var HttpStatusCode = {
    Continue: 100,
    SwitchingProtocols: 101,
    Processing: 102,
    EarlyHints: 103,
    Ok: 200,
    Created: 201,
    Accepted: 202,
    NonAuthoritativeInformation: 203,
    NoContent: 204,
    ResetContent: 205,
    PartialContent: 206,
    MultiStatus: 207,
    AlreadyReported: 208,
    ImUsed: 226,
    MultipleChoices: 300,
    MovedPermanently: 301,
    Found: 302,
    SeeOther: 303,
    NotModified: 304,
    UseProxy: 305,
    Unused: 306,
    TemporaryRedirect: 307,
    PermanentRedirect: 308,
    BadRequest: 400,
    Unauthorized: 401,
    PaymentRequired: 402,
    Forbidden: 403,
    NotFound: 404,
    MethodNotAllowed: 405,
    NotAcceptable: 406,
    ProxyAuthenticationRequired: 407,
    RequestTimeout: 408,
    Conflict: 409,
    Gone: 410,
    LengthRequired: 411,
    PreconditionFailed: 412,
    PayloadTooLarge: 413,
    UriTooLong: 414,
    UnsupportedMediaType: 415,
    RangeNotSatisfiable: 416,
    ExpectationFailed: 417,
    ImATeapot: 418,
    MisdirectedRequest: 421,
    UnprocessableEntity: 422,
    Locked: 423,
    FailedDependency: 424,
    TooEarly: 425,
    UpgradeRequired: 426,
    PreconditionRequired: 428,
    TooManyRequests: 429,
    RequestHeaderFieldsTooLarge: 431,
    UnavailableForLegalReasons: 451,
    InternalServerError: 500,
    NotImplemented: 501,
    BadGateway: 502,
    ServiceUnavailable: 503,
    GatewayTimeout: 504,
    HttpVersionNotSupported: 505,
    VariantAlsoNegotiates: 506,
    InsufficientStorage: 507,
    LoopDetected: 508,
    NotExtended: 510,
    NetworkAuthenticationRequired: 511
  };
  Object.entries(HttpStatusCode).forEach(([key, value]) => {
    HttpStatusCode[value] = key;
  });
  var HttpStatusCode_default = HttpStatusCode;

  // node_modules/axios/lib/axios.js
  function createInstance(defaultConfig) {
    const context = new Axios_default(defaultConfig);
    const instance = bind(Axios_default.prototype.request, context);
    utils_default.extend(instance, Axios_default.prototype, context, { allOwnKeys: true });
    utils_default.extend(instance, context, null, { allOwnKeys: true });
    instance.create = function create(instanceConfig) {
      return createInstance(mergeConfig(defaultConfig, instanceConfig));
    };
    return instance;
  }
  var axios = createInstance(defaults_default);
  axios.Axios = Axios_default;
  axios.CanceledError = CanceledError_default;
  axios.CancelToken = CancelToken_default;
  axios.isCancel = isCancel;
  axios.VERSION = VERSION;
  axios.toFormData = toFormData_default;
  axios.AxiosError = AxiosError_default;
  axios.Cancel = axios.CanceledError;
  axios.all = function all(promises) {
    return Promise.all(promises);
  };
  axios.spread = spread;
  axios.isAxiosError = isAxiosError;
  axios.mergeConfig = mergeConfig;
  axios.AxiosHeaders = AxiosHeaders_default;
  axios.formToJSON = (thing) => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
  axios.getAdapter = adapters_default.getAdapter;
  axios.HttpStatusCode = HttpStatusCode_default;
  axios.default = axios;
  var axios_default = axios;

  // node_modules/axios/index.js
  var {
    Axios: Axios2,
    AxiosError: AxiosError2,
    CanceledError: CanceledError2,
    isCancel: isCancel2,
    CancelToken: CancelToken2,
    VERSION: VERSION2,
    all: all2,
    Cancel,
    isAxiosError: isAxiosError2,
    spread: spread2,
    toFormData: toFormData2,
    AxiosHeaders: AxiosHeaders2,
    HttpStatusCode: HttpStatusCode2,
    formToJSON,
    getAdapter,
    mergeConfig: mergeConfig2
  } = axios_default;

  // src/app/utils/axiosClient.js
  var DEFAULT_ERROR_MESSAGE = "Something went wrong";
  axios_default.interceptors.response.use(null, (error) => {
    if (error && error.response) {
      if (error.response.status === 401) {
        console.log(error.response);
      }
      const { data } = error.response;
      if (typeof data === "object") {
        const errorPayload = data.error || data.errors || data.error_message || data.error_type || data.message || DEFAULT_ERROR_MESSAGE;
        return Promise.reject(errorPayload);
      }
      return Promise.reject(DEFAULT_ERROR_MESSAGE);
    }
    return Promise.reject(error);
  });
  var config = {
    withCredentials: false
  };
  function apiGet(path, params, headers) {
    return axios_default.get(path, { ...config, ...headers }, { ...headers });
  }
  function apiPost(path, data, headers) {
    return axios_default.post(path, data, { ...config, ...headers });
  }

  // src/app/utils/authorization.tsx
  var getToken = async (url, data) => {
    return await apiPost(url, {}, {}).then((response) => {
      return {
        status: response.status,
        data: response.data
      };
    }).catch((error) => {
      console.log(error);
      return {
        status: error.status,
        data: error.response
      };
    });
  };
  var getConfig = async (url, data, headers) => {
    return await apiGet(url, data, headers).then((response) => {
      return {
        status: response.status,
        data: response.data
      };
    }).catch((error) => {
      console.log(error);
      return {
        status: error.status,
        data: error.response
      };
    });
  };

  // src/app/components/header.tsx
  var Header = ({
    setShowChatWidget,
    setShowToolTip,
    iconUrl
  }) => {
    const styles7 = styles_default();
    const handleClick = () => {
      console.log("header clicked");
      setShowChatWidget(false);
      setShowToolTip(true);
    };
    return /* @__PURE__ */ React.createElement(Grid_default, { container: true, direction: "row", className: styles7.header }, /* @__PURE__ */ React.createElement(Grid_default, { item: true, xs: 2 }, /* @__PURE__ */ React.createElement("span", { className: styles7.headerIcon }, /* @__PURE__ */ React.createElement(
      "img",
      {
        src: iconUrl,
        style: { height: "64px", width: "64px", borderRadius: "50%" }
      }
    ))), /* @__PURE__ */ React.createElement(Grid_default, { item: true, xs: 9 }), /* @__PURE__ */ React.createElement(Grid_default, { item: true, xs: 1, className: styles7.buttonGridContainer }, /* @__PURE__ */ React.createElement(
      Button_default,
      {
        sx: {
          backgroundColor: "#F6F7FC !important",
          justifyContent: "center",
          color: "#000000",
          textTransform: "none",
          ":hover": {
            backgroundColor: "#EEF0F8 !important",
            borderColor: "#0062cc",
            boxShadow: "none"
          },
          borderRadius: "8px"
        },
        onClick: () => handleClick()
      },
      "Collapse"
    )));
  };
  var header_default = Header;

  // src/app/components/messageOverview.tsx
  var import_Info = __toESM(require_Info());
  var import_Help = __toESM(require_Help());
  var MessageOverview = ({ messages }) => {
    const styles7 = styles_default();
    const getAnsweredMessageCount = () => {
      return messages.filter((message, _index) => message.role === "bot" && message.completed && !message.customInput).length - 1;
    };
    const getMessagesCount = () => {
      return messages.filter((message, _index) => message.role === "bot" && !message.customInput).length - 1;
    };
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Grid_default, { xs: 4, item: true }, /* @__PURE__ */ React.createElement(List_default, { className: styles7.timeLineSideNav }, messages.map(
      (message, _index) => (() => {
        if (message.default && message.role == "bot") {
          return /* @__PURE__ */ React.createElement(
            ListItem_default,
            {
              sx: {
                width: "100%",
                borderRight: message.completed ? "6px solid #D02DF5" : "unset"
              }
            },
            /* @__PURE__ */ React.createElement(ListItemIcon_default, { className: styles7.listItemIcon }, /* @__PURE__ */ React.createElement(import_Info.default, { fontSize: "small", sx: { color: "#D02DF5" } })),
            /* @__PURE__ */ React.createElement(Typography_default, { className: styles7.timeLineSideNavState }, message.title || message.content)
          );
        } else if (message.role == "bot" && !message.customInput) {
          return /* @__PURE__ */ React.createElement(
            ListItem_default,
            {
              sx: {
                width: "100%",
                borderRight: message.completed ? "6px solid #D02DF5" : "unset"
              }
            },
            /* @__PURE__ */ React.createElement(ListItemIcon_default, { className: styles7.listItemIcon }, /* @__PURE__ */ React.createElement(import_Help.default, { fontSize: "small", sx: { color: "#D02DF5" } })),
            /* @__PURE__ */ React.createElement(Typography_default, { className: styles7.timeLineSideNavState }, message.title || message.content)
          );
        }
        return null;
      })()
    ), /* @__PURE__ */ React.createElement(
      Typography_default,
      {
        className: styles7.timeLineStepText,
        sx: { paddingLeft: "12px" }
      },
      `${getAnsweredMessageCount()} out of ${getMessagesCount()}`
    ))));
  };
  var messageOverview_default = MessageOverview;

  // src/app/components/messageList.tsx
  var import_react12 = __toESM(require_react());
  var import_Info2 = __toESM(require_Info());
  var import_Help2 = __toESM(require_Help());

  // node_modules/@mui/icons-material/esm/utils/createSvgIcon.js
  var import_utils300 = __toESM(require_utils2());

  // node_modules/@mui/icons-material/esm/ThumbDownOffAlt.js
  var import_jsx_runtime257 = __toESM(require_jsx_runtime());
  var ThumbDownOffAlt_default = (0, import_utils300.createSvgIcon)(/* @__PURE__ */ (0, import_jsx_runtime257.jsx)("path", {
    d: "m10.89 18.28.57-2.89c.12-.59-.04-1.2-.42-1.66-.38-.46-.94-.73-1.54-.73H4v-1.08L6.57 6h8.09c.18 0 .34.16.34.34v7.84l-4.11 4.1M10 22l6.41-6.41c.38-.38.59-.89.59-1.42V6.34C17 5.05 15.95 4 14.66 4h-8.1c-.71 0-1.36.37-1.72.97l-2.67 6.15c-.11.25-.17.52-.17.8V13c0 1.1.9 2 2 2h5.5l-.92 4.65c-.05.22-.02.46.08.66.23.45.52.86.88 1.22L10 22zm10-7h2V4h-2c-.55 0-1 .45-1 1v9c0 .55.45 1 1 1z"
  }), "ThumbDownOffAlt");

  // node_modules/@mui/icons-material/esm/ThumbUpOffAlt.js
  var import_jsx_runtime258 = __toESM(require_jsx_runtime());
  var ThumbUpOffAlt_default = (0, import_utils300.createSvgIcon)(/* @__PURE__ */ (0, import_jsx_runtime258.jsx)("path", {
    d: "m13.11 5.72-.57 2.89c-.12.59.04 1.2.42 1.66.38.46.94.73 1.54.73H20v1.08L17.43 18H9.34c-.18 0-.34-.16-.34-.34V9.82l4.11-4.1M14 2 7.59 8.41C7.21 8.79 7 9.3 7 9.83v7.83C7 18.95 8.05 20 9.34 20h8.1c.71 0 1.36-.37 1.72-.97l2.67-6.15c.11-.25.17-.52.17-.8V11c0-1.1-.9-2-2-2h-5.5l.92-4.65c.05-.22.02-.46-.08-.66-.23-.45-.52-.86-.88-1.22L14 2zM4 9H2v11h2c.55 0 1-.45 1-1v-9c0-.55-.45-1-1-1z"
  }), "ThumbUpOffAlt");

  // src/app/components/messageList.tsx
  var import_react13 = __toESM(require_react());

  // src/app/components/feedbackModel.tsx
  var import_Close3 = __toESM(require_Close());
  var import_ThumbDownOffAlt2 = __toESM(require_ThumbDownOffAlt());
  var import_ThumbUpOffAlt2 = __toESM(require_ThumbUpOffAlt());
  var FeedbackModel = ({ message, setOpenModel, openModel, action }) => {
    const styles7 = styles_default();
    const handleClose = () => {
      setOpenModel(false);
    };
    const handleSubmit = () => {
      setOpenModel(false);
    };
    if (!openModel) {
      return null;
    }
    debugger;
    return /* @__PURE__ */ React.createElement("div", null, /* @__PURE__ */ React.createElement(
      Modal_default,
      {
        open: openModel,
        onClose: () => {
          setOpenModel(false);
        },
        "aria-labelledby": "modal-modal-title",
        "aria-describedby": "modal-modal-description"
      },
      /* @__PURE__ */ React.createElement(Box_default, { className: styles7.modelStyle }, action === "down" && /* @__PURE__ */ React.createElement(import_ThumbDownOffAlt2.default, { sx: { color: "#A51818", background: "#F6E6E6", width: "25px", padding: "7px", borderRadius: "50%" } }), action === "up" && /* @__PURE__ */ React.createElement(import_ThumbUpOffAlt2.default, { sx: { color: "#A51818", background: "#F6E6E6", width: "25px", padding: "7px", borderRadius: "50%" } }), /* @__PURE__ */ React.createElement(
        IconButton_default,
        {
          "aria-label": "close",
          sx: {
            position: "absolute",
            right: 8,
            top: 8,
            color: (theme) => theme.palette.grey[500]
          }
        },
        /* @__PURE__ */ React.createElement(import_Close3.default, { onClick: () => {
          handleClose();
        } })
      ), /* @__PURE__ */ React.createElement(Typography_default, { sx: { fontWeight: "bold" }, id: "modal-modal-title", variant: "h6", component: "h2" }, "Provide additional feedback"), /* @__PURE__ */ React.createElement(FormGroup_default, null, /* @__PURE__ */ React.createElement("div", { style: { margin: "1em 0em 2em 0em" } }, /* @__PURE__ */ React.createElement(
        Input_default,
        {
          autoFocus: true,
          margin: "dense",
          id: "reasons",
          type: "reasons",
          fullWidth: true,
          disableUnderline: true,
          multiline: true,
          maxRows: 3,
          placeholder: "What was the issue with response?",
          sx: {
            fontSize: "14px",
            background: "#F6F6FB !important",
            borderColor: "#F2F2F2 !important",
            "&:hover": {
              background: "#EEF0F8 !important"
            },
            "flex-grow": 1,
            padding: "5px",
            border: "solid",
            borderRadius: "12px",
            paddingLeft: "16px !important",
            fontFamily: "poppins !important"
          }
        }
      )), /* @__PURE__ */ React.createElement(FormControlLabel_default, { control: /* @__PURE__ */ React.createElement(Checkbox_default, { sx: {
        color: "#D02DF5",
        "&.Mui-checked": {
          color: "#D02DF5"
        }
      } }), label: "This is harmful / unsafe" }), /* @__PURE__ */ React.createElement(FormControlLabel_default, { control: /* @__PURE__ */ React.createElement(Checkbox_default, { sx: {
        color: "#D02DF5",
        "&.Mui-checked": {
          color: "#D02DF5"
        }
      } }), label: "This isn't true" }), /* @__PURE__ */ React.createElement(FormControlLabel_default, { control: /* @__PURE__ */ React.createElement(Checkbox_default, { sx: {
        color: "#D02DF5",
        "&.Mui-checked": {
          color: "#D02DF5"
        }
      } }), label: "This isn't helpful" })), /* @__PURE__ */ React.createElement(Button_default, { sx: { color: "black" }, onClick: () => {
        handleClose();
      } }, "Cancel"), /* @__PURE__ */ React.createElement(
        Button_default,
        {
          onClick: () => {
            handleSubmit();
          },
          style: { left: "72%" },
          variant: "contained",
          sx: {
            color: "#FFFFFF",
            textTransform: "none",
            backgroundColor: "#D02DF5",
            ":hover": {
              backgroundColor: "#aa32c5",
              borderColor: "#0062cc",
              boxShadow: "none"
            },
            "&.Mui-disabled": {
              background: "#e082f5",
              color: "#FFFFFF"
            },
            boxShadow: "none"
          }
        },
        "Submit"
      ))
    ));
  };
  var feedbackModel_default = FeedbackModel;

  // src/app/components/message.tsx
  var import_react11 = __toESM(require_react());
  var Message = ({
    message,
    handleChange
  }) => {
    if (!message.element)
      return;
    switch (message.element.type) {
      case "radiogroup":
        return /* @__PURE__ */ import_react11.default.createElement(FormControl_default, { sx: { marginLeft: "16px", marginRight: "100px" } }, /* @__PURE__ */ import_react11.default.createElement(
          RadioGroup_default,
          {
            "aria-labelledby": "demo-radio-buttons-group-label",
            defaultValue: "female",
            name: message.name
          },
          message.element.choices.map((choice, _index) => /* @__PURE__ */ import_react11.default.createElement(import_react11.default.Fragment, null, choice != null && choice.constructor.name === "Object" && /* @__PURE__ */ import_react11.default.createElement(
            FormControlLabel_default,
            {
              value: choice.value,
              control: /* @__PURE__ */ import_react11.default.createElement(
                Radio_default,
                {
                  sx: {
                    color: "#D02DF5",
                    "&.Mui-checked": {
                      color: "#D02DF5"
                    }
                  },
                  onChange: () => {
                    handleChange(message, choice.text);
                  }
                }
              ),
              label: /* @__PURE__ */ import_react11.default.createElement(
                Typography_default,
                {
                  sx: {
                    fontSize: "14px !important",
                    fontFamily: "poppins !important"
                  }
                },
                choice.text
              )
            }
          )))
        ));
    }
  };
  var message_default = Message;

  // src/app/components/messageList.tsx
  var MessageList = ({
    messages,
    storeTimeLineMessages
  }) => {
    const styles7 = styles_default();
    const [selectedValue, setSelectedValue] = (0, import_react13.useState)("");
    const [elementDisabled, setElementDisabled] = (0, import_react13.useState)(true);
    const [openModel, setOpenModel] = (0, import_react13.useState)(false);
    const [action, setAction] = (0, import_react13.useState)("");
    const bottomRef = (0, import_react12.useRef)(null);
    (0, import_react12.useEffect)(() => {
      if (bottomRef.current) {
        bottomRef.current.scrollIntoView({ behavior: "smooth" });
      }
    }, [messages]);
    const handleChange = (message, label) => {
      if (!message.completed) {
        setSelectedValue(label);
        setElementDisabled(false);
      }
    };
    const handleClick = (message) => {
      const msg = {
        role: "user",
        content: selectedValue,
        completed: true,
        disabled: true,
        name: message.name,
        customInput: false,
        surveyQuestion: message.surveyQuestion
      };
      storeTimeLineMessages(msg);
      setElementDisabled(true);
    };
    const handleThubUp = (message) => {
      setOpenModel(true);
      setAction("up");
    };
    const handleThubDown = (message) => {
      setOpenModel(false);
      setAction("down");
    };
    return /* @__PURE__ */ import_react12.default.createElement(import_react12.default.Fragment, null, /* @__PURE__ */ import_react12.default.createElement(List_default, { className: styles7.chatWidgetMessageList }, messages.map(
      (message, _index) => (() => {
        if (message.element && message.role === "bot" && message.element.type === "radiogroup") {
          return /* @__PURE__ */ import_react12.default.createElement(
            ListItem_default,
            {
              sx: {
                flexWrap: "wrap",
                flexDirection: "column",
                alignItems: "flex-start"
              }
            },
            /* @__PURE__ */ import_react12.default.createElement(ListItemIcon_default, { className: styles7.listItemHeadIcon }, /* @__PURE__ */ import_react12.default.createElement(import_Help2.default, { fontSize: "medium", sx: { color: "#D02DF5" } }), /* @__PURE__ */ import_react12.default.createElement(Typography_default, { variant: "h6", className: styles7.listItemHead }, message.title || message.content)),
            /* @__PURE__ */ import_react12.default.createElement("div", { className: styles7.listItemContent }, /* @__PURE__ */ import_react12.default.createElement(message_default, { message, handleChange })),
            /* @__PURE__ */ import_react12.default.createElement("div", null, /* @__PURE__ */ import_react12.default.createElement(
              Button_default,
              {
                variant: "contained",
                disabled: message.completed ? true : elementDisabled,
                onClick: () => {
                  handleClick(message);
                },
                sx: {
                  color: "#FFFFFF",
                  textTransform: "none",
                  backgroundColor: "#D02DF5",
                  ":hover": {
                    backgroundColor: "#aa32c5",
                    borderColor: "#0062cc",
                    boxShadow: "none"
                  },
                  "&.Mui-disabled": {
                    background: "#e082f5",
                    color: "#FFFFFF"
                  },
                  boxShadow: "none"
                }
              },
              "Send answer"
            ))
          );
        } else if (message.role === "bot") {
          return /* @__PURE__ */ import_react12.default.createElement(ListItem_default, { sx: { "flex-wrap": "wrap", maxWidth: "40em" } }, /* @__PURE__ */ import_react12.default.createElement(ListItemIcon_default, { className: styles7.listItemHeadIcon }, !message.customInput && /* @__PURE__ */ import_react12.default.createElement(import_Info2.default, { fontSize: "medium", sx: { color: "#D02DF5" } }), /* @__PURE__ */ import_react12.default.createElement(Typography_default, { variant: "h6", className: styles7.listItemHead }, message.content)), !message.default && /* @__PURE__ */ import_react12.default.createElement("div", { className: styles7.feedbackContainer }, /* @__PURE__ */ import_react12.default.createElement("div", { className: styles7.thumbUp }, /* @__PURE__ */ import_react12.default.createElement(ThumbUpOffAlt_default, { onClick: () => handleThubUp(message) })), /* @__PURE__ */ import_react12.default.createElement(
            Divider_default,
            {
              orientation: "vertical",
              variant: "middle",
              flexItem: true
            }
          ), /* @__PURE__ */ import_react12.default.createElement("div", { className: styles7.thumbDown }, /* @__PURE__ */ import_react12.default.createElement(
            ThumbDownOffAlt_default,
            {
              onClick: () => handleThubDown(message)
            }
          ))), /* @__PURE__ */ import_react12.default.createElement(
            feedbackModel_default,
            {
              message,
              setOpenModel,
              openModel,
              action
            }
          ));
        } else if (message.role === "bot" && message.default) {
          return /* @__PURE__ */ import_react12.default.createElement(ListItem_default, { sx: { "flex-wrap": "wrap" } }, /* @__PURE__ */ import_react12.default.createElement(ListItemIcon_default, { className: styles7.listItemHeadIcon }, /* @__PURE__ */ import_react12.default.createElement(import_Info2.default, { fontSize: "medium", sx: { color: "#D02DF5" } }), /* @__PURE__ */ import_react12.default.createElement(Typography_default, { variant: "h6", className: styles7.listItemHead }, message.title ?? message.content)), /* @__PURE__ */ import_react12.default.createElement("div", null, /* @__PURE__ */ import_react12.default.createElement(Typography_default, { className: styles7.listItemText }, message.content)));
        } else if (message.role === "user") {
          return /* @__PURE__ */ import_react12.default.createElement(
            ListItem_default,
            {
              sx: {
                "flex-wrap": "wrap",
                "flex-direction": "row-reverse"
              }
            },
            /* @__PURE__ */ import_react12.default.createElement(
              Grid_default,
              {
                sx: {
                  background: "#F1DEF5",
                  padding: "12px",
                  maxWidth: "20em",
                  borderRadius: "12px 12px 0px"
                }
              },
              /* @__PURE__ */ import_react12.default.createElement(Typography_default, { className: styles7.listItemReplyText }, message.content)
            )
          );
        }
        return null;
      })()
    ), /* @__PURE__ */ import_react12.default.createElement("div", { ref: bottomRef })));
  };
  var messageList_default = MessageList;

  // src/app/components/chatWidgetBody.tsx
  var ChatWidgetBody = ({
    setShowChatWidget,
    chatBox,
    config: config2,
    messages,
    storeTimeLineMessages
  }) => {
    const styles7 = styles_default();
    return /* @__PURE__ */ React.createElement(Grid_default, { container: true, spacing: 2, columns: 16, className: styles7.ChatWidgetBody }, /* @__PURE__ */ React.createElement(messageOverview_default, { messages }), /* @__PURE__ */ React.createElement(Grid_default, { item: true, className: styles7.chatContent, xs: 10 }, /* @__PURE__ */ React.createElement(messageList_default, { messages, storeTimeLineMessages }), /* @__PURE__ */ React.createElement(Grid_default, null, chatBox)));
  };
  var chatWidgetBody_default = ChatWidgetBody;

  // src/app/components/chatWidget.tsx
  var import_react15 = __toESM(require_react());

  // src/app/components/footer.tsx
  var import_react14 = __toESM(require_react());
  var import_lodash = __toESM(require_lodash());
  var import_Send = __toESM(require_Send());
  var Footer = ({ setMessage, storeTimeLineMessages }) => {
    const styles7 = styles_default();
    const [inputMessage, setInputMessage] = (0, import_react14.useState)("");
    const handleSubmit = () => {
      if (!inputMessage)
        return;
      const msg = { role: "user", content: inputMessage, customInput: true };
      storeTimeLineMessages(msg);
      setInputMessage("");
    };
    const handleInputChange = (e) => {
      setInputMessage(e.target.value);
    };
    const handleKeyPress = (e) => {
      if (e.key === "Enter" && !e.shiftKey) {
        e.preventDefault();
        if (!(0, import_lodash.isEmpty)(inputMessage))
          handleSubmit();
      }
    };
    return /* @__PURE__ */ import_react14.default.createElement(import_react14.default.Fragment, null, /* @__PURE__ */ import_react14.default.createElement("div", { className: styles7.footer }, /* @__PURE__ */ import_react14.default.createElement(
      Input_default,
      {
        type: "text",
        value: inputMessage,
        onChange: handleInputChange,
        className: styles7.footerTextBox,
        multiline: true,
        maxRows: 3,
        onKeyPress: handleKeyPress,
        disableUnderline: true,
        sx: {
          fontSize: "14px",
          background: "#F6F6FB !important",
          borderColor: "#F2F2F2 !important",
          "&:hover": {
            background: "#EEF0F8 !important"
          }
        },
        endAdornment: /* @__PURE__ */ import_react14.default.createElement(
          Button_default,
          {
            className: styles7.submitButton,
            onClick: handleSubmit,
            disabled: (0, import_lodash.isEmpty)(inputMessage),
            sx: {
              ":hover": {
                background: "none !important"
              }
            }
          },
          /* @__PURE__ */ import_react14.default.createElement(import_Send.default, { style: { color: (0, import_lodash.isEmpty)(inputMessage) ? "#b6b6ba" : "#000000" } })
        )
      }
    )));
  };
  var footer_default = Footer;

  // src/app/utils/mocks.tsx
  var mockMessagesList = [
    {
      key: "someRandomUniqString1",
      title: "Introduction",
      content: "Hey there, I'm Mavens Chatbot, I'm here to answer your questions and find the best suitable CRM for you! I prepared 4 questions for you to answer after which I can suggest you the best CRM.",
      role: "bot",
      element: null,
      completed: true,
      default: true
    },
    {
      key: "someRandomUniqString2",
      title: "Question",
      content: "test123",
      role: "user",
      element: null,
      completed: true,
      default: true
    }
  ];

  // src/app/components/chatWidget.tsx
  var ChatWidget = ({
    setShowChatWidget,
    setShowToolTip,
    config: config2
  }) => {
    const styles7 = styles_default();
    const [messages, setMessages] = (0, import_react15.useState)(mockMessagesList);
    const storeTimeLineMessages = (message2) => {
      setMessages((messages2) => [...messages2, message2]);
    };
    const [message, setMessage] = (0, import_react15.useState)({ role: "user", content: "", customInput: true });
    return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(Grid_default, { container: true }, /* @__PURE__ */ React.createElement(
      header_default,
      {
        setShowChatWidget,
        setShowToolTip,
        iconUrl: config2.icon_url
      }
    ), /* @__PURE__ */ React.createElement(
      chatWidgetBody_default,
      {
        messages,
        storeTimeLineMessages,
        config: config2,
        setShowChatWidget,
        chatBox: /* @__PURE__ */ React.createElement(
          footer_default,
          {
            storeTimeLineMessages,
            setMessage
          }
        )
      }
    )));
  };
  var chatWidget_default = ChatWidget;

  // src/app/page.tsx
  function App() {
    const [showChatWidget, setShowChatWidget] = (0, import_react16.useState)(false);
    const [showToolTip, setShowToolTip] = (0, import_react16.useState)(true);
    const styles7 = styles_default();
    const config2 = {
      logo_url: ""
    };
    const [hasConfig, setHasConfig] = (0, import_react16.useState)(false);
    const [fetchedConfig, setFetchedConfig] = (0, import_react16.useState)(config2);
    (0, import_react17.useEffect)(() => {
      const fetchConfig = async () => {
        const authResponse = await getToken("https://llm-storage.brandslisten.com/api/v1/auth/", {});
        if (authResponse.status === 200) {
          const headers = {
            headers: {
              Authorization: authResponse.data.auth_token
            }
          };
          const configResponse = await getConfig("https://llm-storage.brandslisten.com/config", {}, headers);
          if (configResponse.status === 200) {
            setFetchedConfig(configResponse.data);
            setHasConfig(true);
          } else {
            console.error("Failed to fetch config:", configResponse.data);
          }
        } else {
          console.error("Failed to authenticate:", authResponse.data);
        }
      };
      fetchConfig();
    }, []);
    if (!hasConfig) {
      return /* @__PURE__ */ React.createElement(React.Fragment, null);
    }
    return /* @__PURE__ */ React.createElement(
      "div",
      { className: styles7.chatWidget },
      showToolTip ? /* @__PURE__ */ React.createElement(toolTip_default, { setShowChatWidget, setShowToolTip, config: fetchedConfig }) : /* @__PURE__ */ React.createElement(React.Fragment, null),
      //chat widget
      showChatWidget ? /* @__PURE__ */ React.createElement(chatWidget_default, { setShowChatWidget, setShowToolTip, config: fetchedConfig }) : /* @__PURE__ */ React.createElement(React.Fragment, null)
    );
  }
})();
/*! Bundled license information:

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

react-is/cjs/react-is.development.js:
  (**
   * @license React
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/utils/index.js:
  (**
   * @mui/utils v5.14.11
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react-jsx-runtime.development.js:
  (**
   * @license React
   * react-jsx-runtime.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/styled-engine/node/index.js:
  (**
   * @mui/styled-engine v5.14.11
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/private-theming/node/index.js:
  (**
   * @mui/private-theming v5.14.11
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/system/index.js:
  (**
   * @mui/system v5.14.11
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (**
   * @license React
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)

lodash/lodash.js:
  (**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   *)

jss/dist/jss.esm.js:
  (**
   * A better abstraction over CSS.
   *
   * @copyright Oleg Isonen (Slobodskoi) / Isonen 2014-present
   * @website https://github.com/cssinjs/jss
   * @license MIT
   *)

@mui/styles/index.js:
  (**
   * @mui/styles v5.14.11
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/base/index.js:
  (**
   * @mui/base v5.0.0-beta.17
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@mui/material/index.js:
  (**
   * @mui/material v5.14.11
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
